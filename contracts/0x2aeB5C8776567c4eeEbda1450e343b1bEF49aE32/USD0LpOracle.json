{
  "TxHash": "0xb3e92c16573531df3e99d289af0d17ad7e409677b285f7aaccfc1767a42070da",
  "ContractAddress": "0x2aeB5C8776567c4eeEbda1450e343b1bEF49aE32",
  "Name": "USD0LpOracle",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title USD0LpOracle\r\n@notice Price oracle for pools USD0/USD0+ LP token. It uses USD0/crvUSD price oracle and aggregator price\r\n@author Curve.Fi\r\n@license MIT\r\n\"\"\"\r\ninterface Pool:\r\n    def price_oracle(i: uint256 = 0) -\u003e uint256: view  # Universal method!\r\n    def get_virtual_price() -\u003e uint256: view\r\n    def coins(i: uint256) -\u003e address: view\r\n\r\ninterface StableAggregator:\r\n    def price() -\u003e uint256: view\r\n    def price_w() -\u003e uint256: nonpayable\r\n    def stablecoin() -\u003e address: view\r\n\r\n\r\nLP_POOL: public(immutable(Pool))\r\nPOOL: public(immutable(Pool))\r\nBORROWED_IX: public(immutable(uint256))\r\nCOLLATERAL_IX: public(immutable(uint256))\r\nCOLLATERAL_IX_IN_LP: public(immutable(uint256))\r\nN_COINS: public(immutable(uint256))\r\nNO_ARGUMENT: public(immutable(bool))\r\nAGG: public(immutable(StableAggregator))\r\n\r\nPPS_MAX_SPEED: constant(uint256) = 10**16 / 60  # Max speed of pricePerShare change\r\n\r\ncached_price_per_share: public(uint256)\r\ncached_timestamp: public(uint256)\r\n\r\n\r\n@external\r\ndef __init__(\r\n        lp_pool: Pool,\r\n        pool: Pool,\r\n        N: uint256,\r\n        borrowed_ix: uint256,\r\n        collateral_ix: uint256,\r\n        agg: StableAggregator\r\n    ):\r\n    assert borrowed_ix != collateral_ix\r\n    assert borrowed_ix \u003c N\r\n    assert collateral_ix \u003c N\r\n\r\n    LP_POOL = lp_pool\r\n    POOL = pool\r\n    N_COINS = N\r\n    BORROWED_IX = borrowed_ix\r\n    COLLATERAL_IX = collateral_ix\r\n    AGG = agg\r\n\r\n    no_argument: bool = False\r\n    if N == 2:\r\n        success: bool = False\r\n        res: Bytes[32] = empty(Bytes[32])\r\n        success, res = raw_call(\r\n            pool.address,\r\n            _abi_encode(empty(uint256), method_id=method_id(\"price_oracle(uint256)\")),\r\n            max_outsize=32, is_static_call=True, revert_on_failure=False)\r\n        if not success:\r\n            no_argument = True\r\n    NO_ARGUMENT = no_argument\r\n\r\n    collateral_ix_in_lp: uint256 = 1000\r\n    collateral_coin: address = pool.coins(collateral_ix)\r\n    for i in range(2):\r\n        if lp_pool.coins(i) == collateral_coin:\r\n            collateral_ix_in_lp = i\r\n    assert collateral_ix_in_lp != 1000\r\n    COLLATERAL_IX_IN_LP = collateral_ix_in_lp\r\n\r\n    self.cached_price_per_share = lp_pool.get_virtual_price()\r\n    self.cached_timestamp = block.timestamp\r\n\r\n\r\n@internal\r\n@view\r\ndef _pps() -\u003e uint256:\r\n    return min(LP_POOL.get_virtual_price(), self.cached_price_per_share * (10**18 + PPS_MAX_SPEED * (block.timestamp - self.cached_timestamp)) / 10**18)\r\n\r\n\r\n@internal\r\ndef _pps_w() -\u003e uint256:\r\n    pps: uint256 = min(LP_POOL.get_virtual_price(), self.cached_price_per_share * (10**18 + PPS_MAX_SPEED * (block.timestamp - self.cached_timestamp)) / 10**18)\r\n    self.cached_price_per_share = pps\r\n    self.cached_timestamp = block.timestamp\r\n    return pps\r\n\r\n\r\n@internal\r\n@view\r\ndef _raw_price(pps: uint256) -\u003e uint256:\r\n    p_borrowed: uint256 = 10**18\r\n    p_collateral: uint256 = 10**18\r\n\r\n    if NO_ARGUMENT:\r\n        p: uint256 = POOL.price_oracle()\r\n        if COLLATERAL_IX \u003e 0:\r\n            p_collateral = p\r\n        else:\r\n            p_borrowed = p\r\n\r\n    else:\r\n        if BORROWED_IX \u003e 0:\r\n            p_borrowed = POOL.price_oracle(BORROWED_IX - 1)\r\n        if COLLATERAL_IX \u003e 0:\r\n            p_collateral = POOL.price_oracle(COLLATERAL_IX - 1)\r\n\r\n    lp_coin_oracle: uint256 = LP_POOL.price_oracle(0)  # For 2 coins\r\n    if COLLATERAL_IX_IN_LP \u003e 0:\r\n        lp_coin_oracle = 10**36 / lp_coin_oracle\r\n    p_lp: uint256 = pps * min(10**18, lp_coin_oracle)\r\n\r\n    return p_collateral * p_lp / p_borrowed\r\n\r\n\r\n@external\r\n@view\r\ndef price() -\u003e uint256:\r\n    return self._raw_price(self._pps()) * AGG.price() / 10**18\r\n\r\n\r\n@external\r\ndef price_w() -\u003e uint256:\r\n    return self._raw_price(self._pps_w()) * AGG.price_w() / 10**18",
      "ABI": "[{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"lp_pool\",\"type\":\"address\"},{\"name\":\"pool\",\"type\":\"address\"},{\"name\":\"N\",\"type\":\"uint256\"},{\"name\":\"borrowed_ix\",\"type\":\"uint256\"},{\"name\":\"collateral_ix\",\"type\":\"uint256\"},{\"name\":\"agg\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"price\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"price_w\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"LP_POOL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"POOL\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"BORROWED_IX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"COLLATERAL_IX\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"COLLATERAL_IX_IN_LP\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"N_COINS\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"NO_ARGUMENT\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"AGG\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cached_price_per_share\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"cached_timestamp\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}]}]",
      "ContractName": "USD0LpOracle",
      "CompilerVersion": "vyper:0.3.10",
      "OptimizationUsed": "0",
      "Runs": "0",
      "ConstructorArguments": "0000000000000000000000001d08e7adc263cfc70b1babe6dc5bb339c16eec52000000000000000000000000e1c7e7732ace7aa9d10a5a71eb3cccdb70535f1400000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000018672b1b0c623a30089a280ed9256379fb0e4e62",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
