{
  "TxHash": "0x4a9fec18a8ec9d02b16985cc8c7e8108eeb8c1db36daf92cc4cbe331bbc3d58e",
  "ContractAddress": "0x6De818A6484bFa837e75E9Ba63d9fdd3DE817559",
  "Name": "BridgeContract",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev The ETH balance of the account is not enough to perform the operation.\r\n     */\r\n    error AddressInsufficientBalance(address account);\r\n\r\n    /**\r\n     * @dev There's no code at `target` (it is not a contract).\r\n     */\r\n    error AddressEmptyCode(address target);\r\n\r\n    /**\r\n     * @dev A call to an address target failed. The target may have reverted.\r\n     */\r\n    error FailedInnerCall();\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        if (address(this).balance \u003c amount) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason or custom error, it is bubbled\r\n     * up by this function (like regular Solidity function calls). However, if\r\n     * the call reverted with no returned reason, this function reverts with a\r\n     * {FailedInnerCall} error.\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        if (address(this).balance \u003c value) {\r\n            revert AddressInsufficientBalance(address(this));\r\n        }\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\r\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\r\n     * unsuccessful call.\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata\r\n    ) internal view returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            // only check if target is a contract if the call was successful and the return data is empty\r\n            // otherwise we already know that it was a contract\r\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\r\n                revert AddressEmptyCode(target);\r\n            }\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\r\n     * revert reason or with a default {FailedInnerCall} error.\r\n     */\r\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\r\n        if (!success) {\r\n            _revert(returndata);\r\n        } else {\r\n            return returndata;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\r\n     */\r\n    function _revert(bytes memory returndata) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert FailedInnerCall();\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev An operation with an ERC20 token failed.\r\n     */\r\n    error SafeERC20FailedOperation(address token);\r\n\r\n    /**\r\n     * @dev Indicates a failed `decreaseAllowance` request.\r\n     */\r\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        forceApprove(token, spender, oldAllowance + value);\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\r\n     * value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\r\n        unchecked {\r\n            uint256 currentAllowance = token.allowance(address(this), spender);\r\n            if (currentAllowance \u003c requestedDecrease) {\r\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\r\n            }\r\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data);\r\n        if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\r\n            revert SafeERC20FailedOperation(address(token));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return success \u0026\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026 address(token).code.length \u003e 0;\r\n    }\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.8.0;\r\n\r\nstruct SetConfigParam {\r\n    uint32 eid;\r\n    uint32 configType;\r\n    bytes config;\r\n}\r\n\r\ninterface IMessageLibManager {\r\n    struct Timeout {\r\n        address lib;\r\n        uint256 expiry;\r\n    }\r\n\r\n    event LibraryRegistered(address newLib);\r\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\r\n    event DefaultReceiveLibrarySet(uint32 eid, address newLib);\r\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\r\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\r\n    event ReceiveLibrarySet(address receiver, uint32 eid, address newLib);\r\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\r\n\r\n    function registerLibrary(address _lib) external;\r\n\r\n    function isRegisteredLibrary(address _lib) external view returns (bool);\r\n\r\n    function getRegisteredLibraries() external view returns (address[] memory);\r\n\r\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\r\n\r\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\r\n\r\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _gracePeriod) external;\r\n\r\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\r\n\r\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\r\n\r\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\r\n\r\n    function isSupportedEid(uint32 _eid) external view returns (bool);\r\n\r\n    function isValidReceiveLibrary(address _receiver, uint32 _eid, address _lib) external view returns (bool);\r\n\r\n    /// ------------------- OApp interfaces -------------------\r\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\r\n\r\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\r\n\r\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\r\n\r\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\r\n\r\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\r\n\r\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _expiry) external;\r\n\r\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\r\n\r\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\r\n\r\n    function getConfig(\r\n        address _oapp,\r\n        address _lib,\r\n        uint32 _eid,\r\n        uint32 _configType\r\n    ) external view returns (bytes memory config);\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.8.0;\r\n\r\ninterface IMessagingComposer {\r\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\r\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\r\n    event LzComposeAlert(\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed executor,\r\n        bytes32 guid,\r\n        uint16 index,\r\n        uint256 gas,\r\n        uint256 value,\r\n        bytes message,\r\n        bytes extraData,\r\n        bytes reason\r\n    );\r\n\r\n    function composeQueue(\r\n        address _from,\r\n        address _to,\r\n        bytes32 _guid,\r\n        uint16 _index\r\n    ) external view returns (bytes32 messageHash);\r\n\r\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\r\n\r\n    function lzCompose(\r\n        address _from,\r\n        address _to,\r\n        bytes32 _guid,\r\n        uint16 _index,\r\n        bytes calldata _message,\r\n        bytes calldata _extraData\r\n    ) external payable;\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.8.0;\r\n\r\ninterface IMessagingChannel {\r\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\r\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\r\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\r\n\r\n    function eid() external view returns (uint32);\r\n\r\n    // this is an emergency function if a message cannot be verified for some reasons\r\n    // required to provide _nextNonce to avoid race condition\r\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\r\n\r\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\r\n\r\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\r\n\r\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\r\n\r\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\r\n\r\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\r\n\r\n    function inboundPayloadHash(\r\n        address _receiver,\r\n        uint32 _srcEid,\r\n        bytes32 _sender,\r\n        uint64 _nonce\r\n    ) external view returns (bytes32);\r\n\r\n    function lazyInboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.8.0;\r\n\r\ninterface IMessagingContext {\r\n    function isSendingMessage() external view returns (bool);\r\n\r\n    function getSendContext() external view returns (uint32 dstEid, address sender);\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.8.0;\r\n\r\n\r\n\r\n\r\n\r\nstruct MessagingParams {\r\n    uint32 dstEid;\r\n    bytes32 receiver;\r\n    bytes message;\r\n    bytes options;\r\n    bool payInLzToken;\r\n}\r\n\r\nstruct MessagingReceipt {\r\n    bytes32 guid;\r\n    uint64 nonce;\r\n    MessagingFee fee;\r\n}\r\n\r\nstruct MessagingFee {\r\n    uint256 nativeFee;\r\n    uint256 lzTokenFee;\r\n}\r\n\r\nstruct Origin {\r\n    uint32 srcEid;\r\n    bytes32 sender;\r\n    uint64 nonce;\r\n}\r\n\r\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\r\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\r\n\r\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\r\n\r\n    event PacketDelivered(Origin origin, address receiver);\r\n\r\n    event LzReceiveAlert(\r\n        address indexed receiver,\r\n        address indexed executor,\r\n        Origin origin,\r\n        bytes32 guid,\r\n        uint256 gas,\r\n        uint256 value,\r\n        bytes message,\r\n        bytes extraData,\r\n        bytes reason\r\n    );\r\n\r\n    event LzTokenSet(address token);\r\n\r\n    event DelegateSet(address sender, address delegate);\r\n\r\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\r\n\r\n    function send(\r\n        MessagingParams calldata _params,\r\n        address _refundAddress\r\n    ) external payable returns (MessagingReceipt memory);\r\n\r\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\r\n\r\n    function verifiable(Origin calldata _origin, address _receiver) external view returns (bool);\r\n\r\n    function initializable(Origin calldata _origin, address _receiver) external view returns (bool);\r\n\r\n    function lzReceive(\r\n        Origin calldata _origin,\r\n        address _receiver,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        bytes calldata _extraData\r\n    ) external payable;\r\n\r\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\r\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\r\n\r\n    function setLzToken(address _lzToken) external;\r\n\r\n    function lzToken() external view returns (address);\r\n\r\n    function nativeToken() external view returns (address);\r\n\r\n    function setDelegate(address _delegate) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @title IOAppCore\r\n */\r\ninterface IOAppCore {\r\n    // Custom error messages\r\n    error OnlyPeer(uint32 eid, bytes32 sender);\r\n    error NoPeer(uint32 eid);\r\n    error InvalidEndpointCall();\r\n    error InvalidDelegate();\r\n\r\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\r\n    event PeerSet(uint32 eid, bytes32 peer);\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol contract.\r\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\r\n     */\r\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\r\n\r\n    /**\r\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\r\n     * @return iEndpoint The LayerZero endpoint as an interface.\r\n     */\r\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\r\n\r\n    /**\r\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\r\n     */\r\n    function peers(uint32 _eid) external view returns (bytes32 peer);\r\n\r\n    /**\r\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\r\n     */\r\n    function setPeer(uint32 _eid, bytes32 _peer) external;\r\n\r\n    /**\r\n     * @notice Sets the delegate address for the OApp Core.\r\n     * @param _delegate The address of the delegate to be set.\r\n     */\r\n    function setDelegate(address _delegate) external;\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n/**\r\n * @title OAppCore\r\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\r\n */\r\nabstract contract OAppCore is IOAppCore, Ownable {\r\n    // The LayerZero endpoint associated with the given OApp\r\n    ILayerZeroEndpointV2 public immutable endpoint;\r\n\r\n    // Mapping to store peers associated with corresponding endpoints\r\n    mapping(uint32 eid =\u003e bytes32 peer) public peers;\r\n\r\n    /**\r\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\r\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\r\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\r\n     *\r\n     * @dev The delegate typically should be set as the owner of the contract.\r\n     */\r\n    constructor(address _endpoint, address _delegate) {\r\n        endpoint = ILayerZeroEndpointV2(_endpoint);\r\n\r\n        if (_delegate == address(0)) revert InvalidDelegate();\r\n        endpoint.setDelegate(_delegate);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\r\n     *\r\n     * @dev Only the owner/admin of the OApp can call this function.\r\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\r\n     * @dev Set this to bytes32(0) to remove the peer address.\r\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\r\n     */\r\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\r\n        _setPeer(_eid, _peer);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\r\n     *\r\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\r\n     * @dev Set this to bytes32(0) to remove the peer address.\r\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\r\n     */\r\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\r\n        peers[_eid] = _peer;\r\n        emit PeerSet(_eid, _peer);\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\r\n     * ie. the peer is set to bytes32(0).\r\n     * @param _eid The endpoint ID.\r\n     * @return peer The address of the peer associated with the specified endpoint.\r\n     */\r\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\r\n        bytes32 peer = peers[_eid];\r\n        if (peer == bytes32(0)) revert NoPeer(_eid);\r\n        return peer;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the delegate address for the OApp.\r\n     * @param _delegate The address of the delegate to be set.\r\n     *\r\n     * @dev Only the owner/admin of the OApp can call this function.\r\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\r\n     */\r\n    function setDelegate(address _delegate) public onlyOwner {\r\n        endpoint.setDelegate(_delegate);\r\n    }\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n/**\r\n * @title OAppSender\r\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\r\n */\r\nabstract contract OAppSender is OAppCore {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // Custom error messages\r\n    error NotEnoughNative(uint256 msgValue);\r\n    error LzTokenUnavailable();\r\n\r\n    // @dev The version of the OAppSender implementation.\r\n    // @dev Version is bumped when changes are made to this contract.\r\n    uint64 internal constant SENDER_VERSION = 1;\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol contract.\r\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\r\n     *\r\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\r\n     * ie. this is a SEND only OApp.\r\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\r\n     */\r\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\r\n        return (SENDER_VERSION, 0);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\r\n     * @param _dstEid The destination endpoint ID.\r\n     * @param _message The message payload.\r\n     * @param _options Additional options for the message.\r\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\r\n     * @return fee The calculated MessagingFee for the message.\r\n     *      - nativeFee: The native fee for the message.\r\n     *      - lzTokenFee: The LZ token fee for the message.\r\n     */\r\n    function _quote(\r\n        uint32 _dstEid,\r\n        bytes memory _message,\r\n        bytes memory _options,\r\n        bool _payInLzToken\r\n    ) internal view virtual returns (MessagingFee memory fee) {\r\n        return\r\n            endpoint.quote(\r\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\r\n                address(this)\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\r\n     * @param _dstEid The destination endpoint ID.\r\n     * @param _message The message payload.\r\n     * @param _options Additional options for the message.\r\n     * @param _fee The calculated LayerZero fee for the message.\r\n     *      - nativeFee: The native fee.\r\n     *      - lzTokenFee: The lzToken fee.\r\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\r\n     * @return receipt The receipt for the sent message.\r\n     *      - guid: The unique identifier for the sent message.\r\n     *      - nonce: The nonce of the sent message.\r\n     *      - fee: The LayerZero fee incurred for the message.\r\n     */\r\n    function _lzSend(\r\n        uint32 _dstEid,\r\n        bytes memory _message,\r\n        bytes memory _options,\r\n        MessagingFee memory _fee,\r\n        address _refundAddress\r\n    ) internal virtual returns (MessagingReceipt memory receipt) {\r\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\r\n        uint256 messageValue = _payNative(_fee.nativeFee);\r\n        if (_fee.lzTokenFee \u003e 0) _payLzToken(_fee.lzTokenFee);\r\n\r\n        return\r\n            // solhint-disable-next-line check-send-result\r\n            endpoint.send{ value: messageValue }(\r\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee \u003e 0),\r\n                _refundAddress\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to pay the native fee associated with the message.\r\n     * @param _nativeFee The native fee to be paid.\r\n     * @return nativeFee The amount of native currency paid.\r\n     *\r\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\r\n     * this will need to be overridden because msg.value would contain multiple lzFees.\r\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\r\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\r\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\r\n     */\r\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\r\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\r\n        return _nativeFee;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to pay the LZ token fee associated with the message.\r\n     * @param _lzTokenFee The LZ token fee to be paid.\r\n     *\r\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\r\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\r\n     */\r\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\r\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\r\n        address lzToken = endpoint.lzToken();\r\n        if (lzToken == address(0)) revert LzTokenUnavailable();\r\n\r\n        // Pay LZ token fee by sending tokens to the endpoint.\r\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\r\n    }\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.8.0;\r\n\r\n\r\ninterface ILayerZeroReceiver {\r\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\r\n\r\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\r\n\r\n    function lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) external payable;\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppReceiver.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\ninterface IOAppReceiver is ILayerZeroReceiver {\r\n    /**\r\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\r\n     * @param _origin The origin information containing the source endpoint and sender address.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address on the src chain.\r\n     *  - nonce: The nonce of the message.\r\n     * @param _message The lzReceive payload.\r\n     * @param _sender The sender address.\r\n     * @return isSender Is a valid sender.\r\n     *\r\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\r\n     * @dev The default sender IS the OAppReceiver implementer.\r\n     */\r\n    function isComposeMsgSender(\r\n        Origin calldata _origin,\r\n        bytes calldata _message,\r\n        address _sender\r\n    ) external view returns (bool isSender);\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppReceiver.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n/**\r\n * @title OAppReceiver\r\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\r\n */\r\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\r\n    // Custom error message for when the caller is not the registered endpoint/\r\n    error OnlyEndpoint(address addr);\r\n\r\n    // @dev The version of the OAppReceiver implementation.\r\n    // @dev Version is bumped when changes are made to this contract.\r\n    uint64 internal constant RECEIVER_VERSION = 2;\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol contract.\r\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\r\n     *\r\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\r\n     * ie. this is a RECEIVE only OApp.\r\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\r\n     */\r\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\r\n        return (0, RECEIVER_VERSION);\r\n    }\r\n\r\n    /**\r\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\r\n     * @dev _origin The origin information containing the source endpoint and sender address.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address on the src chain.\r\n     *  - nonce: The nonce of the message.\r\n     * @dev _message The lzReceive payload.\r\n     * @param _sender The sender address.\r\n     * @return isSender Is a valid sender.\r\n     *\r\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\r\n     * @dev The default sender IS the OAppReceiver implementer.\r\n     */\r\n    function isComposeMsgSender(\r\n        Origin calldata /*_origin*/,\r\n        bytes calldata /*_message*/,\r\n        address _sender\r\n    ) public view virtual returns (bool) {\r\n        return _sender == address(this);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks if the path initialization is allowed based on the provided origin.\r\n     * @param origin The origin information containing the source endpoint and sender address.\r\n     * @return Whether the path has been initialized.\r\n     *\r\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\r\n     * @dev This defaults to assuming if a peer has been set, its initialized.\r\n     * Can be overridden by the OApp if there is other logic to determine this.\r\n     */\r\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\r\n        return peers[origin.srcEid] == origin.sender;\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\r\n     * @dev _srcEid The source endpoint ID.\r\n     * @dev _sender The sender address.\r\n     * @return nonce The next nonce.\r\n     *\r\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\r\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\r\n     * @dev This is also enforced by the OApp.\r\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\r\n     */\r\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Entry point for receiving messages or packets from the endpoint.\r\n     * @param _origin The origin information containing the source endpoint and sender address.\r\n     *  - srcEid: The source chain endpoint ID.\r\n     *  - sender: The sender address on the src chain.\r\n     *  - nonce: The nonce of the message.\r\n     * @param _guid The unique identifier for the received LayerZero message.\r\n     * @param _message The payload of the received message.\r\n     * @param _executor The address of the executor for the received message.\r\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\r\n     *\r\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\r\n     */\r\n    function lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) public payable virtual {\r\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\r\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\r\n\r\n        // Ensure that the sender matches the expected peer for the source endpoint.\r\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\r\n\r\n        // Call the internal OApp implementation of lzReceive.\r\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\r\n     */\r\n    function _lzReceive(\r\n        Origin calldata _origin,\r\n        bytes32 _guid,\r\n        bytes calldata _message,\r\n        address _executor,\r\n        bytes calldata _extraData\r\n    ) internal virtual;\r\n}\r\n\r\n// File: @layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\r\n// solhint-disable-next-line no-unused-import\r\n\r\n// @dev Import the 'Origin' so it's exposed to OApp implementers\r\n// solhint-disable-next-line no-unused-import\r\n\r\n\r\n\r\n/**\r\n * @title OApp\r\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\r\n */\r\nabstract contract OApp is OAppSender, OAppReceiver {\r\n    /**\r\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\r\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\r\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\r\n     */\r\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\r\n\r\n    /**\r\n     * @notice Retrieves the OApp version information.\r\n     * @return senderVersion The version of the OAppSender.sol implementation.\r\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\r\n     */\r\n    function oAppVersion()\r\n        public\r\n        pure\r\n        virtual\r\n        override(OAppSender, OAppReceiver)\r\n        returns (uint64 senderVersion, uint64 receiverVersion)\r\n    {\r\n        return (SENDER_VERSION, RECEIVER_VERSION);\r\n    }\r\n}\r\n\r\n\r\n// File: @layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(\r\n        uint16 _version,\r\n        uint16 _chainId,\r\n        uint _configType,\r\n        bytes calldata _config\r\n    ) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}\r\n\r\n// File: @layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol\r\n\r\n\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(\r\n        uint16 _dstChainId,\r\n        bytes calldata _destination,\r\n        bytes calldata _payload,\r\n        address payable _refundAddress,\r\n        address _zroPaymentAddress,\r\n        bytes calldata _adapterParams\r\n    ) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        address _dstAddress,\r\n        uint64 _nonce,\r\n        uint _gasLimit,\r\n        bytes calldata _payload\r\n    ) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(\r\n        uint16 _dstChainId,\r\n        address _userApplication,\r\n        bytes calldata _payload,\r\n        bool _payInZRO,\r\n        bytes calldata _adapterParam\r\n    ) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        bytes calldata _payload\r\n    ) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(\r\n        uint16 _version,\r\n        uint16 _chainId,\r\n        address _userApplication,\r\n        uint _configType\r\n    ) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n\r\n// File: @layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol\r\n\r\n\r\n/*\r\n * @title Solidity Bytes Arrays Utils\r\n * @author Gonçalo Sá \u003cgoncalo.sa@consensys.net\u003e\r\n *\r\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\r\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\r\n */\r\npragma solidity \u003e=0.8.0 \u003c0.9.0;\r\n\r\nlibrary BytesLib {\r\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            // Get a location of some free memory and store it in tempBytes as\r\n            // Solidity does for memory variables.\r\n            tempBytes := mload(0x40)\r\n\r\n            // Store the length of the first bytes array at the beginning of\r\n            // the memory for tempBytes.\r\n            let length := mload(_preBytes)\r\n            mstore(tempBytes, length)\r\n\r\n            // Maintain a memory counter for the current write location in the\r\n            // temp bytes array by adding the 32 bytes for the array length to\r\n            // the starting location.\r\n            let mc := add(tempBytes, 0x20)\r\n            // Stop copying when the memory counter reaches the length of the\r\n            // first bytes array.\r\n            let end := add(mc, length)\r\n\r\n            for {\r\n                // Initialize a copy counter to the start of the _preBytes data,\r\n                // 32 bytes into its memory.\r\n                let cc := add(_preBytes, 0x20)\r\n            } lt(mc, end) {\r\n                // Increase both counters by 32 bytes each iteration.\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                // Write the _preBytes data into the tempBytes memory 32 bytes\r\n                // at a time.\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            // Add the length of _postBytes to the current length of tempBytes\r\n            // and store it as the new length in the first 32 bytes of the\r\n            // tempBytes memory.\r\n            length := mload(_postBytes)\r\n            mstore(tempBytes, add(length, mload(tempBytes)))\r\n\r\n            // Move the memory counter back from a multiple of 0x20 to the\r\n            // actual end of the _preBytes data.\r\n            mc := end\r\n            // Stop copying when the memory counter reaches the new combined\r\n            // length of the arrays.\r\n            end := add(mc, length)\r\n\r\n            for {\r\n                let cc := add(_postBytes, 0x20)\r\n            } lt(mc, end) {\r\n                mc := add(mc, 0x20)\r\n                cc := add(cc, 0x20)\r\n            } {\r\n                mstore(mc, mload(cc))\r\n            }\r\n\r\n            // Update the free-memory pointer by padding our last write location\r\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\r\n            // next 32 byte block, then round down to the nearest multiple of\r\n            // 32. If the sum of the length of the two arrays is zero then add\r\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\r\n            mstore(\r\n                0x40,\r\n                and(\r\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\r\n                    not(31) // Round down to the nearest 32 bytes.\r\n                )\r\n            )\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\r\n        assembly {\r\n            // Read the first 32 bytes of _preBytes storage, which is the length\r\n            // of the array. (We don't need to use the offset into the slot\r\n            // because arrays use the entire slot.)\r\n            let fslot := sload(_preBytes.slot)\r\n            // Arrays of 31 bytes or less have an even value in their slot,\r\n            // while longer arrays have an odd value. The actual length is\r\n            // the slot divided by two for odd values, and the lowest order\r\n            // byte divided by two for even values.\r\n            // If the slot is even, bitwise and the slot with 255 and divide by\r\n            // two to get the length. If the slot is odd, bitwise and the slot\r\n            // with -1 and divide by two.\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n            let newlength := add(slength, mlength)\r\n            // slength can contain both the length and contents of the array\r\n            // if length \u003c 32 bytes so let's prepare for that\r\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n            switch add(lt(slength, 32), lt(newlength, 32))\r\n            case 2 {\r\n                // Since the new array still fits in the slot, we just need to\r\n                // update the contents of the slot.\r\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\r\n                sstore(\r\n                    _preBytes.slot,\r\n                    // all the modifications to the slot are inside this\r\n                    // next block\r\n                    add(\r\n                        // we can just add to the slot contents because the\r\n                        // bytes we want to change are the LSBs\r\n                        fslot,\r\n                        add(\r\n                            mul(\r\n                                div(\r\n                                    // load the bytes from memory\r\n                                    mload(add(_postBytes, 0x20)),\r\n                                    // zero all bytes to the right\r\n                                    exp(0x100, sub(32, mlength))\r\n                                ),\r\n                                // and now shift left the number of bytes to\r\n                                // leave space for the length in the slot\r\n                                exp(0x100, sub(32, newlength))\r\n                            ),\r\n                            // increase length by the double of the memory\r\n                            // bytes length\r\n                            mul(mlength, 2)\r\n                        )\r\n                    )\r\n                )\r\n            }\r\n            case 1 {\r\n                // The stored value fits in the slot, but the combined value\r\n                // will exceed it.\r\n                // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n                // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n                // The contents of the _postBytes array start 32 bytes into\r\n                // the structure. Our first read should obtain the `submod`\r\n                // bytes that can fit into the unused space in the last word\r\n                // of the stored array. To get this, we read 32 bytes starting\r\n                // from `submod`, so the data we read overlaps with the array\r\n                // contents by `submod` bytes. Masking the lowest-order\r\n                // `submod` bytes allows us to add that value directly to the\r\n                // stored value.\r\n\r\n                let submod := sub(32, slength)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\r\n\r\n                for {\r\n                    mc := add(mc, 0x20)\r\n                    sc := add(sc, 1)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n            default {\r\n                // get the keccak hash to get the contents of the array\r\n                mstore(0x0, _preBytes.slot)\r\n                // Start copying to the last used word of the stored array.\r\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\r\n\r\n                // save new length\r\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\r\n\r\n                // Copy over the first `submod` bytes of the new data as in\r\n                // case 1 above.\r\n                let slengthmod := mod(slength, 32)\r\n                let mlengthmod := mod(mlength, 32)\r\n                let submod := sub(32, slengthmod)\r\n                let mc := add(_postBytes, submod)\r\n                let end := add(_postBytes, mlength)\r\n                let mask := sub(exp(0x100, submod), 1)\r\n\r\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\r\n\r\n                for {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } lt(mc, end) {\r\n                    sc := add(sc, 1)\r\n                    mc := add(mc, 0x20)\r\n                } {\r\n                    sstore(sc, mload(mc))\r\n                }\r\n\r\n                mask := exp(0x100, sub(mc, end))\r\n\r\n                sstore(sc, mul(div(mload(mc), mask), mask))\r\n            }\r\n        }\r\n    }\r\n\r\n    function slice(\r\n        bytes memory _bytes,\r\n        uint _start,\r\n        uint _length\r\n    ) internal pure returns (bytes memory) {\r\n        require(_length + 31 \u003e= _length, \"slice_overflow\");\r\n        require(_bytes.length \u003e= _start + _length, \"slice_outOfBounds\");\r\n\r\n        bytes memory tempBytes;\r\n\r\n        assembly {\r\n            switch iszero(_length)\r\n            case 0 {\r\n                // Get a location of some free memory and store it in tempBytes as\r\n                // Solidity does for memory variables.\r\n                tempBytes := mload(0x40)\r\n\r\n                // The first word of the slice result is potentially a partial\r\n                // word read from the original array. To read it, we calculate\r\n                // the length of that partial word and start copying that many\r\n                // bytes into the array. The first word we copy will start with\r\n                // data we don't care about, but the last `lengthmod` bytes will\r\n                // land at the beginning of the contents of the new array. When\r\n                // we're done copying, we overwrite the full first word with\r\n                // the actual length of the slice.\r\n                let lengthmod := and(_length, 31)\r\n\r\n                // The multiplication in the next line is necessary\r\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\r\n                // the following copy loop was copying the origin's length\r\n                // and then ending prematurely not copying everything it should.\r\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\r\n                let end := add(mc, _length)\r\n\r\n                for {\r\n                    // The multiplication in the next line has the same exact purpose\r\n                    // as the one above.\r\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\r\n                } lt(mc, end) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    mstore(mc, mload(cc))\r\n                }\r\n\r\n                mstore(tempBytes, _length)\r\n\r\n                //update free-memory pointer\r\n                //allocating the array padded to 32 bytes like the compiler does now\r\n                mstore(0x40, and(add(mc, 31), not(31)))\r\n            }\r\n            //if we want a zero-length slice let's just return a zero-length array\r\n            default {\r\n                tempBytes := mload(0x40)\r\n                //zero out the 32 bytes slice we are about to return\r\n                //we need to do it because Solidity does not garbage collect\r\n                mstore(tempBytes, 0)\r\n\r\n                mstore(0x40, add(tempBytes, 0x20))\r\n            }\r\n        }\r\n\r\n        return tempBytes;\r\n    }\r\n\r\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\r\n        require(_bytes.length \u003e= _start + 20, \"toAddress_outOfBounds\");\r\n        address tempAddress;\r\n\r\n        assembly {\r\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\r\n        }\r\n\r\n        return tempAddress;\r\n    }\r\n\r\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\r\n        require(_bytes.length \u003e= _start + 1, \"toUint8_outOfBounds\");\r\n        uint8 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x1), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\r\n        require(_bytes.length \u003e= _start + 2, \"toUint16_outOfBounds\");\r\n        uint16 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x2), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\r\n        require(_bytes.length \u003e= _start + 4, \"toUint32_outOfBounds\");\r\n        uint32 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x4), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\r\n        require(_bytes.length \u003e= _start + 8, \"toUint64_outOfBounds\");\r\n        uint64 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x8), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\r\n        require(_bytes.length \u003e= _start + 12, \"toUint96_outOfBounds\");\r\n        uint96 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0xc), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\r\n        require(_bytes.length \u003e= _start + 16, \"toUint128_outOfBounds\");\r\n        uint128 tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x10), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\r\n        require(_bytes.length \u003e= _start + 32, \"toUint256_outOfBounds\");\r\n        uint tempUint;\r\n\r\n        assembly {\r\n            tempUint := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempUint;\r\n    }\r\n\r\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\r\n        require(_bytes.length \u003e= _start + 32, \"toBytes32_outOfBounds\");\r\n        bytes32 tempBytes32;\r\n\r\n        assembly {\r\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\r\n        }\r\n\r\n        return tempBytes32;\r\n    }\r\n\r\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            let length := mload(_preBytes)\r\n\r\n            // if lengths don't match the arrays are not equal\r\n            switch eq(length, mload(_postBytes))\r\n            case 1 {\r\n                // cb is a circuit breaker in the for loop since there's\r\n                //  no said feature for inline assembly loops\r\n                // cb = 1 - don't breaker\r\n                // cb = 0 - break\r\n                let cb := 1\r\n\r\n                let mc := add(_preBytes, 0x20)\r\n                let end := add(mc, length)\r\n\r\n                for {\r\n                    let cc := add(_postBytes, 0x20)\r\n                    // the next line is the loop condition:\r\n                    // while(uint256(mc \u003c end) + cb == 2)\r\n                } eq(add(lt(mc, end), cb), 2) {\r\n                    mc := add(mc, 0x20)\r\n                    cc := add(cc, 0x20)\r\n                } {\r\n                    // if any of these checks fails then arrays are not equal\r\n                    if iszero(eq(mload(mc), mload(cc))) {\r\n                        // unsuccess:\r\n                        success := 0\r\n                        cb := 0\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n                // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n\r\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\r\n        bool success = true;\r\n\r\n        assembly {\r\n            // we know _preBytes_offset is 0\r\n            let fslot := sload(_preBytes.slot)\r\n            // Decode the length of the stored array like in concatStorage().\r\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\r\n            let mlength := mload(_postBytes)\r\n\r\n            // if lengths don't match the arrays are not equal\r\n            switch eq(slength, mlength)\r\n            case 1 {\r\n                // slength can contain both the length and contents of the array\r\n                // if length \u003c 32 bytes so let's prepare for that\r\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\r\n                if iszero(iszero(slength)) {\r\n                    switch lt(slength, 32)\r\n                    case 1 {\r\n                        // blank the last byte which is the length\r\n                        fslot := mul(div(fslot, 0x100), 0x100)\r\n\r\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\r\n                            // unsuccess:\r\n                            success := 0\r\n                        }\r\n                    }\r\n                    default {\r\n                        // cb is a circuit breaker in the for loop since there's\r\n                        //  no said feature for inline assembly loops\r\n                        // cb = 1 - don't breaker\r\n                        // cb = 0 - break\r\n                        let cb := 1\r\n\r\n                        // get the keccak hash to get the contents of the array\r\n                        mstore(0x0, _preBytes.slot)\r\n                        let sc := keccak256(0x0, 0x20)\r\n\r\n                        let mc := add(_postBytes, 0x20)\r\n                        let end := add(mc, mlength)\r\n\r\n                        // the next line is the loop condition:\r\n                        // while(uint256(mc \u003c end) + cb == 2)\r\n                        for {\r\n\r\n                        } eq(add(lt(mc, end), cb), 2) {\r\n                            sc := add(sc, 1)\r\n                            mc := add(mc, 0x20)\r\n                        } {\r\n                            if iszero(eq(sload(sc), mload(mc))) {\r\n                                // unsuccess:\r\n                                success := 0\r\n                                cb := 0\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            default {\r\n                // unsuccess:\r\n                success := 0\r\n            }\r\n        }\r\n\r\n        return success;\r\n    }\r\n}\r\n\r\n// File: @layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    using BytesLib for bytes;\r\n\r\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\r\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\r\n\r\n    ILayerZeroEndpoint public immutable lzEndpoint;\r\n    mapping(uint16 =\u003e bytes) public trustedRemoteLookup;\r\n    mapping(uint16 =\u003e mapping(uint16 =\u003e uint)) public minDstGasLookup;\r\n    mapping(uint16 =\u003e uint) public payloadSizeLimitLookup;\r\n    address public precrime;\r\n\r\n    event SetPrecrime(address precrime);\r\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\r\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\r\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\r\n\r\n    constructor(address _endpoint) {\r\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function lzReceive(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint64 _nonce,\r\n        bytes calldata _payload\r\n    ) public virtual {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\r\n\r\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(\r\n            _srcAddress.length == trustedRemote.length \u0026\u0026 trustedRemote.length \u003e 0 \u0026\u0026 keccak256(_srcAddress) == keccak256(trustedRemote),\r\n            \"LzApp: invalid source sending contract\"\r\n        );\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64 _nonce,\r\n        bytes memory _payload\r\n    ) internal virtual;\r\n\r\n    function _lzSend(\r\n        uint16 _dstChainId,\r\n        bytes memory _payload,\r\n        address payable _refundAddress,\r\n        address _zroPaymentAddress,\r\n        bytes memory _adapterParams,\r\n        uint _nativeFee\r\n    ) internal virtual {\r\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\r\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\r\n        _checkPayloadSize(_dstChainId, _payload.length);\r\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _checkGasLimit(\r\n        uint16 _dstChainId,\r\n        uint16 _type,\r\n        bytes memory _adapterParams,\r\n        uint _extraGas\r\n    ) internal view virtual {\r\n        uint providedGasLimit = _getGasLimit(_adapterParams);\r\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\r\n        require(minGasLimit \u003e 0, \"LzApp: minGasLimit not set\");\r\n        require(providedGasLimit \u003e= minGasLimit + _extraGas, \"LzApp: gas limit is too low\");\r\n    }\r\n\r\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\r\n        require(_adapterParams.length \u003e= 34, \"LzApp: invalid adapterParams\");\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\r\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\r\n        if (payloadSizeLimit == 0) {\r\n            // use default if not set\r\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\r\n        }\r\n        require(_payloadSize \u003c= payloadSizeLimit, \"LzApp: payload size is too large\");\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(\r\n        uint16 _version,\r\n        uint16 _chainId,\r\n        address,\r\n        uint _configType\r\n    ) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(\r\n        uint16 _version,\r\n        uint16 _chainId,\r\n        uint _configType,\r\n        bytes calldata _config\r\n    ) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // _path = abi.encodePacked(remoteAddress, localAddress)\r\n    // this function set the trusted path for the cross-chain communication\r\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\r\n        trustedRemoteLookup[_remoteChainId] = _path;\r\n        emit SetTrustedRemote(_remoteChainId, _path);\r\n    }\r\n\r\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\r\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\r\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\r\n    }\r\n\r\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\r\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\r\n        require(path.length != 0, \"LzApp: no trusted path record\");\r\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\r\n    }\r\n\r\n    function setPrecrime(address _precrime) external onlyOwner {\r\n        precrime = _precrime;\r\n        emit SetPrecrime(_precrime);\r\n    }\r\n\r\n    function setMinDstGas(\r\n        uint16 _dstChainId,\r\n        uint16 _packetType,\r\n        uint _minGas\r\n    ) external onlyOwner {\r\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\r\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\r\n    }\r\n\r\n    // if the size is 0, it means default size limit\r\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\r\n        payloadSizeLimitLookup[_dstChainId] = _size;\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n}\r\n\r\n// File: @layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol\r\n\r\n\r\npragma solidity \u003e=0.7.6;\r\n\r\nlibrary ExcessivelySafeCall {\r\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\r\n\r\n    /// @notice Use when you _really_ really _really_ don't trust the called\r\n    /// contract. This prevents the called contract from causing reversion of\r\n    /// the caller in as many ways as we can.\r\n    /// @dev The main difference between this and a solidity low-level call is\r\n    /// that we limit the number of bytes that the callee can cause to be\r\n    /// copied to caller memory. This prevents stupid things like malicious\r\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\r\n    /// to memory.\r\n    /// @param _target The address to call\r\n    /// @param _gas The amount of gas to forward to the remote contract\r\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\r\n    /// to memory.\r\n    /// @param _calldata The data to send to the remote contract\r\n    /// @return success and returndata, as `.call()`. Returndata is capped to\r\n    /// `_maxCopy` bytes.\r\n    function excessivelySafeCall(\r\n        address _target,\r\n        uint _gas,\r\n        uint16 _maxCopy,\r\n        bytes memory _calldata\r\n    ) internal returns (bool, bytes memory) {\r\n        // set up for assembly call\r\n        uint _toCopy;\r\n        bool _success;\r\n        bytes memory _returnData = new bytes(_maxCopy);\r\n        // dispatch message to recipient\r\n        // by assembly calling \"handle\" function\r\n        // we call via assembly to avoid memcopying a very large returndata\r\n        // returned by a malicious contract\r\n        assembly {\r\n            _success := call(\r\n                _gas, // gas\r\n                _target, // recipient\r\n                0, // ether value\r\n                add(_calldata, 0x20), // inloc\r\n                mload(_calldata), // inlen\r\n                0, // outloc\r\n                0 // outlen\r\n            )\r\n            // limit our copy to 256 bytes\r\n            _toCopy := returndatasize()\r\n            if gt(_toCopy, _maxCopy) {\r\n                _toCopy := _maxCopy\r\n            }\r\n            // Store the length of the copied bytes\r\n            mstore(_returnData, _toCopy)\r\n            // copy the bytes from returndata[0:_toCopy]\r\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\r\n        }\r\n        return (_success, _returnData);\r\n    }\r\n\r\n    /// @notice Use when you _really_ really _really_ don't trust the called\r\n    /// contract. This prevents the called contract from causing reversion of\r\n    /// the caller in as many ways as we can.\r\n    /// @dev The main difference between this and a solidity low-level call is\r\n    /// that we limit the number of bytes that the callee can cause to be\r\n    /// copied to caller memory. This prevents stupid things like malicious\r\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\r\n    /// to memory.\r\n    /// @param _target The address to call\r\n    /// @param _gas The amount of gas to forward to the remote contract\r\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\r\n    /// to memory.\r\n    /// @param _calldata The data to send to the remote contract\r\n    /// @return success and returndata, as `.call()`. Returndata is capped to\r\n    /// `_maxCopy` bytes.\r\n    function excessivelySafeStaticCall(\r\n        address _target,\r\n        uint _gas,\r\n        uint16 _maxCopy,\r\n        bytes memory _calldata\r\n    ) internal view returns (bool, bytes memory) {\r\n        // set up for assembly call\r\n        uint _toCopy;\r\n        bool _success;\r\n        bytes memory _returnData = new bytes(_maxCopy);\r\n        // dispatch message to recipient\r\n        // by assembly calling \"handle\" function\r\n        // we call via assembly to avoid memcopying a very large returndata\r\n        // returned by a malicious contract\r\n        assembly {\r\n            _success := staticcall(\r\n                _gas, // gas\r\n                _target, // recipient\r\n                add(_calldata, 0x20), // inloc\r\n                mload(_calldata), // inlen\r\n                0, // outloc\r\n                0 // outlen\r\n            )\r\n            // limit our copy to 256 bytes\r\n            _toCopy := returndatasize()\r\n            if gt(_toCopy, _maxCopy) {\r\n                _toCopy := _maxCopy\r\n            }\r\n            // Store the length of the copied bytes\r\n            mstore(_returnData, _toCopy)\r\n            // copy the bytes from returndata[0:_toCopy]\r\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\r\n        }\r\n        return (_success, _returnData);\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps function selectors in encoded contract calls\r\n     * @dev Allows reuse of encoded calldata for functions with identical\r\n     * argument types but different names. It simply swaps out the first 4 bytes\r\n     * for the new selector. This function modifies memory in place, and should\r\n     * only be used with caution.\r\n     * @param _newSelector The new 4-byte selector\r\n     * @param _buf The encoded contract args\r\n     */\r\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\r\n        require(_buf.length \u003e= 4);\r\n        uint _mask = LOW_28_MASK;\r\n        assembly {\r\n            // load the first word of\r\n            let _word := mload(add(_buf, 0x20))\r\n            // mask out the top 4 bytes\r\n            // /x\r\n            _word := and(_word, _mask)\r\n            _word := or(_newSelector, _word)\r\n            mstore(add(_buf, 0x20), _word)\r\n        }\r\n    }\r\n}\r\n\r\n// File: @layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzApp is LzApp {\r\n    using ExcessivelySafeCall for address;\r\n\r\n    constructor(address _endpoint) LzApp(_endpoint) {}\r\n\r\n    mapping(uint16 =\u003e mapping(bytes =\u003e mapping(uint64 =\u003e bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\r\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64 _nonce,\r\n        bytes memory _payload\r\n    ) internal virtual override {\r\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\r\n            gasleft(),\r\n            150,\r\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\r\n        );\r\n        if (!success) {\r\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\r\n        }\r\n    }\r\n\r\n    function _storeFailedMessage(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64 _nonce,\r\n        bytes memory _payload,\r\n        bytes memory _reason\r\n    ) internal virtual {\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\r\n    }\r\n\r\n    function nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint64 _nonce,\r\n        bytes calldata _payload\r\n    ) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory _srcAddress,\r\n        uint64 _nonce,\r\n        bytes memory _payload\r\n    ) internal virtual;\r\n\r\n    function retryMessage(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint64 _nonce,\r\n        bytes calldata _payload\r\n    ) public payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\r\n    }\r\n}\r\n\r\n// File: contracts/BridgeV3.sol\r\n\r\n\r\npragma solidity ^0.8.22;\r\n\r\n\r\n\r\n\r\n\r\ninterface IBridgeableToken is IERC20 {\r\n    function mintBridge(address account, uint256 amount) external;\r\n\r\n    function burnBridge(address account, uint256 amount) external;\r\n}\r\n\r\n/**\r\n * @title BridgeContract\r\n * @notice This contract is similar to BridgeContract.sol but has introduced a change to require users to pay a one-time activation fee to be able to use the bridge functionality.\r\n */\r\ncontract BridgeContract is OApp {\r\n    IBridgeableToken public token;\r\n    address payable private feeReceiver;\r\n\r\n    struct ActivationInfo {\r\n        bool isActivated;\r\n        uint256 activationTime;\r\n    }\r\n\r\n    uint256 public activationFee;\r\n    bool public requiresActivation = true;\r\n    uint256 public activationDuration = 24 hours;\r\n\r\n    mapping(address =\u003e ActivationInfo) public activatedAddresses;\r\n\r\n    constructor(\r\n        address _token,\r\n        address _endpoint,\r\n        address _owner,\r\n        address payable _feeReceiver,\r\n        uint256 _initialActivationFee\r\n    ) OApp(_endpoint, _owner) Ownable(_owner) {\r\n        token = IBridgeableToken(_token);\r\n        feeReceiver = _feeReceiver;\r\n        activationFee = _initialActivationFee;\r\n    }\r\n\r\n    event TokenSent(address indexed sender, uint32 dstEid, uint256 amount);\r\n    event TokenReceived(address indexed receiver, uint256 amount);\r\n\r\n    modifier checkActivation() {\r\n        if (requiresActivation) {\r\n            require(\r\n                isActivated(msg.sender),\r\n                \"Address not activated or activation expired\"\r\n            );\r\n        }\r\n        _;\r\n    }\r\n\r\n    function estimateFees(\r\n        uint32 _dstEid,\r\n        string memory _message,\r\n        uint256 _amount,\r\n        bytes calldata _options\r\n    ) public view returns (uint256 totalFee) {\r\n        bytes memory payload = abi.encode(msg.sender, _amount, _message);\r\n        MessagingFee memory messagingFee = _quote(\r\n            _dstEid,\r\n            payload,\r\n            _options,\r\n            false\r\n        );\r\n        totalFee = uint256(messagingFee.nativeFee);\r\n\r\n        return (totalFee);\r\n    }\r\n\r\n    function sendMessage(\r\n        uint32 _dstEid,\r\n        string memory _message,\r\n        uint256 _amount,\r\n        bytes calldata _options\r\n    ) public payable checkActivation {\r\n        require(\r\n            token.balanceOf(msg.sender) \u003e= _amount,\r\n            \"Insufficient token balance\"\r\n        );\r\n        // Burn tokens on the source chain\r\n        token.burnBridge(msg.sender, _amount);\r\n\r\n        bytes memory payload = abi.encode(msg.sender, _amount, _message);\r\n        _lzSend(\r\n            _dstEid,\r\n            payload,\r\n            _options,\r\n            MessagingFee(msg.value, 0),\r\n            payable(msg.sender)\r\n        );\r\n\r\n        emit TokenSent(msg.sender, _dstEid, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Called when data is received from the protocol. It overrides the equivalent function in the parent contract.\r\n     * Protocol messages are defined as packets, comprised of the following parameters.\r\n     * @param payload Encoded message.\r\n     */\r\n    function _lzReceive(\r\n        Origin calldata, // A struct containing information about where the packet came from.\r\n        bytes32, // A global unique identifier for tracking the packet\r\n        bytes calldata payload,\r\n        address, // Executor address as specified by the OApp.\r\n        bytes calldata // Any extra data or options to trigger on receipt.\r\n    ) internal override {\r\n        // Decode the payload to get the message\r\n        // In this case, type is string, but depends on your encoding!\r\n\r\n        // Decode the payload to get the sender address and amount\r\n        (address receiver, uint256 amount) = abi.decode(\r\n            payload,\r\n            (address, uint256)\r\n        );\r\n        activatedAddresses[msg.sender] = ActivationInfo(true, block.timestamp);\r\n        emit TokenReceived(receiver, amount);\r\n\r\n        // Mint tokens on the destination chain\r\n        token.mintBridge(receiver, amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\r\n     * @param _eid The endpoint ID.\r\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\r\n     *\r\n     * @dev Only the owner/admin of the OApp can call this function.\r\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\r\n     * @dev This is a modified version taken from OAppCore to take _peer as type address and then convert it to bytes32 for easier use.\r\n     * @dev Set this to bytes32(0) to remove the peer address.\r\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\r\n     */\r\n    function setPeerAddress(uint32 _eid, address _peer) public onlyOwner {\r\n        bytes32 peer = bytes32(uint256(uint160(_peer)));\r\n        _setPeer(_eid, peer);\r\n    }\r\n\r\n    function activateBridge() public payable {\r\n        require(requiresActivation, \"Activation is currently disabled\");\r\n        require(!isActivated(msg.sender), \"Address already activated\");\r\n        require(msg.value == activationFee, \"Incorrect activation fee\");\r\n\r\n        activatedAddresses[msg.sender] = ActivationInfo(true, block.timestamp);\r\n\r\n        // Transfer the fee to the fee receiver\r\n        (bool sent, ) = feeReceiver.call{value: msg.value}(\"\");\r\n        require(sent, \"Failed to send activation fee\");\r\n    }\r\n\r\n    function isActivated(address _address) public view returns (bool) {\r\n        ActivationInfo memory info = activatedAddresses[_address];\r\n        return\r\n            info.isActivated \u0026\u0026\r\n            (block.timestamp - info.activationTime) \u003c= activationDuration;\r\n    }\r\n\r\n    function setRequiresActivation(bool _requiresActivation) public onlyOwner {\r\n        requiresActivation = _requiresActivation;\r\n    }\r\n\r\n    function setActivationFee(uint256 _newFee) public onlyOwner {\r\n        activationFee = _newFee;\r\n    }\r\n\r\n    function getActivationFee() public view returns (uint256) {\r\n        return activationFee;\r\n    }\r\n\r\n    function setActivationDuration(uint256 _newDuration) public onlyOwner {\r\n        activationDuration = _newDuration;\r\n    }\r\n\r\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\r\n        require(\r\n            _feeReceiver != address(this),\r\n            \"Invalid Fee Receiver, cannot be contract\"\r\n        );\r\n        require(\r\n            _feeReceiver != address(0),\r\n            \"Invalid Fee Receiver, cannot be address 0\"\r\n        );\r\n        feeReceiver = payable(_feeReceiver);\r\n    }\r\n\r\n    function setTokenAddress(address _token) public onlyOwner {\r\n        token = IBridgeableToken(_token);\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_feeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initialActivationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDelegate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpointCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"NoPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"NotEnoughNative\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"OnlyEndpoint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"}],\"name\":\"OnlyPeer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"name\":\"PeerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activateBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activatedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isActivated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"activationTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"origin\",\"type\":\"tuple\"}],\"name\":\"allowInitializePath\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"estimateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isComposeMsgSender\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oAppVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"senderVersion\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"receiverVersion\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"peers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"peer\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiresActivation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_options\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"}],\"name\":\"setActivationDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"setActivationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_peer\",\"type\":\"bytes32\"}],\"name\":\"setPeer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_eid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_peer\",\"type\":\"address\"}],\"name\":\"setPeerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_requiresActivation\",\"type\":\"bool\"}],\"name\":\"setRequiresActivation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IBridgeableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "BridgeContract",
      "CompilerVersion": "v0.8.22+commit.4fc1097e",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000002466858ab5edad0bb597fe9f008f568b00d25fe30000000000000000000000001a44076050125825900e736c501f859c50fe728c0000000000000000000000009a356bae779be57b3b88f9e722df6a7a813f807f00000000000000000000000027b883c541553bd6a3388dcf4ccdc4ec07347acf0000000000000000000000000000000000000000000000000001c6bf52634000",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://957a8f04798234ec3c7151c4803a973a2e79a9d8b21a2d034fb9c42c2384e484"
    }
  ]
}
