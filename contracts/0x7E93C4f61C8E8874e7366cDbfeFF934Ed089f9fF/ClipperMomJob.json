{
  "TxHash": "0xfa49089d89a4e4f2f237f158b12a2844f8f3b110af1c98244afc53b5cc200822",
  "ContractAddress": "0x7E93C4f61C8E8874e7366cDbfeFF934Ed089f9fF",
  "Name": "ClipperMomJob",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity =0.8.13 \u003e=0.8.0;\r\n\r\n// src/interfaces/IJob.sol\r\n\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\n/// @title Maker Keeper Network Job\r\n/// @notice A job represents an independant unit of work that can be done by a keeper\r\ninterface IJob {\r\n\r\n    /// @notice Executes this unit of work\r\n    /// @dev Should revert iff workable() returns canWork of false\r\n    /// @param network The name of the external keeper network\r\n    /// @param args Custom arguments supplied to the job, should be copied from workable response\r\n    function work(bytes32 network, bytes calldata args) external;\r\n\r\n    /// @notice Ask this job if it has a unit of work available\r\n    /// @dev This should never revert, only return false if nothing is available\r\n    /// @dev This should normally be a view, but sometimes that's not possible\r\n    /// @param network The name of the external keeper network\r\n    /// @return canWork Returns true if a unit of work is available\r\n    /// @return args The custom arguments to be provided to work() or an error string if canWork is false\r\n    function workable(bytes32 network) external returns (bool canWork, bytes memory args);\r\n\r\n}\r\n\r\n// src/ClipperMomJob.sol\r\n\r\n// Copyright (C) 2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface SequencerLike {\r\n    function isMaster(bytes32 network) external view returns (bool);\r\n}\r\n\r\ninterface IlkRegistryLike {\r\n    function list() external view returns (bytes32[] memory);\r\n    function xlip(bytes32 ilk) external view returns (address);\r\n}\r\n\r\ninterface ClipperMomLike {\r\n    function tripBreaker(address clip) external;\r\n}\r\n\r\n/// @title Will trigger a clipper to shutdown if oracle price drops too quickly\r\ncontract ClipperMomJob is IJob {\r\n    \r\n    SequencerLike public immutable sequencer;\r\n    IlkRegistryLike public immutable ilkRegistry;\r\n    ClipperMomLike public immutable clipperMom;\r\n\r\n    // --- Errors ---\r\n    error NotMaster(bytes32 network);\r\n\r\n    // --- Events ---\r\n    event Work(bytes32 indexed network, address indexed clip);\r\n\r\n    constructor(address _sequencer, address _ilkRegistry, address _clipperMom) {\r\n        sequencer = SequencerLike(_sequencer);\r\n        ilkRegistry = IlkRegistryLike(_ilkRegistry);\r\n        clipperMom = ClipperMomLike(_clipperMom);\r\n    }\r\n\r\n    function work(bytes32 network, bytes calldata args) external override {\r\n        if (!sequencer.isMaster(network)) revert NotMaster(network);\r\n\r\n        address clip = abi.decode(args, (address));\r\n        clipperMom.tripBreaker(clip);\r\n\r\n        emit Work(network, clip);\r\n    }\r\n\r\n    function workable(bytes32 network) external override returns (bool, bytes memory) {\r\n        if (!sequencer.isMaster(network)) return (false, bytes(\"Network is not master\"));\r\n        \r\n        bytes32[] memory ilks = ilkRegistry.list();\r\n        for (uint256 i = 0; i \u003c ilks.length; i++) {\r\n            address clip = ilkRegistry.xlip(ilks[i]);\r\n            if (clip == address(0)) continue;\r\n\r\n            // We cannot retrieve oracle prices (whitelist-only), so we have to just try and run the trip breaker\r\n            try clipperMom.tripBreaker(clip) {\r\n                // Found a valid trip\r\n                return (true, abi.encode(clip));\r\n            } catch {\r\n                // No valid trip -- carry on\r\n            }\r\n        }\r\n\r\n        return (false, bytes(\"No ilks ready\"));\r\n    }\r\n\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ilkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clipperMom\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"NotMaster\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"clip\",\"type\":\"address\"}],\"name\":\"Work\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"clipperMom\",\"outputs\":[{\"internalType\":\"contract ClipperMomLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilkRegistry\",\"outputs\":[{\"internalType\":\"contract IlkRegistryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencer\",\"outputs\":[{\"internalType\":\"contract SequencerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "ClipperMomJob",
      "CompilerVersion": "v0.8.13+commit.abaa5c0e",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000238b4e35daed6100c6162fae4510261f88996ec90000000000000000000000005a464c28d19848f44199d003bef5ecc87d090f8700000000000000000000000079fbdf16b366dfb14f66ce4ac2815ca7296405a0",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "GNU AGPLv3",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://c4f61c00ba369cf3e7c09136b2795836daf642399a398a153d7fa07589d1331c"
    }
  ]
}
