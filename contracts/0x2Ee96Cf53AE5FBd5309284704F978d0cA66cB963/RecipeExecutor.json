{
  "TxHash": "0xb070fa3ecaa010b4860a7725daa87ee2fcfb4d7474f0651c6843bfa3ccf631c8",
  "ContractAddress": "0x2Ee96Cf53AE5FBd5309284704F978d0cA66cB963",
  "Name": "RecipeExecutor",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.24;\n\n\n\n\n\n\n\n\n\n\ncontract MainnetActionsUtilAddresses {\n    address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\n    address internal constant DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e;\n    address internal constant TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2;\n}\n\n\n\n\n\n\n\ncontract ActionsUtilHelper is MainnetActionsUtilAddresses {\n}\n\n\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n    address internal constant PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D;\n}\n\n\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance \u003c amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance \u003c value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success \u0026\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026 address(token).code.length \u003e 0;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    /// @dev Deprecated method, selfdestruct will soon just send eth\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\n\n\n\ncontract DFSRegistry is AdminAuth {\n    error EntryAlreadyExistsError(bytes4);\n    error EntryNonExistentError(bytes4);\n    error EntryNotInChangeError(bytes4);\n    error ChangeNotReadyError(uint256,uint256);\n    error EmptyPrevAddrError(bytes4);\n    error AlreadyInContractChangeError(bytes4);\n    error AlreadyInWaitPeriodChangeError(bytes4);\n\n    event AddNewContract(address,bytes4,address,uint256);\n    event RevertToPreviousAddress(address,bytes4,address,address);\n    event StartContractChange(address,bytes4,address,address);\n    event ApproveContractChange(address,bytes4,address,address);\n    event CancelContractChange(address,bytes4,address,address);\n    event StartWaitPeriodChange(address,bytes4,uint256);\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes4 =\u003e Entry) public entries;\n    mapping(bytes4 =\u003e address) public previousAddresses;\n\n    mapping(bytes4 =\u003e address) public pendingAddresses;\n    mapping(bytes4 =\u003e uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registered address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes4 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registered\n    /// @param _id Id of contract\n    function isRegistered(bytes4 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes4 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        if (entries[_id].exists){\n            revert EntryAlreadyExistsError(_id);\n        }\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\n    }\n\n    /// @notice Reverts to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\n        if (!(entries[_id].exists)){\n            revert EntryNonExistentError(_id);\n        }\n        if (previousAddresses[_id] == address(0)){\n            revert EmptyPrevAddrError(_id);\n        }\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inWaitPeriodChange){\n            revert AlreadyInWaitPeriodChangeError(_id);\n        }\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp \u003c (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inContractChange){\n            revert AlreadyInContractChangeError(_id);\n        }\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp \u003c (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\n    }\n}\n\n\n\n\n\n\n\nabstract contract DSAuthority {\n    function canCall(\n        address src,\n        address dst,\n        bytes4 sig\n    ) public view virtual returns (bool);\n}\n\n\n\n\n\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(address(0))) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4 indexed sig,\n        address indexed guy,\n        bytes32 indexed foo,\n        bytes32 indexed bar,\n        uint256 wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\n\n\n\n\n\n\nabstract contract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache; // global cache for contracts\n\n    constructor(address _cacheAddr) {\n        if (!(setCache(_cacheAddr))){\n            require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (address target, bytes32 response);\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (bytes32 response);\n\n    //set new cache\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\n}\n\ncontract DSProxyCache {\n    mapping(bytes32 =\u003e address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n                case 1 {\n                    // throw if contract failed to deploy\n                    revert(0, 0)\n                }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\n\n\n\n\n\n\ninterface ISafe {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Operation operation\n    ) external returns (bool success);\n\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) external view;\n\n    function checkNSignatures(\n        address executor,\n        bytes32 dataHash,\n        bytes memory /* data */,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) external view;\n\n    function approveHash(bytes32 hashToApprove) external;\n\n    function domainSeparator() external view returns (bytes32);\n\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes32);\n\n    function nonce() external view returns (uint256);\n\n    function setFallbackHandler(address handler) external;\n\n    function getOwners() external view returns (address[] memory);\n\n    function isOwner(address owner) external view returns (bool);\n\n    function getThreshold() external view returns (uint256);\n\n    function enableModule(address module) external;\n\n    function isModuleEnabled(address module) external view returns (bool);\n\n    function disableModule(address prevModule, address module) external;\n\n    function getModulesPaginated(\n        address start,\n        uint256 pageSize\n    ) external view returns (address[] memory array, address next);\n}\n\n\n\n\n\n\n\ninterface IDSProxyFactory {\n    function isProxy(address _proxy) external view returns (bool);\n}\n\n\n\n\n\n\n\ncontract MainnetProxyFactoryAddresses {\n    address internal constant PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997;\n}\n\n\n\n\n\n\n\ncontract DSProxyFactoryHelper is MainnetProxyFactoryAddresses {\n}\n\n\n\n\n\n\n\n\n\ncontract CheckWalletType is DSProxyFactoryHelper {\n    function isDSProxy(address _proxy) public view returns (bool) {\n        return IDSProxyFactory(PROXY_FACTORY_ADDR).isProxy(_proxy);\n    }\n}\n\n\n\n\n\n\n\ncontract DefisaverLogger {\n    event RecipeEvent(\n        address indexed caller,\n        string indexed logName\n    );\n\n    event ActionDirectEvent(\n        address indexed caller,\n        string indexed logName,\n        bytes data\n    );\n\n    function logRecipeEvent(\n        string memory _logName\n    ) public {\n        emit RecipeEvent(msg.sender, _logName);\n    }\n\n    function logActionDirectEvent(\n        string memory _logName,\n        bytes memory _data\n    ) public {\n        emit ActionDirectEvent(msg.sender, _logName, _data);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nabstract contract ActionBase is AdminAuth, ActionsUtilHelper, CheckWalletType {\n    event ActionEvent(\n        string indexed logName,\n        bytes data\n    );\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    DefisaverLogger public constant logger = DefisaverLogger(\n        DFS_LOGGER_ADDR\n    );\n\n    //Wrong sub index value\n    error SubIndexValueError();\n    //Wrong return index value\n    error ReturnIndexValueError();\n\n    /// @dev Subscription params index range [128, 255]\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n\n    /// @dev Return params index range [1, 127]\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n\n    /// @dev If the input value should not be replaced\n    uint8 public constant NO_PARAM_MAPPING = 0;\n\n    /// @dev We need to parse Flash loan actions in a different way\n    enum ActionType { FL_ACTION, STANDARD_ACTION, FEE_ACTION, CHECK_ACTION, CUSTOM_ACTION }\n\n    /// @notice Parses inputs and runs the implemented action through a user wallet\n    /// @dev Is called by the RecipeExecutor chaining actions together\n    /// @param _callData Array of input values each value encoded as bytes\n    /// @param _subData Array of subscribed vales, replaces input values if specified\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n    /// @return Returns a bytes32 value through user wallet, each actions implements what that value is\n    function executeAction(\n        bytes memory _callData,\n        bytes32[] memory _subData,\n        uint8[] memory _paramMapping,\n        bytes32[] memory _returnValues\n    ) public payable virtual returns (bytes32);\n\n    /// @notice Parses inputs and runs the single implemented action through a user wallet\n    /// @dev Used to save gas when executing a single action directly\n    function executeActionDirect(bytes memory _callData) public virtual payable;\n\n    /// @notice Returns the type of action we are implementing\n    function actionType() public pure virtual returns (uint8);\n\n\n    //////////////////////////// HELPER METHODS ////////////////////////////\n\n    /// @notice Given an uint256 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamUint(\n        uint _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (uint) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = uint256(_subData[getSubIndex(_mapType)]);\n            }\n        }\n\n        return _param;\n    }\n\n\n    /// @notice Given an addr input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamAddr(\n        address _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal view returns (address) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n            } else {\n                /// @dev The last two values are specially reserved for proxy addr and owner addr\n                if (_mapType == 254) return address(this); // wallet address\n                if (_mapType == 255) return fetchOwnersOrWallet(); // owner if 1/1 wallet or the wallet itself\n\n                _param = address(uint160(uint256(_subData[getSubIndex(_mapType)])));\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Given an bytes32 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamABytes32(\n        bytes32 _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (bytes32) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = (_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = _subData[getSubIndex(_mapType)];\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\n    /// @param _type Indicated the type of the input\n    function isReplaceable(uint8 _type) internal pure returns (bool) {\n        return _type != NO_PARAM_MAPPING;\n    }\n\n    /// @notice Checks if the paramMapping value is in the return value range\n    /// @param _type Indicated the type of the input\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n        return (_type \u003e= RETURN_MIN_INDEX_VALUE) \u0026\u0026 (_type \u003c= RETURN_MAX_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in return array value\n    /// @param _type Indicated the type of the input\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n        if (!(isReturnInjection(_type))){\n            revert SubIndexValueError();\n        }\n\n        return (_type - RETURN_MIN_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in sub array value\n    /// @param _type Indicated the type of the input\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n        if (_type \u003c SUB_MIN_INDEX_VALUE){\n            revert ReturnIndexValueError();\n        }\n        return (_type - SUB_MIN_INDEX_VALUE);\n    }\n\n    function fetchOwnersOrWallet() internal view returns (address) {\n        if (isDSProxy(address(this))) \n            return DSProxy(payable(address(this))).owner();\n\n        // if not DSProxy, we assume we are in context of Safe\n        address[] memory owners = ISafe(address(this)).getOwners();\n        return owners.length == 1 ? owners[0] : address(this);\n    }\n}\n\n\n\n\n\n\n\nabstract contract DSGuard {\n    function canCall(\n        address src_,\n        address dst_,\n        bytes4 sig\n    ) public view virtual returns (bool);\n\n    function permit(\n        bytes32 src,\n        bytes32 dst,\n        bytes32 sig\n    ) public virtual;\n\n    function forbid(\n        bytes32 src,\n        bytes32 dst,\n        bytes32 sig\n    ) public virtual;\n\n    function permit(\n        address src,\n        address dst,\n        bytes32 sig\n    ) public virtual;\n\n    function forbid(\n        address src,\n        address dst,\n        bytes32 sig\n    ) public virtual;\n}\n\nabstract contract DSGuardFactory {\n    function newGuard() public virtual returns (DSGuard guard);\n}\n\n\n\n\n\n\n\n\n\n\ncontract DSProxyPermission is AuthHelper {\n\n    bytes4 public constant EXECUTE_SELECTOR = bytes4(keccak256(\"execute(address,bytes)\"));\n\n    /// @notice Called in the context of DSProxy to authorize an address\n    /// @param _contractAddr Address which will be authorized\n    function giveProxyPermission(address _contractAddr) public {\n        address currAuthority = address(DSAuth(address(this)).authority());\n        DSGuard guard = DSGuard(currAuthority);\n\n        if (currAuthority == address(0)) {\n            guard = DSGuardFactory(DSGUARD_FACTORY_ADDRESS).newGuard();\n            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\n        }\n\n        if (!guard.canCall(_contractAddr, address(this), EXECUTE_SELECTOR)) {\n            guard.permit(_contractAddr, address(this), EXECUTE_SELECTOR);\n        }\n    }\n\n    /// @notice Called in the context of DSProxy to remove authority of an address\n    /// @param _contractAddr Auth address which will be removed from authority list\n    function removeProxyPermission(address _contractAddr) public {\n        address currAuthority = address(DSAuth(address(this)).authority());\n\n        // if there is no authority, that means that contract doesn't have permission\n        if (currAuthority == address(0)) {\n            return;\n        }\n\n        DSGuard guard = DSGuard(currAuthority);\n        guard.forbid(_contractAddr, address(this), EXECUTE_SELECTOR);\n    }\n}\n\n\n\n\n\n\n\n\ncontract SafeModulePermission {\n\n    address public constant SENTINEL_MODULES = address(0x1);\n\n    error ModuleNotFoundError(address moduleAddr);\n\n    /// @notice Called in the context of Safe to authorize module\n    /// @param _moduleAddr Address of module which will be authorized\n    /// @dev Can't enable the same module twice\n    function enableModule(address _moduleAddr) public {\n        if(!ISafe(address(this)).isModuleEnabled(_moduleAddr)) {\n            ISafe(address(this)).enableModule(_moduleAddr);\n        }\n    }\n\n    /// @notice Called in the context of Safe to remove authority of module\n    /// @param _moduleAddr Address of module which will be removed from authority list\n    /// @dev moduleAddr has to be one of the last 10 modules added\n    /// @dev modules are returned in order SM -\u003e Mn -\u003e M(n-1) -\u003e ... -\u003e M1 -\u003e SM, without SM included\n    function disableModule(address _moduleAddr) public {\n        address startFrom = SENTINEL_MODULES;\n\n        // to save on gas, first check for last 2 modules added as they are most likely to be the ones to be removed\n        (address[] memory modules,) = ISafe(address(this)).getModulesPaginated(startFrom, 2);\n\n        // if no modules found, revert\n        if (modules.length == 0) {\n            revert ModuleNotFoundError(_moduleAddr);\n        }\n\n        // check for last module added\n        if (modules[0] == _moduleAddr) {\n            ISafe(address(this)).disableModule(SENTINEL_MODULES, _moduleAddr);\n            return;\n        }\n\n        // if there is only 1 module and it is not the one to be removed, revert\n        if (modules.length == 1) {\n            revert ModuleNotFoundError(_moduleAddr);\n        }\n\n        // check for second last module added\n        if (modules[1] == _moduleAddr) {\n            ISafe(address(this)).disableModule(modules[0], _moduleAddr);\n            return;\n        }\n\n        // if module not found in last 2 modules, fetch up to 8 more modules. Start searching from the second last module\n        startFrom = modules[1];\n        (modules,) = ISafe(address(this)).getModulesPaginated(startFrom, 8);\n\n        if (modules.length \u003e 0) {\n            if (modules[0] == _moduleAddr) {\n                ISafe(address(this)).disableModule(startFrom, _moduleAddr);\n                return;\n            }\n            for (uint256 i = 1; i \u003c modules.length; ++i) {\n                if (modules[i] == _moduleAddr) {\n                    ISafe(address(this)).disableModule(modules[i - 1], _moduleAddr);\n                    return;\n                }\n            }\n        }\n        // if module not found, revert\n        revert ModuleNotFoundError(_moduleAddr);\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetCoreAddresses {\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant MODULE_AUTH_ADDR = 0x7407974DDBF539e552F1d051e44573090912CC3D;\n    address internal constant DEFISAVER_LOGGER = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\n\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\n    address internal constant BUNDLE_STORAGE_ADDR = 0x223c6aDE533851Df03219f6E3D8B763Bd47f84cf;\n    address internal constant STRATEGY_STORAGE_ADDR = 0xF52551F95ec4A2B4299DcC42fbbc576718Dbf933;\n\n    address internal constant RECIPE_EXECUTOR_ADDR = 0x5029336642814bC51a42bA80BF83a6322110035D;\n    address internal constant BYTES_TRANSIENT_STORAGE = 0xB3FE6f712c8B8c64CD2780ce714A36e7640DDf0f;\n}\n\n\n\n\n\n\n\ncontract CoreHelper is MainnetCoreAddresses {\n}\n\n\n\n\n\n\n\n\n\ncontract StrategyModel {\n        \n    /// @dev Group of strategies bundled together so user can sub to multiple strategies at once\n    /// @param creator Address of the user who created the bundle\n    /// @param strategyIds Array of strategy ids stored in StrategyStorage\n    struct StrategyBundle {\n        address creator;\n        uint64[] strategyIds;\n    }\n\n    /// @dev Template/Class which defines a Strategy\n    /// @param name Name of the strategy useful for logging what strategy is executing\n    /// @param creator Address of the user which created the strategy\n    /// @param triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    /// @param continuous If the action is repeated (continuos) or one time\n    struct Strategy {\n        string name;\n        address creator;\n        bytes4[] triggerIds;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n        bool continuous;\n    }\n\n    /// @dev List of actions grouped as a recipe\n    /// @param name Name of the recipe useful for logging what recipe is executing\n    /// @param callData Array of calldata inputs to each action\n    /// @param subData Used only as part of strategy, subData injected from StrategySub.subData\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    struct Recipe {\n        string name;\n        bytes[] callData;\n        bytes32[] subData;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n    }\n\n    /// @dev Actual data of the sub we store on-chain\n    /// @dev In order to save on gas we store a keccak256(StrategySub) and verify later on\n    /// @param walletAddr Address of the users smart wallet/proxy\n    /// @param isEnabled Toggle if the subscription is active\n    /// @param strategySubHash Hash of the StrategySub data the user inputted\n    struct StoredSubData {\n        bytes20 walletAddr; // address but put in bytes20 for gas savings\n        bool isEnabled;\n        bytes32 strategySubHash;\n    }\n\n    /// @dev Instance of a strategy, user supplied data\n    /// @param strategyOrBundleId Id of the strategy or bundle, depending on the isBundle bool\n    /// @param isBundle If true the id points to bundle, if false points directly to strategyId\n    /// @param triggerData User supplied data needed for checking trigger conditions\n    /// @param subData User supplied data used in recipe\n    struct StrategySub {\n        uint64 strategyOrBundleId;\n        bool isBundle;\n        bytes[] triggerData;\n        bytes32[] subData;\n    }\n\n    /// @dev Data needed when signing relay transaction\n    /// @param maxTxCostInFeeToken Max tx cost user is willing to pay in fee token\n    /// @param feeToken Address of the token user is willing to pay fee in\n    /// @param tokenPriceInEth Price of the token in ETH\n    /// @param deadline Deadline for the relay transaction to be executed\n    /// @param shouldTakeFeeFromPosition Flag to indicate if fee should be taken from position, otherwise from EOA/wallet\n    struct TxSaverSignedData {\n        uint256 maxTxCostInFeeToken;\n        address feeToken;\n        uint256 tokenPriceInEth;\n        uint256 deadline;\n        bool shouldTakeFeeFromPosition;\n    }\n}\n\n\n\n\n\n\n\n\n\ncontract StrategyStorage is StrategyModel, AdminAuth {\n\n    Strategy[] public strategies;\n    bool public openToPublic = false;\n\n    error NoAuthToCreateStrategy(address,bool);\n    event StrategyCreated(uint256 indexed strategyId);\n\n    modifier onlyAuthCreators {\n        if (adminVault.owner() != msg.sender \u0026\u0026 openToPublic == false) {\n            revert NoAuthToCreateStrategy(msg.sender, openToPublic);\n        }\n\n        _;\n    }\n\n    /// @notice Creates a new strategy and writes the data in an array\n    /// @dev Can only be called by auth addresses if it's not open to public\n    /// @param _name Name of the strategy useful for logging what strategy is executing\n    /// @param _triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\n    /// @param _actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param _paramMapping Describes how inputs to functions are piped from return/subbed values\n    /// @param _continuous If the action is repeated (continuos) or one time\n    function createStrategy(\n        string memory _name,\n        bytes4[] memory _triggerIds,\n        bytes4[] memory _actionIds,\n        uint8[][] memory _paramMapping,\n        bool _continuous\n    ) public onlyAuthCreators returns (uint256) {\n        strategies.push(Strategy({\n                name: _name,\n                creator: msg.sender,\n                triggerIds: _triggerIds,\n                actionIds: _actionIds,\n                paramMapping: _paramMapping,\n                continuous : _continuous\n        }));\n\n        emit StrategyCreated(strategies.length - 1);\n\n        return strategies.length - 1;\n    }\n\n    /// @notice Switch to determine if bundles can be created by anyone\n    /// @dev Callable only by the owner\n    /// @param _openToPublic Flag if true anyone can create bundles\n    function changeEditPermission(bool _openToPublic) public onlyOwner {\n        openToPublic = _openToPublic;\n    }\n\n    ////////////////////////////// VIEW METHODS /////////////////////////////////\n\n    function getStrategy(uint _strategyId) public view returns (Strategy memory) {\n        return strategies[_strategyId];\n    }\n    function getStrategyCount() public view returns (uint256) {\n        return strategies.length;\n    }\n\n    function getPaginatedStrategies(uint _page, uint _perPage) public view returns (Strategy[] memory) {\n        Strategy[] memory strategiesPerPage = new Strategy[](_perPage);\n\n        uint start = _page * _perPage;\n        uint end = start + _perPage;\n\n        end = (end \u003e strategies.length) ? strategies.length : end;\n\n        uint count = 0;\n        for (uint i = start; i \u003c end; i++) {\n            strategiesPerPage[count] = strategies[i];\n            count++;\n        }\n\n        return strategiesPerPage;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract BundleStorage is StrategyModel, AdminAuth, CoreHelper {\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    StrategyBundle[] public bundles;\n    bool public openToPublic = false;\n\n    error NoAuthToCreateBundle(address,bool);\n    error DiffTriggersInBundle(uint64[]);\n\n    event BundleCreated(uint256 indexed bundleId);\n\n    modifier onlyAuthCreators {\n        if (adminVault.owner() != msg.sender \u0026\u0026 openToPublic == false) {\n            revert NoAuthToCreateBundle(msg.sender, openToPublic);\n        }\n\n        _;\n    }\n\n    /// @dev Checks if the triggers in strategies are the same (order also relevant)\n    /// @dev If the caller is not owner we do additional checks, we skip those checks for gas savings\n    modifier sameTriggers(uint64[] memory _strategyIds) {\n        if (msg.sender != adminVault.owner()) {\n            Strategy memory firstStrategy = StrategyStorage(STRATEGY_STORAGE_ADDR).getStrategy(_strategyIds[0]);\n\n            bytes32 firstStrategyTriggerHash = keccak256(abi.encode(firstStrategy.triggerIds));\n\n            for (uint256 i = 1; i \u003c _strategyIds.length; ++i) {\n                Strategy memory s = StrategyStorage(STRATEGY_STORAGE_ADDR).getStrategy(_strategyIds[i]);\n\n                if (firstStrategyTriggerHash != keccak256(abi.encode(s.triggerIds))) {\n                    revert DiffTriggersInBundle(_strategyIds);\n                }\n            }\n        }\n\n        _;\n    }\n\n    /// @notice Adds a new bundle to array\n    /// @dev Can only be called by auth addresses if it's not open to public\n    /// @dev Strategies need to have the same number of triggers and ids exists\n    /// @param _strategyIds Array of strategyIds that go into a bundle\n    function createBundle(\n        uint64[] memory _strategyIds\n    ) public onlyAuthCreators sameTriggers(_strategyIds) returns (uint256) {\n\n        bundles.push(StrategyBundle({\n            creator: msg.sender,\n            strategyIds: _strategyIds\n        }));\n\n        emit BundleCreated(bundles.length - 1);\n\n        return bundles.length - 1;\n    }\n\n    /// @notice Switch to determine if bundles can be created by anyone\n    /// @dev Callable only by the owner\n    /// @param _openToPublic Flag if true anyone can create bundles\n    function changeEditPermission(bool _openToPublic) public onlyOwner {\n        openToPublic = _openToPublic;\n    }\n\n    ////////////////////////////// VIEW METHODS /////////////////////////////////\n\n    function getStrategyId(uint256 _bundleId, uint256 _strategyIndex) public view returns (uint256) {\n        return bundles[_bundleId].strategyIds[_strategyIndex];\n    }\n\n    function getBundle(uint _bundleId) public view returns (StrategyBundle memory) {\n        return bundles[_bundleId];\n    }\n    function getBundleCount() public view returns (uint256) {\n        return bundles.length;\n    }\n\n    function getPaginatedBundles(uint _page, uint _perPage) public view returns (StrategyBundle[] memory) {\n        StrategyBundle[] memory bundlesPerPage = new StrategyBundle[](_perPage);\n        uint start = _page * _perPage;\n        uint end = start + _perPage;\n\n        end = (end \u003e bundles.length) ? bundles.length : end;\n\n        uint count = 0;\n        for (uint i = start; i \u003c end; i++) {\n            bundlesPerPage[count] = bundles[i];\n            count++;\n        }\n\n        return bundlesPerPage;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract SubStorage is StrategyModel, AdminAuth, CoreHelper {\n    error SenderNotSubOwnerError(address, uint256);\n    error SubIdOutOfRange(uint256, bool);\n\n    event Subscribe(uint256 indexed subId, address indexed walletAddr, bytes32 indexed subHash, StrategySub subStruct);\n    event UpdateData(uint256 indexed subId, bytes32 indexed subHash, StrategySub subStruct);\n    event ActivateSub(uint256 indexed subId);\n    event DeactivateSub(uint256 indexed subId);\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    StoredSubData[] public strategiesSubs;\n\n    /// @notice Checks if subId is init. and if the sender is the owner\n    modifier onlySubOwner(uint256 _subId) {\n        if (address(strategiesSubs[_subId].walletAddr) != msg.sender) {\n            revert SenderNotSubOwnerError(msg.sender, _subId);\n        }\n        _;\n    }\n\n    /// @notice Checks if the id is valid (points to a stored bundle/sub)\n    modifier isValidId(uint256 _id, bool _isBundle) {\n        if (_isBundle) {\n            if (_id \u003e (BundleStorage(BUNDLE_STORAGE_ADDR).getBundleCount() - 1)) {\n                revert SubIdOutOfRange(_id, _isBundle);\n            }\n        } else {\n            if (_id \u003e (StrategyStorage(STRATEGY_STORAGE_ADDR).getStrategyCount() - 1)) {\n                revert SubIdOutOfRange(_id, _isBundle);\n            }\n        }\n\n        _;\n    }\n\n    /// @notice Adds users info and records StoredSubData, logs StrategySub\n    /// @dev To save on gas we don't store the whole struct but rather the hash of the struct\n    /// @param _sub Subscription struct of the user (is not stored on chain, only the hash)\n    function subscribeToStrategy(\n        StrategySub memory _sub\n    ) public isValidId(_sub.strategyOrBundleId, _sub.isBundle) returns (uint256) {\n\n        bytes32 subStorageHash = keccak256(abi.encode(_sub));\n\n        strategiesSubs.push(StoredSubData(\n            bytes20(msg.sender),\n            true,\n            subStorageHash\n        ));\n\n        uint256 currentId = strategiesSubs.length - 1;\n\n        emit Subscribe(currentId, msg.sender, subStorageHash, _sub);\n\n        return currentId;\n    }\n\n    /// @notice Updates the users subscription data\n    /// @dev Only callable by wallet who created the sub.\n    /// @param _subId Id of the subscription to update\n    /// @param _sub Subscription struct of the user (needs whole struct so we can hash it)\n    function updateSubData(\n        uint256 _subId,\n        StrategySub calldata _sub\n    ) public onlySubOwner(_subId) isValidId(_sub.strategyOrBundleId, _sub.isBundle)  {\n        StoredSubData storage storedSubData = strategiesSubs[_subId];\n\n        bytes32 subStorageHash = keccak256(abi.encode(_sub));\n\n        storedSubData.strategySubHash = subStorageHash;\n\n        emit UpdateData(_subId, subStorageHash, _sub);\n    }\n\n    /// @notice Enables the subscription for execution if disabled\n    /// @dev Must own the sub. to be able to enable it\n    /// @param _subId Id of subscription to enable\n    function activateSub(\n        uint _subId\n    ) public onlySubOwner(_subId) {\n        StoredSubData storage sub = strategiesSubs[_subId];\n\n        sub.isEnabled = true;\n\n        emit ActivateSub(_subId);\n    }\n\n    /// @notice Disables the subscription (will not be able to execute the strategy for the user)\n    /// @dev Must own the sub. to be able to disable it\n    /// @param _subId Id of subscription to disable\n    function deactivateSub(\n        uint _subId\n    ) public onlySubOwner(_subId) {\n        StoredSubData storage sub = strategiesSubs[_subId];\n\n        sub.isEnabled = false;\n\n        emit DeactivateSub(_subId);\n    }\n\n    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\n\n    function getSub(uint _subId) public view returns (StoredSubData memory) {\n        return strategiesSubs[_subId];\n    }\n\n    function getSubsCount() public view returns (uint256) {\n        return strategiesSubs.length;\n    }\n}\n\n\n\n\n\n\ncontract DFSExchangeData {\n\n    struct OffchainData {\n        address wrapper; // dfs wrapper address for the aggregator (must be in WrapperExchangeRegistry)\n        address exchangeAddr; // exchange address we are calling to execute the order (must be in ExchangeAggregatorRegistry)\n        address allowanceTarget; // exchange aggregator contract we give allowance to\n        uint256 price; // expected price that the aggregator sent us\n        uint256 protocolFee; // deprecated (used as a separate fee amount for 0x v1)\n        bytes callData; // 0ff-chain calldata the aggregator gives to perform the swap\n    }\n\n    struct ExchangeData {\n        address srcAddr; // source token address (which we're selling)\n        address destAddr; // destination token address (which we're buying)\n        uint256 srcAmount; // amount of source token in token decimals\n        uint256 destAmount; // amount of bought token in token decimals\n        uint256 minPrice; // minPrice we are expecting (checked in DFSExchangeCore)\n        uint256 dfsFeeDivider; // service fee divider\n        address user; // currently deprecated (used to check custom fees for the user)\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n\n    struct InjectedExchangeData {\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n}\n\n\n\n\n\n\nabstract contract IFlashLoanBase{\n    \n    struct FlashLoanParams {\n        address[] tokens;\n        uint256[] amounts;\n        uint256[] modes;\n        address onBehalfOf;\n        address flParamGetterAddr;\n        bytes flParamGetterData;\n        bytes recipeData;\n    }\n}\n\n\n\n\n\n\nabstract contract ITrigger {\n    function isTriggered(bytes memory, bytes memory) public virtual returns (bool);\n    function isChangeable() public virtual returns (bool);\n    function changedSubData(bytes memory) public virtual returns (bytes memory);\n}\n\n\n\n\n\n\n\ninterface ITxSaverBytesTransientStorage {\n    function getFeeType() external view returns (uint256);\n    function getBytesTransiently() external view returns (bytes memory result);\n}\n\n\n\n\n\n\n\nabstract contract IWETH {\n    function allowance(address, address) public virtual view returns (uint256);\n\n    function balanceOf(address) public virtual view returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public virtual returns (bool);\n\n    function deposit() public payable virtual;\n\n    function withdraw(uint256) public virtual;\n}\n\n\n\n\n\n\n\n\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Only approves the amount if allowance is lower than amount, does not decrease allowance\n    function approveToken(\n        address _tokenAddr,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_tokenAddr == ETH_ADDR) return;\n\n        if (IERC20(_tokenAddr).allowance(address(this), _to) \u003c _amount) {\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\n        }\n    }\n\n    function pullTokensIfNeeded(\n        address _token,\n        address _from,\n        uint256 _amount\n    ) internal returns (uint256) {\n        // handle max uint amount\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, _from);\n        }\n\n        if (_from != address(0) \u0026\u0026 _from != address(this) \u0026\u0026 _token != ETH_ADDR \u0026\u0026 _amount != 0) {\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        }\n\n        return _amount;\n    }\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, address(this));\n        }\n\n        if (_to != address(0) \u0026\u0026 _to != address(this) \u0026\u0026 _amount != 0) {\n            if (_token != ETH_ADDR) {\n                IERC20(_token).safeTransfer(_to, _amount);\n            } else {\n                (bool success, ) = _to.call{value: _amount}(\"\");\n                require(success, \"Eth send fail\");\n            }\n        }\n\n        return _amount;\n    }\n\n    function depositWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).deposit{value: _amount}();\n    }\n\n    function withdrawWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).withdraw(_amount);\n    }\n\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n        if (_tokenAddr == ETH_ADDR) {\n            return _acc.balance;\n        } else {\n            return IERC20(_tokenAddr).balanceOf(_acc);\n        }\n    }\n\n    function getTokenDecimals(address _token) internal view returns (uint256) {\n        if (_token == ETH_ADDR) return 18;\n\n        return IERC20(_token).decimals();\n    }\n}\n\n\n\n\n\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x + y;\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x - y;\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x \u003c= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x \u003e= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x \u003c= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x \u003e= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetUtilAddresses {\n    address internal refillCaller = 0x33fDb79aFB4456B604f376A45A546e7ae700e880;\n    address internal feeAddr = 0x76720aC2574631530eC8163e4085d6F98513fb27;\n\n    address internal constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\n    address internal constant UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address internal constant MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n    address internal constant AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\n    address internal constant AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;\n    address internal constant SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE;\n\n    address internal constant DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed;\n\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address internal constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address internal constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    address internal constant WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    address internal constant CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n    address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address internal constant FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06;\n\n    address internal constant UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    address internal constant UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6;\n\n    address internal constant FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n\n    // not needed on mainnet\n    address internal constant DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address public constant CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf;\n    \n    address public constant TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479;\n\n}\n\n\n\n\n\n\n\ncontract UtilHelper is MainnetUtilAddresses{\n}\n\n\n\n\n\n\n\n\n\ncontract TxSaverGasCostCalc is DSMath, UtilHelper {\n    using TokenUtils for address;\n    \n    // only support token with decimals \u003c= 18\n    error TokenDecimalsTooHigh(uint256 decimals);\n    // when injecting price, price must be greater than 0\n    error ZeroTokenPriceInEthError();\n\n    function calcGasCostUsingInjectedPrice(\n        uint256 _gasUsed,\n        address _feeToken,\n        uint256 _tokenPriceInEth,\n        uint256 _l1GasCostInEth\n    ) internal view returns (uint256 txCost) {\n        // can't use more gas than the block gas limit\n        if (_gasUsed \u003e block.gaslimit) {\n            _gasUsed = block.gaslimit;\n        }\n\n        // calc gas used\n        txCost = (_gasUsed * tx.gasprice) + _l1GasCostInEth;    \n\n        // convert to token amount\n        if (_feeToken != TokenUtils.WETH_ADDR) {\n            uint256 tokenDecimals = _feeToken.getTokenDecimals();\n\n            if (tokenDecimals \u003e 18) revert TokenDecimalsTooHigh(tokenDecimals);\n\n            if (_tokenPriceInEth == 0) revert ZeroTokenPriceInEthError();\n\n            txCost = wdiv(txCost, _tokenPriceInEth) / (10**(18 - tokenDecimals));\n        }\n    }\n}\n\n\n\n\n\n\n\n/**\n* @title Entry point into executing recipes/checking triggers directly and as part of a strategy\n* @dev RecipeExecutor can be used in two scenarios:\n* 1) Execute a recipe manually through user's wallet by calling executeRecipe()\n*    Here, users can also execute a recipe with a flash loan action. To save on space, the flow will be explained in the next scenario\n*\n*                                                                                                                       ┌────────────────┐\n*                                                                                                                   ┌───┤  1st Action    │\n*                                                                                                                   │   └────────────────┘\n*                                                                                                                   │\n*   Actor                    ┌──────────────┐                    ┌────────────────┐                                 │   ┌────────────────┐\n*    ┌─┐                     │              │   Delegate call    │                │    Delegate call each action    ├───┤  2nd Action    │\n*    └┼┘                     │              │   - executeRecipe()│                │         - executeAction()       │   └────────────────┘\n*  ── │ ──  ─────────────────┤ Smart Wallet ├────────────────────┤ Recipe Executor├─────────────────────────────────┤\n*    ┌┴┐                     │              │                    │                │                                 │    . . .\n*    │ │                     │              │                    │                │                                 │\n*                            └──────────────┘                    └────────────────┘                                 │   ┌────────────────┐\n*                                                                                                                   └───┤  nth Action    │\n*                                                                                                                       └────────────────┘\n*\n* \n* 2) Execute a recipe as part of a defi saver strategy system\n*\n*                             check:\n*                             - bot is approved                           check:                 ┌───────────────────────┐\n*                             - sub data hash                             msg.sender =           │  SafeModuleAuth       │\n*                             - sub is enabled                            strategyExecutor       │ - call tx on safe     │\n*  ┌─────┐  executeStrategy() ┌──────────────────┐       callExecute()    ┌────────────┐    IS   │   wallet from module  │\n*  │ Bot ├───────────────────►│ StrategyExecutor ├───────────────────────►│   IAuth    ├─────────┼───────────────────────┼────┐\n*  └─────┘  pass params:      └──────────────────┘                        └────────────┘         │  ProxyAuth            │    │\n*          - subId                                                      user gives permission    │ - call execute on     │    │\n*          - strategyIndex                                              to Auth contract to      │   DSProxy             │    │\n*          - triggerCallData[]                                          execute tx through       └───────────────────────┘    │\n*          - actionsCallData[]                                          smart wallet                                          │\n*          - SubscriptionData                                                                                                 │\n*                                                                                                                             │\n*                                                                                                ┌────────────────────────┐   │\n*                                                                                                │      Smart Wallet      │◄──┴─────────────────┐\n*                   ┌──────────────┐                                                             └───────────┬────────────┘                     │\n*                   │  1st Action  ├───┐                                                                     │            ▲                     │\n*                   └──────────────┘   │                                                                     │Delegate    └──────────────────┐  │\n*                                      │    Delegate call                                                    │  call                         │  │\n*                   ┌──────────────┐   │    each action                   ┌────────────┐                     ▼                               │  │\n*                   │  2nd Action  │   │    - executeAction() ┌──┐        │1st Action  │         ┌────────────────────────┐                  │  │\n*                   └──────────────┘   ├──────────────────────┤NO├────────┤is Flashloan├─────────┤     Recipe Executor    │                  │  │\n*                          ...         │                      └──┘        │  Action?   │         └────────────────────────┘                  │  │\n*                   ┌──────────────┐   │                                  └──────┬─────┘              check if triggers                      │  │\n*                   │  nth Action  ├───┘                    ┌───────┐            │                       are valid                           │  │\n*                   └──────────────┘            ┌───────────┤  YES  ├────────────┘                                                           │  │\n*                                               │           └───────┘                                                                        │  │\n*                                               ▼                                                                                            │  │\n*                                        ┌──────────────┐       giveWalletPermission             ┌────────────────────────┐                  │  │\n*                                        │              ├───────────────────────────────────────►│       Permission       │                  │  │\n*                                        │              │                                        └────────────────────────┘                  │  │\n*                                        │              │                                  -for safe -\u003e enable FL action as module           │  │\n*                                        │              │                                  -for dsproxy -\u003e enable FL action to call execute  │  │\n*                                        │              │                                                                                    │  │\n*                                        │              │                                                                                    │  │\n*                                        │              │                          ┌────────┐      Borrow funds    ┌────────┐                │  │\n*                                        │              │                          │        ├─────────────────────►│External│                │  │\n*                                        │              │                          │        │      Callback fn     │   FL   │                │  │\n*                                        │              │                          │        │◄─────────────────────┤ Source │                │  │\n*                                        │              │                          │        │                      └────────┘                │  │\n*                                        │              │                          │        │                                                │  │\n*                                        │              │                          │        ├────────────────────────────────────────────────┘  │\n*                                        │   parse FL   │   directly call:         │   FL   │      Send borrowed funds to smart wallet          │\n*                                        │     and      │   executeAction()        │ Action │                                                   │\n*                                        │   execute    ├─────────────────────────►│        │                                                   │\n*                                        │              │                          │        │      Call back the _executeActionsFromFL on       │\n*                                        │              │                          │        │      RecipeExecutor through Smart Wallet.         │\n*                                        │              │                          │        │      We can call wallet from FL action because    │\n*                                        │              │                          │        │      we gave it approval earlier.                 │\n*                                        │              │                          │        │      Actions are executed as regular starting     │\n*                                        │              │                          │        │      from second action.                          │\n*                                        │              │                          │        ├───────────────────────────────────────────────────┘\n*                                        │              │                          │        │\n*                                        │              │                          └────┬───┘                      ┌────────┐\n*                                        │              │                               │    Return borrowed funds │External│\n*                                        │              │                               └─────────────────────────►│   FL   │\n*                                        │              │                                                          │ Source │\n*                                        │              │                                                          └────────┘\n*                                        │              │\n*                                        │              │\n*                                        │              │       removeWalletPermission            ┌────────────────────────┐\n*                                        │              ├────────────────────────────────────────►│       Permission       │\n*                                        │              │                                         └────────────────────────┘\n*                                        └──────────────┘\n*\n*\n*\n*/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract RecipeExecutor is \n    StrategyModel,\n    DSProxyPermission,\n    SafeModulePermission,\n    AdminAuth,\n    CoreHelper,\n    TxSaverGasCostCalc,\n    CheckWalletType\n{\n    bytes4 public constant TX_SAVER_EXECUTOR_ID = bytes4(keccak256(\"TxSaverExecutor\"));\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    /// @dev Function sig of ActionBase.executeAction()\n    bytes4 public constant EXECUTE_ACTION_SELECTOR = \n        bytes4(keccak256(\"executeAction(bytes,bytes32[],uint8[],bytes32[])\"));\n\n    using TokenUtils for address;\n\n    /// For strategy execution all triggers must be active\n    error TriggerNotActiveError(uint256);\n\n    /// For TxSaver, total gas cost fee taken from user can't be higher than maxTxCost set by user\n    error TxCostInFeeTokenTooHighError(uint256 maxTxCost, uint256 txCost);\n\n    /// When calling TxSaver functions, caller has to be TxSaverExecutor\n    error TxSaverAuthorizationError(address caller);\n\n    /// @notice Called directly through user wallet to execute a recipe\n    /// @dev This is the main entry point for Recipes executed manually\n    /// @param _currRecipe Recipe to be executed\n    function executeRecipe(Recipe calldata _currRecipe) public payable {\n        _executeActions(_currRecipe);\n    }\n\n    /// @notice Called by TxSaverExecutor through safe wallet\n    /// @param _currRecipe Recipe to be executed\n    /// @param _txSaverData TxSaver data signed by user\n    function executeRecipeFromTxSaver(\n        Recipe calldata _currRecipe,\n        TxSaverSignedData calldata _txSaverData\n    ) public payable {\n        address txSaverExecutorAddr = registry.getAddr(TX_SAVER_EXECUTOR_ID);\n\n        // only TxSaverExecutor can call this function\n        if (msg.sender != txSaverExecutorAddr) {\n            revert TxSaverAuthorizationError(msg.sender);\n        }\n\n        // if fee is taken from position, its taken inside sell action, so here we just execute the recipe\n        if (_txSaverData.shouldTakeFeeFromPosition) {\n            _executeActions(_currRecipe);\n            return;\n        }\n        \n        // when taking fee from EOA/wallet\n        // first read gas estimation set by TxSaverExecutor\n        (uint256 estimatedGasUsed, uint256 l1GasCostInEth, ) = abi.decode(\n            ITxSaverBytesTransientStorage(txSaverExecutorAddr).getBytesTransiently(),\n            (uint256, uint256, DFSExchangeData.InjectedExchangeData)\n        );\n\n        // execute the recipe\n        _executeActions(_currRecipe);\n\n        // when sending sponsored tx, no tx cost is taken\n        if (estimatedGasUsed == 0) {\n            return;\n        }\n\n        // calculate gas cost using gas estimation and signed token price\n        uint256 gasCost = calcGasCostUsingInjectedPrice(\n            estimatedGasUsed,\n            _txSaverData.feeToken,\n            _txSaverData.tokenPriceInEth,\n            l1GasCostInEth\n        );\n\n        // revert if gas cost is higher than max cost signed by user\n        if (gasCost \u003e _txSaverData.maxTxCostInFeeToken) {\n            revert TxCostInFeeTokenTooHighError(_txSaverData.maxTxCostInFeeToken, gasCost);\n        }\n\n        address[] memory owners = ISafe(address(this)).getOwners();\n\n        // if 1/1 wallet, pull tokens from eoa to wallet\n        if (owners.length == 1) {\n            _txSaverData.feeToken.pullTokensIfNeeded(owners[0], gasCost);\n        }\n\n        // send tokens from wallet to fee recipient\n        _txSaverData.feeToken.withdrawTokens(TX_SAVER_FEE_RECIPIENT, gasCost);\n    }\n\n    /// @notice Called by user wallet through the auth contract to execute a recipe \u0026 check triggers\n    /// @param _subId Id of the subscription we want to execute\n    /// @param _actionCallData All input data needed to execute actions\n    /// @param _triggerCallData All input data needed to check triggers\n    /// @param _strategyIndex Which strategy in a bundle, need to specify because when sub is part of a bundle\n    /// @param _sub All the data related to the strategies Recipe\n    function executeRecipeFromStrategy(\n        uint256 _subId,\n        bytes[] calldata _actionCallData,\n        bytes[] calldata _triggerCallData,\n        uint256 _strategyIndex,\n        StrategySub memory _sub\n    ) public payable {\n        Strategy memory strategy;\n\n        {   // to handle stack too deep\n            uint256 strategyId = _sub.strategyOrBundleId;\n\n            // fetch strategy if inside of bundle\n            if (_sub.isBundle) {\n                strategyId = BundleStorage(BUNDLE_STORAGE_ADDR).getStrategyId(strategyId, _strategyIndex);\n            }\n\n            strategy = StrategyStorage(STRATEGY_STORAGE_ADDR).getStrategy(strategyId);\n        }\n\n        // check if all the triggers are true\n        (bool triggered, uint256 errIndex) \n            = _checkTriggers(strategy, _sub, _triggerCallData, _subId, SUB_STORAGE_ADDR);\n        \n        if (!triggered) {\n            revert TriggerNotActiveError(errIndex);\n        }\n\n        // if this is a one time strategy\n        if (!strategy.continuous) {\n            SubStorage(SUB_STORAGE_ADDR).deactivateSub(_subId);\n        }\n\n        // format recipe from strategy\n        Recipe memory currRecipe = Recipe({\n            name: strategy.name,\n            callData: _actionCallData,\n            subData: _sub.subData,\n            actionIds: strategy.actionIds,\n            paramMapping: strategy.paramMapping\n        });\n\n        _executeActions(currRecipe);\n    }\n\n    /// @notice Checks if all the triggers are true\n    function _checkTriggers(\n        Strategy memory strategy,\n        StrategySub memory _sub,\n        bytes[] calldata _triggerCallData,\n        uint256 _subId,\n        address _storageAddr\n    ) internal returns (bool, uint256) {\n        bytes4[] memory triggerIds = strategy.triggerIds;\n\n        bool isTriggered;\n        address triggerAddr;\n        uint256 i;\n\n        for (i = 0; i \u003c triggerIds.length; ++i) {\n            triggerAddr = registry.getAddr(triggerIds[i]);\n\n            isTriggered = ITrigger(triggerAddr).isTriggered(\n                _triggerCallData[i],\n                _sub.triggerData[i]\n            );\n\n            if (!isTriggered) return (false, i);\n\n            // after execution triggers flag-ed changeable can update their value\n            if (ITrigger(triggerAddr).isChangeable()) {\n                _sub.triggerData[i] = ITrigger(triggerAddr).changedSubData(_sub.triggerData[i]);\n                SubStorage(_storageAddr).updateSubData(_subId, _sub);\n            }\n        }\n\n        return (true, i);\n    }\n\n    /// @notice This is the callback function that FL actions call\n    /// @dev FL function must be the first action and repayment is done last\n    /// @param _currRecipe Recipe to be executed\n    /// @param _flAmount Result value from FL action\n    function _executeActionsFromFL(Recipe calldata _currRecipe, bytes32 _flAmount) public payable {\n        bytes32[] memory returnValues = new bytes32[](_currRecipe.actionIds.length);\n        returnValues[0] = _flAmount; // set the flash loan action as first return value\n\n        // skips the first actions as it was the fl action\n        for (uint256 i = 1; i \u003c _currRecipe.actionIds.length; ++i) {\n            returnValues[i] = _executeAction(_currRecipe, i, returnValues);\n        }\n    }\n\n    /// @notice Runs all actions from the recipe\n    /// @dev FL action must be first and is parsed separately, execution will go to _executeActionsFromFL\n    /// @param _currRecipe Recipe to be executed\n    function _executeActions(Recipe memory _currRecipe) internal {\n        address firstActionAddr = registry.getAddr(_currRecipe.actionIds[0]);\n\n        bytes32[] memory returnValues = new bytes32[](_currRecipe.actionIds.length);\n\n        if (isFL(firstActionAddr)) {\n             _parseFLAndExecute(_currRecipe, firstActionAddr, returnValues);\n        } else {\n            for (uint256 i = 0; i \u003c _currRecipe.actionIds.length; ++i) {\n                returnValues[i] = _executeAction(_currRecipe, i, returnValues);\n            }\n        }\n\n        /// log the recipe name\n        DefisaverLogger(DEFISAVER_LOGGER).logRecipeEvent(_currRecipe.name);\n    }\n\n    /// @notice Gets the action address and executes it\n    /// @dev We delegate context of user's wallet to action contract\n    /// @param _currRecipe Recipe to be executed\n    /// @param _index Index of the action in the recipe array\n    /// @param _returnValues Return values from previous actions\n    function _executeAction(\n        Recipe memory _currRecipe,\n        uint256 _index,\n        bytes32[] memory _returnValues\n    ) internal returns (bytes32 response) {\n\n        address actionAddr = registry.getAddr(_currRecipe.actionIds[_index]);\n\n        response = delegateCallAndReturnBytes32(\n            actionAddr, \n            abi.encodeWithSelector(\n                EXECUTE_ACTION_SELECTOR,\n                _currRecipe.callData[_index],\n                _currRecipe.subData,\n                _currRecipe.paramMapping[_index],\n                _returnValues\n            )\n        );\n    }\n\n    /// @notice Prepares and executes a flash loan action\n    /// @dev It adds to the first input value of the FL, the recipe data so it can be passed on\n    /// @dev FL action is executed directly, so we need to give it permission to call back RecipeExecutor in context of user's wallet\n    /// @param _currRecipe Recipe to be executed\n    /// @param _flActionAddr Address of the flash loan action\n    /// @param _returnValues An empty array of return values, because it's the first action\n    function _parseFLAndExecute(\n        Recipe memory _currRecipe,\n        address _flActionAddr,\n        bytes32[] memory _returnValues\n    ) internal {\n\n        bool isDSProxy = isDSProxy(address(this));\n\n        isDSProxy ? giveProxyPermission(_flActionAddr) : enableModule(_flActionAddr);\n\n        // encode data for FL\n        bytes memory recipeData = abi.encode(_currRecipe, address(this));\n        IFlashLoanBase.FlashLoanParams memory params = abi.decode(\n            _currRecipe.callData[0],\n            (IFlashLoanBase.FlashLoanParams)\n        );\n        params.recipeData = recipeData;\n        _currRecipe.callData[0] = abi.encode(params);\n\n        /// @dev FL action is called directly so that we can check who the msg.sender of FL is\n        ActionBase(_flActionAddr).executeAction(\n            _currRecipe.callData[0],\n            _currRecipe.subData,\n            _currRecipe.paramMapping[0],\n            _returnValues\n        );\n\n        isDSProxy ? removeProxyPermission(_flActionAddr) : disableModule(_flActionAddr);\n    }\n\n    /// @notice Checks if the specified address is of FL type action\n    /// @param _actionAddr Address of the action\n    function isFL(address _actionAddr) internal pure returns (bool) {\n        return ActionBase(_actionAddr).actionType() == uint8(ActionBase.ActionType.FL_ACTION);\n    }\n\n    function delegateCallAndReturnBytes32(address _target, bytes memory _data) internal returns (bytes32 response) {\n        require(_target != address(0));\n\n        // call contract in current context\n        assembly {\n            let succeeded := delegatecall(sub(gas(), 5000), _target, add(_data, 0x20), mload(_data), 0, 32)\n            \n            // load delegatecall output\n            response := mload(0)\n            \n            // throw if delegatecall failed\n            if eq(succeeded, 0) {\n                revert(0, 0)\n            }\n        }\n    }\n}\n",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"moduleAddr\",\"type\":\"address\"}],\"name\":\"ModuleNotFoundError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"TokenDecimalsTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TriggerNotActiveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCost\",\"type\":\"uint256\"}],\"name\":\"TxCostInFeeTokenTooHighError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"TxSaverAuthorizationError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTokenPriceInEthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINLINK_FEED_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTE_ACTION_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXECUTE_SELECTOR\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SENTINEL_MODULES\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_SAVER_EXECUTOR_ID\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_SAVER_FEE_RECIPIENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"callData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"actionIds\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint8[][]\",\"name\":\"paramMapping\",\"type\":\"uint8[][]\"}],\"internalType\":\"struct StrategyModel.Recipe\",\"name\":\"_currRecipe\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_flAmount\",\"type\":\"bytes32\"}],\"name\":\"_executeActionsFromFL\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddr\",\"type\":\"address\"}],\"name\":\"disableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moduleAddr\",\"type\":\"address\"}],\"name\":\"enableModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"callData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"actionIds\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint8[][]\",\"name\":\"paramMapping\",\"type\":\"uint8[][]\"}],\"internalType\":\"struct StrategyModel.Recipe\",\"name\":\"_currRecipe\",\"type\":\"tuple\"}],\"name\":\"executeRecipe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_subId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_actionCallData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_triggerCallData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"_strategyIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"strategyOrBundleId\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isBundle\",\"type\":\"bool\"},{\"internalType\":\"bytes[]\",\"name\":\"triggerData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct StrategyModel.StrategySub\",\"name\":\"_sub\",\"type\":\"tuple\"}],\"name\":\"executeRecipeFromStrategy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"callData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"actionIds\",\"type\":\"bytes4[]\"},{\"internalType\":\"uint8[][]\",\"name\":\"paramMapping\",\"type\":\"uint8[][]\"}],\"internalType\":\"struct StrategyModel.Recipe\",\"name\":\"_currRecipe\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxTxCostInFeeToken\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceInEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"shouldTakeFeeFromPosition\",\"type\":\"bool\"}],\"internalType\":\"struct StrategyModel.TxSaverSignedData\",\"name\":\"_txSaverData\",\"type\":\"tuple\"}],\"name\":\"executeRecipeFromTxSaver\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"giveProxyPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"isDSProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractAddr\",\"type\":\"address\"}],\"name\":\"removeProxyPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "RecipeExecutor",
      "CompilerVersion": "v0.8.24+commit.e11b9ed9",
      "OptimizationUsed": "1",
      "Runs": "1000",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
