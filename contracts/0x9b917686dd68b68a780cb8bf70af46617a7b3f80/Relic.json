{
  "TxHash": "0x863b83d7fe30b7d465c8181a1572aa3941ce9d2aadf568d280f19d0afb57bfbc",
  "ContractAddress": "0x9b917686dd68b68a780cb8bf70af46617a7b3f80",
  "Name": "Relic",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nabstract contract GenArt721  {\r\n  function purchaseTo(address _to, uint256 _projectId) public virtual payable returns (uint256 _tokenId);\r\n  function projectTokenInfo(uint256 _projectId) public virtual view returns (address artistAddress, uint256 pricePerTokenInWei, uint256 invocations, uint256 maxInvocations, bool active, address additionalPayee, uint256 additionalPayeePercentage);\r\n  function tokensOfOwner(address owner) external virtual view returns (uint256[] memory);\r\n}\r\n\r\ncontract Relic {\r\n  uint256 public num = 0; \r\n  uint256 public cost = 1; // 1 wei\r\n  bool public is_sealed = false;\r\n  address public admin_address;\r\n  address public admin_address2;\r\n  string public message;\r\n  bytes32 public squiggle_mint_tx;\r\n\r\n  bool public paused;\r\n  address public lacma_address = 0x2360A52d6F0eA089307b405d4be40D523D578594; \r\n  address constant snowfro_address = 0xf3860788D1597cecF938424bAABe976FaC87dC26; \r\n\r\n  GenArt721 public squiggle;\r\n  \r\n  mapping (address =\u003e bool) private has_inscribed;\r\n  mapping (uint256 =\u003e address) public inscriptions;\r\n  mapping (address =\u003e uint256) public num_squiggles; //number of squiggles owned \r\n\r\n  event eInscribe(address a);\r\n    \r\n  modifier requireAdmin() {\r\n    require(msg.sender==admin_address, \"Requires admin privileges\");\r\n    _;\r\n  }\r\n\r\n  modifier requireAdmin2() {\r\n    require(msg.sender==admin_address ||\r\n\t    msg.sender==admin_address2, \"Requires admin privileges\");\r\n    _;\r\n  }\r\n  \r\n  modifier notSealed() {\r\n    require(is_sealed == false, \"Contract has been sealed\");\r\n    _;\r\n  }\r\n\r\n  constructor() {\r\n    admin_address = snowfro_address;\r\n    lacma_address = 0x2360A52d6F0eA089307b405d4be40D523D578594;    \r\n    admin_address2 = msg.sender; \r\n    address _squiggle_contract_address = 0x059EDD72Cd353dF5106D2B9cC5ab83a52287aC3a;\r\n    squiggle = GenArt721(_squiggle_contract_address);\r\n    paused = true;    \r\n  }\r\n\r\n  receive() external payable  {\r\n    inscribeAddress();\r\n  }\r\n\r\n  function seal() public requireAdmin notSealed {\r\n    is_sealed = true;\r\n  }\r\n\r\n  function setLACMAAddress(address a) public notSealed {\r\n    //only changeable by a multisig    \r\n    require(msg.sender==0xb998A2520907Ed1fc0F9f457b2219FB2720466cd,\"Access denied\");\r\n    lacma_address = a;\r\n  }\r\n  \r\n  function setPaused(bool p) public requireAdmin2 notSealed {\r\n    paused = p;\r\n  }\r\n  \r\n  //mint the last squiggle\r\n  function mint10000th() public requireAdmin notSealed {\r\n    require(msg.sender == snowfro_address,\"Must be initiated by Snowfro\");\r\n    squiggle.purchaseTo(lacma_address,0);\r\n  }\r\n  \r\n  //set administrator, revoking previous\r\n  function setAdmin(address a) public requireAdmin notSealed {\r\n    admin_address = a;\r\n  }\r\n\r\n  // set 2nd administrator, revoking previous\r\n  function setAdmin2(address a) public requireAdmin2 notSealed {\r\n    admin_address2 = a;\r\n  }\r\n  \r\n  //set the transaction hash of the final squiggle mint\r\n  function setMintTX(bytes32 t) public requireAdmin notSealed {\r\n    squiggle_mint_tx = t;\r\n  }\r\n    \r\n  // snowfro can add a message\r\n  function addMessage(string memory s) public requireAdmin notSealed {\r\n    require(msg.sender == snowfro_address,\"Must be initiated by Snowfro\");\r\n    message = s;\r\n  }\r\n\r\n  // set squiggle counts\r\n  function setCounts(address[] memory a, uint256[] memory c) public requireAdmin2 notSealed {\r\n    for (uint i=0;i\u003ca.length;i++) {\r\n      num_squiggles[a[i]] = c[i];\r\n    }\r\n  }\r\n\r\n  // Query the inscription list by address; returning true/false for whether that address has inscribed,\r\n  // and the number of squiggles under ownership (directly or through delegation)\r\n  function inscriptionByAddress(address a) public view returns (bool inscribed, uint256 squiggle_count) {\r\n    inscribed = has_inscribed[a];\r\n    squiggle_count = inscribed ? num_squiggles[a] : 0;\r\n  }\r\n  \r\n  function inscribeAddress() public payable notSealed {\r\n    require(msg.value \u003e= cost,\"Must send minimum cost (will be refunded)\");\r\n    require(!paused, \"Contract is paused\");\r\n    \r\n    address a = msg.sender;\r\n\r\n    require(has_inscribed[a]==false, \"Already inscribed\");\r\n    has_inscribed[a] = true;\r\n    inscriptions[num] = a;\r\n    num++;\r\n    emit eInscribe(a);\r\n  \r\n    //refund any amount sent\r\n    if (msg.value \u003e 0) {\r\n      payable(msg.sender).transfer(msg.value);\r\n    }\r\n  }\r\n  \r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"eInscribe\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"addMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin_address2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inscribeAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"inscriptionByAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"inscribed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"squiggle_count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"inscriptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"is_sealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lacma_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"message\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint10000th\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"num\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"num_squiggles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setAdmin2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"a\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"c\",\"type\":\"uint256[]\"}],\"name\":\"setCounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"setLACMAAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"t\",\"type\":\"bytes32\"}],\"name\":\"setMintTX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"p\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squiggle\",\"outputs\":[{\"internalType\":\"contract GenArt721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"squiggle_mint_tx\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Relic",
      "CompilerVersion": "v0.8.7+commit.e28d00a7",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://9103a17871caf38be0d10431086b49ac42baa449094f3fcf20df8e3422a39c7b"
    }
  ]
}
