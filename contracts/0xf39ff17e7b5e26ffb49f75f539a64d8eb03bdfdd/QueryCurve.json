{
  "TxHash": "0x5b19009ec13c534923eada49264fd13c9b14d250203d3ee46afebb2d661ce32c",
  "ContractAddress": "0xf39ff17e7b5e26ffb49f75f539a64d8eb03bdfdd",
  "Name": "QueryCurve",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-06-27\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma abicoder v2;\r\n\r\ninterface ICurveMetaRegister {\r\n\r\n    function get_balances(address _pool) external view returns (uint256[8] memory);\r\n\r\n    function get_underlying_balances(address _pool) external view returns (uint256[8] memory);\r\n\r\n    function get_coins(address _pool) external view returns (address[8] memory);\r\n\r\n    function get_underlying_coins(address _pool) external view returns (address[8] memory);\r\n\r\n    function is_meta(address _pool) external view returns (bool);\r\n\r\n    function get_n_coins(address _pool) external view returns (uint256);\r\n\r\n    function get_registry_handlers_from_pool(address _pool) external view returns (address[10] memory);\r\n\r\n}\r\n\r\ninterface ICurveMainBaseRegistry {\r\n    function get_underlying_balances(address _pool) external view returns (uint256[8] memory);\r\n    function get_underlying_coins(address _pool) external view returns (address[8] memory);\r\n    function get_coins(address _pool) external view returns (address[8] memory);\r\n}\r\n\r\ninterface ICurveV2Pool {\r\n\r\n    function gamma() external view returns (uint256);\r\n\r\n    function D() external view returns (uint256);\r\n\r\n    function price_scale(uint256 k) external view returns (uint256);\r\n\r\n    function fee_gamma() external view returns (uint256);\r\n\r\n    function mid_fee() external view returns (uint256);\r\n\r\n    function out_fee() external view returns (uint256);\r\n\r\n}\r\n\r\ninterface ICurveNGPool {\r\n\r\n    function offpeg_fee_multiplier() external view returns (uint256);\r\n\r\n    function stored_rates() external view returns (uint256[] memory);\r\n\r\n}\r\n\r\ninterface ICurveNG2Pool {\r\n\r\n    function stored_rates() external view returns (uint256[2] memory);\r\n\r\n}\r\n\r\ninterface ICurvePool {\r\n\r\n    function A() external view returns (uint256);\r\n\r\n    function fee() external view returns (uint256);\r\n\r\n    function price_scale() external view returns (uint256);\r\n\r\n    function get_virtual_price() external view returns (uint256);\r\n\r\n}\r\n\r\ninterface ICurveMetaPool {\r\n\r\n    function base_pool() external view returns (address);\r\n\r\n}\r\n\r\ninterface IRai {\r\n\r\n    function redemption_price_snap() external view returns (address);\r\n\r\n    function snappedRedemptionPrice() external view returns (uint256);\r\n\r\n}\r\n\r\ninterface AETH {\r\n\r\n    function ratio() external view returns (uint256);\r\n\r\n}\r\n\r\ninterface RETH {\r\n\r\n    function getExchangeRate() external view returns (uint256);\r\n\r\n}\r\n\r\ninterface ICurveSpecialPool {\r\n    function coins(uint256 _index) external view returns (address);\r\n}\r\n\r\ncontract QueryCurve {\r\n\r\n    address public metaRegister;\r\n    address public owner;\r\n\r\n    constructor(address register) {\r\n        metaRegister = register;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function get_balances(\r\n        address pool\r\n    ) public view returns (uint256[8] memory balances) {\r\n\r\n        bool is_meta = ICurveMetaRegister(metaRegister).is_meta(pool);\r\n        address[10] memory handlers = ICurveMetaRegister(metaRegister).get_registry_handlers_from_pool(pool);\r\n\r\n        if (!is_meta \u0026\u0026 0x46a8a9CF4Fc8e99EC3A14558ACABC1D93A27de68 == handlers[0]) {\r\n            // 兼容main registry里面的lending pool\r\n            return ICurveMainBaseRegistry(0x90E00ACe148ca3b23Ac1bC8C240C2a7Dd9c2d7f5).get_underlying_balances(pool);\r\n        } else {\r\n            return ICurveMetaRegister(metaRegister).get_balances(pool);\r\n        }\r\n\r\n    }\r\n\r\n    function get_tokens(\r\n        address pool\r\n    ) public view returns (address[8] memory tokens) {\r\n\r\n        if (pool == 0x7fC77b5c7614E1533320Ea6DDc2Eb61fa00A9714) {\r\n            return ICurveMetaRegister(metaRegister).get_coins(pool);\r\n        }\r\n\r\n        bool is_meta = ICurveMetaRegister(metaRegister).is_meta(pool);\r\n        address[10] memory handlers = ICurveMetaRegister(metaRegister).get_registry_handlers_from_pool(pool);\r\n        if (!is_meta \u0026\u0026 0x46a8a9CF4Fc8e99EC3A14558ACABC1D93A27de68 == handlers[0]) {\r\n            // 兼容main registry里面的lending pool\r\n            return ICurveMainBaseRegistry(0x90E00ACe148ca3b23Ac1bC8C240C2a7Dd9c2d7f5).get_underlying_coins(pool);\r\n        } else {\r\n            return ICurveMetaRegister(metaRegister).get_coins(pool);\r\n        }\r\n\r\n    }\r\n\r\n    function get_coins(\r\n        address pool\r\n    ) public view returns (address[8] memory tokens) {\r\n        return ICurveMetaRegister(metaRegister).get_coins(pool);\r\n    }\r\n\r\n    function get_params(\r\n        address pool\r\n    ) public view returns (int24 name, uint256 A, uint256 fee, uint256 D, uint256 gamma, uint256 price,\r\n        uint256 fee_gamma, uint256 mid_fee, uint256 out_fee, uint256 liquidity, uint256 gas_fee, uint256[] memory price_scale) {\r\n        //params[0] 1-v1  2-v2  3-NG\r\n        name = 1;\r\n        gamma = 0;\r\n        D = 0;\r\n        price = 0;\r\n        fee_gamma = 0;\r\n        mid_fee = 0;\r\n        out_fee = 0;\r\n        liquidity = 0;\r\n        gas_fee = 0;\r\n        uint256 n = ICurveMetaRegister(metaRegister).get_n_coins(pool);\r\n        price_scale = new uint256[](n - 1);\r\n        try ICurveV2Pool(pool).gamma() returns (uint256 result0) {\r\n            gamma = result0;\r\n            name = 2;\r\n            D = ICurveV2Pool(pool).D();\r\n            if (n \u003e 2) {\r\n                for (uint256 i = 0; i \u003c n - 1; i ++) {\r\n                    price_scale[i] = ICurveV2Pool(pool).price_scale(i);\r\n                }\r\n            } else {\r\n                price_scale[0] = ICurvePool(pool).price_scale();\r\n            }\r\n            fee_gamma = ICurveV2Pool(pool).fee_gamma();\r\n            mid_fee = ICurveV2Pool(pool).mid_fee();\r\n            out_fee = ICurveV2Pool(pool).out_fee();\r\n        } catch {\r\n            price = ICurvePool(pool).get_virtual_price();\r\n            try ICurveNGPool(pool).offpeg_fee_multiplier() returns (uint256 result1) {\r\n                gas_fee = result1;\r\n                name = 3;\r\n                price_scale = new uint256[](n);\r\n                if (pool == 0xDeBF20617708857ebe4F679508E7b7863a8A8EeE) {\r\n                    price_scale[0] = 10 ** 18;\r\n                    price_scale[1] = 10 ** 18;\r\n                    price_scale[2] = 10 ** 18;\r\n                } else if (pool == 0xEB16Ae0052ed37f479f7fe63849198Df1765a733) {\r\n                    price_scale[0] = 10 ** 18;\r\n                    price_scale[1] = 10 ** 18;\r\n                } else {\r\n                    price_scale = ICurveNGPool(pool).stored_rates();\r\n                }\r\n            } catch {\r\n                price_scale = new uint256[](n);\r\n                if (pool == 0x618788357D0EBd8A37e763ADab3bc575D54c2C7d) {\r\n                    address snap = IRai(pool).redemption_price_snap();\r\n                    liquidity = IRai(snap).snappedRedemptionPrice();\r\n                    price_scale[0] = liquidity / 10 ** 9;\r\n                    price_scale[1] = ICurvePool(ICurveMetaPool(pool).base_pool()).get_virtual_price();\r\n                } else if (\r\n                    pool == 0xBfAb6FA95E0091ed66058ad493189D2cB29385E6 ||\r\n                    pool == 0x21E27a5E5513D6e65C4f830167390997aA84843a ||\r\n                    pool == 0x59Ab5a5b5d617E478a2479B0cAD80DA7e2831492 ||\r\n                    pool == 0xfEF79304C80A694dFd9e603D624567D470e1a0e7 ||\r\n                    pool == 0x1539c2461d7432cc114b0903f1824079BfCA2C92\r\n                ) {\r\n                    uint256[2] memory price_scale0 = ICurveNG2Pool(pool).stored_rates();\r\n                    price_scale[0] = price_scale0[0];\r\n                    price_scale[1] = price_scale0[1];\r\n                } else if (pool == 0xA96A65c051bF88B4095Ee1f2451C2A9d43F53Ae2) {\r\n                    price_scale[0] = 10 ** 18;\r\n                    price_scale[1] = 10 ** 36 / AETH(ICurveSpecialPool(pool).coins(1)).ratio();\r\n                } else if (pool == 0xF9440930043eb3997fc70e1339dBb11F341de7A8) {\r\n                    price_scale[0] = 10 ** 18;\r\n                    price_scale[1] = RETH(ICurveSpecialPool(pool).coins(1)).getExchangeRate();\r\n                }\r\n            }\r\n        }\r\n        A = ICurvePool(pool).A();\r\n        fee = ICurvePool(pool).fee();\r\n\r\n    }\r\n\r\n    function setRegister(address newRegister) public {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        metaRegister = newRegister;\r\n    }\r\n\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"register\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"get_balances\",\"outputs\":[{\"internalType\":\"uint256[8]\",\"name\":\"balances\",\"type\":\"uint256[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"get_coins\",\"outputs\":[{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"get_params\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"name\",\"type\":\"int24\"},{\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"D\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee_gamma\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mid_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"out_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"price_scale\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"get_tokens\",\"outputs\":[{\"internalType\":\"address[8]\",\"name\":\"tokens\",\"type\":\"address[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metaRegister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRegister\",\"type\":\"address\"}],\"name\":\"setRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "QueryCurve",
      "CompilerVersion": "v0.8.17+commit.8df45f5f",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000f98b45fa17de75fb1ad0e7afd971b0ca00e379fc",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://89c114f46beb44deb5dbdc69721ad38f343443ceda59d2fc2794e7cddc9b2d7c"
    }
  ]
}
