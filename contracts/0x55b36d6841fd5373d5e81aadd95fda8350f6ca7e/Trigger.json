{
  "TxHash": "0xaeae4da0f810886a5ef077209a22989725010f6217b83f2af158b2f726c4e586",
  "ContractAddress": "0x55b36d6841fd5373d5e81aadd95fda8350f6ca7e",
  "Name": "Trigger",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "pragma solidity ^0.8.13;\r\n\r\nabstract contract Ownable {\r\n    address public owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        emit OwnershipTransferred(owner, newOwner);    \r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// --------------------------------------------------------------------------------------\r\n//\r\n// Trigger 031/08/2022 | SPDX-License-Identifier: MIT\r\n// Designed by, DeGatchi (https://github.com/DeGatchi).\r\n//\r\n// --------------------------------------------------------------------------------------\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint amount) external returns (bool);\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n    function name() external returns (string memory);\r\n    function symbol() external returns (string memory);\r\n}\r\n\r\ninterface IFactory {\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n}\r\n\r\ninterface IPair {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n}\r\n\r\ninterface IUniV2 {\r\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\r\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external pure returns (uint256 amountOut);\r\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\r\n}\r\n\r\nerror Fail();\r\ncontract Trigger is Ownable {\r\n\r\n\r\n\r\n    /// \u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Getters \u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c ///\r\n    \r\n    struct Reserves {\r\n        uint112 reserves0;\r\n        uint112 reserves1;\r\n    }\r\n\r\n    struct Pair {\r\n        address pair;\r\n        address t0;\r\n        address t1;\r\n        uint128 r0;\r\n        uint128 r1;\r\n    }\r\n\r\n    /// @notice Returns the reserves of each pair given.\r\n    function getData(IPair[] calldata p) external view returns(Reserves[] memory r){\r\n        r = new Reserves[](p.length);\r\n        for (uint i; i \u003c p.length;) {  \r\n            (r[i].reserves0, r[i].reserves1, ) = p[i].getReserves();\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the pair length of each factory given.\r\n    function getFactoryLen(IFactory[] calldata factory) external view returns(uint[] memory l) {\r\n        l = new uint[](factory.length);\r\n        for (uint i; i \u003c factory.length; ) {\r\n            l[i] = factory[i].allPairsLength();\r\n            unchecked { ++i; }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns pairs `from` to `to` for a factory.\r\n    function getFactoryPairs(IFactory factory, uint from, uint to) external view returns(Pair[] memory pairs) {\r\n        uint len = to - from;\r\n        uint counter;\r\n        pairs = new Pair[](len);\r\n\r\n        for (uint i = from; i \u003c to;) {\r\n            address pair = factory.allPairs(i);\r\n            (uint128 r0, uint128 r1, ) = IPair(pair).getReserves();\r\n            \r\n            pairs[counter] = Pair({\r\n                pair: pair,\r\n                t0: IPair(pair).token0(),\r\n                t1: IPair(pair).token1(),\r\n                r0: r0,\r\n                r1: r1\r\n            });\r\n\r\n            unchecked { \r\n                ++counter;\r\n                ++i; \r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Returns the ERC20 token bal of the contract.\r\n    function balanceOf(IERC20 token) external view returns(uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    /// @notice Returns ETH bal of the contract.\r\n    function contractBal() public view returns(uint256) {\r\n        return address(this).balance;\r\n    }   \r\n\r\n    /// \u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Withdraw \u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c\u003c ///\r\n\r\n    /// @notice Transfers ERC20 token out of contract.\r\n    function withdrawToken(IERC20 token, address to, uint256 amount, bool max) external onlyOwner returns(bool) {\r\n        if (max) amount = token.balanceOf(address(this));\r\n        token.transfer(to, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfers ETH out of contract.\r\n    function withdrawEth(address payable to) external onlyOwner returns(bool) {\r\n        require(address(this).balance \u003e 0, \"contract has an empty ETH balance\");\r\n        to.transfer(address(this).balance);\r\n        return true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPair[]\",\"name\":\"p\",\"type\":\"address[]\"}],\"name\":\"getData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"reserves0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserves1\",\"type\":\"uint112\"}],\"internalType\":\"struct Trigger.Reserves[]\",\"name\":\"r\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory[]\",\"name\":\"factory\",\"type\":\"address[]\"}],\"name\":\"getFactoryLen\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"l\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFactory\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getFactoryPairs\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"t1\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"r0\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"r1\",\"type\":\"uint128\"}],\"internalType\":\"struct Trigger.Pair[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"max\",\"type\":\"bool\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Trigger",
      "CompilerVersion": "v0.8.13+commit.abaa5c0e",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://a588ce93d81364c1e822426b41bec6d52516b515f36781e8cde82f51989df77d"
    }
  ]
}
