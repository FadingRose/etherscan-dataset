{
  "TxHash": "0xb678d40c726353af8e9424385abc106f90b72090fb53da0644753901e2a74964",
  "ContractAddress": "0xf57182e766a4e3aC2530F6C1271c4BFc8638A1c1",
  "Name": "EVA",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\nEVA AGI\r\nhttps://evaintelligence.ai/\r\n\r\nDisclaimer:\r\n- Eva is a research project. There are no guarantees that it will be possible to create a competitive product in the market in the time and with the available resources.\r\n- No direct or indirect contributor will be responsible for your possible profits or losses.\r\n- The EVA Token can be obtained on decentralized platforms that carry risks inherent to technology and market fluctuations.\r\n- By interacting with our services, you accept all responsibility.\r\n\r\n\r\n*/\r\n\r\npragma solidity \u003e=0.7.0 \u003c0.9.0;\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    \r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract EVA is IERC20, Ownable {\r\n\r\n    string private constant _name = \"EVA AGI Intelligence\";\r\n    string private constant _symbol = \"EVA AGI\";\r\n    uint8 private constant _decimals = 18;  \r\n    uint256 private _totalSupply = 120 * 10**6 * 10**18;\r\n    \r\n    address public seedAndPresale;\r\n\r\n    mapping(address =\u003e uint256) private balances;\r\n    mapping(address =\u003e mapping (address =\u003e uint256)) private allowed;\r\n    mapping(address =\u003e address) private boosterBuyingAllowed;\r\n    \r\n    // listing restrictions\r\n    uint256 private restrictionLiftTime;\r\n    uint256 private maxRestrictionAmount = 120 * 10**6 * 10**18;\r\n    mapping (address =\u003e bool) private isWhitelisted;\r\n    mapping (address =\u003e uint256) private lastTx;\r\n    // end restrictions\r\n    \r\n    using SafeMath for uint256;\r\n    \r\n    enum State {\r\n        Locked,\r\n        Restricted, // Bot protection for liquidity pool\r\n        Unlocked\r\n    }\r\n    State public state;\r\n    \r\n    constructor() {  \r\n        state = State.Locked;\r\n        balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }  \r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    \r\n    function totalSupply() public override view returns (uint256) {\r\n\t    return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public override view returns (uint256) {\r\n        return balances[tokenOwner];\r\n    }\r\n\r\n    function transfer(address receiver, uint256 numTokens) public override launchRestrict(msg.sender, receiver, numTokens) returns (bool) {\r\n        require(numTokens \u003e 0, \"Transfer amount must be greater than zero\");\r\n        require(numTokens \u003c= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        balances[receiver] = balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint256 numTokens) public override returns (bool) {\r\n        allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address delegate) public override view returns (uint256) {\r\n        return allowed[owner][delegate];\r\n    }\r\n\r\n    function transferFrom(address owner, address receiver, uint256 numTokens) public override launchRestrict(owner, receiver, numTokens) returns (bool) {\r\n        require(numTokens \u003c= balances[owner]);    \r\n        require(boosterBuyingAllowed[owner] == msg.sender || numTokens \u003c= allowed[owner][msg.sender]);\r\n    \r\n        balances[owner] = balances[owner].sub(numTokens);\r\n        if (boosterBuyingAllowed[owner] != msg.sender) {\r\n            allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\r\n            balances[receiver] = balances[receiver].add(numTokens);\r\n            emit Transfer(owner, receiver, numTokens);\r\n        } else {\r\n            _totalSupply = _totalSupply.sub(numTokens);\r\n            emit Transfer(owner, address(0), numTokens);\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    function boosterBuyingAllowance(address owner) public view returns (bool) {\r\n        return boosterBuyingAllowance(owner, msg.sender);\r\n    }\r\n    \r\n    function boosterBuyingAllowance(address owner, address delegate) public view returns (bool) {\r\n        if (boosterBuyingAllowed[owner] == delegate) return true;\r\n        else return false;\r\n    }\r\n    \r\n    function allowBuyingBoosters(address evac) public returns (bool) {\r\n        boosterBuyingAllowed[msg.sender] = evac;\r\n        return true;\r\n    }\r\n    \r\n    function setSeedAndPresale(address seedAndPresale_) public onlyOwner() {\r\n        seedAndPresale = seedAndPresale_;\r\n    }\r\n    \r\n    modifier ownerOrPresale {\r\n        require(owner() == msg.sender || seedAndPresale == msg.sender, \"Cannot burn tokens\");\r\n        _;\r\n    }\r\n    \r\n    function burn(uint256 numTokens) public ownerOrPresale() returns(bool) {\r\n        require(numTokens \u003c= balances[msg.sender]);\r\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\r\n        _totalSupply = _totalSupply.sub(numTokens);\r\n        emit Transfer(msg.sender, address(0), numTokens);\r\n        return true;\r\n    }\r\n    \r\n    // Security from bots\r\n\r\n    // enable/disable works only once, token never returns to Locked\r\n    function setBotProtection(bool enable) public onlyOwner() {\r\n        if (enable \u0026\u0026 state == State.Locked) state = State.Restricted;\r\n        if (!enable) state = State.Unlocked;\r\n    }\r\n\r\n    function setRestrictionAmount(uint256 amount) public onlyOwner() {\r\n        maxRestrictionAmount = amount;\r\n    }\r\n\r\n    function whitelistAccount(address account) public onlyOwner() {\r\n        isWhitelisted[account] = true;\r\n    }\r\n\r\n    modifier launchRestrict(address sender, address recipient, uint256 amount) {\r\n        if (state == State.Locked) {\r\n            require(sender == owner() || sender == seedAndPresale || isWhitelisted[sender], \"Tokens are locked\");\r\n        }\r\n        if (state == State.Restricted) {\r\n            require(amount \u003c= maxRestrictionAmount, \"EVA: amount greater than max limit in restricted mode\");\r\n            if (!isWhitelisted[sender] \u0026\u0026 !isWhitelisted[recipient]) {\r\n                require(lastTx[sender].add(60) \u003c= block.timestamp \u0026\u0026 lastTx[recipient].add(60) \u003c= block.timestamp, \"EVA: only one tx/min in restricted mode\");\r\n                lastTx[sender] = block.timestamp;\r\n                lastTx[recipient] = block.timestamp;\r\n            } else if (!isWhitelisted[recipient]) {\r\n                require(lastTx[recipient].add(60) \u003c= block.timestamp, \"EVA: only one tx/min in restricted mode\");\r\n                lastTx[recipient] = block.timestamp;\r\n            } else if (!isWhitelisted[sender]) {\r\n                require(lastTx[sender].add(60) \u003c= block.timestamp, \"EVA: only one tx/min in restricted mode\");\r\n                lastTx[sender] = block.timestamp;\r\n            }\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Bot security end\r\n}\r\n\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b \u003c= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c \u003e= a);\r\n      return c;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"evac\",\"type\":\"address\"}],\"name\":\"allowBuyingBoosters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"boosterBuyingAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"boosterBuyingAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedAndPresale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setBotProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setRestrictionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"seedAndPresale_\",\"type\":\"address\"}],\"name\":\"setSeedAndPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum EVA.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"whitelistAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "EVA",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "GNU GPLv2",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://5ba1ad5922ca432fa4670671e3c73c46926012557ee79ada6bc4f54ae13db6bb"
    }
  ]
}
