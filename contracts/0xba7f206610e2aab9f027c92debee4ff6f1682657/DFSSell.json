{
  "TxHash": "0xc3e6f7b7be9a3f5a1c7fc1e1b6aac0b2101e164c36a2b5b6260d952b8d6c37f3",
  "ContractAddress": "0xba7f206610e2aab9f027c92debee4ff6f1682657",
  "Name": "DFSSell",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.24;\n\n\n\n\n\n\n\n\n\n\ncontract MainnetActionsUtilAddresses {\n    address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\n    address internal constant DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e;\n    address internal constant TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2;\n}\n\n\n\n\n\n\n\ncontract ActionsUtilHelper is MainnetActionsUtilAddresses {\n}\n\n\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n    address internal constant PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D;\n}\n\n\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance \u003c amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance \u003c value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success \u0026\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026 address(token).code.length \u003e 0;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    /// @dev Deprecated method, selfdestruct will soon just send eth\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\n\n\n\ncontract DFSRegistry is AdminAuth {\n    error EntryAlreadyExistsError(bytes4);\n    error EntryNonExistentError(bytes4);\n    error EntryNotInChangeError(bytes4);\n    error ChangeNotReadyError(uint256,uint256);\n    error EmptyPrevAddrError(bytes4);\n    error AlreadyInContractChangeError(bytes4);\n    error AlreadyInWaitPeriodChangeError(bytes4);\n\n    event AddNewContract(address,bytes4,address,uint256);\n    event RevertToPreviousAddress(address,bytes4,address,address);\n    event StartContractChange(address,bytes4,address,address);\n    event ApproveContractChange(address,bytes4,address,address);\n    event CancelContractChange(address,bytes4,address,address);\n    event StartWaitPeriodChange(address,bytes4,uint256);\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes4 =\u003e Entry) public entries;\n    mapping(bytes4 =\u003e address) public previousAddresses;\n\n    mapping(bytes4 =\u003e address) public pendingAddresses;\n    mapping(bytes4 =\u003e uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registered address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes4 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registered\n    /// @param _id Id of contract\n    function isRegistered(bytes4 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes4 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        if (entries[_id].exists){\n            revert EntryAlreadyExistsError(_id);\n        }\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\n    }\n\n    /// @notice Reverts to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\n        if (!(entries[_id].exists)){\n            revert EntryNonExistentError(_id);\n        }\n        if (previousAddresses[_id] == address(0)){\n            revert EmptyPrevAddrError(_id);\n        }\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inWaitPeriodChange){\n            revert AlreadyInWaitPeriodChangeError(_id);\n        }\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp \u003c (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inContractChange){\n            revert AlreadyInContractChangeError(_id);\n        }\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp \u003c (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\n    }\n}\n\n\n\n\n\n\n\nabstract contract DSAuthority {\n    function canCall(\n        address src,\n        address dst,\n        bytes4 sig\n    ) public view virtual returns (bool);\n}\n\n\n\n\n\n\n\ncontract DSAuthEvents {\n    event LogSetAuthority(address indexed authority);\n    event LogSetOwner(address indexed owner);\n}\n\ncontract DSAuth is DSAuthEvents {\n    DSAuthority public authority;\n    address public owner;\n\n    constructor() {\n        owner = msg.sender;\n        emit LogSetOwner(msg.sender);\n    }\n\n    function setOwner(address owner_) public auth {\n        owner = owner_;\n        emit LogSetOwner(owner);\n    }\n\n    function setAuthority(DSAuthority authority_) public auth {\n        authority = authority_;\n        emit LogSetAuthority(address(authority));\n    }\n\n    modifier auth {\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\n        _;\n    }\n\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n        if (src == address(this)) {\n            return true;\n        } else if (src == owner) {\n            return true;\n        } else if (authority == DSAuthority(address(0))) {\n            return false;\n        } else {\n            return authority.canCall(src, address(this), sig);\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract DSNote {\n    event LogNote(\n        bytes4 indexed sig,\n        address indexed guy,\n        bytes32 indexed foo,\n        bytes32 indexed bar,\n        uint256 wad,\n        bytes fax\n    ) anonymous;\n\n    modifier note {\n        bytes32 foo;\n        bytes32 bar;\n\n        assembly {\n            foo := calldataload(4)\n            bar := calldataload(36)\n        }\n\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n\n        _;\n    }\n}\n\n\n\n\n\n\n\n\nabstract contract DSProxy is DSAuth, DSNote {\n    DSProxyCache public cache; // global cache for contracts\n\n    constructor(address _cacheAddr) {\n        if (!(setCache(_cacheAddr))){\n            require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\n        }\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    // use the proxy to execute calldata _data on contract _code\n    function execute(bytes memory _code, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (address target, bytes32 response);\n\n    function execute(address _target, bytes memory _data)\n        public\n        payable\n        virtual\n        returns (bytes32 response);\n\n    //set new cache\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\n}\n\ncontract DSProxyCache {\n    mapping(bytes32 =\u003e address) cache;\n\n    function read(bytes memory _code) public view returns (address) {\n        bytes32 hash = keccak256(_code);\n        return cache[hash];\n    }\n\n    function write(bytes memory _code) public returns (address target) {\n        assembly {\n            target := create(0, add(_code, 0x20), mload(_code))\n            switch iszero(extcodesize(target))\n                case 1 {\n                    // throw if contract failed to deploy\n                    revert(0, 0)\n                }\n        }\n        bytes32 hash = keccak256(_code);\n        cache[hash] = target;\n    }\n}\n\n\n\n\n\n\n\ninterface ISafe {\n    enum Operation {\n        Call,\n        DelegateCall\n    }\n\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external;\n\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) external payable returns (bool success);\n\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Operation operation\n    ) external returns (bool success);\n\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) external view;\n\n    function checkNSignatures(\n        address executor,\n        bytes32 dataHash,\n        bytes memory /* data */,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) external view;\n\n    function approveHash(bytes32 hashToApprove) external;\n\n    function domainSeparator() external view returns (bytes32);\n\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) external view returns (bytes32);\n\n    function nonce() external view returns (uint256);\n\n    function setFallbackHandler(address handler) external;\n\n    function getOwners() external view returns (address[] memory);\n\n    function isOwner(address owner) external view returns (bool);\n\n    function getThreshold() external view returns (uint256);\n\n    function enableModule(address module) external;\n\n    function isModuleEnabled(address module) external view returns (bool);\n\n    function disableModule(address prevModule, address module) external;\n\n    function getModulesPaginated(\n        address start,\n        uint256 pageSize\n    ) external view returns (address[] memory array, address next);\n}\n\n\n\n\n\n\n\ninterface IDSProxyFactory {\n    function isProxy(address _proxy) external view returns (bool);\n}\n\n\n\n\n\n\n\ncontract MainnetProxyFactoryAddresses {\n    address internal constant PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997;\n}\n\n\n\n\n\n\n\ncontract DSProxyFactoryHelper is MainnetProxyFactoryAddresses {\n}\n\n\n\n\n\n\n\n\n\ncontract CheckWalletType is DSProxyFactoryHelper {\n    function isDSProxy(address _proxy) public view returns (bool) {\n        return IDSProxyFactory(PROXY_FACTORY_ADDR).isProxy(_proxy);\n    }\n}\n\n\n\n\n\n\n\ncontract DefisaverLogger {\n    event RecipeEvent(\n        address indexed caller,\n        string indexed logName\n    );\n\n    event ActionDirectEvent(\n        address indexed caller,\n        string indexed logName,\n        bytes data\n    );\n\n    function logRecipeEvent(\n        string memory _logName\n    ) public {\n        emit RecipeEvent(msg.sender, _logName);\n    }\n\n    function logActionDirectEvent(\n        string memory _logName,\n        bytes memory _data\n    ) public {\n        emit ActionDirectEvent(msg.sender, _logName, _data);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nabstract contract ActionBase is AdminAuth, ActionsUtilHelper, CheckWalletType {\n    event ActionEvent(\n        string indexed logName,\n        bytes data\n    );\n\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n\n    DefisaverLogger public constant logger = DefisaverLogger(\n        DFS_LOGGER_ADDR\n    );\n\n    //Wrong sub index value\n    error SubIndexValueError();\n    //Wrong return index value\n    error ReturnIndexValueError();\n\n    /// @dev Subscription params index range [128, 255]\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n\n    /// @dev Return params index range [1, 127]\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n\n    /// @dev If the input value should not be replaced\n    uint8 public constant NO_PARAM_MAPPING = 0;\n\n    /// @dev We need to parse Flash loan actions in a different way\n    enum ActionType { FL_ACTION, STANDARD_ACTION, FEE_ACTION, CHECK_ACTION, CUSTOM_ACTION }\n\n    /// @notice Parses inputs and runs the implemented action through a user wallet\n    /// @dev Is called by the RecipeExecutor chaining actions together\n    /// @param _callData Array of input values each value encoded as bytes\n    /// @param _subData Array of subscribed vales, replaces input values if specified\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n    /// @return Returns a bytes32 value through user wallet, each actions implements what that value is\n    function executeAction(\n        bytes memory _callData,\n        bytes32[] memory _subData,\n        uint8[] memory _paramMapping,\n        bytes32[] memory _returnValues\n    ) public payable virtual returns (bytes32);\n\n    /// @notice Parses inputs and runs the single implemented action through a user wallet\n    /// @dev Used to save gas when executing a single action directly\n    function executeActionDirect(bytes memory _callData) public virtual payable;\n\n    /// @notice Returns the type of action we are implementing\n    function actionType() public pure virtual returns (uint8);\n\n\n    //////////////////////////// HELPER METHODS ////////////////////////////\n\n    /// @notice Given an uint256 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamUint(\n        uint _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (uint) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = uint256(_subData[getSubIndex(_mapType)]);\n            }\n        }\n\n        return _param;\n    }\n\n\n    /// @notice Given an addr input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamAddr(\n        address _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal view returns (address) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n            } else {\n                /// @dev The last two values are specially reserved for proxy addr and owner addr\n                if (_mapType == 254) return address(this); // wallet address\n                if (_mapType == 255) return fetchOwnersOrWallet(); // owner if 1/1 wallet or the wallet itself\n\n                _param = address(uint160(uint256(_subData[getSubIndex(_mapType)])));\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Given an bytes32 input, injects return/sub values if specified\n    /// @param _param The original input value\n    /// @param _mapType Indicated the type of the input in paramMapping\n    /// @param _subData Array of subscription data we can replace the input value with\n    /// @param _returnValues Array of subscription data we can replace the input value with\n    function _parseParamABytes32(\n        bytes32 _param,\n        uint8 _mapType,\n        bytes32[] memory _subData,\n        bytes32[] memory _returnValues\n    ) internal pure returns (bytes32) {\n        if (isReplaceable(_mapType)) {\n            if (isReturnInjection(_mapType)) {\n                _param = (_returnValues[getReturnIndex(_mapType)]);\n            } else {\n                _param = _subData[getSubIndex(_mapType)];\n            }\n        }\n\n        return _param;\n    }\n\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\n    /// @param _type Indicated the type of the input\n    function isReplaceable(uint8 _type) internal pure returns (bool) {\n        return _type != NO_PARAM_MAPPING;\n    }\n\n    /// @notice Checks if the paramMapping value is in the return value range\n    /// @param _type Indicated the type of the input\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n        return (_type \u003e= RETURN_MIN_INDEX_VALUE) \u0026\u0026 (_type \u003c= RETURN_MAX_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in return array value\n    /// @param _type Indicated the type of the input\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n        if (!(isReturnInjection(_type))){\n            revert SubIndexValueError();\n        }\n\n        return (_type - RETURN_MIN_INDEX_VALUE);\n    }\n\n    /// @notice Transforms the paramMapping value to the index in sub array value\n    /// @param _type Indicated the type of the input\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n        if (_type \u003c SUB_MIN_INDEX_VALUE){\n            revert ReturnIndexValueError();\n        }\n        return (_type - SUB_MIN_INDEX_VALUE);\n    }\n\n    function fetchOwnersOrWallet() internal view returns (address) {\n        if (isDSProxy(address(this))) \n            return DSProxy(payable(address(this))).owner();\n\n        // if not DSProxy, we assume we are in context of Safe\n        address[] memory owners = ISafe(address(this)).getOwners();\n        return owners.length == 1 ? owners[0] : address(this);\n    }\n}\n\n\n\n\n\n\n\n\n\ncontract StrategyModel {\n        \n    /// @dev Group of strategies bundled together so user can sub to multiple strategies at once\n    /// @param creator Address of the user who created the bundle\n    /// @param strategyIds Array of strategy ids stored in StrategyStorage\n    struct StrategyBundle {\n        address creator;\n        uint64[] strategyIds;\n    }\n\n    /// @dev Template/Class which defines a Strategy\n    /// @param name Name of the strategy useful for logging what strategy is executing\n    /// @param creator Address of the user which created the strategy\n    /// @param triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    /// @param continuous If the action is repeated (continuos) or one time\n    struct Strategy {\n        string name;\n        address creator;\n        bytes4[] triggerIds;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n        bool continuous;\n    }\n\n    /// @dev List of actions grouped as a recipe\n    /// @param name Name of the recipe useful for logging what recipe is executing\n    /// @param callData Array of calldata inputs to each action\n    /// @param subData Used only as part of strategy, subData injected from StrategySub.subData\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    struct Recipe {\n        string name;\n        bytes[] callData;\n        bytes32[] subData;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n    }\n\n    /// @dev Actual data of the sub we store on-chain\n    /// @dev In order to save on gas we store a keccak256(StrategySub) and verify later on\n    /// @param walletAddr Address of the users smart wallet/proxy\n    /// @param isEnabled Toggle if the subscription is active\n    /// @param strategySubHash Hash of the StrategySub data the user inputted\n    struct StoredSubData {\n        bytes20 walletAddr; // address but put in bytes20 for gas savings\n        bool isEnabled;\n        bytes32 strategySubHash;\n    }\n\n    /// @dev Instance of a strategy, user supplied data\n    /// @param strategyOrBundleId Id of the strategy or bundle, depending on the isBundle bool\n    /// @param isBundle If true the id points to bundle, if false points directly to strategyId\n    /// @param triggerData User supplied data needed for checking trigger conditions\n    /// @param subData User supplied data used in recipe\n    struct StrategySub {\n        uint64 strategyOrBundleId;\n        bool isBundle;\n        bytes[] triggerData;\n        bytes32[] subData;\n    }\n\n    /// @dev Data needed when signing relay transaction\n    /// @param maxTxCostInFeeToken Max tx cost user is willing to pay in fee token\n    /// @param feeToken Address of the token user is willing to pay fee in\n    /// @param tokenPriceInEth Price of the token in ETH\n    /// @param deadline Deadline for the relay transaction to be executed\n    /// @param shouldTakeFeeFromPosition Flag to indicate if fee should be taken from position, otherwise from EOA/wallet\n    struct TxSaverSignedData {\n        uint256 maxTxCostInFeeToken;\n        address feeToken;\n        uint256 tokenPriceInEth;\n        uint256 deadline;\n        bool shouldTakeFeeFromPosition;\n    }\n}\n\n\n\n\n\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x + y;\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x - y;\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x \u003c= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x \u003e= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x \u003c= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x \u003e= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\n\n\n\n\ncontract DFSExchangeData {\n\n    struct OffchainData {\n        address wrapper; // dfs wrapper address for the aggregator (must be in WrapperExchangeRegistry)\n        address exchangeAddr; // exchange address we are calling to execute the order (must be in ExchangeAggregatorRegistry)\n        address allowanceTarget; // exchange aggregator contract we give allowance to\n        uint256 price; // expected price that the aggregator sent us\n        uint256 protocolFee; // deprecated (used as a separate fee amount for 0x v1)\n        bytes callData; // 0ff-chain calldata the aggregator gives to perform the swap\n    }\n\n    struct ExchangeData {\n        address srcAddr; // source token address (which we're selling)\n        address destAddr; // destination token address (which we're buying)\n        uint256 srcAmount; // amount of source token in token decimals\n        uint256 destAmount; // amount of bought token in token decimals\n        uint256 minPrice; // minPrice we are expecting (checked in DFSExchangeCore)\n        uint256 dfsFeeDivider; // service fee divider\n        address user; // currently deprecated (used to check custom fees for the user)\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n\n    struct InjectedExchangeData {\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n}\n\n\n\n\n\n\n\nabstract contract IWETH {\n    function allowance(address, address) public virtual view returns (uint256);\n\n    function balanceOf(address) public virtual view returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public virtual returns (bool);\n\n    function deposit() public payable virtual;\n\n    function withdraw(uint256) public virtual;\n}\n\n\n\n\n\n\n\n\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Only approves the amount if allowance is lower than amount, does not decrease allowance\n    function approveToken(\n        address _tokenAddr,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_tokenAddr == ETH_ADDR) return;\n\n        if (IERC20(_tokenAddr).allowance(address(this), _to) \u003c _amount) {\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\n        }\n    }\n\n    function pullTokensIfNeeded(\n        address _token,\n        address _from,\n        uint256 _amount\n    ) internal returns (uint256) {\n        // handle max uint amount\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, _from);\n        }\n\n        if (_from != address(0) \u0026\u0026 _from != address(this) \u0026\u0026 _token != ETH_ADDR \u0026\u0026 _amount != 0) {\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        }\n\n        return _amount;\n    }\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, address(this));\n        }\n\n        if (_to != address(0) \u0026\u0026 _to != address(this) \u0026\u0026 _amount != 0) {\n            if (_token != ETH_ADDR) {\n                IERC20(_token).safeTransfer(_to, _amount);\n            } else {\n                (bool success, ) = _to.call{value: _amount}(\"\");\n                require(success, \"Eth send fail\");\n            }\n        }\n\n        return _amount;\n    }\n\n    function depositWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).deposit{value: _amount}();\n    }\n\n    function withdrawWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).withdraw(_amount);\n    }\n\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n        if (_tokenAddr == ETH_ADDR) {\n            return _acc.balance;\n        } else {\n            return IERC20(_tokenAddr).balanceOf(_acc);\n        }\n    }\n\n    function getTokenDecimals(address _token) internal view returns (uint256) {\n        if (_token == ETH_ADDR) return 18;\n\n        return IERC20(_token).decimals();\n    }\n}\n\n\n\n\n\n\n\n\n\ncontract DFSExchangeHelper {\n    \n    using TokenUtils for address;\n    \n    error InvalidOffchainData();\n    error OutOfRangeSlicingError();\n    //Order success but amount 0\n    error ZeroTokensSwapped();\n\n    using SafeERC20 for IERC20;\n\n    function sendLeftover(\n        address _srcAddr,\n        address _destAddr,\n        address payable _to\n    ) internal {\n        // clean out any eth leftover\n        TokenUtils.ETH_ADDR.withdrawTokens(_to, type(uint256).max);\n\n        _srcAddr.withdrawTokens(_to, type(uint256).max);\n        _destAddr.withdrawTokens(_to, type(uint256).max);\n    }\n\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n        if (bs.length \u003c start + 32){\n            revert OutOfRangeSlicingError();\n        }\n\n        uint256 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n\n        return x;\n    }\n\n    function writeUint256(\n        bytes memory _b,\n        uint256 _index,\n        uint256 _input\n    ) internal pure {\n        if (_b.length \u003c _index + 32) {\n            revert InvalidOffchainData();\n        }\n\n        bytes32 input = bytes32(_input);\n\n        _index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(_b, _index), input)\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetExchangeAddresses {\n\n    address internal constant FEE_RECIPIENT_ADDRESS = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n    address internal constant DISCOUNT_ADDRESS = 0x84fE6D4aaD0CA1ce3af7153eecd11729fa7a74f0;\n    address internal constant WRAPPER_EXCHANGE_REGISTRY = 0x653893375dD1D942D2C429caB51641F2bf14d426;\n    address internal constant EXCHANGE_AGGREGATOR_REGISTRY_ADDR = 0x7b67D9D7993A258C4b2C31CDD9E6cbD5Fb674985;\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant TOKEN_GROUP_REGISTRY = 0xcA49e64FE1FE8be40ED30F682edA1b27a6c8611c;\n    address internal constant BYTES_TRANSIENT_STORAGE_ADDR = 0xB3FE6f712c8B8c64CD2780ce714A36e7640DDf0f;\n}\n\n\n\n\n\n\n\ncontract ExchangeHelper is MainnetExchangeAddresses {\n}\n\n\n\n\n\n\n\ncontract ExchangeAggregatorRegistry is AdminAuth {\n    mapping(address =\u003e bool) public exchangeTargetAddresses;\n\n    error EmptyAddrError();\n\n    function setExchangeTargetAddr(address _exchangeAddr, bool _state) public onlyOwner {\n        if(_exchangeAddr == address(0)) {\n\t\t\trevert EmptyAddrError();\n\t\t}\n\n        exchangeTargetAddresses[_exchangeAddr] = _state;\n    }\n\n    function isExchangeAggregatorAddr(address _exchangeAddr) public view returns (bool) {\n        return exchangeTargetAddresses[_exchangeAddr];\n    }\n}\n\n\n\n\n\n\ncontract WrapperExchangeRegistry is AdminAuth {\n\tmapping(address =\u003e bool) private wrappers;\n\n\terror EmptyAddrError();\n\n\tfunction addWrapper(address _wrapper) public onlyOwner {\n\t\tif(_wrapper == address(0)) {\n\t\t\trevert EmptyAddrError();\n\t\t}\n\n\t\twrappers[_wrapper] = true;\n\t}\n\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\n\t\twrappers[_wrapper] = false;\n\t}\n\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\n\t\treturn wrappers[_wrapper];\n\t}\n}\n\n\n\n\n\n\n\ninterface IExchangeV3 {\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n}\n\n\n\n\n\n\n\nabstract contract IOffchainWrapper is DFSExchangeData {\n    function takeOrder(\n        ExchangeData memory _exData\n    ) virtual public payable returns (bool success, uint256);\n}\n\n\n\n\n\n\n\ncontract Discount is AdminAuth{\n    mapping(address =\u003e bool) public serviceFeesDisabled;\n\n    function reenableServiceFee(address _wallet) public onlyOwner{\n        serviceFeesDisabled[_wallet] = false;\n    }\n\n    function disableServiceFee(address _wallet) public onlyOwner{\n        serviceFeesDisabled[_wallet] = true;\n    }\n}\n\n\n\n\n\n\n\n\ncontract FeeRecipient is AdminAuth {\n\n    address public wallet;\n\n    constructor(address _newWallet) {\n        wallet = _newWallet;\n    }\n\n    function getFeeAddr() public view returns (address) {\n        return wallet;\n    }\n\n    function changeWalletAddr(address _newWallet) public onlyOwner {\n        wallet = _newWallet;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract DFSExchangeCore is\n    DSMath,\n    DFSExchangeHelper,\n    DFSExchangeData,\n    ExchangeHelper,\n    StrategyModel\n{   \n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    error SlippageHitError(uint256 amountBought, uint256 amountExpected);\n    error InvalidWrapperError(address wrapperAddr);\n\n    ExchangeAggregatorRegistry internal constant exchangeAggRegistry = ExchangeAggregatorRegistry(EXCHANGE_AGGREGATOR_REGISTRY_ADDR);\n    WrapperExchangeRegistry internal constant wrapperRegistry = WrapperExchangeRegistry(WRAPPER_EXCHANGE_REGISTRY);\n\n    /// @notice Internal method that performs a sell on offchain aggregator/on-chain\n    /// @dev Useful for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    function _sell(ExchangeData memory exData) internal returns (address wrapperAddress, uint256 destAmount) {\n        (wrapperAddress, destAmount, ) = _sell(exData, address(this));\n    }\n\n    /// @notice Internal method that performs a sell on offchain aggregator/on-chain\n    /// @dev Useful for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    /// @return (address, uint, bool) Address of the wrapper used and destAmount and if there was fee\n    function _sell(ExchangeData memory exData, address smartWallet) internal returns (address, uint256, bool) {\n        uint256 amountWithoutFee = exData.srcAmount;\n        uint256 destBalanceBefore = exData.destAddr.getBalance(address(this));\n\n        _takeDfsExchangeFee(exData, smartWallet);\n\n        address wrapperAddr = _executeSwap(exData);\n\n        uint256 destBalanceAfter = exData.destAddr.getBalance(address(this));\n        uint256 amountBought = destBalanceAfter - destBalanceBefore;\n\n        // check slippage\n        if (amountBought \u003c wmul(exData.minPrice, exData.srcAmount)){\n            revert SlippageHitError(amountBought, wmul(exData.minPrice, exData.srcAmount));\n        }\n\n        bool hasFee = exData.srcAmount != amountWithoutFee;\n        // revert back exData changes to keep it consistent\n        exData.srcAmount = amountWithoutFee;\n\n        return (wrapperAddr, amountBought, hasFee);\n    }\n\n    /// @notice Takes order from exchange aggregator and returns bool indicating if it is successful\n    /// @param _exData Exchange data\n    function offChainSwap(ExchangeData memory _exData)\n        internal\n        returns (bool success, uint256)\n    {\n        /// @dev Check if exchange address is in our registry to not call an untrusted contract\n        if (!exchangeAggRegistry.isExchangeAggregatorAddr(_exData.offchainData.exchangeAddr)) {\n            return (false, 0);\n        }\n\n        /// @dev Check if we have the address is a registered wrapper\n        if (!wrapperRegistry.isWrapper(_exData.offchainData.wrapper)) {\n            return (false, 0);\n        }\n\n        // send src amount\n        IERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n\n        return IOffchainWrapper(_exData.offchainData.wrapper).takeOrder(_exData);\n    }\n\n    /// @notice Calls wrapper contract for exchange to preform an on-chain swap\n    /// @param _exData Exchange data struct\n    /// @return swappedTokens Dest amount of tokens we get after sell\n    function onChainSwap(ExchangeData memory _exData)\n        internal\n        returns (uint256 swappedTokens)\n    {\n        if (!(WrapperExchangeRegistry(WRAPPER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper))){\n            revert InvalidWrapperError(_exData.wrapper);\n        }\n\n        IERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n\n        swappedTokens = IExchangeV3(_exData.wrapper).sell(\n            _exData.srcAddr,\n            _exData.destAddr,\n            _exData.srcAmount,\n            _exData.wrapperData\n        );\n    }\n\n    function _takeDfsExchangeFee(ExchangeData memory exData, address smartWallet) internal {\n        if (exData.dfsFeeDivider != 0) {\n            exData.srcAmount = sub(exData.srcAmount, getFee(\n                exData.srcAmount,\n                smartWallet,\n                exData.srcAddr,\n                exData.dfsFeeDivider\n            ));\n        }\n    }\n\n    function _executeSwap(ExchangeData memory exData) internal returns (address wrapperAddr) {\n        wrapperAddr = exData.offchainData.wrapper;\n        bool offChainSwapSuccess;\n\n         // Try offchain aggregator first and then fallback on specific wrapper\n        if (exData.offchainData.price \u003e 0) {\n            (offChainSwapSuccess, ) = offChainSwap(exData);\n        }\n\n        // fallback to desired wrapper if offchain aggregator failed\n        if (!offChainSwapSuccess) {\n            onChainSwap(exData);\n            wrapperAddr = exData.wrapper;\n        }\n    }\n\n    /// @notice Takes a feePercentage and sends it to wallet\n    /// @param _amount Amount of the whole trade\n    /// @param _wallet Address of the users wallet (safe or dsproxy)\n    /// @param _token Address of the token\n    /// @param _dfsFeeDivider Dfs fee divider\n    /// @return feeAmount Amount owner earned on the fee\n    function getFee(\n        uint256 _amount,\n        address _wallet,\n        address _token,\n        uint256 _dfsFeeDivider\n    ) internal returns (uint256 feeAmount) {\n        if (_dfsFeeDivider != 0 \u0026\u0026 Discount(DISCOUNT_ADDRESS).serviceFeesDisabled(_wallet)) {\n            _dfsFeeDivider = 0;\n        }\n\n        if (_dfsFeeDivider == 0) {\n            feeAmount = 0;\n        } else {\n            feeAmount = _amount / _dfsFeeDivider;\n            address walletAddr = FeeRecipient(FEE_RECIPIENT_ADDRESS).getFeeAddr();\n            _token.withdrawTokens(walletAddr, feeAmount);\n        }\n    }\n}\n\n\n\n\n\n\n\ninterface ITxSaverBytesTransientStorage {\n    function getFeeType() external view returns (uint256);\n    function getBytesTransiently() external view returns (bytes memory result);\n}\n\n\n\n\n\n\n\ncontract MainnetUtilAddresses {\n    address internal refillCaller = 0x33fDb79aFB4456B604f376A45A546e7ae700e880;\n    address internal feeAddr = 0x76720aC2574631530eC8163e4085d6F98513fb27;\n\n    address internal constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\n    address internal constant UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address internal constant MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n    address internal constant AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\n    address internal constant AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;\n    address internal constant SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE;\n\n    address internal constant DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed;\n\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address internal constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address internal constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    address internal constant WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    address internal constant CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n    address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address internal constant FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06;\n\n    address internal constant UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    address internal constant UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6;\n\n    address internal constant FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n\n    // not needed on mainnet\n    address internal constant DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address public constant CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf;\n    \n    address public constant TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479;\n\n}\n\n\n\n\n\n\n\ncontract UtilHelper is MainnetUtilAddresses{\n}\n\n\n\n\n\n\n\n\n\ncontract TxSaverGasCostCalc is DSMath, UtilHelper {\n    using TokenUtils for address;\n    \n    // only support token with decimals \u003c= 18\n    error TokenDecimalsTooHigh(uint256 decimals);\n    // when injecting price, price must be greater than 0\n    error ZeroTokenPriceInEthError();\n\n    function calcGasCostUsingInjectedPrice(\n        uint256 _gasUsed,\n        address _feeToken,\n        uint256 _tokenPriceInEth,\n        uint256 _l1GasCostInEth\n    ) internal view returns (uint256 txCost) {\n        // can't use more gas than the block gas limit\n        if (_gasUsed \u003e block.gaslimit) {\n            _gasUsed = block.gaslimit;\n        }\n\n        // calc gas used\n        txCost = (_gasUsed * tx.gasprice) + _l1GasCostInEth;    \n\n        // convert to token amount\n        if (_feeToken != TokenUtils.WETH_ADDR) {\n            uint256 tokenDecimals = _feeToken.getTokenDecimals();\n\n            if (tokenDecimals \u003e 18) revert TokenDecimalsTooHigh(tokenDecimals);\n\n            if (_tokenPriceInEth == 0) revert ZeroTokenPriceInEthError();\n\n            txCost = wdiv(txCost, _tokenPriceInEth) / (10**(18 - tokenDecimals));\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract DFSExchangeWithTxSaver is DFSExchangeCore, TxSaverGasCostCalc\n{   \n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    bytes4 internal constant TX_SAVER_EXECUTOR_ID = bytes4(keccak256(\"TxSaverExecutor\"));\n    uint256 constant EOA_OR_WALLET_FEE_FLAG = 2; // see TxSaverBytesTransientStorage\n\n    /// For TxSaver, total gas cost fee taken from user can't be higher than maxTxCost set by user\n    error TxCostInFeeTokenTooHighError(uint256 maxTxCost, uint256 txCost);\n\n    error FeeTokenNotSameAsSrcToken(address srcToken, address feeToken);\n\n    function _sellWithTxSaverChoice(ExchangeData memory _exData, address _user, DFSRegistry _registry) \n        internal returns (\n            address wrapperAddress,\n            uint256 destAmount,\n            bool hasFee,\n            bool txSaverFeeTaken\n        ) \n    {   \n        address txSaverAddr = _registry.getAddr(TX_SAVER_EXECUTOR_ID);\n        ITxSaverBytesTransientStorage tStorage = ITxSaverBytesTransientStorage(txSaverAddr);\n\n        // Check if TxSaverExecutor initiated transaction by setting right flag in transient storage\n        // we can't just check for msg.sender, as that wouldn't work for flashloan actions\n        uint256 feeType = tStorage.getFeeType();\n        \n        // if not initiated by TxSaverExecutor, perform regular sell\n        if (feeType == 0) {\n            txSaverFeeTaken = false;\n            (wrapperAddress, destAmount, hasFee) = _sell(_exData, _user);\n            return (wrapperAddress, destAmount, hasFee, txSaverFeeTaken);\n        }\n\n        (\n            uint256 estimatedGas,\n            uint256 l1GasCostInEth,\n            TxSaverSignedData memory txSaverData,\n            InjectedExchangeData memory injectedExchangeData\n        ) = _readDataFromTransientStorage(feeType, tStorage);\n\n        uint256 amountWithoutFee = _exData.srcAmount;\n\n        _injectExchangeData(_exData, injectedExchangeData);\n\n        // when taking fee from EOA/wallet perform regular sell\n        // fee is taken inside the RecipeExecutor\n        if (feeType == EOA_OR_WALLET_FEE_FLAG) {\n            txSaverFeeTaken = false;\n            (wrapperAddress, destAmount, hasFee) = _sell(_exData, _user);\n            return (wrapperAddress, destAmount, hasFee, txSaverFeeTaken);\n        }\n        \n        // when taking fee from position, take tx cost before regular sell\n        _takeTxSaverFee(_exData, txSaverData, estimatedGas, l1GasCostInEth);\n        txSaverFeeTaken = true;\n    \n        // perform regular sell\n        (wrapperAddress, destAmount, hasFee) = _sell(_exData, _user);\n    \n        // revert back exData changes to keep it consistent\n        _exData.srcAmount = amountWithoutFee;\n    }\n\n    function _injectExchangeData(ExchangeData memory _exData, InjectedExchangeData memory _injectedExchangeData) internal pure {\n        // if offchain order data is present, inject it here\n        if (_injectedExchangeData.offchainData.price \u003e 0) {\n            _exData.offchainData = _injectedExchangeData.offchainData;\n        }\n\n        // if onchain order data is present, inject it here \n        if (_injectedExchangeData.wrapper != address(0)) {\n            _exData.wrapper = _injectedExchangeData.wrapper;\n            _exData.wrapperData = _injectedExchangeData.wrapperData;\n        }\n    }\n\n    function _readDataFromTransientStorage(uint256 _feeType, ITxSaverBytesTransientStorage _tStorage) \n        internal view returns (\n            uint256 estimatedGas,\n            uint256 l1GasCostInEth,\n            TxSaverSignedData memory txSaverData,\n            InjectedExchangeData memory injectedExchangeData\n        ) \n    {\n        if (_feeType == EOA_OR_WALLET_FEE_FLAG) {\n            (estimatedGas, l1GasCostInEth, injectedExchangeData) = abi.decode(\n                _tStorage.getBytesTransiently(),\n                (uint256, uint256, InjectedExchangeData)\n            );\n        } else {\n            (estimatedGas, l1GasCostInEth, txSaverData, injectedExchangeData) = abi.decode(\n                _tStorage.getBytesTransiently(),\n                (uint256, uint256, TxSaverSignedData, InjectedExchangeData)\n            );\n        }\n    }\n\n    function _takeTxSaverFee(\n        ExchangeData memory _exData,\n        TxSaverSignedData memory _txSaverData,\n        uint256 _estimatedGas,\n        uint256 _l1GasCostInEth\n    ) internal {\n        // when sending sponsored tx, no tx cost is taken\n        if (_estimatedGas == 0) return;\n\n        // calculate gas cost in src token\n        uint256 txCostInSrcToken = calcGasCostUsingInjectedPrice(\n            _estimatedGas,\n            _exData.srcAddr,\n            _txSaverData.tokenPriceInEth,\n            _l1GasCostInEth\n        );\n\n        // revert if tx cost is higher than max value set by user\n        if (txCostInSrcToken \u003e _txSaverData.maxTxCostInFeeToken) {\n            revert TxCostInFeeTokenTooHighError(_txSaverData.maxTxCostInFeeToken, txCostInSrcToken);\n        }\n        if (_exData.srcAddr != _txSaverData.feeToken){\n            revert FeeTokenNotSameAsSrcToken(_exData.srcAddr, _txSaverData.feeToken);\n        }\n\n        // subtract tx cost from src amount and send it to fee recipient\n        _exData.srcAmount = sub(_exData.srcAmount, txCostInSrcToken);\n        _exData.srcAddr.withdrawTokens(TX_SAVER_FEE_RECIPIENT, txCostInSrcToken);\n    }\n}\n\n\n\n\n\n\n\ncontract TokenGroupRegistry is AdminAuth {\n    /// @dev 0.25% fee as we divide the amount with this number\n    uint256 public constant STANDARD_FEE_DIVIDER = 400;\n\n    uint256 public constant STABLE_FEE_DIVIDER = 1000;\n    uint256 public constant MAX_FEE_DIVIDER = 50;\n\n    /// @dev maps token address to a registered group it belongs to\n    mapping(address =\u003e uint256) public groupIds;\n\n    /// @dev Array of groups where the index is the grouped id and the value is the fee\n    uint256[] public feesPerGroup;\n\n    enum Groups { NOT_LISTED, BANNED, STABLECOIN, ETH_BASED, BTC_BASED}\n\n    error FeeTooHigh(uint256 fee);\n    error GroupNonExistent(uint256 groupId);\n\n    constructor() {\n        feesPerGroup.push(STANDARD_FEE_DIVIDER); // NOT_LISTED\n        feesPerGroup.push(0);                    // BANNED\n        feesPerGroup.push(STABLE_FEE_DIVIDER);   // STABLECOIN\n        feesPerGroup.push(STABLE_FEE_DIVIDER);   // ETH_BASED\n        feesPerGroup.push(STABLE_FEE_DIVIDER);   // BTC_BASED\n    }\n\n    /// @notice Checks if 2 tokens are in the same group and returns the correct exchange fee for the pair\n    function getFeeForTokens(address _sellToken, address _buyToken) public view returns (uint256) {\n        uint256 firstId = groupIds[_sellToken];\n        uint256 secondId = groupIds[_buyToken];\n\n        // check if in the ban list, can just check the first token as we take fee from it\n        if (firstId == uint8(Groups.BANNED)) {\n            return 0;\n        }\n    \n        if (firstId == secondId) {\n            return feesPerGroup[secondId];\n        }\n\n        return STANDARD_FEE_DIVIDER;\n    }\n\n    /////////////////////////////// ONLY OWNER FUNCTIONS ///////////////////////////////\n\n    /// @notice Adds token to an existing group\n    /// @dev This will overwrite if token is part of a different group\n    /// @dev Groups needs to exist to add to it\n    function addTokenInGroup(address _tokenAddr, uint256 _groupId) public onlyOwner {\n        if (_groupId \u003e feesPerGroup.length) revert GroupNonExistent(_groupId);\n\n        groupIds[_tokenAddr] = _groupId;\n    }\n\n    /// @notice Add multiple tokens to a group\n    function addTokensInGroup(address[] memory _tokensAddr, uint256 _groupId) public onlyOwner {\n        if (_groupId \u003e feesPerGroup.length) revert GroupNonExistent(_groupId);\n\n        for (uint256 i; i \u003c _tokensAddr.length; ++i) {\n            groupIds[_tokensAddr[i]] = _groupId;\n        }\n    }\n\n    /// @notice Create new group and add tokens\n    /// @dev Divider has to gte 50, which means max fee is 2%\n    function addNewGroup(address[] memory _tokensAddr, uint256 _feeDivider) public onlyOwner {\n        if(_feeDivider \u003c MAX_FEE_DIVIDER) revert FeeTooHigh(_feeDivider);\n\n        feesPerGroup.push(_feeDivider);\n\n        addTokensInGroup(_tokensAddr, feesPerGroup.length - 1);\n    }\n\n    /// @notice Change existing group fee\n    /// @dev Divider has to be gte 50, which means max fee is 2%\n    function changeGroupFee(uint256 _groupId, uint256 _newFeeDivider) public onlyOwner {\n        if(_newFeeDivider \u003c MAX_FEE_DIVIDER) revert FeeTooHigh(_newFeeDivider);\n\n        feesPerGroup[_groupId] = _newFeeDivider;\n    }\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract DFSSell is ActionBase, DFSExchangeWithTxSaver {\n\n    using TokenUtils for address;\n\n    uint256 internal constant RECIPE_FEE = 400;\n\n    struct Params {\n        ExchangeData exchangeData;\n        address from;\n        address to;\n    }\n\n    /// @inheritdoc ActionBase\n    function executeAction(\n        bytes memory _callData,\n        bytes32[] memory _subData,\n        uint8[] memory _paramMapping,\n        bytes32[] memory _returnValues\n    ) public virtual override payable returns (bytes32) {\n        Params memory params = parseInputs(_callData);\n\n        params.exchangeData.srcAddr = _parseParamAddr(\n            params.exchangeData.srcAddr,\n            _paramMapping[0],\n            _subData,\n            _returnValues\n        );\n        params.exchangeData.destAddr = _parseParamAddr(\n            params.exchangeData.destAddr,\n            _paramMapping[1],\n            _subData,\n            _returnValues\n        );\n\n        params.exchangeData.srcAmount = _parseParamUint(\n            params.exchangeData.srcAmount,\n            _paramMapping[2],\n            _subData,\n            _returnValues\n        );\n        params.from = _parseParamAddr(params.from, _paramMapping[3], _subData, _returnValues);\n        params.to = _parseParamAddr(params.to, _paramMapping[4], _subData, _returnValues);\n\n        (uint256 exchangedAmount, bytes memory logData) = _dfsSell(params.exchangeData, params.from, params.to, false);\n        emit ActionEvent(\"DFSSell\", logData);\n        return bytes32(exchangedAmount);\n    }\n\n    /// @inheritdoc ActionBase\n    function executeActionDirect(bytes memory _callData) public virtual override payable   {\n        Params memory params = parseInputs(_callData);\n        (, bytes memory logData) = _dfsSell(params.exchangeData, params.from, params.to, true);\n        logger.logActionDirectEvent(\"DFSSell\", logData);\n    }\n\n    /// @inheritdoc ActionBase\n    function actionType() public virtual override pure returns (uint8) {\n        return uint8(ActionType.STANDARD_ACTION);\n    }\n\n\n    //////////////////////////// ACTION LOGIC ////////////////////////////\n\n    /// @notice Sells a specified srcAmount for the dest token\n    /// @param _exchangeData DFS Exchange data struct\n    /// @param _from Address from which we'll pull the srcTokens\n    /// @param _to Address where we'll send the _to token\n    /// @param _isDirect True if it's just one sell action, false if part of recipe\n    function _dfsSell(\n        ExchangeData memory _exchangeData,\n        address _from,\n        address _to,\n        bool _isDirect\n    ) internal returns (uint256, bytes memory) {\n        // if we set srcAmount to max, take the whole user's wallet balance\n        if (_exchangeData.srcAmount == type(uint256).max) {\n            _exchangeData.srcAmount = _exchangeData.srcAddr.getBalance(address(this));\n        }\n\n        // if source and destination address are same we want to skip exchanging and take no fees\n        if (_exchangeData.srcAddr == _exchangeData.destAddr){\n            bytes memory sameAssetLogData = abi.encode(\n                address(0),\n                _exchangeData.srcAddr,\n                _exchangeData.destAddr,\n                _exchangeData.srcAmount,\n                _exchangeData.srcAmount,\n                0\n        );\n            return (_exchangeData.srcAmount, sameAssetLogData);\n        }\n\n        // Wrap eth if sent directly\n        if (_exchangeData.srcAddr == TokenUtils.ETH_ADDR) {\n            TokenUtils.depositWeth(_exchangeData.srcAmount);\n            _exchangeData.srcAddr = TokenUtils.WETH_ADDR;\n        } else {\n            _exchangeData.srcAddr.pullTokensIfNeeded(_from, _exchangeData.srcAmount);\n        }\n\n        // We always swap with weth, convert token addr when eth sent for unwrapping later\n        bool isEthDest;\n        if (_exchangeData.destAddr == TokenUtils.ETH_ADDR) {\n            _exchangeData.destAddr = TokenUtils.WETH_ADDR;\n            isEthDest = true;\n        } \n\n        /// @dev only check for custom fee if a non standard fee is sent\n        if (!_isDirect) {\n            if (_exchangeData.dfsFeeDivider != RECIPE_FEE) {\n                _exchangeData.dfsFeeDivider = TokenGroupRegistry(TOKEN_GROUP_REGISTRY).getFeeForTokens(\n                    _exchangeData.srcAddr,\n                    _exchangeData.destAddr\n                );\n            }\n        } else {\n            _exchangeData.dfsFeeDivider = 0;\n        }\n        \n        address wrapper;\n        uint256 exchangedAmount;\n\n        (wrapper, exchangedAmount,,) = _sellWithTxSaverChoice(_exchangeData, address(this), registry);\n\n        if (isEthDest) {\n            TokenUtils.withdrawWeth(exchangedAmount);\n\n            (bool success, ) = _to.call{value: exchangedAmount}(\"\");\n            require(success, \"Eth send failed\");\n        } else {\n             _exchangeData.destAddr.withdrawTokens(_to, exchangedAmount);\n        }\n\n        bytes memory logData = abi.encode(\n            wrapper,\n            _exchangeData.srcAddr,\n            _exchangeData.destAddr,\n            _exchangeData.srcAmount,\n            exchangedAmount,\n            _exchangeData.dfsFeeDivider\n        );\n        return (exchangedAmount, logData);\n    }\n\n    function parseInputs(bytes memory _callData) public pure returns (Params memory params) {\n        params = abi.decode(_callData, (Params));\n    }\n}\n",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"FeeTokenNotSameAsSrcToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffchainData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapperAddr\",\"type\":\"address\"}],\"name\":\"InvalidWrapperError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfRangeSlicingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReturnIndexValueError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExpected\",\"type\":\"uint256\"}],\"name\":\"SlippageHitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubIndexValueError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"TokenDecimalsTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCost\",\"type\":\"uint256\"}],\"name\":\"TxCostInFeeTokenTooHighError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTokenPriceInEthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTokensSwapped\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"logName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ActionEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_FEED_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_PARAM_MAPPING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_SAVER_FEE_RECIPIENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_paramMapping\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_returnValues\",\"type\":\"bytes32[]\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"executeActionDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proxy\",\"type\":\"address\"}],\"name\":\"isDSProxy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"parseInputs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct DFSSell.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "DFSSell",
      "CompilerVersion": "v0.8.24+commit.e11b9ed9",
      "OptimizationUsed": "1",
      "Runs": "1000",
      "ConstructorArguments": "",
      "EVMVersion": "cancun",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
