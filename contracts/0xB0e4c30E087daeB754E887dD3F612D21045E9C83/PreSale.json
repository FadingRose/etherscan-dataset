{
  "TxHash": "0xf7b3cfde607ea6f0850dc6cf82b55c82e91c58ccefc5a5ecdb3d2f245520a114",
  "ContractAddress": "0xB0e4c30E087daeB754E887dD3F612D21045E9C83",
  "Name": "PreSale",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant NOT_ENTERED = 1;\r\n    uint256 private constant ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    /**\r\n     * @dev Unauthorized reentrant call.\r\n     */\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\r\n        if (_status == ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == ENTERED;\r\n    }\r\n}\r\n\r\n// File: LikeBit/PreSale.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\ninterface IUSDTToken {\r\n    function transferFrom(address from, address to, uint256 value) external;\r\n}\r\n\r\n/**\r\n * @title PreSale\r\n * @dev Contract for managing pre-sale of LikeBit tokens.\r\n */\r\ncontract PreSale is Ownable, ReentrancyGuard {\r\n    IERC20 private usdt;\r\n    IERC20 private LBT;\r\n    uint private totalTokenSold;\r\n    uint private totalTokenRemaining;\r\n    uint private activePhaseId;\r\n    uint public totalPhases;\r\n    address private adminWallet;\r\n\r\n    struct Phase {\r\n        uint phaseId;\r\n        uint tokenAvailableForSale;\r\n        uint tokenPrice;\r\n        uint tokenSold;\r\n        uint soldTokenValue;\r\n        bool airdrop;\r\n        bool buying;\r\n    }\r\n\r\n    struct TokenPurchase {\r\n        uint usdtDeposited;\r\n        uint tokensBought;\r\n        uint tokenPrice;\r\n        uint phaseId;\r\n        uint date;\r\n        bool claimed;\r\n    }\r\n\r\n    mapping(address =\u003e uint) private usdtReceived;\r\n    mapping(address =\u003e mapping(uint =\u003e uint)) private tokenToSend;\r\n    mapping(uint =\u003e Phase) private phases;\r\n    mapping(address =\u003e TokenPurchase[]) private tokenPurchase;\r\n    mapping(address =\u003e bool) private blacklisted;\r\n\r\n    modifier notBlacklisted() {\r\n        require(\r\n            !blacklisted[msg.sender],\r\n            \"Address is blacklisted. Contact Admin\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    event ClaimedTokens(\r\n        address indexed _user,\r\n        uint usdtDeposited,\r\n        uint tokenAmount,\r\n        uint tokenPrice,\r\n        uint PhaseID\r\n    );\r\n\r\n    event NewPhaseSet(\r\n        uint PhaseID,\r\n        uint tokenAvailableForSell,\r\n        uint tokenPrice\r\n    );\r\n\r\n    event Buy(\r\n        address indexed _user,\r\n        uint usdtDeposited,\r\n        uint tokenAmount,\r\n        uint tokenPrice,\r\n        uint PhaseID\r\n    );\r\n\r\n    /**\r\n     * @dev Constructor to initialize the pre-sale contract.\r\n     * @param _usdt Address of the USDT token contract.\r\n     * @param _admin Address of the admin wallet.\r\n     */\r\n\r\n    constructor(address _usdt, address _admin) Ownable(_admin) {\r\n        usdt = IERC20(_usdt);\r\n        totalTokenSold = 0;\r\n        totalTokenRemaining = 2000000 * 10 ** 18;\r\n        adminWallet = _admin;\r\n        phases[1] = Phase({\r\n            phaseId: 1,\r\n            tokenAvailableForSale: 500000 * 10 ** 18,\r\n            tokenPrice: 1250000,\r\n            tokenSold: 0,\r\n            soldTokenValue: 0,\r\n            airdrop: false,\r\n            buying: true\r\n        });\r\n        activePhaseId = 1;\r\n        totalPhases++;\r\n    }\r\n\r\n    //View Functions\r\n\r\n    /**\r\n     * @dev Returns the address of the USDT token contract.\r\n     */\r\n\r\n    function getUsdtAddress() external view returns (address) {\r\n        return address(usdt);\r\n    }\r\n    /**\r\n     * @dev Returns the address of the LikeBit token contract.\r\n     */\r\n\r\n    function getTokenAddress() external view returns (address) {\r\n        return address(LBT);\r\n    }\r\n    /**\r\n     * @dev Returns the current token price for the active phase.\r\n     */\r\n    function getTokenPrice() public view returns (uint) {\r\n        return phases[activePhaseId].tokenPrice;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the admin wallet.\r\n     */\r\n\r\n    function getAdminAddress() external view returns (address) {\r\n        return adminWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ID of the active sale phase.\r\n     */\r\n\r\n    function getActivePhase() external view returns (uint) {\r\n        return activePhaseId;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens sold.\r\n     */\r\n    function getTotalTokenSold() external view returns (uint) {\r\n        return totalTokenSold;\r\n    }\r\n\r\n    function getOwner() external view returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if an address is blacklisted.\r\n     * @param _user Address to check.\r\n     * @return True if the address is blacklisted, otherwise false.\r\n     */\r\n    function isBlacklisted(address _user) external view returns (bool) {\r\n        return blacklisted[_user];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns details of the purchases made by a user.\r\n     * @param _user Address of the user.\r\n     * @return tokensBought Array of token amounts bought.\r\n     * @return phaseId Array of phase IDs for each purchase.\r\n     * @return date Array of purchase dates.\r\n     * @return claimed Array indicating whether tokens are claimed for each purchase.\r\n     */\r\n\r\n    function getUserPurchaseDetails(\r\n        address _user\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint[] memory tokensBought,\r\n            uint[] memory phaseId,\r\n            uint[] memory date,\r\n            bool[] memory claimed\r\n        )\r\n    {\r\n        TokenPurchase[] storage purchase = tokenPurchase[_user];\r\n        uint length = purchase.length;\r\n        tokensBought = new uint[](length);\r\n        phaseId = new uint[](length);\r\n        date = new uint[](length);\r\n        claimed = new bool[](length);\r\n\r\n        for (uint i = 0; i \u003c length; i++) {\r\n            tokensBought[i] = purchase[i].tokensBought;\r\n            phaseId[i] = purchase[i].phaseId;\r\n            date[i] = purchase[i].date;\r\n            claimed[i] = purchase[i].claimed;\r\n        }\r\n        return (tokensBought, phaseId, date, claimed);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if airdrop is active for a given phase.\r\n     * @param _phaseId ID of the phase to check.\r\n     * @return True if airdrop is active for the phase, otherwise false.\r\n     */\r\n    function isAirdropActive(uint _phaseId) external view returns (bool) {\r\n        require(_phaseId \u003e 0 \u0026\u0026 _phaseId \u003c= totalPhases, \"Invalid phase ID\");\r\n        Phase storage phase = phases[_phaseId];\r\n        return phase.airdrop;\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if buying is active for a given phase.\r\n     * @param _phaseId ID of the phase to check.\r\n     * @return True if buying is active for the phase, otherwise false.\r\n     */\r\n\r\n    function isBuyActive(uint _phaseId) external view returns (bool) {\r\n        require(_phaseId \u003e 0 \u0026\u0026 _phaseId \u003c= totalPhases, \"Invalid phase ID\");\r\n        Phase storage phase = phases[_phaseId];\r\n        return phase.buying;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns information about a sale phase.\r\n     * @param _phaseId ID of the phase.\r\n     * @return phaseId Phase ID.\r\n     * @return _tokenAvailableForSale Total tokens available for sale.\r\n     * @return _tokenPrice Token price.\r\n     * @return _tokenSold Total tokens sold.\r\n     * @return _soldTokenValue Total value of tokens sold.\r\n     * @return _tokenRemaining Remaining tokens for sale in the phase.\r\n     * @return isActivePhase True if the phase is active, otherwise false.\r\n     * @return airdrop True if airdrop is active for the phase, otherwise false.\r\n     * @return buying True if buying is active for the phase, otherwise false.\r\n     */\r\n    function getPhaseInfo(\r\n        uint _phaseId\r\n    )\r\n        public\r\n        view\r\n        returns (\r\n            uint phaseId,\r\n            uint _tokenAvailableForSale,\r\n            uint _tokenPrice,\r\n            uint _tokenSold,\r\n            uint _soldTokenValue,\r\n            uint _tokenRemaining,\r\n            bool isActivePhase,\r\n            bool airdrop,\r\n            bool buying\r\n        )\r\n    {\r\n        require(_phaseId \u003e 0);\r\n        Phase storage phase = phases[_phaseId];\r\n        return (\r\n            phase.phaseId,\r\n            phase.tokenAvailableForSale,\r\n            phase.tokenPrice,\r\n            phase.tokenSold,\r\n            phase.soldTokenValue,\r\n            phase.tokenAvailableForSale - phase.tokenSold,\r\n            activePhaseId == phase.phaseId,\r\n            phase.airdrop,\r\n            phase.buying\r\n        );\r\n    }\r\n\r\n    function addToBlacklist(address _user) external onlyOwner {\r\n        require(_user != address(0), \"Invalid address\");\r\n        blacklisted[_user] = true;\r\n    }\r\n\r\n    function removeFromBlacklist(address _user) external onlyOwner {\r\n        blacklisted[_user] = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new sale phase with the given parameters.\r\n     * @param _amount Amount of tokens available for sale in the new phase.\r\n     * @param _tokenPrice Price of one token in the new phase.\r\n     */\r\n\r\n    function setPhase(uint _amount, uint _tokenPrice) external onlyOwner {\r\n        uint _phaseId = totalPhases + 1;\r\n        require(_amount \u003e 0, \"Amount cannot be zero\");\r\n        require(\r\n            _amount \u003c= totalTokenRemaining,\r\n            \"Amount cannot exceed sale allocation\"\r\n        );\r\n        require(_tokenPrice \u003e 0, \"token price cannot be zero\");\r\n\r\n        Phase storage newPhase = phases[_phaseId];\r\n        newPhase.phaseId = _phaseId;\r\n        newPhase.tokenAvailableForSale = _amount;\r\n        newPhase.tokenPrice = _tokenPrice;\r\n        newPhase.tokenSold = 0;\r\n        newPhase.soldTokenValue = 0;\r\n        newPhase.airdrop = false;\r\n        newPhase.buying = false;\r\n        totalPhases++;\r\n\r\n        emit NewPhaseSet(_phaseId, _amount, _tokenPrice);\r\n    }\r\n\r\n    function stopBuy(uint _phaseId) external onlyOwner {\r\n        require(_phaseId \u003e 0 \u0026\u0026 _phaseId \u003c= totalPhases, \"Invalid phase ID\");\r\n        Phase storage phase = phases[_phaseId];\r\n        require(phase.phaseId == _phaseId, \"Phase does not exist\");\r\n        require(phase.buying == true, \"Buy not active\");\r\n        phase.buying = false;\r\n    }\r\n\r\n    function startBuy(uint _phaseId) external onlyOwner {\r\n        require(_phaseId \u003e 0 \u0026\u0026 _phaseId \u003c= totalPhases, \"Invalid phase ID\");\r\n        Phase storage phase = phases[_phaseId];\r\n        require(phase.phaseId == _phaseId, \"Phase does not exist\");\r\n        require(phase.buying == false, \"Buy already active\");\r\n        phase.buying = true;\r\n    }\r\n\r\n    function estimatedToken(\r\n        uint _usdtAmount\r\n    ) public view returns (uint tokenAmount) {\r\n        tokenAmount = (_usdtAmount * 10 ** 18) / getTokenPrice();\r\n    }\r\n\r\n    function getUSDTDepositedByUser(\r\n        address _user\r\n    ) external view returns (uint) {\r\n        return usdtReceived[_user];\r\n    }\r\n\r\n    function getTokenToSendToUser(address _user) external view returns (uint) {\r\n        return tokenToSend[_user][activePhaseId];\r\n    }\r\n\r\n    function setTokenAddress(address _LBT) external onlyOwner {\r\n        require(_LBT != address(0), \"Address cannot be zero address\");\r\n        require(\r\n            IERC20(_LBT).balanceOf(address(this)) \u003e 0,\r\n            \"Invalid LBT contract\"\r\n        );\r\n        LBT = IERC20(_LBT);\r\n    }\r\n\r\n    function setActivePhase(uint _phaseId) external onlyOwner {\r\n        require(_phaseId \u003e 0 \u0026\u0026 totalPhases \u003e= _phaseId, \"Inavlid phase id\");\r\n        require(_phaseId != activePhaseId, \"Phase already active\");\r\n        activePhaseId = _phaseId;\r\n    }\r\n\r\n    function setAdminWallet(address _admin) external onlyOwner {\r\n        require(_admin != address(0), \"Address cannot be zero address\");\r\n        adminWallet = _admin;\r\n    }\r\n\r\n    /**\r\n     * @dev Starts the airdrop for the specified phase.\r\n     * @param _phaseId ID of the phase to start the airdrop for.\r\n     */\r\n\r\n    function startAirDrop(uint _phaseId) external onlyOwner {\r\n        require(_phaseId \u003e 0 \u0026\u0026 _phaseId \u003c= totalPhases, \"Invalid phase ID\");\r\n        Phase storage phase = phases[_phaseId];\r\n        require(phase.phaseId == _phaseId, \"Phase id does not exist\");\r\n        require(phase.airdrop == false, \"Air drop already active\");\r\n        phase.airdrop = true;\r\n    }\r\n\r\n    /**\r\n     * @dev Stops the airdrop for the specified phase.\r\n     * @param _phaseId ID of the phase to stop the airdrop for.\r\n     */\r\n    function stopAirDrop(uint _phaseId) external onlyOwner {\r\n        require(_phaseId \u003e 0 \u0026\u0026 _phaseId \u003c= totalPhases, \"Invalid phase ID\");\r\n        Phase storage phase = phases[_phaseId];\r\n        require(phase.phaseId == _phaseId, \"Phase id does not exist\");\r\n        require(phase.airdrop == true, \"Air drop not active\");\r\n        phase.airdrop = false;\r\n    }\r\n\r\n    //User Functions\r\n    /**\r\n     * @dev Allows a user to buy tokens with USDT.\r\n     * @param _usdtAmount Amount of USDT to spend for buying tokens.\r\n     */\r\n    function buy(uint _usdtAmount) external nonReentrant notBlacklisted {\r\n        require(_usdtAmount \u003e 0, \"Invalid Amount\");//1\r\n        require(\r\n            usdt.allowance(msg.sender, address(this)) \u003e= _usdtAmount,\r\n            \"Insufficient Allowance\"\r\n        );//10\r\n        require(\r\n            usdt.balanceOf(msg.sender) \u003e= _usdtAmount,\r\n            \"Not enough balance\"\r\n        );//\r\n\r\n        Phase storage currentPhase = phases[activePhaseId];\r\n        require(\r\n            currentPhase.buying == true,\r\n            \"Buying not active for this phase\"\r\n        );\r\n        uint tokenAmount = ((_usdtAmount * (10 ** 18)) /\r\n            currentPhase.tokenPrice);//0.8 //\r\n\r\n        require(\r\n            tokenAmount \u003c=\r\n                currentPhase.tokenAvailableForSale - currentPhase.tokenSold,\r\n            \"Not enough token amount for buying\"\r\n        );\r\n\r\n        currentPhase.tokenSold += tokenAmount;//0.8\r\n        currentPhase.soldTokenValue =\r\n            (currentPhase.tokenPrice * currentPhase.tokenSold) /\r\n            10 ** 18;\r\n        totalTokenSold += tokenAmount; //0.8\r\n        totalTokenRemaining -= tokenAmount; \r\n\r\n        usdtReceived[msg.sender] += _usdtAmount;\r\n        tokenToSend[msg.sender][activePhaseId] += tokenAmount;\r\n\r\n        IUSDTToken(address(usdt)).transferFrom(msg.sender, adminWallet, _usdtAmount);\r\n\r\n        TokenPurchase[] storage purchase = tokenPurchase[msg.sender];\r\n        purchase.push(\r\n            TokenPurchase({\r\n                usdtDeposited: _usdtAmount,\r\n                tokensBought: tokenAmount,\r\n                tokenPrice: currentPhase.tokenPrice,\r\n                phaseId: activePhaseId,\r\n                date: block.timestamp,\r\n                claimed: false\r\n            })\r\n        );\r\n\r\n        emit Buy(\r\n            msg.sender,\r\n            _usdtAmount,\r\n            tokenAmount,\r\n            currentPhase.tokenPrice,\r\n            activePhaseId\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Allows a user to claim tokens from an ongoing airdrop.\r\n     * @param _phaseId ID of the phase from which tokens are claimed.\r\n     * @param _index Index of the token purchase to claim from the user's purchase history.\r\n     */\r\n\r\n    function claimToken(\r\n        uint _phaseId,\r\n        uint _index\r\n    ) external nonReentrant notBlacklisted {\r\n        require(_phaseId \u003e 0 \u0026\u0026 totalPhases \u003e= _phaseId, \"Inavlid phase id\");\r\n        Phase storage phase = phases[_phaseId];\r\n        require(phase.airdrop, \"Airdrop not started\");\r\n        TokenPurchase[] storage purchase = tokenPurchase[msg.sender];\r\n        uint totalTokensClaimed;\r\n\r\n        require(_index \u003c purchase.length, \"Invalid index\");\r\n\r\n        for (uint i = _index; i \u003c purchase.length; i++) {\r\n            if (purchase[i].phaseId == _phaseId \u0026\u0026 !purchase[i].claimed) {\r\n                uint tokensToClaim = purchase[i].tokensBought;\r\n                LBT.transfer(msg.sender, tokensToClaim);\r\n                purchase[i].claimed = true;\r\n                totalTokensClaimed += tokensToClaim;\r\n                emit ClaimedTokens(\r\n                    msg.sender,\r\n                    purchase[i].usdtDeposited,\r\n                    tokensToClaim,\r\n                    purchase[i].tokenPrice,\r\n                    _phaseId\r\n                );\r\n                return;\r\n            }\r\n        }\r\n        require(totalTokensClaimed \u003e 0, \"No tokens to claim in this phase\");\r\n    }\r\n\r\n    /**\r\n     * @dev Function to withdraw mistakenly sent ERC20 tokens.\r\n     * @param _token Address of the ERC20 token to withdraw.\r\n     */\r\n\r\n    function withdrawTokens(address _token, uint amount) external onlyOwner {\r\n        require(_token != address(0), \"Invalid token address\");\r\n        require(IERC20(_token).balanceOf(address(this)) \u003e= amount, \"Insufficient token balance\");\r\n        IERC20(_token).transfer(\r\n            msg.sender,\r\n            amount\r\n        );\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PhaseID\",\"type\":\"uint256\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdtDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PhaseID\",\"type\":\"uint256\"}],\"name\":\"ClaimedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"PhaseID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAvailableForSell\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"}],\"name\":\"NewPhaseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"addToBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"claimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_usdtAmount\",\"type\":\"uint256\"}],\"name\":\"estimatedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActivePhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdminAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"getPhaseInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAvailableForSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_soldTokenValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenRemaining\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActivePhase\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"airdrop\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"buying\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getTokenToSendToUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUSDTDepositedByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUsdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPurchaseDetails\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokensBought\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"phaseId\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"date\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"claimed\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"isAirdropActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"isBuyActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"removeFromBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"setActivePhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdminWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LBT\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"startAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"startBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"stopAirDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"}],\"name\":\"stopBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPhases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "PreSale",
      "CompilerVersion": "v0.8.25+commit.b61c2a91",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000ba2447f9f3f6a4b38e5718879af1c5633c7fae4e",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://1a9ce0ee1695a212c67a69216acb576117052026d00225281d709d85b529f593"
    }
  ]
}
