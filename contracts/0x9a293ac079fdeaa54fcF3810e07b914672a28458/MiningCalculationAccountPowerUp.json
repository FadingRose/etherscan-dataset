{
  "TxHash": "0xfee9495794339c7b26e3ddae4e056b5ce945e7229fb158ecaf92e18d5d4f62c8",
  "ContractAddress": "0x9a293ac079fdeaa54fcF3810e07b914672a28458",
  "Name": "MiningCalculationAccountPowerUp",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.20;\r\n\r\nlibrary Errors {\r\n    /// @notice Error thrown when the lpToken address is not supported\r\n    /// @dev List of supported LpTokens is defined in {LiquidityMining._lpTokens}\r\n    string public constant LP_TOKEN_NOT_SUPPORTED = \"PT_701\";\r\n    /// @notice Error thrown when the caller / msgSender is not a Pause Manager address.\r\n    /// @dev Pause Manager can be defined by the smart contract's Onwer\r\n    string public constant CALLER_NOT_PAUSE_MANAGER = \"PT_704\";\r\n    /// @notice Error thrown when the account's base balance is too low\r\n    string public constant ACCOUNT_BASE_BALANCE_IS_TOO_LOW = \"PT_705\";\r\n    /// @notice Error thrown when the account's Lp Token balance is too low\r\n    string public constant ACCOUNT_LP_TOKEN_BALANCE_IS_TOO_LOW = \"PT_706\";\r\n    /// @notice Error thrown when the account's delegated balance is too low\r\n    string public constant ACC_DELEGATED_TO_LIQUIDITY_MINING_BALANCE_IS_TOO_LOW = \"PT_707\";\r\n    /// @notice Error thrown when the account's available Power Token balance is too low\r\n    string public constant ACC_AVAILABLE_POWER_TOKEN_BALANCE_IS_TOO_LOW = \"PT_708\";\r\n    /// @notice Error thrown when the account doesn't have the rewards (Staked Tokens / Power Tokens) to claim\r\n    string public constant NO_REWARDS_TO_CLAIM = \"PT_709\";\r\n    /// @notice Error thrown when the cooldown is not finished.\r\n    string public constant COOL_DOWN_NOT_FINISH = \"PT_710\";\r\n    /// @notice Error thrown when the aggregate power up indicator is going to be negative during the calculation.\r\n    string public constant AGGREGATE_POWER_UP_COULD_NOT_BE_NEGATIVE = \"PT_711\";\r\n    /// @notice Error thrown when the block number used in the function is lower than previous block number stored in the liquidity mining indicators.\r\n    string public constant BLOCK_NUMBER_LOWER_THAN_PREVIOUS_BLOCK_NUMBER = \"PT_712\";\r\n    /// @notice Account Composite Multiplier indicator is greater or equal to Composit Multiplier indicator, but it should be lower or equal\r\n    string public constant ACCOUNT_COMPOSITE_MULTIPLIER_GT_COMPOSITE_MULTIPLIER = \"PT_713\";\r\n    /// @notice The fee for unstacking of Power Tokens should be number between (0, 1e18)\r\n    string public constant UNSTAKE_WITHOUT_COOLDOWN_FEE_IS_TO_HIGH = \"PT_714\";\r\n    /// @notice General problem, address is wrong\r\n    string public constant WRONG_ADDRESS = \"PT_715\";\r\n    /// @notice General problem, contract is wrong\r\n    string public constant WRONG_CONTRACT_ID = \"PT_716\";\r\n    /// @notice Value not greater than zero\r\n    string public constant VALUE_NOT_GREATER_THAN_ZERO = \"PT_717\";\r\n    /// @notice Appeared when input of two arrays length mismatch\r\n    string public constant INPUT_ARRAYS_LENGTH_MISMATCH = \"PT_718\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant SENDER_NOT_APPOINTED_OWNER = \"PT_719\";\r\n    /// @notice msg.sender is not an appointed owner, it cannot confirm their ownership\r\n    string public constant ROUTER_INVALID_SIGNATURE = \"PT_720\";\r\n    string public constant INPUT_ARRAYS_EMPTY = \"PT_721\";\r\n    string public constant CALLER_NOT_ROUTER = \"PT_722\";\r\n    string public constant CALLER_NOT_GUARDIAN = \"PT_723\";\r\n    string public constant CONTRACT_PAUSED = \"PT_724\";\r\n    string public constant REENTRANCY = \"PT_725\";\r\n    string public constant CALLER_NOT_OWNER = \"PT_726\";\r\n    string public constant WRONG_VALUE = \"PT_727\";\r\n}\r\n\r\nlibrary MathOperation {\r\n    //@notice Division with the rounding up on last position, x, and y is with MD\r\n    function division(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x + (y / 2)) / y;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\r\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\r\n * checks.\r\n *\r\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\r\n * easily result in undesired exploitation or bugs, since developers usually\r\n * assume that overflows raise errors. `SafeCast` restores this intuition by\r\n * reverting the transaction when such an operation overflows.\r\n *\r\n * Using this library instead of the unchecked operations eliminates an entire\r\n * class of bugs, so it's recommended to use it always.\r\n *\r\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\r\n * all math on `uint256` and `int256` and then downcasting.\r\n */\r\nlibrary SafeCast {\r\n    /**\r\n     * @dev Returns the downcasted uint248 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint248).\r\n     *\r\n     * Counterpart to Solidity's `uint248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint248(uint256 value) internal pure returns (uint248) {\r\n        require(value \u003c= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\r\n        return uint248(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint240 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint240).\r\n     *\r\n     * Counterpart to Solidity's `uint240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint240(uint256 value) internal pure returns (uint240) {\r\n        require(value \u003c= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\r\n        return uint240(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint232 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint232).\r\n     *\r\n     * Counterpart to Solidity's `uint232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint232(uint256 value) internal pure returns (uint232) {\r\n        require(value \u003c= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\r\n        return uint232(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint224 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint224).\r\n     *\r\n     * Counterpart to Solidity's `uint224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function toUint224(uint256 value) internal pure returns (uint224) {\r\n        require(value \u003c= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\r\n        return uint224(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint216 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint216).\r\n     *\r\n     * Counterpart to Solidity's `uint216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint216(uint256 value) internal pure returns (uint216) {\r\n        require(value \u003c= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\r\n        return uint216(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint208 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint208).\r\n     *\r\n     * Counterpart to Solidity's `uint208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint208(uint256 value) internal pure returns (uint208) {\r\n        require(value \u003c= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\r\n        return uint208(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint200 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint200).\r\n     *\r\n     * Counterpart to Solidity's `uint200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint200(uint256 value) internal pure returns (uint200) {\r\n        require(value \u003c= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\r\n        return uint200(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint192 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint192).\r\n     *\r\n     * Counterpart to Solidity's `uint192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint192(uint256 value) internal pure returns (uint192) {\r\n        require(value \u003c= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\r\n        return uint192(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint184 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint184).\r\n     *\r\n     * Counterpart to Solidity's `uint184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint184(uint256 value) internal pure returns (uint184) {\r\n        require(value \u003c= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\r\n        return uint184(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint176 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint176).\r\n     *\r\n     * Counterpart to Solidity's `uint176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint176(uint256 value) internal pure returns (uint176) {\r\n        require(value \u003c= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\r\n        return uint176(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint168 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint168).\r\n     *\r\n     * Counterpart to Solidity's `uint168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint168(uint256 value) internal pure returns (uint168) {\r\n        require(value \u003c= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\r\n        return uint168(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint160 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint160).\r\n     *\r\n     * Counterpart to Solidity's `uint160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint160(uint256 value) internal pure returns (uint160) {\r\n        require(value \u003c= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\r\n        return uint160(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint152 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint152).\r\n     *\r\n     * Counterpart to Solidity's `uint152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint152(uint256 value) internal pure returns (uint152) {\r\n        require(value \u003c= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\r\n        return uint152(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint144 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint144).\r\n     *\r\n     * Counterpart to Solidity's `uint144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint144(uint256 value) internal pure returns (uint144) {\r\n        require(value \u003c= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\r\n        return uint144(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint136 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint136).\r\n     *\r\n     * Counterpart to Solidity's `uint136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint136(uint256 value) internal pure returns (uint136) {\r\n        require(value \u003c= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\r\n        return uint136(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint128 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint128).\r\n     *\r\n     * Counterpart to Solidity's `uint128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint128(uint256 value) internal pure returns (uint128) {\r\n        require(value \u003c= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\r\n        return uint128(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint120 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint120).\r\n     *\r\n     * Counterpart to Solidity's `uint120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint120(uint256 value) internal pure returns (uint120) {\r\n        require(value \u003c= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\r\n        return uint120(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint112 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint112).\r\n     *\r\n     * Counterpart to Solidity's `uint112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint112(uint256 value) internal pure returns (uint112) {\r\n        require(value \u003c= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\r\n        return uint112(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint104 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint104).\r\n     *\r\n     * Counterpart to Solidity's `uint104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint104(uint256 value) internal pure returns (uint104) {\r\n        require(value \u003c= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\r\n        return uint104(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint96 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint96).\r\n     *\r\n     * Counterpart to Solidity's `uint96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function toUint96(uint256 value) internal pure returns (uint96) {\r\n        require(value \u003c= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\r\n        return uint96(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint88 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint88).\r\n     *\r\n     * Counterpart to Solidity's `uint88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint88(uint256 value) internal pure returns (uint88) {\r\n        require(value \u003c= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\r\n        return uint88(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint80 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint80).\r\n     *\r\n     * Counterpart to Solidity's `uint80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint80(uint256 value) internal pure returns (uint80) {\r\n        require(value \u003c= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\r\n        return uint80(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint72 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint72).\r\n     *\r\n     * Counterpart to Solidity's `uint72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint72(uint256 value) internal pure returns (uint72) {\r\n        require(value \u003c= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\r\n        return uint72(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint64 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint64).\r\n     *\r\n     * Counterpart to Solidity's `uint64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint64(uint256 value) internal pure returns (uint64) {\r\n        require(value \u003c= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\r\n        return uint64(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint56 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint56).\r\n     *\r\n     * Counterpart to Solidity's `uint56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint56(uint256 value) internal pure returns (uint56) {\r\n        require(value \u003c= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\r\n        return uint56(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint48 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint48).\r\n     *\r\n     * Counterpart to Solidity's `uint48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint48(uint256 value) internal pure returns (uint48) {\r\n        require(value \u003c= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\r\n        return uint48(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint40 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint40).\r\n     *\r\n     * Counterpart to Solidity's `uint40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint40(uint256 value) internal pure returns (uint40) {\r\n        require(value \u003c= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\r\n        return uint40(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint32 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint32).\r\n     *\r\n     * Counterpart to Solidity's `uint32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint32(uint256 value) internal pure returns (uint32) {\r\n        require(value \u003c= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\r\n        return uint32(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint24 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint24).\r\n     *\r\n     * Counterpart to Solidity's `uint24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toUint24(uint256 value) internal pure returns (uint24) {\r\n        require(value \u003c= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\r\n        return uint24(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint16 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint16).\r\n     *\r\n     * Counterpart to Solidity's `uint16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint16(uint256 value) internal pure returns (uint16) {\r\n        require(value \u003c= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\r\n        return uint16(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted uint8 from uint256, reverting on\r\n     * overflow (when the input is greater than largest uint8).\r\n     *\r\n     * Counterpart to Solidity's `uint8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     *\r\n     * _Available since v2.5._\r\n     */\r\n    function toUint8(uint256 value) internal pure returns (uint8) {\r\n        require(value \u003c= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\r\n        return uint8(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a signed int256 into an unsigned uint256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be greater than or equal to 0.\r\n     *\r\n     * _Available since v3.0._\r\n     */\r\n    function toUint256(int256 value) internal pure returns (uint256) {\r\n        require(value \u003e= 0, \"SafeCast: value must be positive\");\r\n        return uint256(value);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int248 from int256, reverting on\r\n     * overflow (when the input is less than smallest int248 or\r\n     * greater than largest int248).\r\n     *\r\n     * Counterpart to Solidity's `int248` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 248 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\r\n        downcasted = int248(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int240 from int256, reverting on\r\n     * overflow (when the input is less than smallest int240 or\r\n     * greater than largest int240).\r\n     *\r\n     * Counterpart to Solidity's `int240` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 240 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\r\n        downcasted = int240(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int232 from int256, reverting on\r\n     * overflow (when the input is less than smallest int232 or\r\n     * greater than largest int232).\r\n     *\r\n     * Counterpart to Solidity's `int232` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 232 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\r\n        downcasted = int232(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int224 from int256, reverting on\r\n     * overflow (when the input is less than smallest int224 or\r\n     * greater than largest int224).\r\n     *\r\n     * Counterpart to Solidity's `int224` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 224 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\r\n        downcasted = int224(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int216 from int256, reverting on\r\n     * overflow (when the input is less than smallest int216 or\r\n     * greater than largest int216).\r\n     *\r\n     * Counterpart to Solidity's `int216` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 216 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\r\n        downcasted = int216(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int208 from int256, reverting on\r\n     * overflow (when the input is less than smallest int208 or\r\n     * greater than largest int208).\r\n     *\r\n     * Counterpart to Solidity's `int208` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 208 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\r\n        downcasted = int208(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int200 from int256, reverting on\r\n     * overflow (when the input is less than smallest int200 or\r\n     * greater than largest int200).\r\n     *\r\n     * Counterpart to Solidity's `int200` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 200 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\r\n        downcasted = int200(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int192 from int256, reverting on\r\n     * overflow (when the input is less than smallest int192 or\r\n     * greater than largest int192).\r\n     *\r\n     * Counterpart to Solidity's `int192` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 192 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\r\n        downcasted = int192(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int184 from int256, reverting on\r\n     * overflow (when the input is less than smallest int184 or\r\n     * greater than largest int184).\r\n     *\r\n     * Counterpart to Solidity's `int184` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 184 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\r\n        downcasted = int184(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int176 from int256, reverting on\r\n     * overflow (when the input is less than smallest int176 or\r\n     * greater than largest int176).\r\n     *\r\n     * Counterpart to Solidity's `int176` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 176 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\r\n        downcasted = int176(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int168 from int256, reverting on\r\n     * overflow (when the input is less than smallest int168 or\r\n     * greater than largest int168).\r\n     *\r\n     * Counterpart to Solidity's `int168` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 168 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\r\n        downcasted = int168(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int160 from int256, reverting on\r\n     * overflow (when the input is less than smallest int160 or\r\n     * greater than largest int160).\r\n     *\r\n     * Counterpart to Solidity's `int160` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 160 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\r\n        downcasted = int160(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int152 from int256, reverting on\r\n     * overflow (when the input is less than smallest int152 or\r\n     * greater than largest int152).\r\n     *\r\n     * Counterpart to Solidity's `int152` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 152 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\r\n        downcasted = int152(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int144 from int256, reverting on\r\n     * overflow (when the input is less than smallest int144 or\r\n     * greater than largest int144).\r\n     *\r\n     * Counterpart to Solidity's `int144` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 144 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\r\n        downcasted = int144(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int136 from int256, reverting on\r\n     * overflow (when the input is less than smallest int136 or\r\n     * greater than largest int136).\r\n     *\r\n     * Counterpart to Solidity's `int136` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 136 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\r\n        downcasted = int136(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int128 from int256, reverting on\r\n     * overflow (when the input is less than smallest int128 or\r\n     * greater than largest int128).\r\n     *\r\n     * Counterpart to Solidity's `int128` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 128 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\r\n        downcasted = int128(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int120 from int256, reverting on\r\n     * overflow (when the input is less than smallest int120 or\r\n     * greater than largest int120).\r\n     *\r\n     * Counterpart to Solidity's `int120` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 120 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\r\n        downcasted = int120(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int112 from int256, reverting on\r\n     * overflow (when the input is less than smallest int112 or\r\n     * greater than largest int112).\r\n     *\r\n     * Counterpart to Solidity's `int112` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 112 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\r\n        downcasted = int112(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int104 from int256, reverting on\r\n     * overflow (when the input is less than smallest int104 or\r\n     * greater than largest int104).\r\n     *\r\n     * Counterpart to Solidity's `int104` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 104 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\r\n        downcasted = int104(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int96 from int256, reverting on\r\n     * overflow (when the input is less than smallest int96 or\r\n     * greater than largest int96).\r\n     *\r\n     * Counterpart to Solidity's `int96` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 96 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\r\n        downcasted = int96(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int88 from int256, reverting on\r\n     * overflow (when the input is less than smallest int88 or\r\n     * greater than largest int88).\r\n     *\r\n     * Counterpart to Solidity's `int88` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 88 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\r\n        downcasted = int88(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int80 from int256, reverting on\r\n     * overflow (when the input is less than smallest int80 or\r\n     * greater than largest int80).\r\n     *\r\n     * Counterpart to Solidity's `int80` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 80 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\r\n        downcasted = int80(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int72 from int256, reverting on\r\n     * overflow (when the input is less than smallest int72 or\r\n     * greater than largest int72).\r\n     *\r\n     * Counterpart to Solidity's `int72` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 72 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\r\n        downcasted = int72(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int64 from int256, reverting on\r\n     * overflow (when the input is less than smallest int64 or\r\n     * greater than largest int64).\r\n     *\r\n     * Counterpart to Solidity's `int64` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 64 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\r\n        downcasted = int64(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int56 from int256, reverting on\r\n     * overflow (when the input is less than smallest int56 or\r\n     * greater than largest int56).\r\n     *\r\n     * Counterpart to Solidity's `int56` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 56 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\r\n        downcasted = int56(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int48 from int256, reverting on\r\n     * overflow (when the input is less than smallest int48 or\r\n     * greater than largest int48).\r\n     *\r\n     * Counterpart to Solidity's `int48` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 48 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\r\n        downcasted = int48(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int40 from int256, reverting on\r\n     * overflow (when the input is less than smallest int40 or\r\n     * greater than largest int40).\r\n     *\r\n     * Counterpart to Solidity's `int40` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 40 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\r\n        downcasted = int40(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int32 from int256, reverting on\r\n     * overflow (when the input is less than smallest int32 or\r\n     * greater than largest int32).\r\n     *\r\n     * Counterpart to Solidity's `int32` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 32 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\r\n        downcasted = int32(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int24 from int256, reverting on\r\n     * overflow (when the input is less than smallest int24 or\r\n     * greater than largest int24).\r\n     *\r\n     * Counterpart to Solidity's `int24` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 24 bits\r\n     *\r\n     * _Available since v4.7._\r\n     */\r\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\r\n        downcasted = int24(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int16 from int256, reverting on\r\n     * overflow (when the input is less than smallest int16 or\r\n     * greater than largest int16).\r\n     *\r\n     * Counterpart to Solidity's `int16` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 16 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\r\n        downcasted = int16(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the downcasted int8 from int256, reverting on\r\n     * overflow (when the input is less than smallest int8 or\r\n     * greater than largest int8).\r\n     *\r\n     * Counterpart to Solidity's `int8` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must fit into 8 bits\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\r\n        downcasted = int8(value);\r\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an unsigned uint256 into a signed int256.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - input must be less than or equal to maxInt256.\r\n     *\r\n     * _Available since v3.0._\r\n     */\r\n    function toInt256(uint256 value) internal pure returns (int256) {\r\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\r\n        require(value \u003c= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\r\n        return int256(value);\r\n    }\r\n}\r\n\r\n/*\r\n * ABDK Math Quad Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\r\n * Author: Mikhail Vladimirov \u003cmikhail.vladimirov@gmail.com\u003e\r\n */\r\n\r\n/**\r\n * Smart contract library of mathematical functions operating with IEEE 754\r\n * quadruple-precision binary floating-point numbers (quadruple precision\r\n * numbers).  As long as quadruple precision numbers are 16-bytes long, they are\r\n * represented by bytes16 type.\r\n */\r\nlibrary ABDKMathQuad {\r\n  /*\r\n   * 0.\r\n   */\r\n  bytes16 private constant POSITIVE_ZERO = 0x00000000000000000000000000000000;\r\n\r\n  /*\r\n   * -0.\r\n   */\r\n  bytes16 private constant NEGATIVE_ZERO = 0x80000000000000000000000000000000;\r\n\r\n  /*\r\n   * +Infinity.\r\n   */\r\n  bytes16 private constant POSITIVE_INFINITY = 0x7FFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * -Infinity.\r\n   */\r\n  bytes16 private constant NEGATIVE_INFINITY = 0xFFFF0000000000000000000000000000;\r\n\r\n  /*\r\n   * Canonical NaN value.\r\n   */\r\n  bytes16 private constant NaN = 0x7FFF8000000000000000000000000000;\r\n\r\n  /**\r\n   * Convert signed 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x signed 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromInt (int256 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        // We rely on overflow behavior here\r\n        uint256 result = uint256 (x \u003e 0 ? x : -x);\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb \u003c 112) result \u003c\u003c= 112 - msb;\r\n        else if (msb \u003e 112) result \u003e\u003e= msb - 112;\r\n\r\n        result = result \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb \u003c\u003c 112;\r\n        if (x \u003c 0) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 256-bit integer number\r\n   * rounding towards zero.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 256-bit integer number\r\n   */\r\n  function toInt (bytes16 x) internal pure returns (int256) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      require (exponent \u003c= 16638); // Overflow\r\n      if (exponent \u003c 16383) return 0; // Underflow\r\n\r\n      uint256 result = uint256 (uint128 (x)) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent \u003c 16495) result \u003e\u003e= 16495 - exponent;\r\n      else if (exponent \u003e 16495) result \u003c\u003c= exponent - 16495;\r\n\r\n      if (uint128 (x) \u003e= 0x80000000000000000000000000000000) { // Negative\r\n        require (result \u003c= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (result); // We rely on overflow behavior here\r\n      } else {\r\n        require (result \u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert unsigned 256-bit integer number into quadruple precision number.\r\n   *\r\n   * @param x unsigned 256-bit integer number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromUInt (uint256 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        uint256 result = x;\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb \u003c 112) result \u003c\u003c= 112 - msb;\r\n        else if (msb \u003e 112) result \u003e\u003e= msb - 112;\r\n\r\n        result = result \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16383 + msb \u003c\u003c 112;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into unsigned 256-bit integer number\r\n   * rounding towards zero.  Revert on underflow.  Note, that negative floating\r\n   * point numbers in range (-1.0 .. 0.0) may be converted to unsigned integer\r\n   * without error, because they are rounded to zero.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return unsigned 256-bit integer number\r\n   */\r\n  function toUInt (bytes16 x) internal pure returns (uint256) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      if (exponent \u003c 16383) return 0; // Underflow\r\n\r\n      require (uint128 (x) \u003c 0x80000000000000000000000000000000); // Negative\r\n\r\n      require (exponent \u003c= 16638); // Overflow\r\n      uint256 result = uint256 (uint128 (x)) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent \u003c 16495) result \u003e\u003e= 16495 - exponent;\r\n      else if (exponent \u003e 16495) result \u003c\u003c= exponent - 16495;\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 128.128 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 128.128 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from128x128 (int256 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        // We rely on overflow behavior here\r\n        uint256 result = uint256 (x \u003e 0 ? x : -x);\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb \u003c 112) result \u003c\u003c= 112 - msb;\r\n        else if (msb \u003e 112) result \u003e\u003e= msb - 112;\r\n\r\n        result = result \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16255 + msb \u003c\u003c 112;\r\n        if (x \u003c 0) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 128.128 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 128.128 bit fixed point number\r\n   */\r\n  function to128x128 (bytes16 x) internal pure returns (int256) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      require (exponent \u003c= 16510); // Overflow\r\n      if (exponent \u003c 16255) return 0; // Underflow\r\n\r\n      uint256 result = uint256 (uint128 (x)) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent \u003c 16367) result \u003e\u003e= 16367 - exponent;\r\n      else if (exponent \u003e 16367) result \u003c\u003c= exponent - 16367;\r\n\r\n      if (uint128 (x) \u003e= 0x80000000000000000000000000000000) { // Negative\r\n        require (result \u003c= 0x8000000000000000000000000000000000000000000000000000000000000000);\r\n        return -int256 (result); // We rely on overflow behavior here\r\n      } else {\r\n        require (result \u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int256 (result);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert signed 64.64 bit fixed point number into quadruple precision\r\n   * number.\r\n   *\r\n   * @param x signed 64.64 bit fixed point number\r\n   * @return quadruple precision number\r\n   */\r\n  function from64x64 (int128 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (x == 0) return bytes16 (0);\r\n      else {\r\n        // We rely on overflow behavior here\r\n        uint256 result = uint128 (x \u003e 0 ? x : -x);\r\n\r\n        uint256 msb = mostSignificantBit (result);\r\n        if (msb \u003c 112) result \u003c\u003c= 112 - msb;\r\n        else if (msb \u003e 112) result \u003e\u003e= msb - 112;\r\n\r\n        result = result \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF | 16319 + msb \u003c\u003c 112;\r\n        if (x \u003c 0) result |= 0x80000000000000000000000000000000;\r\n\r\n        return bytes16 (uint128 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into signed 64.64 bit fixed point\r\n   * number.  Revert on overflow.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return signed 64.64 bit fixed point number\r\n   */\r\n  function to64x64 (bytes16 x) internal pure returns (int128) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      require (exponent \u003c= 16446); // Overflow\r\n      if (exponent \u003c 16319) return 0; // Underflow\r\n\r\n      uint256 result = uint256 (uint128 (x)) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF |\r\n        0x10000000000000000000000000000;\r\n\r\n      if (exponent \u003c 16431) result \u003e\u003e= 16431 - exponent;\r\n      else if (exponent \u003e 16431) result \u003c\u003c= exponent - 16431;\r\n\r\n      if (uint128 (x) \u003e= 0x80000000000000000000000000000000) { // Negative\r\n        require (result \u003c= 0x80000000000000000000000000000000);\r\n        return -int128 (int256 (result)); // We rely on overflow behavior here\r\n      } else {\r\n        require (result \u003c= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\r\n        return int128 (int256 (result));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert octuple precision number into quadruple precision number.\r\n   *\r\n   * @param x octuple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromOctuple (bytes32 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      bool negative = x \u0026 0x8000000000000000000000000000000000000000000000000000000000000000 \u003e 0;\r\n\r\n      uint256 exponent = uint256 (x) \u003e\u003e 236 \u0026 0x7FFFF;\r\n      uint256 significand = uint256 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FFFF) {\r\n        if (significand \u003e 0) return NaN;\r\n        else return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n      }\r\n\r\n      if (exponent \u003e 278526)\r\n        return negative ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n      else if (exponent \u003c 245649)\r\n        return negative ? NEGATIVE_ZERO : POSITIVE_ZERO;\r\n      else if (exponent \u003c 245761) {\r\n        significand = (significand | 0x100000000000000000000000000000000000000000000000000000000000) \u003e\u003e 245885 - exponent;\r\n        exponent = 0;\r\n      } else {\r\n        significand \u003e\u003e= 124;\r\n        exponent -= 245760;\r\n      }\r\n\r\n      uint128 result = uint128 (significand | exponent \u003c\u003c 112);\r\n      if (negative) result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into octuple precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return octuple precision number\r\n   */\r\n  function toOctuple (bytes16 x) internal pure returns (bytes32) {\r\n    unchecked {\r\n      uint256 exponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      uint256 result = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FFF) exponent = 0x7FFFF; // Infinity or NaN\r\n      else if (exponent == 0) {\r\n        if (result \u003e 0) {\r\n          uint256 msb = mostSignificantBit (result);\r\n          result = result \u003c\u003c 236 - msb \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          exponent = 245649 + msb;\r\n        }\r\n      } else {\r\n        result \u003c\u003c= 124;\r\n        exponent += 245760;\r\n      }\r\n\r\n      result |= exponent \u003c\u003c 236;\r\n      if (uint128 (x) \u003e= 0x80000000000000000000000000000000)\r\n        result |= 0x8000000000000000000000000000000000000000000000000000000000000000;\r\n\r\n      return bytes32 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert double precision number into quadruple precision number.\r\n   *\r\n   * @param x double precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function fromDouble (bytes8 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 exponent = uint64 (x) \u003e\u003e 52 \u0026 0x7FF;\r\n\r\n      uint256 result = uint64 (x) \u0026 0xFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FF) exponent = 0x7FFF; // Infinity or NaN\r\n      else if (exponent == 0) {\r\n        if (result \u003e 0) {\r\n          uint256 msb = mostSignificantBit (result);\r\n          result = result \u003c\u003c 112 - msb \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          exponent = 15309 + msb;\r\n        }\r\n      } else {\r\n        result \u003c\u003c= 60;\r\n        exponent += 15360;\r\n      }\r\n\r\n      result |= exponent \u003c\u003c 112;\r\n      if (x \u0026 0x8000000000000000 \u003e 0)\r\n        result |= 0x80000000000000000000000000000000;\r\n\r\n      return bytes16 (uint128 (result));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert quadruple precision number into double precision number.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return double precision number\r\n   */\r\n  function toDouble (bytes16 x) internal pure returns (bytes8) {\r\n    unchecked {\r\n      bool negative = uint128 (x) \u003e= 0x80000000000000000000000000000000;\r\n\r\n      uint256 exponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n      uint256 significand = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (exponent == 0x7FFF) {\r\n        if (significand \u003e 0) return 0x7FF8000000000000; // NaN\r\n        else return negative ?\r\n            bytes8 (0xFFF0000000000000) : // -Infinity\r\n            bytes8 (0x7FF0000000000000); // Infinity\r\n      }\r\n\r\n      if (exponent \u003e 17406)\r\n        return negative ?\r\n            bytes8 (0xFFF0000000000000) : // -Infinity\r\n            bytes8 (0x7FF0000000000000); // Infinity\r\n      else if (exponent \u003c 15309)\r\n        return negative ?\r\n            bytes8 (0x8000000000000000) : // -0\r\n            bytes8 (0x0000000000000000); // 0\r\n      else if (exponent \u003c 15361) {\r\n        significand = (significand | 0x10000000000000000000000000000) \u003e\u003e 15421 - exponent;\r\n        exponent = 0;\r\n      } else {\r\n        significand \u003e\u003e= 60;\r\n        exponent -= 15360;\r\n      }\r\n\r\n      uint64 result = uint64 (significand | exponent \u003c\u003c 52);\r\n      if (negative) result |= 0x8000000000000000;\r\n\r\n      return bytes8 (result);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is NaN, false otherwise\r\n   */\r\n  function isNaN (bytes16 x) internal pure returns (bool) {\r\n    unchecked {\r\n      return uint128 (x) \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF \u003e\r\n        0x7FFF0000000000000000000000000000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether given quadruple precision number is positive or negative\r\n   * infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return true if x is positive or negative infinity, false otherwise\r\n   */\r\n  function isInfinity (bytes16 x) internal pure returns (bool) {\r\n    unchecked {\r\n      return uint128 (x) \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ==\r\n        0x7FFF0000000000000000000000000000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sign of x, i.e. -1 if x is negative, 0 if x if zero, and 1 if x\r\n   * is positive.  Note that sign (-0) is zero.  Revert if x is NaN. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @return sign of x\r\n   */\r\n  function sign (bytes16 x) internal pure returns (int8) {\r\n    unchecked {\r\n      uint128 absoluteX = uint128 (x) \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      require (absoluteX \u003c= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n      if (absoluteX == 0) return 0;\r\n      else if (uint128 (x) \u003e= 0x80000000000000000000000000000000) return -1;\r\n      else return 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate sign (x - y).  Revert if either argument is NaN, or both\r\n   * arguments are infinities of the same sign. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return sign (x - y)\r\n   */\r\n  function cmp (bytes16 x, bytes16 y) internal pure returns (int8) {\r\n    unchecked {\r\n      uint128 absoluteX = uint128 (x) \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      require (absoluteX \u003c= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n      uint128 absoluteY = uint128 (y) \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      require (absoluteY \u003c= 0x7FFF0000000000000000000000000000); // Not NaN\r\n\r\n      // Not infinities of the same sign\r\n      require (x != y || absoluteX \u003c 0x7FFF0000000000000000000000000000);\r\n\r\n      if (x == y) return 0;\r\n      else {\r\n        bool negativeX = uint128 (x) \u003e= 0x80000000000000000000000000000000;\r\n        bool negativeY = uint128 (y) \u003e= 0x80000000000000000000000000000000;\r\n\r\n        if (negativeX) {\r\n          if (negativeY) return absoluteX \u003e absoluteY ? -1 : int8 (1);\r\n          else return -1; \r\n        } else {\r\n          if (negativeY) return 1;\r\n          else return absoluteX \u003e absoluteY ? int8 (1) : -1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether x equals y.  NaN, infinity, and -infinity are not equal to\r\n   * anything. \r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return true if x equals to y, false otherwise\r\n   */\r\n  function eq (bytes16 x, bytes16 y) internal pure returns (bool) {\r\n    unchecked {\r\n      if (x == y) {\r\n        return uint128 (x) \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF \u003c\r\n          0x7FFF0000000000000000000000000000;\r\n      } else return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x + y.  Special values behave in the following way:\r\n   *\r\n   * NaN + x = NaN for any x.\r\n   * Infinity + x = Infinity for any finite x.\r\n   * -Infinity + x = -Infinity for any finite x.\r\n   * Infinity + Infinity = Infinity.\r\n   * -Infinity + -Infinity = -Infinity.\r\n   * Infinity + -Infinity = -Infinity + Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function add (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 xExponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n      uint256 yExponent = uint128 (y) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      if (xExponent == 0x7FFF) {\r\n        if (yExponent == 0x7FFF) { \r\n          if (x == y) return x;\r\n          else return NaN;\r\n        } else return x; \r\n      } else if (yExponent == 0x7FFF) return y;\r\n      else {\r\n        bool xSign = uint128 (x) \u003e= 0x80000000000000000000000000000000;\r\n        uint256 xSignifier = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        bool ySign = uint128 (y) \u003e= 0x80000000000000000000000000000000;\r\n        uint256 ySignifier = uint128 (y) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (yExponent == 0) yExponent = 1;\r\n        else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xSignifier == 0) return y == NEGATIVE_ZERO ? POSITIVE_ZERO : y;\r\n        else if (ySignifier == 0) return x == NEGATIVE_ZERO ? POSITIVE_ZERO : x;\r\n        else {\r\n          int256 delta = int256 (xExponent) - int256 (yExponent);\r\n  \r\n          if (xSign == ySign) {\r\n            if (delta \u003e 112) return x;\r\n            else if (delta \u003e 0) ySignifier \u003e\u003e= uint256 (delta);\r\n            else if (delta \u003c -112) return y;\r\n            else if (delta \u003c 0) {\r\n              xSignifier \u003e\u003e= uint256 (-delta);\r\n              xExponent = yExponent;\r\n            }\r\n  \r\n            xSignifier += ySignifier;\r\n  \r\n            if (xSignifier \u003e= 0x20000000000000000000000000000) {\r\n              xSignifier \u003e\u003e= 1;\r\n              xExponent += 1;\r\n            }\r\n  \r\n            if (xExponent == 0x7FFF)\r\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n            else {\r\n              if (xSignifier \u003c 0x10000000000000000000000000000) xExponent = 0;\r\n              else xSignifier \u0026= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n  \r\n              return bytes16 (uint128 (\r\n                  (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n                  (xExponent \u003c\u003c 112) |\r\n                  xSignifier)); \r\n            }\r\n          } else {\r\n            if (delta \u003e 0) {\r\n              xSignifier \u003c\u003c= 1;\r\n              xExponent -= 1;\r\n            } else if (delta \u003c 0) {\r\n              ySignifier \u003c\u003c= 1;\r\n              xExponent = yExponent - 1;\r\n            }\r\n\r\n            if (delta \u003e 112) ySignifier = 1;\r\n            else if (delta \u003e 1) ySignifier = (ySignifier - 1 \u003e\u003e uint256 (delta - 1)) + 1;\r\n            else if (delta \u003c -112) xSignifier = 1;\r\n            else if (delta \u003c -1) xSignifier = (xSignifier - 1 \u003e\u003e uint256 (-delta - 1)) + 1;\r\n\r\n            if (xSignifier \u003e= ySignifier) xSignifier -= ySignifier;\r\n            else {\r\n              xSignifier = ySignifier - xSignifier;\r\n              xSign = ySign;\r\n            }\r\n\r\n            if (xSignifier == 0)\r\n              return POSITIVE_ZERO;\r\n\r\n            uint256 msb = mostSignificantBit (xSignifier);\r\n\r\n            if (msb == 113) {\r\n              xSignifier = xSignifier \u003e\u003e 1 \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n              xExponent += 1;\r\n            } else if (msb \u003c 112) {\r\n              uint256 shift = 112 - msb;\r\n              if (xExponent \u003e shift) {\r\n                xSignifier = xSignifier \u003c\u003c shift \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n                xExponent -= shift;\r\n              } else {\r\n                xSignifier \u003c\u003c= xExponent - 1;\r\n                xExponent = 0;\r\n              }\r\n            } else xSignifier \u0026= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n            if (xExponent == 0x7FFF)\r\n              return xSign ? NEGATIVE_INFINITY : POSITIVE_INFINITY;\r\n            else return bytes16 (uint128 (\r\n                (xSign ? 0x80000000000000000000000000000000 : 0) |\r\n                (xExponent \u003c\u003c 112) |\r\n                xSignifier));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x - y.  Special values behave in the following way:\r\n   *\r\n   * NaN - x = NaN for any x.\r\n   * Infinity - x = Infinity for any finite x.\r\n   * -Infinity - x = -Infinity for any finite x.\r\n   * Infinity - -Infinity = Infinity.\r\n   * -Infinity - Infinity = -Infinity.\r\n   * Infinity - Infinity = -Infinity - -Infinity = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sub (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return add (x, y ^ 0x80000000000000000000000000000000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x * y.  Special values behave in the following way:\r\n   *\r\n   * NaN * x = NaN for any x.\r\n   * Infinity * x = Infinity for any finite positive x.\r\n   * Infinity * x = -Infinity for any finite negative x.\r\n   * -Infinity * x = -Infinity for any finite positive x.\r\n   * -Infinity * x = Infinity for any finite negative x.\r\n   * Infinity * 0 = NaN.\r\n   * -Infinity * 0 = NaN.\r\n   * Infinity * Infinity = Infinity.\r\n   * Infinity * -Infinity = -Infinity.\r\n   * -Infinity * Infinity = -Infinity.\r\n   * -Infinity * -Infinity = Infinity.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function mul (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 xExponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n      uint256 yExponent = uint128 (y) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      if (xExponent == 0x7FFF) {\r\n        if (yExponent == 0x7FFF) {\r\n          if (x == y) return x ^ y \u0026 0x80000000000000000000000000000000;\r\n          else if (x ^ y == 0x80000000000000000000000000000000) return x | y;\r\n          else return NaN;\r\n        } else {\r\n          if (y \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n          else return x ^ y \u0026 0x80000000000000000000000000000000;\r\n        }\r\n      } else if (yExponent == 0x7FFF) {\r\n          if (x \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n          else return y ^ x \u0026 0x80000000000000000000000000000000;\r\n      } else {\r\n        uint256 xSignifier = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        uint256 ySignifier = uint128 (y) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (yExponent == 0) yExponent = 1;\r\n        else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n        xSignifier *= ySignifier;\r\n        if (xSignifier == 0)\r\n          return (x ^ y) \u0026 0x80000000000000000000000000000000 \u003e 0 ?\r\n              NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n        xExponent += yExponent;\r\n\r\n        uint256 msb =\r\n          xSignifier \u003e= 0x200000000000000000000000000000000000000000000000000000000 ? 225 :\r\n          xSignifier \u003e= 0x100000000000000000000000000000000000000000000000000000000 ? 224 :\r\n          mostSignificantBit (xSignifier);\r\n\r\n        if (xExponent + msb \u003c 16496) { // Underflow\r\n          xExponent = 0;\r\n          xSignifier = 0;\r\n        } else if (xExponent + msb \u003c 16608) { // Subnormal\r\n          if (xExponent \u003c 16496)\r\n            xSignifier \u003e\u003e= 16496 - xExponent;\r\n          else if (xExponent \u003e 16496)\r\n            xSignifier \u003c\u003c= xExponent - 16496;\r\n          xExponent = 0;\r\n        } else if (xExponent + msb \u003e 49373) {\r\n          xExponent = 0x7FFF;\r\n          xSignifier = 0;\r\n        } else {\r\n          if (msb \u003e 112)\r\n            xSignifier \u003e\u003e= msb - 112;\r\n          else if (msb \u003c 112)\r\n            xSignifier \u003c\u003c= 112 - msb;\r\n\r\n          xSignifier \u0026= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n          xExponent = xExponent + msb - 16607;\r\n        }\r\n\r\n        return bytes16 (uint128 (uint128 ((x ^ y) \u0026 0x80000000000000000000000000000000) |\r\n            xExponent \u003c\u003c 112 | xSignifier));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate x / y.  Special values behave in the following way:\r\n   *\r\n   * NaN / x = NaN for any x.\r\n   * x / NaN = NaN for any x.\r\n   * Infinity / x = Infinity for any finite non-negative x.\r\n   * Infinity / x = -Infinity for any finite negative x including -0.\r\n   * -Infinity / x = -Infinity for any finite non-negative x.\r\n   * -Infinity / x = Infinity for any finite negative x including -0.\r\n   * x / Infinity = 0 for any finite non-negative x.\r\n   * x / -Infinity = -0 for any finite non-negative x.\r\n   * x / Infinity = -0 for any finite non-negative x including -0.\r\n   * x / -Infinity = 0 for any finite non-negative x including -0.\r\n   * \r\n   * Infinity / Infinity = NaN.\r\n   * Infinity / -Infinity = -NaN.\r\n   * -Infinity / Infinity = -NaN.\r\n   * -Infinity / -Infinity = NaN.\r\n   *\r\n   * Division by zero behaves in the following way:\r\n   *\r\n   * x / 0 = Infinity for any finite positive x.\r\n   * x / -0 = -Infinity for any finite positive x.\r\n   * x / 0 = -Infinity for any finite negative x.\r\n   * x / -0 = Infinity for any finite negative x.\r\n   * 0 / 0 = NaN.\r\n   * 0 / -0 = NaN.\r\n   * -0 / 0 = NaN.\r\n   * -0 / -0 = NaN.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @param y quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function div (bytes16 x, bytes16 y) internal pure returns (bytes16) {\r\n    unchecked {\r\n      uint256 xExponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n      uint256 yExponent = uint128 (y) \u003e\u003e 112 \u0026 0x7FFF;\r\n\r\n      if (xExponent == 0x7FFF) {\r\n        if (yExponent == 0x7FFF) return NaN;\r\n        else return x ^ y \u0026 0x80000000000000000000000000000000;\r\n      } else if (yExponent == 0x7FFF) {\r\n        if (y \u0026 0x0000FFFFFFFFFFFFFFFFFFFFFFFFFFFF != 0) return NaN;\r\n        else return POSITIVE_ZERO | (x ^ y) \u0026 0x80000000000000000000000000000000;\r\n      } else if (y \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) {\r\n        if (x \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF == 0) return NaN;\r\n        else return POSITIVE_INFINITY | (x ^ y) \u0026 0x80000000000000000000000000000000;\r\n      } else {\r\n        uint256 ySignifier = uint128 (y) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (yExponent == 0) yExponent = 1;\r\n        else ySignifier |= 0x10000000000000000000000000000;\r\n\r\n        uint256 xSignifier = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xExponent == 0) {\r\n          if (xSignifier != 0) {\r\n            uint shift = 226 - mostSignificantBit (xSignifier);\r\n\r\n            xSignifier \u003c\u003c= shift;\r\n\r\n            xExponent = 1;\r\n            yExponent += shift - 114;\r\n          }\r\n        }\r\n        else {\r\n          xSignifier = (xSignifier | 0x10000000000000000000000000000) \u003c\u003c 114;\r\n        }\r\n\r\n        xSignifier = xSignifier / ySignifier;\r\n        if (xSignifier == 0)\r\n          return (x ^ y) \u0026 0x80000000000000000000000000000000 \u003e 0 ?\r\n              NEGATIVE_ZERO : POSITIVE_ZERO;\r\n\r\n        assert (xSignifier \u003e= 0x1000000000000000000000000000);\r\n\r\n        uint256 msb =\r\n          xSignifier \u003e= 0x80000000000000000000000000000 ? mostSignificantBit (xSignifier) :\r\n          xSignifier \u003e= 0x40000000000000000000000000000 ? 114 :\r\n          xSignifier \u003e= 0x20000000000000000000000000000 ? 113 : 112;\r\n\r\n        if (xExponent + msb \u003e yExponent + 16497) { // Overflow\r\n          xExponent = 0x7FFF;\r\n          xSignifier = 0;\r\n        } else if (xExponent + msb + 16380  \u003c yExponent) { // Underflow\r\n          xExponent = 0;\r\n          xSignifier = 0;\r\n        } else if (xExponent + msb + 16268  \u003c yExponent) { // Subnormal\r\n          if (xExponent + 16380 \u003e yExponent)\r\n            xSignifier \u003c\u003c= xExponent + 16380 - yExponent;\r\n          else if (xExponent + 16380 \u003c yExponent)\r\n            xSignifier \u003e\u003e= yExponent - xExponent - 16380;\r\n\r\n          xExponent = 0;\r\n        } else { // Normal\r\n          if (msb \u003e 112)\r\n            xSignifier \u003e\u003e= msb - 112;\r\n\r\n          xSignifier \u0026= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n          xExponent = xExponent + msb + 16269 - yExponent;\r\n        }\r\n\r\n        return bytes16 (uint128 (uint128 ((x ^ y) \u0026 0x80000000000000000000000000000000) |\r\n            xExponent \u003c\u003c 112 | xSignifier));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate -x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function neg (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return x ^ 0x80000000000000000000000000000000;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate |x|.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function abs (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return x \u0026 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate square root of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function sqrt (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (uint128 (x) \u003e  0x80000000000000000000000000000000) return NaN;\r\n      else {\r\n        uint256 xExponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n        if (xExponent == 0x7FFF) return x;\r\n        else {\r\n          uint256 xSignifier = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          if (xExponent == 0) xExponent = 1;\r\n          else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n          if (xSignifier == 0) return POSITIVE_ZERO;\r\n\r\n          bool oddExponent = xExponent \u0026 0x1 == 0;\r\n          xExponent = xExponent + 16383 \u003e\u003e 1;\r\n\r\n          if (oddExponent) {\r\n            if (xSignifier \u003e= 0x10000000000000000000000000000)\r\n              xSignifier \u003c\u003c= 113;\r\n            else {\r\n              uint256 msb = mostSignificantBit (xSignifier);\r\n              uint256 shift = (226 - msb) \u0026 0xFE;\r\n              xSignifier \u003c\u003c= shift;\r\n              xExponent -= shift - 112 \u003e\u003e 1;\r\n            }\r\n          } else {\r\n            if (xSignifier \u003e= 0x10000000000000000000000000000)\r\n              xSignifier \u003c\u003c= 112;\r\n            else {\r\n              uint256 msb = mostSignificantBit (xSignifier);\r\n              uint256 shift = (225 - msb) \u0026 0xFE;\r\n              xSignifier \u003c\u003c= shift;\r\n              xExponent -= shift - 112 \u003e\u003e 1;\r\n            }\r\n          }\r\n\r\n          uint256 r = 0x10000000000000000000000000000;\r\n          r = (r + xSignifier / r) \u003e\u003e 1;\r\n          r = (r + xSignifier / r) \u003e\u003e 1;\r\n          r = (r + xSignifier / r) \u003e\u003e 1;\r\n          r = (r + xSignifier / r) \u003e\u003e 1;\r\n          r = (r + xSignifier / r) \u003e\u003e 1;\r\n          r = (r + xSignifier / r) \u003e\u003e 1;\r\n          r = (r + xSignifier / r) \u003e\u003e 1; // Seven iterations should be enough\r\n          uint256 r1 = xSignifier / r;\r\n          if (r1 \u003c r) r = r1;\r\n\r\n          return bytes16 (uint128 (xExponent \u003c\u003c 112 | r \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate binary logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function log_2 (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      if (uint128 (x) \u003e 0x80000000000000000000000000000000) return NaN;\r\n      else if (x == 0x3FFF0000000000000000000000000000) return POSITIVE_ZERO; \r\n      else {\r\n        uint256 xExponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n        if (xExponent == 0x7FFF) return x;\r\n        else {\r\n          uint256 xSignifier = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          if (xExponent == 0) xExponent = 1;\r\n          else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n          if (xSignifier == 0) return NEGATIVE_INFINITY;\r\n\r\n          bool resultNegative;\r\n          uint256 resultExponent = 16495;\r\n          uint256 resultSignifier;\r\n\r\n          if (xExponent \u003e= 0x3FFF) {\r\n            resultNegative = false;\r\n            resultSignifier = xExponent - 0x3FFF;\r\n            xSignifier \u003c\u003c= 15;\r\n          } else {\r\n            resultNegative = true;\r\n            if (xSignifier \u003e= 0x10000000000000000000000000000) {\r\n              resultSignifier = 0x3FFE - xExponent;\r\n              xSignifier \u003c\u003c= 15;\r\n            } else {\r\n              uint256 msb = mostSignificantBit (xSignifier);\r\n              resultSignifier = 16493 - msb;\r\n              xSignifier \u003c\u003c= 127 - msb;\r\n            }\r\n          }\r\n\r\n          if (xSignifier == 0x80000000000000000000000000000000) {\r\n            if (resultNegative) resultSignifier += 1;\r\n            uint256 shift = 112 - mostSignificantBit (resultSignifier);\r\n            resultSignifier \u003c\u003c= shift;\r\n            resultExponent -= shift;\r\n          } else {\r\n            uint256 bb = resultNegative ? 1 : 0;\r\n            while (resultSignifier \u003c 0x10000000000000000000000000000) {\r\n              resultSignifier \u003c\u003c= 1;\r\n              resultExponent -= 1;\r\n  \r\n              xSignifier *= xSignifier;\r\n              uint256 b = xSignifier \u003e\u003e 255;\r\n              resultSignifier += b ^ bb;\r\n              xSignifier \u003e\u003e= 127 + b;\r\n            }\r\n          }\r\n\r\n          return bytes16 (uint128 ((resultNegative ? 0x80000000000000000000000000000000 : 0) |\r\n              resultExponent \u003c\u003c 112 | resultSignifier \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate natural logarithm of x.  Return NaN on negative x excluding -0.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function ln (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return mul (log_2 (x), 0x3FFE62E42FEFA39EF35793C7673007E5);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate 2^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function pow_2 (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      bool xNegative = uint128 (x) \u003e 0x80000000000000000000000000000000;\r\n      uint256 xExponent = uint128 (x) \u003e\u003e 112 \u0026 0x7FFF;\r\n      uint256 xSignifier = uint128 (x) \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n      if (xExponent == 0x7FFF \u0026\u0026 xSignifier != 0) return NaN;\r\n      else if (xExponent \u003e 16397)\r\n        return xNegative ? POSITIVE_ZERO : POSITIVE_INFINITY;\r\n      else if (xExponent \u003c 16255)\r\n        return 0x3FFF0000000000000000000000000000;\r\n      else {\r\n        if (xExponent == 0) xExponent = 1;\r\n        else xSignifier |= 0x10000000000000000000000000000;\r\n\r\n        if (xExponent \u003e 16367)\r\n          xSignifier \u003c\u003c= xExponent - 16367;\r\n        else if (xExponent \u003c 16367)\r\n          xSignifier \u003e\u003e= 16367 - xExponent;\r\n\r\n        if (xNegative \u0026\u0026 xSignifier \u003e 0x406E00000000000000000000000000000000)\r\n          return POSITIVE_ZERO;\r\n\r\n        if (!xNegative \u0026\u0026 xSignifier \u003e 0x3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n          return POSITIVE_INFINITY;\r\n\r\n        uint256 resultExponent = xSignifier \u003e\u003e 128;\r\n        xSignifier \u0026= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        if (xNegative \u0026\u0026 xSignifier != 0) {\r\n          xSignifier = ~xSignifier;\r\n          resultExponent += 1;\r\n        }\r\n\r\n        uint256 resultSignifier = 0x80000000000000000000000000000000;\r\n        if (xSignifier \u0026 0x80000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x16A09E667F3BCC908B2FB1366EA957D3E \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1306FE0A31B7152DE8D5A46305C85EDEC \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1172B83C7D517ADCDF7C8C50EB14A791F \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10B5586CF9890F6298B92B71842A98363 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1059B0D31585743AE7C548EB68CA417FD \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10163DA9FB33356D84A66AE336DCDFA3F \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100B1AFA5ABCBED6129AB13EC11DC9543 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10058C86DA1C09EA1FF19D294CF2F679B \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1002C605E2E8CEC506D21BFC89A23A00F \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100162F3904051FA128BCA9C55C31E5DF \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000B175EFFDC76BA38E31671CA939725 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100058BA01FB9F96D6CACD4B180917C3D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10002C5CC37DA9491D0985C348C68E7B3 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000162E525EE054754457D5995292026 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000B17255775C040618BF4A4ADE83FC \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000162E43F4F831060E02D839A9D16D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000B1721BCFC99D9F890EA06911763 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000058B90CF1E6D97F9CA14DBCC1628 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000002C5C863B73F016468F6BAC5CA2B \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000162E430E5A18F6119E3C02282A5 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000B1721835514B86E6D96EFD1BFE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000058B90C0B48C6BE5DF846C5B2EF \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000002C5C8601CC6B9E94213C72737A \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000162E42FFF037DF38AA2B219F06 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000B17217FBA9C739AA5819F44F9 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000058B90BFCDEE5ACD3C1CEDC823 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000002C5C85FE31F35A6A30DA1BE50 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000162E42FF0999CE3541B9FFFCF \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000B17217F80F4EF5AADDA45554 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000058B90BFBF8479BD5A81B51AD \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000002C5C85FDF84BD62AE30A74CC \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000162E42FEFB2FED257559BDAA \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000B17217F7D5A7716BBA4A9AE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000058B90BFBE9DDBAC5E109CCE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000002C5C85FDF4B15DE6F17EB0D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000162E42FEFA494F1478FDE05 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000B17217F7D20CF927C8E94C \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000058B90BFBE8F71CB4E4B33D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000002C5C85FDF477B662B26945 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000162E42FEFA3AE53369388C \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000B17217F7D1D351A389D40 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000058B90BFBE8E8B2D3D4EDE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000002C5C85FDF4741BEA6E77E \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000162E42FEFA39FE95583C2 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000B17217F7D1CFB72B45E1 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000058B90BFBE8E7CC35C3F0 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000002C5C85FDF473E242EA38 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000162E42FEFA39F02B772C \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000B17217F7D1CF7D83C1A \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000058B90BFBE8E7BDCBE2E \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000002C5C85FDF473DEA871F \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000162E42FEFA39EF44D91 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000B17217F7D1CF79E949 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000058B90BFBE8E7BCE544 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000002C5C85FDF473DE6ECA \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000162E42FEFA39EF366F \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000B17217F7D1CF79AFA \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000058B90BFBE8E7BCD6D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000002C5C85FDF473DE6B2 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000162E42FEFA39EF358 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000B17217F7D1CF79AB \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000058B90BFBE8E7BCD5 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000002C5C85FDF473DE6A \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000162E42FEFA39EF34 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000B17217F7D1CF799 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000058B90BFBE8E7BCC \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000002C5C85FDF473DE5 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000162E42FEFA39EF2 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000B17217F7D1CF78 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000058B90BFBE8E7BB \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000002C5C85FDF473DD \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000162E42FEFA39EE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000B17217F7D1CF6 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000058B90BFBE8E7A \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000002C5C85FDF473C \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000162E42FEFA39D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000B17217F7D1CE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000058B90BFBE8E6 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000002C5C85FDF472 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000162E42FEFA38 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000B17217F7D1B \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000058B90BFBE8D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000002C5C85FDF46 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000162E42FEFA2 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000B17217F7D0 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000058B90BFBE7 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000002C5C85FDF3 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000162E42FEF9 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000B17217F7C \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000058B90BFBD \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000002C5C85FDE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000162E42FEE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000B17217F6 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000058B90BFA \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000002C5C85FC \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000162E42FD \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000B17217E \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000058B90BE \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000002C5C85E \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000162E42E \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000B17216 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000058B90A \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000002C5C84 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000162E41 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000B1720 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000058B8F \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000002C5C7 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000162E3 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000B171 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8000 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000058B8 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000002C5B \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x2000 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000162D \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x1000 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000B16 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x800 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000058A \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x400 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000002C4 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x200 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000161 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x100 \u003e 0) resultSignifier = resultSignifier * 0x1000000000000000000000000000000B0 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x80 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000057 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x40 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000002B \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x20 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000015 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x10 \u003e 0) resultSignifier = resultSignifier * 0x10000000000000000000000000000000A \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x8 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000004 \u003e\u003e 128;\r\n        if (xSignifier \u0026 0x4 \u003e 0) resultSignifier = resultSignifier * 0x100000000000000000000000000000001 \u003e\u003e 128;\r\n\r\n        if (!xNegative) {\r\n          resultSignifier = resultSignifier \u003e\u003e 15 \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          resultExponent += 0x3FFF;\r\n        } else if (resultExponent \u003c= 0x3FFE) {\r\n          resultSignifier = resultSignifier \u003e\u003e 15 \u0026 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n          resultExponent = 0x3FFF - resultExponent;\r\n        } else {\r\n          resultSignifier = resultSignifier \u003e\u003e resultExponent - 16367;\r\n          resultExponent = 0;\r\n        }\r\n\r\n        return bytes16 (uint128 (resultExponent \u003c\u003c 112 | resultSignifier));\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate e^x.\r\n   *\r\n   * @param x quadruple precision number\r\n   * @return quadruple precision number\r\n   */\r\n  function exp (bytes16 x) internal pure returns (bytes16) {\r\n    unchecked {\r\n      return pow_2 (mul (x, 0x3FFF71547652B82FE1777D0FFDA0D23A));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of the most significant non-zero bit in binary representation of\r\n   * x.  Reverts if x is zero.\r\n   *\r\n   * @return index of the most significant non-zero bit in binary representation\r\n   *         of x\r\n   */\r\n  function mostSignificantBit (uint256 x) private pure returns (uint256) {\r\n    unchecked {\r\n      require (x \u003e 0);\r\n\r\n      uint256 result = 0;\r\n\r\n      if (x \u003e= 0x100000000000000000000000000000000) { x \u003e\u003e= 128; result += 128; }\r\n      if (x \u003e= 0x10000000000000000) { x \u003e\u003e= 64; result += 64; }\r\n      if (x \u003e= 0x100000000) { x \u003e\u003e= 32; result += 32; }\r\n      if (x \u003e= 0x10000) { x \u003e\u003e= 16; result += 16; }\r\n      if (x \u003e= 0x100) { x \u003e\u003e= 8; result += 8; }\r\n      if (x \u003e= 0x10) { x \u003e\u003e= 4; result += 4; }\r\n      if (x \u003e= 0x4) { x \u003e\u003e= 2; result += 2; }\r\n      if (x \u003e= 0x2) result += 1; // No need to shift x anymore\r\n\r\n      return result;\r\n    }\r\n  }\r\n}\r\n\r\nstruct AccountPowerUpData {\r\n    /// @dev  value with 18 decimals,\r\n    uint256 accountPwTokenAmount;\r\n    /// @dev  value with 18 decimals,\r\n    uint256 accountLpTokenAmount;\r\n    /// @dev value in format of ABDKMathQuad\r\n    bytes16 verticalShift;\r\n    /// @dev value in format of ABDKMathQuad\r\n    bytes16 horizontalShift;\r\n    /// @dev  value with 18 decimals,\r\n    uint256 logBase;\r\n    /// @dev  value with 18 decimals,\r\n    uint256 pwTokenModifier;\r\n    /// @dev  value with 18 decimals,\r\n    uint256 vectorOfCurve;\r\n}\r\n\r\n/// @title Library containing the core logic used in the Liquidity Mining module.\r\nlibrary MiningCalculationAccountPowerUp {\r\n    using SafeCast for uint256;\r\n    using SafeCast for int256;\r\n\r\n    uint256 constant SLOPE_1 = 5; //   5.0\r\n    uint256 constant BASE_1 = 2e17; //    0.2\r\n\r\n    uint256 constant SLOPE_2 = 2; //   2.0\r\n    uint256 constant BASE_2 = 26e16; //    0.26\r\n\r\n    uint256 constant SLOPE_3 = 15e17; //   1.5\r\n    uint256 constant BASE_3 = 28e16; //    0.28\r\n\r\n    uint256 constant SLOPE_4 = 1; //   1.0\r\n    uint256 constant BASE_4 = 31e16; //    0.31\r\n\r\n    uint256 constant SLOPE_5 = 5e17; //   0.5\r\n    uint256 constant BASE_5 = 35e16; //    0.35\r\n\r\n    function calculateAccountPowerUp(\r\n        AccountPowerUpData memory data_\r\n    ) external pure returns (uint256) {\r\n        if (data_.accountLpTokenAmount \u003c 1e18) {\r\n            return 0;\r\n        }\r\n\r\n        bytes16 accountPwTokenAmountQP = _toQuadruplePrecision(data_.accountPwTokenAmount, 1e18);\r\n        bytes16 lpTokenAmountQP = _toQuadruplePrecision(data_.accountLpTokenAmount, 1e18);\r\n        bytes16 ratio = ABDKMathQuad.div(accountPwTokenAmountQP, lpTokenAmountQP);\r\n\r\n        bytes16 result;\r\n        if (ABDKMathQuad.cmp(_toQuadruplePrecision(1e18, 10e18), ratio) \u003e= 0) {\r\n            result = accountPowerUpStepFunction(ratio);\r\n            bytes16 resultD18 = ABDKMathQuad.mul(result, ABDKMathQuad.fromUInt(1e18));\r\n            return ABDKMathQuad.toUInt(resultD18) + data_.vectorOfCurve;\r\n        } else {\r\n            bytes16 pwTokenAmountWithModifierQP = ABDKMathQuad.mul(\r\n                _toQuadruplePrecision(data_.pwTokenModifier, 1e18),\r\n                accountPwTokenAmountQP\r\n            );\r\n\r\n            bytes16 underLog = ABDKMathQuad.add(\r\n                ABDKMathQuad.div(pwTokenAmountWithModifierQP, lpTokenAmountQP),\r\n                data_.horizontalShift\r\n            );\r\n\r\n            result = ABDKMathQuad.add(\r\n                data_.verticalShift,\r\n                _log(_toQuadruplePrecision(data_.logBase, 1e18), underLog)\r\n            );\r\n            bytes16 resultD18 = ABDKMathQuad.mul(result, ABDKMathQuad.fromUInt(1e18));\r\n\r\n            /// @dev The number 222392421336447926 is the value by which we want to lower the default function values. This value can never be negative.\r\n            return ABDKMathQuad.toUInt(resultD18) - 222392421336447926;\r\n        }\r\n    }\r\n\r\n    function accountPowerUpStepFunction(bytes16 ratio) internal pure returns (bytes16) {\r\n        if (ABDKMathQuad.cmp(_toQuadruplePrecision(2, 100), ratio) \u003e 0) {\r\n            return\r\n                ABDKMathQuad.add(\r\n                    _toQuadruplePrecision(BASE_1, 1e18),\r\n                    ABDKMathQuad.mul(ABDKMathQuad.fromUInt(SLOPE_1), ratio)\r\n                );\r\n        } else if (ABDKMathQuad.cmp(_toQuadruplePrecision(4, 100), ratio) \u003e 0) {\r\n            return\r\n                ABDKMathQuad.add(\r\n                    _toQuadruplePrecision(BASE_2, 1e18),\r\n                    ABDKMathQuad.mul(ABDKMathQuad.fromUInt(SLOPE_2), ratio)\r\n                );\r\n        } else if (ABDKMathQuad.cmp(_toQuadruplePrecision(6, 100), ratio) \u003e 0) {\r\n            return\r\n                ABDKMathQuad.add(\r\n                    _toQuadruplePrecision(BASE_3, 1e18),\r\n                    ABDKMathQuad.mul(_toQuadruplePrecision(SLOPE_3, 1e18), ratio)\r\n                );\r\n        } else if (ABDKMathQuad.cmp(_toQuadruplePrecision(8, 100), ratio) \u003e 0) {\r\n            return\r\n                ABDKMathQuad.add(\r\n                    _toQuadruplePrecision(BASE_4, 1e18),\r\n                    ABDKMathQuad.mul(ABDKMathQuad.fromUInt(SLOPE_4), ratio)\r\n                );\r\n        } else {\r\n            return\r\n                ABDKMathQuad.add(\r\n                    _toQuadruplePrecision(BASE_5, 1e18),\r\n                    ABDKMathQuad.mul(_toQuadruplePrecision(SLOPE_5, 1e18), ratio)\r\n                );\r\n        }\r\n    }\r\n\r\n    /// @dev log_a(b) = log_2(b) / log_2(a)\r\n    function _log(bytes16 a, bytes16 b) private pure returns (bytes16) {\r\n        if (ABDKMathQuad.eq(a, ABDKMathQuad.fromUInt(2))) {\r\n            return ABDKMathQuad.log_2(b);\r\n        }\r\n        return ABDKMathQuad.div(ABDKMathQuad.log_2(b), ABDKMathQuad.log_2(a));\r\n    }\r\n\r\n    /// @dev Quadruple precision, 128 bits\r\n    function _toQuadruplePrecision(\r\n        uint256 number,\r\n        uint256 decimals\r\n    ) private pure returns (bytes16) {\r\n        if (number % decimals \u003e 0) {\r\n            /// @dev during calculation this value is lost in the conversion\r\n            number += 1;\r\n        }\r\n        bytes16 nominator = ABDKMathQuad.fromUInt(number);\r\n        bytes16 denominator = ABDKMathQuad.fromUInt(decimals);\r\n        bytes16 fraction = ABDKMathQuad.div(nominator, denominator);\r\n        return fraction;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accountPwTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accountLpTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"verticalShift\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"horizontalShift\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"logBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pwTokenModifier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vectorOfCurve\",\"type\":\"uint256\"}],\"internalType\":\"struct AccountPowerUpData\",\"name\":\"data_\",\"type\":\"tuple\"}],\"name\":\"calculateAccountPowerUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "ContractName": "MiningCalculationAccountPowerUp",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "1",
      "Runs": "100",
      "ConstructorArguments": "",
      "EVMVersion": "shanghai",
      "Library": "",
      "LicenseType": "BSL 1.1",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://92af53e974e9cf3ffb52b90c185117a5f5d7a1c4f2dde2eba2e9593461f0865c"
    }
  ]
}
