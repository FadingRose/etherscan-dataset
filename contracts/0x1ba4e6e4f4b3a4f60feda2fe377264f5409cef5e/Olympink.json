{
  "TxHash": "0x0118e60530504ec23e09a61b57b9a00db11bb22be23d42677dbc821d7e6004fd",
  "ContractAddress": "0x1ba4e6e4f4b3a4f60feda2fe377264f5409cef5e",
  "Name": "Olympink",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\r\n\r\n░█████╗░██╗░░░░░██╗░░░██╗███╗░░░███╗██████╗░██╗███╗░░██╗██╗░░██╗\r\n██╔══██╗██║░░░░░╚██╗░██╔╝████╗░████║██╔══██╗██║████╗░██║██║░██╔╝\r\n██║░░██║██║░░░░░░╚████╔╝░██╔████╔██║██████╔╝██║██╔██╗██║█████═╝░\r\n██║░░██║██║░░░░░░░╚██╔╝░░██║╚██╔╝██║██╔═══╝░██║██║╚████║██╔═██╗░\r\n╚█████╔╝███████╗░░░██║░░░██║░╚═╝░██║██║░░░░░██║██║░╚███║██║░╚██╗\r\n░╚════╝░╚══════╝░░░╚═╝░░░╚═╝░░░░░╚═╝╚═╝░░░░░╚═╝╚═╝░░╚══╝╚═╝░░╚═╝\r\n\r\nSOCIALS\r\nX: https://x.com/OlympinkCrypto\r\nTG: https://t.me/Olympink\r\nWEB: https://olympink.com/\r\n\r\n*/\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n \r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/interfaces/draft-IERC6093.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC20Errors {\r\n \r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\ninterface IERC721Errors {\r\n  \r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n \r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n\r\ninterface IERC1155Errors {\r\n\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n \r\n    error ERC1155InvalidSender(address sender);\r\n\r\n \r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n  \r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n \r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address account =\u003e uint256) private _balances;\r\n\r\n    mapping(address account =\u003e mapping(address spender =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n \r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n  \r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n \r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n   \r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n  \r\n    function transfer(address to, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n  \r\n    function approve(address spender, uint256 value) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n \r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n   \r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n   \r\n    function _update(address from, address to, uint256 value) internal virtual {\r\n        if (from == address(0)) {\r\n            _totalSupply += value;\r\n        } else {\r\n            uint256 fromBalance = _balances[from];\r\n            if (fromBalance \u003c value) {\r\n                revert ERC20InsufficientBalance(from, fromBalance, value);\r\n            }\r\n            unchecked {\r\n                _balances[from] = fromBalance - value;\r\n            }\r\n        }\r\n\r\n        if (to == address(0)) {\r\n            unchecked {\r\n                _totalSupply -= value;\r\n            }\r\n        } else {\r\n            unchecked {\r\n                _balances[to] += value;\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n\r\n    function _mint(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(address(0), account, value);\r\n    }\r\n\r\n    function _burn(address account, uint256 value) internal {\r\n        if (account == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        _update(account, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance \u003c value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    \r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    \r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n   \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    \r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    \r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: verified-sources/0x146F3582EBE45c46B2f88fB71681fA582BA53A79/sources/src/interface/IUniswapV2.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IUniswapRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint[] memory amounts);\r\n\r\n    function quote(\r\n        uint amountA,\r\n        uint reserveA,\r\n        uint reserveB\r\n    ) external pure returns (uint amountB);\r\n\r\n    function getAmountOut(\r\n        uint amountIn,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountOut);\r\n\r\n    function getAmountIn(\r\n        uint amountOut,\r\n        uint reserveIn,\r\n        uint reserveOut\r\n    ) external pure returns (uint amountIn);\r\n\r\n    function getAmountsOut(\r\n        uint amountIn,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n\r\n    function getAmountsIn(\r\n        uint amountOut,\r\n        address[] calldata path\r\n    ) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapRouter02 is IUniswapRouter01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapPair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: verified-sources/0x146F3582EBE45c46B2f88fB71681fA582BA53A79/sources/src/Olympink.sol\r\n\r\n\r\n\r\npragma solidity 0.8.24;\r\n\r\n// OPENZEPPELIN IMPORTS\r\n\r\n\r\n// UNISWAP INTERFACES\r\n\r\n\r\n\r\ncontract Olympink is ERC20, Ownable {\r\n    //-------------------------------------------------------------------------\r\n    // Errors\r\n    //-------------------------------------------------------------------------\r\n    error _InvalidNewTax();\r\n    error _InvalidValue();\r\n    error _MaxTxExceeded();\r\n    error _MaxWalletExceeded();\r\n    error _InvalidListLength();\r\n    error _OnlyDevWallet();\r\n    error _OnlyMktWallet();\r\n    error _OnlyBBWallet();\r\n    error _NativeTransferFailed();\r\n    error _NoBalance();\r\n    error _AlreadySwapping();\r\n    //-------------------------------------------------------------------------\r\n    // STATE VARIABLES\r\n    //-------------------------------------------------------------------------\r\n    mapping(address =\u003e bool) public isExcludedFromTax;\r\n    mapping(address =\u003e bool) public isMaxWalExcluded;\r\n    mapping(address =\u003e bool) public isMaxTxExcluded;\r\n    mapping(address =\u003e bool) public isPair;\r\n\r\n    address public devWallet;\r\n    address public mktWallet;\r\n    address public constant deadWallet =\r\n        0x000000000000000000000000000000000000dEaD;\r\n    IUniswapRouter02 public router;\r\n    IUniswapPair public pair;\r\n\r\n    uint public sellThreshold;\r\n    uint public startTaxTime;\r\n    uint public maxTx;\r\n    uint public maxWallet;\r\n\r\n    uint16 public mktShare = 250;\r\n    uint16 public devShare = 250;\r\n    uint16 private totalShares = 500;\r\n\r\n    uint8 public buyTax = 0;\r\n    uint8 public sellTax = 0;\r\n    uint8 private swapping = 1;\r\n\r\n    uint private constant _TAX_INTERVAL = 1 minutes;\r\n    uint private constant MAX_TAX_TIME = 45 minutes;\r\n    uint256 private constant _INIT_SUPPLY = 100_000_000_000 ether;\r\n    uint256 private constant PERCENTILE = 100;\r\n\r\n    //-------------------------------------------------------------------------\r\n    // EVENTS\r\n    //-------------------------------------------------------------------------\r\n    event UpdateSellTax(uint tax);\r\n    event UpdateBuyTax(uint tax);\r\n    event UpdateDevWallet(\r\n        address indexed prevWallet,\r\n        address indexed newWallet\r\n    );\r\n    event UpdateMktWallet(\r\n        address indexed prevWallet,\r\n        address indexed newWallet\r\n    );\r\n    event UpdateTaxExclusionStatus(address indexed account, bool status);\r\n    event UpdateMaxTxExclusionStatus(address indexed account, bool status);\r\n    event UpdateMaxWalletExclusionStatus(address indexed account, bool status);\r\n    event UpdateMaxTx(uint maxTx);\r\n    event UpdateMaxWallet(uint maxWallet);\r\n    event UpdateThreshold(uint threshold);\r\n    event SetNewPair(address indexed pair);\r\n    event UpdateShares(uint16 mktShare, uint16 devShare);\r\n    event UpdateUniswapRouter(address indexed router);\r\n\r\n    //-------------------------------------------------------------------------\r\n    // CONSTRUCTOR\r\n    //-------------------------------------------------------------------------\r\n    constructor(\r\n        address _devWallet,\r\n        address _mktWallet,\r\n        address newOwner\r\n    ) ERC20(\"Olympink\", \"OLYMPINK\") Ownable(newOwner) {\r\n        sellThreshold = _INIT_SUPPLY / (1);\r\n        router = IUniswapRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        IUniswapFactory factory = IUniswapFactory(router.factory());\r\n        pair = IUniswapPair(factory.createPair(address(this), router.WETH()));\r\n        isPair[address(pair)] = true;\r\n        _approve(address(this), address(router), type(uint256).max);\r\n\r\n        isExcludedFromTax[address(this)] = true;\r\n        isExcludedFromTax[owner()] = true;\r\n        isMaxWalExcluded[owner()] = true;\r\n        isMaxWalExcluded[address(this)] = true;\r\n        isMaxWalExcluded[address(router)] = true;\r\n        isMaxWalExcluded[deadWallet] = true;\r\n        isMaxWalExcluded[address(pair)] = true;\r\n        isMaxTxExcluded[owner()] = true;\r\n        isMaxTxExcluded[address(this)] = true;\r\n        isMaxTxExcluded[address(router)] = true;\r\n        isMaxTxExcluded[address(0)] = true;\r\n        devWallet = _devWallet;\r\n        mktWallet = _mktWallet;\r\n        maxTx = _INIT_SUPPLY;\r\n        maxWallet = _INIT_SUPPLY;\r\n\r\n        _mint(owner(), _INIT_SUPPLY);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // EXTERNAL / PUBLIC FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    //-------------------------------------------------------------------------\r\n    // Owner Functions\r\n    //-------------------------------------------------------------------------\r\n\r\n    function setBuyTax(uint8 _buyTax) external onlyOwner {\r\n        if (_buyTax \u003e 50) {\r\n            revert _InvalidNewTax();\r\n        }\r\n        buyTax = _buyTax;\r\n        emit UpdateBuyTax(_buyTax);\r\n    }\r\n\r\n    function setSellTax(uint8 _sellTax) external onlyOwner {\r\n        if (_sellTax \u003e 50) {\r\n            revert _InvalidNewTax();\r\n        }\r\n        sellTax = _sellTax;\r\n        emit UpdateBuyTax(_sellTax);\r\n    }\r\n\r\n \r\n    function setTaxExclusionStatus(\r\n        address _address,\r\n        bool _status\r\n    ) external onlyOwner {\r\n        isExcludedFromTax[_address] = _status;\r\n        emit UpdateTaxExclusionStatus(_address, _status);\r\n    }\r\n\r\n\r\n    function setMaxTx(uint _maxTx) external onlyOwner {\r\n        if (_maxTx \u003c _INIT_SUPPLY / 500) revert _InvalidValue();\r\n        maxTx = _maxTx;\r\n        emit UpdateMaxTx(_maxTx);\r\n    }\r\n\r\n \r\n    function setMaxWallet(uint _maxWallet) external onlyOwner {\r\n        if (_maxWallet \u003c _INIT_SUPPLY / 100) revert _InvalidValue();\r\n        maxWallet = _maxWallet;\r\n        emit UpdateMaxWallet(_maxWallet);\r\n    }\r\n\r\n\r\n    function updateSellThreshold(uint _sellThreshold) external onlyOwner {\r\n        if (\r\n            _sellThreshold \u003e _INIT_SUPPLY / 1000 ||\r\n            _sellThreshold \u003c _INIT_SUPPLY / 100000\r\n        ) revert _InvalidValue();\r\n        sellThreshold = _sellThreshold;\r\n        emit UpdateThreshold(_sellThreshold);\r\n    }\r\n\r\n \r\n    function manualSwap() external onlyOwner {\r\n        if (swapping != 1) revert _AlreadySwapping();\r\n        uint balance = balanceOf(address(this));\r\n        _swapAndTransfer(balance);\r\n    }\r\n\r\n\r\n    function addPair(address _pair) external onlyOwner {\r\n        if (_pair == address(0)) revert _InvalidValue();\r\n        isPair[_pair] = true;\r\n        isMaxWalExcluded[_pair] = true;\r\n        emit SetNewPair(_pair);\r\n    }\r\n\r\n    function updateUniswapRouter(address _router) external onlyOwner {\r\n        if (router.WETH() != IUniswapRouter02(_router).WETH())\r\n            revert _InvalidValue();\r\n        router = IUniswapRouter02(_router);\r\n        emit UpdateUniswapRouter(_router);\r\n    }\r\n\r\n    function recoverNative(address _to, uint _amount) external onlyOwner {\r\n        (bool success, ) = payable(_to).call{value: _amount}(\"\");\r\n        if (!success) revert _NativeTransferFailed();\r\n    }\r\n\r\n    function recoverERC20(address _token, address _to) external onlyOwner {\r\n        uint amount = ERC20(_token).balanceOf(address(this));\r\n        ERC20(_token).transfer(_to, amount);\r\n    }\r\n\r\n    //-------------------------------------------------------------------------\r\n    // INTERNAL/PRIVATE FUNCTIONS\r\n    //-------------------------------------------------------------------------\r\n\r\n    function _update(address from, address to, uint amount) internal override {\r\n        bool isBuy = isPair[from];\r\n        bool isSell = isPair[to];\r\n        bool anyExcluded = isExcludedFromTax[from] || isExcludedFromTax[to];\r\n\r\n        if (!isMaxTxExcluded[from] \u0026\u0026 !isMaxTxExcluded[to] \u0026\u0026 amount \u003e maxTx)\r\n            revert _MaxTxExceeded();\r\n\r\n        uint currentBalance = balanceOf(address(this));\r\n        if (\r\n            !isBuy \u0026\u0026\r\n            currentBalance \u003e sellThreshold \u0026\u0026\r\n            !anyExcluded \u0026\u0026\r\n            swapping == 1\r\n        ) {\r\n            _swapAndTransfer(currentBalance);\r\n        }\r\n\r\n        uint fee = 0;\r\n        if (!anyExcluded) {\r\n            uint8 tax = _getTimedTax(isBuy, isSell);\r\n            fee = (amount * tax) / PERCENTILE;\r\n            if (fee \u003e 0) {\r\n                amount -= fee;\r\n                super._update(from, address(this), fee);\r\n            }\r\n        }\r\n        if (isSell \u0026\u0026 startTaxTime == 0) {\r\n            startTaxTime = block.timestamp;\r\n        }\r\n        if (!isMaxWalExcluded[to] \u0026\u0026 balanceOf(to) + amount \u003e maxWallet)\r\n            revert _MaxWalletExceeded();\r\n\r\n        super._update(from, to, amount);\r\n    }\r\n\r\n    function _swapAndTransfer(uint balance) private {\r\n        swapping \u003c\u003c= 1;\r\n        if (balance == 0) revert _NoBalance();\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        uint minAmount = router.getAmountsOut(balance, path)[1];\r\n        minAmount = (minAmount * 7) / 10;\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            balance,\r\n            minAmount,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        uint nativeBalance = address(this).balance;\r\n        if (totalShares == 0) return;\r\n        uint mktAmount = (nativeBalance * mktShare) / totalShares;\r\n        uint devAmount = nativeBalance - mktAmount;\r\n        if (mktAmount \u003e 0) {\r\n            (bool success, ) = payable(mktWallet).call{value: mktAmount}(\r\n                \"\"\r\n            );\r\n            if (!success) revert _NativeTransferFailed();\r\n        }\r\n        if (devAmount \u003e 0) {\r\n            (bool success, ) = payable(devWallet).call{value: devAmount}(\"\");\r\n            if (!success) revert _NativeTransferFailed();\r\n        }\r\n\r\n        swapping \u003e\u003e= 1;\r\n    }\r\n\r\n\r\n    function _getTimedTax(\r\n        bool isBuy,\r\n        bool isSell\r\n    ) private view returns (uint8) {\r\n        if ((!isBuy \u0026\u0026 !isSell) || startTaxTime == 0) return 0;\r\n\r\n        uint timePassed = block.timestamp - startTaxTime;\r\n        if (timePassed \u003e= MAX_TAX_TIME) {\r\n            if (isBuy) return buyTax;\r\n            if (isSell) return sellTax;\r\n            return 0;\r\n        }\r\n        return uint8(45 - ((timePassed / _TAX_INTERVAL)));\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mktWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_AlreadySwapping\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_InvalidListLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_InvalidNewTax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_MaxTxExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_MaxWalletExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_NoBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_OnlyBBWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_OnlyDevWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"_OnlyMktWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"SetNewPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdateDevWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateMaxTxExclusionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateMaxWalletExclusionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"UpdateMktWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"UpdateSellTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"mktShare\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"devShare\",\"type\":\"uint16\"}],\"name\":\"UpdateShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateTaxExclusionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"UpdateThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"UpdateUniswapRouter\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deadWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devShare\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxTxExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMaxWalExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPair\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mktShare\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mktWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_buyTax\",\"type\":\"uint8\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"}],\"name\":\"setMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_sellTax\",\"type\":\"uint8\"}],\"name\":\"setSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setTaxExclusionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTaxTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sellThreshold\",\"type\":\"uint256\"}],\"name\":\"updateSellThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"updateUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Olympink",
      "CompilerVersion": "v0.8.24+commit.e11b9ed9",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000c5be08433fe0ae0a109ddf536b5da01b9d032bec000000000000000000000000c5be08433fe0ae0a109ddf536b5da01b9d032bec000000000000000000000000672bc67cf65f7113b38af68aa6b47e63359aec59",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://ef6ebcc2c3d194ce19b177b8047bd83ec097e2ecb9ed17aaa1c0b06b46da669a"
    }
  ]
}
