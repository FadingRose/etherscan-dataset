{
  "TxHash": "0xebac7fa9b25bf0a86989c01a5b5c58332a638bcc288c2a407811b8d216b2f2bd",
  "ContractAddress": "0x7cf0b3621731e833b30e80c3754c5475e85fc3c2",
  "Name": "ICETH",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n// Corenium Idea Coin\r\n// OpenZeppelin Contracts (last updated v5.0.0)\r\n// FLS 101010 110302 010305\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\ninterface IERC20Errors {\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n    error ERC20InvalidSender(address sender);\r\n    error ERC20InvalidReceiver(address receiver);\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n    error ERC20InvalidApprover(address approver);\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n * Extended version of {ERC20} that adds a cap to the supply of tokens.\r\n */\r\nabstract contract ERC20Capped is Context, IERC20, IERC20Metadata, IERC20Errors {\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    uint256 private _reward;\r\n    uint256 private _nextHalvingSupply;\r\n    uint256 private _totalSupply;\r\n\r\n    uint256 private immutable _cap;\r\n    address payable private immutable _fawkes;\r\n\r\n    event TheOverture(uint256 reward);\r\n    event NowTheBrass(uint256 newReward);\r\n    event HereComesTheCrescendo(address indexed from, address indexed to, uint256 newNextHalvingSupply);\r\n    event RememberRememberHowBeautifulIsItNot();\r\n    \r\n    /**\r\n     * @dev The address is not fawkes.\r\n     */\r\n    error GunpowderTreason(address msgSender);\r\n\r\n    /**\r\n     * @dev Its all over. Cant burn anymore.\r\n     * “No one will ever forget that night, and what it meant for cryptocurrency.\r\n     *  But I will never forget the man and what he meant to me.”\r\n     */\r\n    error NoOneWillEverForgetThatNight();\r\n\r\n    /**\r\n     * @dev Sets the values for {name}, {symbol}, {reward} and {cap}.\r\n     *\r\n     * {name}, {symbol} and {cap} values are immutable:\r\n     * they can only be set once during construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_, uint256 reward_, uint256 cap_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _reward = reward_;\r\n        _cap = cap_;\r\n        _nextHalvingSupply = cap_ / 2;\r\n        _fawkes = payable(0xcc56795C2D5442D4a8006C363A2ad2505e357534);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() external view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the cap on the token's total supply.\r\n     */\r\n    function cap() public view virtual returns (uint256) {\r\n        return _cap;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the current reward.\r\n     */\r\n    function reward() public view virtual returns (uint256) {\r\n        return _reward;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next halving supply.\r\n     */\r\n    function nextHalvingSupply() public view virtual returns (uint256) {\r\n        return _nextHalvingSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the fawkes address.\r\n     * Alan Moore’s philosophy\r\n     * If you wish to develop as a writer/(whatever you want to be)\r\n     * you will have to also develop as a person.\r\n     * I would suggest that you will need\r\n     * to develop a moral standpoint\r\n     */\r\n    function fawkes() internal view virtual returns (address payable) {\r\n        return _fawkes;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the fawkes.\r\n     */\r\n    modifier onlyFawkes() {\r\n        _checkFawkes();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the fawkes.\r\n     */\r\n    function _checkFawkes() internal view virtual {\r\n        if (fawkes() != _msgSender()) {\r\n            revert GunpowderTreason(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    /**\r\n     * @dev Function to reclaim native token.\r\n     */\r\n    function reclaimNative() external onlyFawkes{\r\n        uint256 amount = address(this).balance;\r\n        (bool success,) = fawkes().call{value: amount}(\"\");\r\n        require(success, \"Reclaim Failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Function to reclaim all IERC20 compatible tokens\r\n     * @param tokenAddress address The address of the token contract\r\n     */\r\n    function reclaimToken(address tokenAddress) external onlyFawkes {\r\n        require(tokenAddress != address(0), \"Token cannot be 0x0\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(token.transfer(fawkes(), balance), \"Reclaim Token Failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     */\r\n    function transfer(address to, uint256 value) external virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     */\r\n    function approve(address spender, uint256 value) external virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external virtual returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, value);\r\n        _transfer(from, to, value);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 value) internal {\r\n        if (from == address(0)) {\r\n            revert ERC20InvalidSender(address(0));\r\n        }\r\n        if (to == address(0)) {\r\n            revert ERC20InvalidReceiver(address(0));\r\n        }\r\n        _update(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev returns current reward for the transfer.\r\n     * No reward if `from` and `to` are same. No reward if `from` or `to` is fawkes.\r\n     * Halves if supply reaches next halving\r\n     *\r\n     * Emits a {NowTheBrass} event if halving occurred or completed.\r\n     * Emits a {HereComesTheCrescendo} event if halving occurred.\r\n     * Emits a {RememberRememberHowBeautifulIsItNot} event if minted supply reaches cap.\r\n     */\r\n    function currentReward(address from, address to) internal virtual returns (uint256){\r\n        uint256 rewardValue = reward();\r\n        if (rewardValue == 0) {\r\n            return rewardValue;\r\n        }\r\n        if (from == to || from == fawkes() || to == fawkes()) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 maxSupply = cap();\r\n        uint256 mintedSupply = totalSupply() + (rewardValue * 3);\r\n        if (mintedSupply \u003e maxSupply) {\r\n            _reward = rewardValue = 0;\r\n            emit NowTheBrass(rewardValue);\r\n            emit RememberRememberHowBeautifulIsItNot();\r\n            return rewardValue;\r\n        }\r\n\r\n        uint256 nextHalvingSupplyValue = nextHalvingSupply();\r\n        if (mintedSupply \u003e nextHalvingSupplyValue) {\r\n            _nextHalvingSupply = nextHalvingSupplyValue =\r\n                nextHalvingSupplyValue +\r\n                ((maxSupply - nextHalvingSupplyValue) / 2);\r\n            emit HereComesTheCrescendo(from, to, nextHalvingSupplyValue);\r\n            rewardValue = rewardValue / 2;\r\n            if (rewardValue == 0) {\r\n                rewardValue = 1;\r\n            }\r\n            _reward = rewardValue;\r\n            emit NowTheBrass(rewardValue);\r\n            return rewardValue;\r\n        }\r\n\r\n        return rewardValue;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers a `value` amount of tokens from `from` to `to`\r\n     * \r\n     * Emits a {Transfer} event.\r\n     * Emits a {TheOverture} event if reward \u003e 0.\r\n     */\r\n     function _update(address from, address to, uint256 value) internal virtual {\r\n        uint256 fromBalance = _balances[from];\r\n        if (fromBalance \u003c value) {\r\n            revert ERC20InsufficientBalance(from, fromBalance, value);\r\n        }\r\n\r\n        uint256 currentRewardValue = currentReward(from, to);\r\n        uint256 toBalance = _balances[to];\r\n        if (currentRewardValue == 0) {\r\n            if (from != to) {\r\n                unchecked {\r\n                    _balances[from] = fromBalance - value;\r\n                    _balances[to] = toBalance + value;\r\n                }\r\n            }//else (from=to) { no balance change }\r\n        } else {\r\n            uint256 fawkesBalance = _balances[fawkes()];\r\n            unchecked {\r\n                _balances[from] = fromBalance + currentRewardValue - value;\r\n                _balances[to] = toBalance + currentRewardValue + value;\r\n                _balances[fawkes()] = fawkesBalance + currentRewardValue;\r\n                _totalSupply = _totalSupply + (currentRewardValue * 3);\r\n            }\r\n            emit TheOverture(currentRewardValue);\r\n        }\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys a `value` amount of tokens from `_msgSender`.\r\n     * Lowering the total supply. Reward will not change.\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     */\r\n    function burn(uint256 value) external virtual  {\r\n        if (reward() == 0) {\r\n            revert NoOneWillEverForgetThatNight();\r\n        }\r\n        uint256 fromBalance = _balances[_msgSender()];\r\n        if (fromBalance \u003c value) {\r\n            revert ERC20InsufficientBalance(_msgSender(), fromBalance, value);\r\n        }\r\n        unchecked {\r\n            _balances[_msgSender()] = fromBalance - value;\r\n            _totalSupply = _totalSupply - value;\r\n        }\r\n        emit Transfer(_msgSender(), address(0), value);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value) internal {\r\n        _approve(owner, spender, value, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\r\n     */\r\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\r\n        if (owner == address(0)) {\r\n            revert ERC20InvalidApprover(address(0));\r\n        }\r\n        if (spender == address(0)) {\r\n            revert ERC20InvalidSpender(address(0));\r\n        }\r\n        _allowances[owner][spender] = value;\r\n        if (emitEvent) {\r\n            emit Approval(owner, spender, value);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            if (currentAllowance \u003c value) {\r\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\r\n            }\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - value, false);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev shangai compiler: 0.8.22 optimization: 999888000\r\n */\r\ncontract ICETH is ERC20Capped {\r\n    constructor()\r\n        ERC20Capped(\r\n            \"Idea Coin on Ethereum\",\r\n            \"ICETH\",\r\n            50 * (10**decimals()),\r\n            210 * (10**6) * (10**decimals())\r\n        )\r\n    {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"GunpowderTreason\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOneWillEverForgetThatNight\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNextHalvingSupply\",\"type\":\"uint256\"}],\"name\":\"HereComesTheCrescendo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReward\",\"type\":\"uint256\"}],\"name\":\"NowTheBrass\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RememberRememberHowBeautifulIsItNot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"TheOverture\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextHalvingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reclaimNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"reclaimToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "ICETH",
      "CompilerVersion": "v0.8.22+commit.4fc1097e",
      "OptimizationUsed": "1",
      "Runs": "2000000",
      "ConstructorArguments": "",
      "EVMVersion": "shanghai",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://aff83384142a110a5018cd25d52968b0f890bfa38601dc93fac1ea43cec1d907"
    }
  ]
}
