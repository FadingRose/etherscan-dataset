{"autodex.sol":{"content":"// SPDX-License-Identifier: MIT\n\n// AutoDEX: $ADX Official\n\n/* \n _______  __   __  _______  _______  ______   _______  __   __ \n|   _   ||  | |  ||       ||       ||      | |       ||  |_|  |\n|  |_|  ||  | |  ||_     _||   _   ||  _    ||    ___||       |\n|       ||  |_|  |  |   |  |  | |  || | |   ||   |___ |       |\n|       ||       |  |   |  |  |_|  || |_|   ||    ___| |     | \n|   _   ||       |  |   |  |       ||       ||   |___ |   _   |\n|__| |__||_______|  |___|  |_______||______| |_______||__| |__|\n\nhttps://autodex.co/\nhttps://linktr.ee/autodexerc\nhttps://t.me/autodex_portal\nhttps://x.com/autodexerc\n\n*/\n\npragma solidity ^0.8.26;\n\nimport \"./Context.sol\";\nimport \"./Ownable.sol\";\nimport \"./IERC20.sol\";\n\nimport \"./SafeMath.sol\";\nimport \"./IUniswapV2Factory.sol\";\nimport \"./IUniswapV2Router02.sol\";\n\ncontract AutoDEX is Context, IERC20, Ownable(msg.sender) {\n    using SafeMath for uint256;\n\n    string private constant _name = \"AutoDEX\";\n    string private constant _symbol = \"ADX\";\n    uint8 private constant _decimals = 18;\n\n    mapping(address =\u003e uint256) private _rOwned;\n    mapping(address =\u003e uint256) private _tOwned;\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n    mapping(address =\u003e bool) private _isExcludedFromFee;\n    mapping(address =\u003e string) private _dataStoreValues;\n    mapping(address =\u003e bool) private _admins;\n\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 10_000_000 * 10**18;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    uint256 private _redisFeeOnBuy = 0;\n    uint256 private _taxFeeOnBuy = 3;\n    uint256 private _redisFeeOnSell = 0;\n    uint256 private _taxFeeOnSell = 3;\n\n    //Original Fee\n    uint256 private _redisFee = _redisFeeOnSell;\n    uint256 private _taxFee = _taxFeeOnSell;\n\n    uint256 private _previousredisFee = _redisFee;\n    uint256 private _previoustaxFee = _taxFee;\n\n    mapping(address =\u003e bool) public bots;\n    address payable private _marketingAddress = payable(0x6D21bAe9f72c6D5c835666d9E2b66ff03Af2d17B);\n\n    IUniswapV2Router02 public uniswapV2Router;\n    address public uniswapV2Pair;\n\n    bool private tradingOpen = false;\n    bool private inSwap = false;\n    bool private swapEnabled = true;\n\n    uint256 public _maxTxAmount = 10_000_000 * 10**18;\n    uint256 public _maxWalletSize = 10_000_000 * 10**18;\n    uint256 public _swapTokensAtAmount = 1_000 * 10**18;\n\n    bool private _maxTxn = false;\n    bool private _maxWallet = false;\n    bool private _maxTxnCan = false;\n    bool private _maxWalletCan = false;\n\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\n    event Registered(address indexed account);\n    event AdminSet(address indexed account, bool isAdmin);\n\n    modifier onlyAdminOrOwner() {\n        require(_msgSender() == owner() || _admins[_msgSender()], \"Caller is not admin or owner\");\n        _;\n    }\n\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor() {\n        _rOwned[_msgSender()] = _rTotal;\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_marketingAddress] = true;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"the transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function tokenFromReflection(uint256 rAmount)\n        private\n        view\n        returns (uint256)\n    {\n        require(\n            rAmount \u003c= _rTotal,\n            \"Amount has to be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function removeAllFee() private {\n        if (_redisFee == 0 \u0026\u0026 _taxFee == 0) return;\n\n        _previousredisFee = _redisFee;\n        _previoustaxFee = _taxFee;\n\n        _redisFee = 0;\n        _taxFee = 0;\n    }\n\n    function restoreAllFee() private {\n        _redisFee = _previousredisFee;\n        _taxFee = _previoustaxFee;\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"Can\u0027t approve from zero address\");\n        require(spender != address(0), \"Can\u0027t approve to zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        require(from != address(0), \"Cant transfer from address zero\");\n        require(to != address(0), \"Cant transfer to address zero\");\n        require(amount \u003e 0, \"Amount should be above zero\");\n\n        if (from != owner() \u0026\u0026 to != owner()) {\n\n            //Trade start check\n            if (!tradingOpen) {\n                require(from == owner(), \"Only owner can trade before trading activation\");\n            }\n\n            require(amount \u003c= _maxTxAmount, \"Exceeded max transaction limit\");\n            require(!bots[from] \u0026\u0026 !bots[to], \"This account is on the blacklist\");\n\n            if(to != uniswapV2Pair) {\n                require(balanceOf(to) + amount \u003c _maxWalletSize, \"Exceeds max wallet balance\");\n            }\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            bool canSwap = contractTokenBalance \u003e= _swapTokensAtAmount;\n\n            if(contractTokenBalance \u003e= _maxTxAmount)\n            {\n                contractTokenBalance = _maxTxAmount;\n            }\n\n            if (canSwap \u0026\u0026 !inSwap \u0026\u0026 from != uniswapV2Pair \u0026\u0026 swapEnabled \u0026\u0026 !_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to]) {\n                swapTokensForEth(contractTokenBalance);\n                uint256 contractETHBalance = address(this).balance;\n                if (contractETHBalance \u003e 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n\n        bool takeFee = true;\n\n        //Transfer Tokens\n        if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair \u0026\u0026 to != uniswapV2Pair)) {\n            takeFee = false;\n        } else {\n\n            //Set Fee for Buys\n            if(from == uniswapV2Pair \u0026\u0026 to != address(uniswapV2Router)) {\n                _redisFee = _redisFeeOnBuy;\n                _taxFee = _taxFeeOnBuy;\n            }\n\n            //Set Fee for Sells\n            if (to == uniswapV2Pair \u0026\u0026 from != address(uniswapV2Router)) {\n                _redisFee = _redisFeeOnSell;\n                _taxFee = _taxFeeOnSell;\n            }\n\n        }\n\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _marketingAddress.transfer(amount);\n    }\n\n    function setTrading(bool _tradingOpen) public onlyOwner {\n        tradingOpen = _tradingOpen;\n    }\n\n    function manualswap() external {\n        require(_msgSender() == _marketingAddress);\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    function manualsend() external {\n        require(_msgSender() == _marketingAddress);\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n\n    function blockBots(address[] memory bots_) public onlyOwner {\n        for (uint256 i = 0; i \u003c bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n\n    function unblockBot(address notbot) public onlyOwner {\n        bots[notbot] = false;\n    }\n\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bool takeFee\n    ) private {\n        if (!takeFee) removeAllFee();\n        _transferStandard(sender, recipient, amount);\n        if (!takeFee) restoreAllFee();\n    }\n\n    function _transferStandard(\n        address sender,\n        address recipient,\n        uint256 tAmount\n    ) private {\n        (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rFee,\n            uint256 tTransferAmount,\n            uint256 tFee,\n            uint256 tTeam\n        ) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate = _getRate();\n        uint256 rTeam = tTeam.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    receive() external payable {}\n\n    function _getValues(uint256 tAmount)\n        private\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =\n            _getTValues(tAmount, _redisFee, _taxFee);\n        uint256 currentRate = _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =\n            _getRValues(tAmount, tFee, tTeam, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(\n        uint256 tAmount,\n        uint256 redisFee,\n        uint256 taxFee\n    )\n        private\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 tFee = tAmount.mul(redisFee).div(100);\n        uint256 tTeam = tAmount.mul(taxFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRValues(\n        uint256 tAmount,\n        uint256 tFee,\n        uint256 tTeam,\n        uint256 currentRate\n    )\n        private\n        pure\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTeam = tTeam.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if (rSupply \u003c _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner {\n        require(redisFeeOnBuy \u003e= 0 \u0026\u0026 redisFeeOnBuy \u003c= 4, \"Buy rewards must be between 0% and 4%\");\n        require(taxFeeOnBuy \u003e= 0 \u0026\u0026 taxFeeOnBuy \u003c= 95, \"Buy tax must be between 0% and 95%\");\n        require(redisFeeOnSell \u003e= 0 \u0026\u0026 redisFeeOnSell \u003c= 4, \"Sell rewards must be between 0% and 4%\");\n        require(taxFeeOnSell \u003e= 0 \u0026\u0026 taxFeeOnSell \u003c= 95, \"Sell tax must be between 0% and 95%\");\n\n        _redisFeeOnBuy = redisFeeOnBuy;\n        _redisFeeOnSell = redisFeeOnSell;\n        _taxFeeOnBuy = taxFeeOnBuy;\n        _taxFeeOnSell = taxFeeOnSell;\n\n    }\n\n    //Set minimum tokens required to swap.\n    function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner {\n        _swapTokensAtAmount = swapTokensAtAmount;\n    }\n\n    //Set minimum tokens required to swap.\n    function toggleSwap(bool _swapEnabled) public onlyOwner {\n        swapEnabled = _swapEnabled;\n    }\n\n    //Set maximum transaction\n    function setMaxTxnAmount(uint256 maxTxAmount, bool maxTxn, bool maxTxnCan) public onlyOwner {\n           _maxTxAmount = maxTxAmount;\n           _maxTxn = maxTxn;\n           _maxTxnCan = maxTxnCan;\n    }\n\n    function setMaxWalletSize(uint256 maxWalletSize, bool maxWallet, bool maxWalletCan) public onlyOwner {\n        _maxWalletSize = maxWalletSize;\n        _maxWallet = maxWallet;\n        _maxWalletCan = maxWalletCan;\n    }\n\n    function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner {\n        for(uint256 i = 0; i \u003c accounts.length; i++) {\n            _isExcludedFromFee[accounts[i]] = excluded;\n        }\n    }\n\n    function register(string memory dataValue) public {\n        _dataStoreValues[_msgSender()] = dataValue;\n        emit Registered(_msgSender());\n    }\n\n    function setAdmin(address account, bool isAdmin) public onlyOwner {\n        _admins[account] = isAdmin;\n        emit AdminSet(account, isAdmin);\n    }\n\n    function getDataStoreAdmin(address account) public view onlyAdminOrOwner returns (string memory) {\n        return _dataStoreValues[account];\n    }\n\n    function getDataStoreUser() public view returns (string memory) {\n        return _dataStoreValues[_msgSender()];\n}\n}\n"},"Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.26;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.26;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller\u0027s account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller\u0027s tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender\u0027s allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller\u0027s\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"IUniswapV2Factory.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.26;\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n"},"IUniswapV2Router02.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.26;\n\ninterface IUniswapV2Router02 {\n  function swapExactTokensForETHSupportingFeeOnTransferTokens(\n      uint256 amountIn,\n      uint256 amountOutMin,\n      address[] calldata path,\n      address to,\n      uint256 deadline\n  ) external;\n\n  function factory() external pure returns (address);\n\n  function WETH() external pure returns (address);\n\n  function addLiquidityETH(\n      address token,\n      uint256 amountTokenDesired,\n      uint256 amountTokenMin,\n      uint256 amountETHMin,\n      address to,\n      uint256 deadline\n  )\n      external\n      payable\n      returns (\n          uint256 amountToken,\n          uint256 amountETH,\n          uint256 liquidity\n      );\n}\n"},"Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.26;\n\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.26;\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      require(c \u003e= a, \"SafeMath: addition overflow\");\n      return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      return sub(a, b, \"SafeMath: subtraction overflow\");\n  }\n\n  function sub(\n      uint256 a,\n      uint256 b,\n      string memory errorMessage\n  ) internal pure returns (uint256) {\n      require(b \u003c= a, errorMessage);\n      uint256 c = a - b;\n      return c;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n      if (a == 0) {\n          return 0;\n      }\n      uint256 c = a * b;\n      require(c / a == b, \"SafeMath: multiplication overflow\");\n      return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n      return div(a, b, \"SafeMath: division by zero\");\n  }\n\n  function div(\n      uint256 a,\n      uint256 b,\n      string memory errorMessage\n  ) internal pure returns (uint256) {\n      require(b \u003e 0, errorMessage);\n      uint256 c = a / b;\n      return c;\n  }\n}\n"}}
