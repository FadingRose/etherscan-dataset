{
  "TxHash": "0x2022a58751fdc3423dc2cd8c80122bb8eb3729559580eb9088b1697a24523e54",
  "ContractAddress": "0x7e0fe3644af5d9624fb4790adce4d92ebc85f7bf",
  "Name": "Trump401KStaking",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\r\nTrump401K - The only 401K you need\r\n\r\nWEBSITE - https://trump401k.com\r\nTELEGRA - https://t.me/T401K_portal\r\nTWITTER - https://x.com/T401K_official\r\ndAPP    - https://staking.trump401k.com/\r\n*/\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: staking.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\ncontract Trump401KStaking is Ownable {\r\n    event StakeEvent(uint256 value, address from);\r\n    event ClaimEvent(uint256 value, address from);\r\n    event WithdrawEvent(uint256 value, address to);\r\n\r\n    error UnauthorizedWithdrawAccount(address account);\r\n    error WithdrawAccountIsNotSet();\r\n\r\n    // Token for rewards\r\n    address public RewardTokenAddress = address(0);\r\n    address public WithdrawAccount = address(0);\r\n\r\n    constructor(address rewardToken) Ownable(msg.sender) {\r\n        require(rewardToken != address(0), \"Invalid reward token address\");\r\n        RewardTokenAddress = rewardToken;\r\n        WithdrawAccount = msg.sender;\r\n    }\r\n\r\n    uint256 public totalStakedAmount = 0;\r\n    mapping(address =\u003e uint256) public Stakes;\r\n    mapping(address =\u003e bool) public inStakers;\r\n    address[] public Stakers;\r\n\r\n    // record all staked amount, despite unstake\r\n    uint256 public totalStakedRecord = 0;\r\n    // record all reward sent, despite claimed\r\n    uint256 public totalRewardSentRecord = 0;\r\n    mapping(address =\u003e uint256) public waitForClaim;\r\n\r\n    function ClaimRewards() external returns (bool) {\r\n        require(totalStakedAmount \u003e 0, \"No stakes\");\r\n        uint256 amount = waitForClaim[msg.sender];\r\n        require(\r\n            balanceOfRewardToken() \u003e= amount,\r\n            \"Insufficient reward balance\"\r\n        );\r\n        if (amount == 0) {\r\n            return false;\r\n        }\r\n\r\n        waitForClaim[msg.sender] -= amount;\r\n\r\n        _claimRewards(amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function CalculateReward() public view returns (uint256) {\r\n        return waitForClaim[msg.sender];\r\n    }\r\n\r\n    function _claimRewards(uint256 amount) private {\r\n        _transferRewardToken(msg.sender, amount);\r\n\r\n        emit ClaimEvent(amount, msg.sender);\r\n\r\n        return;\r\n    }\r\n\r\n    function Stake(uint256 amount) external {\r\n        // use erc20 transfer for this contract is staking erc20 token\r\n        safeTransferFrom(RewardTokenAddress, msg.sender, address(this), amount);\r\n        // total\r\n        totalStakedAmount += amount;\r\n        totalStakedRecord += amount;\r\n        // user\r\n        if(!inStakers[msg.sender]) {\r\n            inStakers[msg.sender] = true;\r\n            Stakers.push(msg.sender);\r\n        }\r\n        Stakes[msg.sender] += amount;\r\n\r\n\r\n        emit StakeEvent(amount, msg.sender);\r\n\r\n        return;\r\n    }\r\n\r\n    function Unstake(uint256 amount) public {\r\n        require(Stakes[msg.sender] \u003e= amount, \"Insufficient staked amount\");\r\n        IERC20(RewardTokenAddress).transfer(msg.sender, amount);\r\n\r\n        // record unstake\r\n        totalStakedAmount -= amount;\r\n        Stakes[msg.sender] -= amount;\r\n    }\r\n\r\n    function sendReward(uint256 amount) public withdrawOrOwner returns (bool) {\r\n        // transfer to address(this)\r\n        safeTransferFrom(RewardTokenAddress, msg.sender, address(this), amount);\r\n        totalRewardSentRecord += amount;\r\n        // according to current stakes, calculate rewards, and put into waitForClaim\r\n        for (uint256 i = 0; i \u003c Stakers.length; i++) {\r\n            address staker = Stakers[i];\r\n\r\n            uint256 reward = (amount * Stakes[staker]) / totalStakedAmount;\r\n            waitForClaim[staker] += reward;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function balanceOfRewardToken() public view returns (uint256) {\r\n        return IERC20(RewardTokenAddress).balanceOf(address(this));\r\n    }\r\n\r\n    function _transferRewardToken(\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        return IERC20(RewardTokenAddress).transfer(to, amount);\r\n    }\r\n\r\n    function Withdraw(uint256 amount) external withdrawOrOwner returns (bool) {\r\n        require(address(this).balance \u003e= amount, \"Insufficient balance\");\r\n        bool sent = false;\r\n        if (owner() != address(0)) {\r\n            (sent, ) = owner().call{value: amount}(\"\");\r\n        } else if (WithdrawAccount != address(0)) {\r\n            (sent, ) = WithdrawAccount.call{value: amount}(\"\");\r\n        } else {\r\n            revert WithdrawAccountIsNotSet();\r\n        }\r\n        require(sent, \"Failed to withdraw Ether\");\r\n\r\n        emit WithdrawEvent(amount, msg.sender);\r\n\r\n        return true;\r\n    }\r\n\r\n    function renounceOwnership() public virtual override onlyOwner {\r\n        require(WithdrawAccount != address(0), \"WithdrawAccount is not set\");\r\n\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\r\n        );\r\n        require(\r\n            success \u0026\u0026 (data.length == 0 || abi.decode(data, (bool))),\r\n            \"ERC20: TRANSFER_FROM_FAILED\"\r\n        );\r\n    }\r\n\r\n    function rescueERC20(\r\n        address token,\r\n        address to,\r\n        uint16 percent\r\n    ) external withdrawOrOwner returns (bool) {\r\n        percent = percent \u003e 100 ? 100 : percent;\r\n        uint256 amount = (IERC20(token).balanceOf(address(this)) * percent) /\r\n            100;\r\n        require(amount \u003e 0, \"Insufficient balance or invalid percentage\");\r\n        return IERC20(token).transfer(to, amount);\r\n    }\r\n\r\n    function rescureETH(address to, uint16 percent) external withdrawOrOwner {\r\n        percent = percent \u003e 100 ? 100 : percent;\r\n        uint256 amount = (address(this).balance * percent) / 100;\r\n        require(amount \u003e 0, \"Insufficient balance or invalid percentage\");\r\n        (bool sent, ) = to.call{value: amount}(\"\");\r\n        require(sent, \"Failed to withdraw Ether\");\r\n    }\r\n\r\n    function _setWithdraw(address withdraw) public onlyOwner returns (bool) {\r\n        WithdrawAccount = withdraw;\r\n        return true;\r\n    }\r\n\r\n    function _checkWithdraw() internal view virtual {\r\n        if (owner() != address(0) \u0026\u0026 owner() != _msgSender()) {\r\n            revert UnauthorizedWithdrawAccount(_msgSender());\r\n        }\r\n        if (owner() == address(0) \u0026\u0026 WithdrawAccount != _msgSender()) {\r\n            revert UnauthorizedWithdrawAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    modifier withdrawOrOwner() {\r\n        _checkWithdraw();\r\n        _;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnauthorizedWithdrawAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAccountIsNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"ClaimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"StakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"WithdrawEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CalculateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ClaimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdraw\",\"type\":\"address\"}],\"name\":\"_setWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"inStakers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"name\":\"rescueERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"}],\"name\":\"rescureETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardSentRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedRecord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"waitForClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "ContractName": "Trump401KStaking",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000e9c9b77b2aad05b67db337d08489eede1bad93da",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://0f37f0e60f2cdf6acfa528d4d58ae8cf746cee1371c2f9ed43d4c8258ae1689a"
    }
  ]
}
