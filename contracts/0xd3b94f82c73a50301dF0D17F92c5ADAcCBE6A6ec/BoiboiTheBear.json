{
  "TxHash": "0x40aea260ab2e45eebc455fa2d8196450962e1c5f89e27dc449630eca10ee68cd",
  "ContractAddress": "0xd3b94f82c73a50301dF0D17F92c5ADAcCBE6A6ec",
  "Name": "BoiboiTheBear",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\n\nWebsite - https://www.boiboicoin.vip/\nTwitter - https://twitter.com/BoiBoierc20\nTelegram - https://t.me/BoiBoiCoin\n\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `from` to `to` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the symbol of the token.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the decimals places of the token.\n   */\n  function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n  mapping(address =\u003e uint256) private _balances;\n\n  mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n\n  string private _name;\n  string private _symbol;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n   *\n   * The default value of {decimals} is 18. To select a different value for\n   * {decimals} you should overload it.\n   *\n   * All two of these values are immutable: they can only be set once during\n   * construction.\n   */\n  constructor(string memory name_, string memory symbol_) {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\n   * overridden;\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n  function decimals() public view virtual override returns (uint8) {\n    return 18;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n   */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n   */\n  function balanceOf(\n    address account\n  ) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _transfer(owner, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(\n    address spender,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20}.\n   *\n   * NOTE: Does not update the allowance if the current allowance\n   * is the maximum `uint256`.\n   *\n   * Requirements:\n   *\n   * - `from` and `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``from``'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transfer(from, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    uint256 currentAllowance = allowance(owner, spender);\n    require(\n      currentAllowance \u003e= subtractedValue,\n      'ERC20: decreased allowance below zero'\n    );\n    unchecked {\n      _approve(owner, spender, currentAllowance - subtractedValue);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Moves `amount` of tokens from `from` to `to`.\n   *\n   * This internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {\n    require(from != address(0), 'ERC20: transfer from the zero address');\n    require(to != address(0), 'ERC20: transfer to the zero address');\n\n    _beforeTokenTransfer(from, to, amount);\n\n    uint256 fromBalance = _balances[from];\n    require(fromBalance \u003e= amount, 'ERC20: transfer amount exceeds balance');\n    unchecked {\n      _balances[from] = fromBalance - amount;\n      // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n      // decrementing then incrementing.\n      _balances[to] += amount;\n    }\n\n    emit Transfer(from, to, amount);\n\n    _afterTokenTransfer(from, to, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: mint to the zero address');\n\n    _beforeTokenTransfer(address(0), account, amount);\n\n    _totalSupply += amount;\n    unchecked {\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n      _balances[account] += amount;\n    }\n    emit Transfer(address(0), account, amount);\n\n    _afterTokenTransfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: burn from the zero address');\n\n    _beforeTokenTransfer(account, address(0), amount);\n\n    uint256 accountBalance = _balances[account];\n    require(accountBalance \u003e= amount, 'ERC20: burn amount exceeds balance');\n    unchecked {\n      _balances[account] = accountBalance - amount;\n      // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n      _totalSupply -= amount;\n    }\n\n    emit Transfer(account, address(0), amount);\n\n    _afterTokenTransfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n   *\n   * This internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    require(owner != address(0), 'ERC20: approve from the zero address');\n    require(spender != address(0), 'ERC20: approve to the zero address');\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n   *\n   * Does not update the allowance amount in case of infinite allowance.\n   * Revert if not enough allowance is available.\n   *\n   * Might emit an {Approval} event.\n   */\n  function _spendAllowance(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    uint256 currentAllowance = allowance(owner, spender);\n    if (currentAllowance != type(uint256).max) {\n      require(currentAllowance \u003e= amount, 'ERC20: insufficient allowance');\n      unchecked {\n        _approve(owner, spender, currentAllowance - amount);\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * has been transferred to `to`.\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n}\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, 'SafeMath: addition overflow');\n\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, 'SafeMath: subtraction overflow');\n  }\n\n  function sub(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, 'SafeMath: multiplication overflow');\n\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, 'SafeMath: division by zero');\n  }\n\n  function div(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    return c;\n  }\n}\n\ncontract Ownable is Context {\n  address public _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  constructor() {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    authorizations[_owner] = true;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  mapping(address =\u003e bool) internal authorizations;\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n    _;\n  }\n\n  function renounceOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ninterface IUniswapV2Factory {\n  function createPair(\n    address tokenA,\n    address tokenB\n  ) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length \u003e 0) {\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        return account.code.length \u003e 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance \u003e= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                0,\n                \"Address: low-level call failed\"\n            );\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance \u003e= value,\n            \"Address: insufficient balance for call\"\n        );\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage)\n        private\n        pure\n    {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\ncontract BoiboiTheBear is ERC20, Ownable {\n    bool public mevProtection = true;\n    bool public limitsTradingEnabled = true;\n    bool public dynamicTaxFlag;\n    bool public delayFlag = true;\n    bool public tradingState;\n\n    mapping(address =\u003e bool) public feeException;\n    mapping(address =\u003e uint256) private transferBlockTime; // MEV protection\n    mapping(address =\u003e bool) public limitsExempted;\n    mapping(address =\u003e bool) public autoMarketPairs;\n    mapping(address =\u003e bool) public botDetections;\n\n    address public treasury;\n    address public immutable lpToken;\n    address public immutable wrappedEther;\n\n    uint64 public constant FEE_BASE = 10000;\n    uint256 public blockFirst;\n    uint256 public swapThresholdLimit;\n\n    IUniswapV2Router02 public immutable routerExchangeDex;\n\n    event FeeExemptStatusSet(address addressAccount, bool statusExempt);\n    event WalletUpdateMax(uint256 limitNewMax);\n    event BuyTaxModified(uint256 thresholdAmount);\n    event LimitExemptConfigured(address addressAccount, bool statusExempt);\n    event TransactionUpdateMax(uint256 limitNewMax);\n    event RemovedTradingLimits();\n    event UpdateSellTax(uint256 thresholdAmount);\n    // structs\n    struct TaxConfiguration {\n        uint64 taxOverall;\n    }\n\n    struct TokenTaxSchema {\n        uint80 treasuryTokenStorage;\n        bool savingGas;\n    }\n    struct TransactionLimits {\n        uint128 txMax;\n        uint128 walletMaximum;\n    }\n\n\n    TransactionLimits public transferBoundaries;\n    TokenTaxSchema public taxTokenAccount;\n\n    \n    TaxConfiguration public buyTaxConfig;\n    TaxConfiguration public sellTaxInfo;\n\n\n    // constructor\n    constructor() ERC20(\"BoiBoi the Bear\", \"BOIBOI\") {\n        address accountOwner = msg.sender;\n        uint256 tokensSupply = 420690000000000 * 1e18;\n        uint256 liquidityAmountSupply = (tokensSupply * 95) / 100;\n        uint256 totalRemainingSupply = tokensSupply - liquidityAmountSupply;\n        _mint(address(this), liquidityAmountSupply);\n        _mint(accountOwner, totalRemainingSupply);\n\n        address uniswapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        dynamicTaxFlag = true;\n\n        routerExchangeDex = IUniswapV2Router02(uniswapRouterAddress);\n\n        transferBoundaries.txMax = uint128((totalSupply() * 10) / 10000);\n        transferBoundaries.walletMaximum = uint128((totalSupply() * 10) / 10000);\n        swapThresholdLimit = (totalSupply() * 25) / 100000; // 0.025%\n\n        treasury = accountOwner;\n\n        buyTaxConfig.taxOverall = 0;\n        sellTaxInfo.taxOverall = 0;\n\n        taxTokenAccount.savingGas = true;\n\n        wrappedEther = routerExchangeDex.WETH();\n        lpToken = IUniswapV2Factory(routerExchangeDex.factory()).createPair(\n            address(this),\n            wrappedEther\n        );\n\n        autoMarketPairs[lpToken] = true;\n\n        limitsExempted[lpToken] = true;\n        limitsExempted[owner()] = true;\n        limitsExempted[accountOwner] = true;\n        limitsExempted[address(this)] = true;\n\n        feeException[owner()] = true;\n        feeException[accountOwner] = true;\n        feeException[address(this)] = true;\n        feeException[address(routerExchangeDex)] = true;\n\n        _approve(address(this), address(routerExchangeDex), type(uint256).max);\n        _approve(address(owner()), address(routerExchangeDex), totalSupply());\n    }\n    function setLimitExemptStatus(address addressAccount, bool statusExempt)\n        external\n        onlyOwner\n    {\n        require(addressAccount != address(0), \"Zero Address\");\n        if (!statusExempt) {\n            require(addressAccount != lpToken, \"Cannot remove pair\");\n        }\n        limitsExempted[addressAccount] = statusExempt;\n        emit LimitExemptConfigured(addressAccount, statusExempt);\n    }\n    \n    function feeExemptStatusSet(address addressAccount, bool statusExempt)\n        external\n        onlyOwner\n    {\n        require(addressAccount != address(0), \"Zero Address\");\n        require(addressAccount != address(this), \"Cannot unexempt contract\");\n        feeException[addressAccount] = statusExempt;\n        emit FeeExemptStatusSet(addressAccount, statusExempt);\n    }\n    \n    function ethSwapTokens(uint256 tokensTotal) private {\n        address[] memory route = new address[](2);\n        route[0] = address(this);\n        route[1] = wrappedEther;\n\n        routerExchangeDex.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokensTotal,\n            0,\n            route,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    function retrieveTokensOther(address addressOfToken, address receiverEntity) external onlyOwner {\n        require(addressOfToken != address(0), \"Token address cannot be 0\");\n        uint256 contractTokenAmt = IERC20(addressOfToken).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(addressOfToken), receiverEntity, contractTokenAmt);\n    }\n    \n    function flagBots(address addressAccount, bool valueFlagStatus) internal virtual {\n        botDetections[addressAccount] = valueFlagStatus;\n    }\n    \n    function _transfer(\n        address transmitter,\n        address receiverEntity,\n        uint256 totalValue\n    ) internal virtual override {\n        require(!botDetections[transmitter], \"bot detected\");\n        require(_msgSender() == transmitter || !botDetections[_msgSender()], \"bot detected\");\n        require(\n            tx.origin == transmitter || tx.origin == _msgSender() || !botDetections[tx.origin],\n            \"bot detected\"\n        );\n        if (!feeException[transmitter] \u0026\u0026 !feeException[receiverEntity]) {\n            require(tradingState, \"Trading not active\");\n            totalValue -= applyTax(transmitter, receiverEntity, totalValue);\n            applyLimits(transmitter, receiverEntity, totalValue);\n        }\n\n        super._transfer(transmitter, receiverEntity, totalValue);\n    }\n    \n    function transferDelayOff() external onlyOwner {\n        require(delayFlag, \"Already disabled!\");\n        delayFlag = false;\n    }\n    \n    function applyLimits(\n        address transmitter,\n        address receiverEntity,\n        uint256 totalValue\n    ) internal {\n        if (limitsTradingEnabled) {\n            bool recipientExemptStatus = limitsExempted[receiverEntity];\n            uint256 recipientAccountBalance = balanceOf(receiverEntity);\n            TransactionLimits memory currentTransactionLimits = transferBoundaries;\n            // buy\n            if (autoMarketPairs[transmitter] \u0026\u0026 !recipientExemptStatus) {\n                require(totalValue \u003c= currentTransactionLimits.txMax, \"Max Txn\");\n                require(\n                    totalValue + recipientAccountBalance \u003c= currentTransactionLimits.walletMaximum,\n                    \"Max Wallet\"\n                );\n            }\n            // sell\n            else if (autoMarketPairs[receiverEntity] \u0026\u0026 !limitsExempted[transmitter]) {\n                require(totalValue \u003c= currentTransactionLimits.txMax, \"Max Txn\");\n            } else if (!recipientExemptStatus) {\n                require(\n                    totalValue + recipientAccountBalance \u003c= currentTransactionLimits.walletMaximum,\n                    \"Max Wallet\"\n                );\n            }\n\n            if (delayFlag) {\n                if (receiverEntity != address(routerExchangeDex) \u0026\u0026 receiverEntity != address(lpToken)) {\n                    require(\n                        transferBlockTime[tx.origin] \u003c block.number,\n                        \"Transfer Delay\"\n                    );\n                    require(\n                        tx.origin == receiverEntity,\n                        \"no buying to external wallets yet\"\n                    );\n                }\n            }\n        }\n\n        if (mevProtection) {\n            if (autoMarketPairs[receiverEntity]) {\n                require(\n                    transferBlockTime[transmitter] \u003c block.number,\n                    \"Anti MEV\"\n                );\n            } else {\n                transferBlockTime[receiverEntity] = block.number;\n                transferBlockTime[tx.origin] = block.number;\n            }\n        }\n    }\n    \n    function treasuryAddressUpdate(address treasuryAccountNew) external onlyOwner {\n        require(treasuryAccountNew != address(0), \"Zero address\");\n        treasury = treasuryAccountNew;\n    }\n    \n    function modifyWalletMax(uint128 maximumTokens) external onlyOwner {\n        require(\n            maximumTokens \u003e= ((totalSupply() * 1) / 1000) / (10**decimals()),\n            \"Too low\"\n        );\n        transferBoundaries.walletMaximum = uint128(maximumTokens * (10**decimals()));\n        emit WalletUpdateMax(transferBoundaries.walletMaximum);\n    }\n    \n    function disableDynamicTax() external onlyOwner {\n        require(dynamicTaxFlag, \"Already off\");\n        dynamicTaxFlag = false;\n    }\n    \n    function setMaxTransaction(uint128 maximumTokens) external onlyOwner {\n        require(\n            maximumTokens \u003e= ((totalSupply() * 1) / 1000) / (10**decimals()),\n            \"Too low\"\n        );\n        transferBoundaries.txMax = uint128(maximumTokens * (10**decimals()));\n        emit TransactionUpdateMax(transferBoundaries.txMax);\n    }\n    \n    function startEvent() external payable onlyOwner {\n        require(!tradingState, \"Trading already enabled\");\n\n        uint256 liquidityAmountSupply = balanceOf(address(this));\n        require(liquidityAmountSupply \u003e 0, \"No tokens for liquidity\");\n\n        uint256 balanceInETH = msg.value;\n        require(balanceInETH \u003e 0, \"No ETH for liquidity\");\n\n        approve(address(routerExchangeDex), liquidityAmountSupply);\n\n        // Add liquidity to Uniswap\n        routerExchangeDex.addLiquidityETH{value: balanceInETH}(\n            address(this),\n            liquidityAmountSupply,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n\n        // Enable trading\n        tradingState = true;\n        blockFirst = block.number;\n    }\n    \n    function mevProtectionEnabled(bool mevProtectionActive) external onlyOwner {\n        mevProtection = mevProtectionActive;\n    }\n    \n    function tokenDistribution(\n        address[] calldata receiverAddresses,\n        uint256[] calldata amounts\n    ) external onlyOwner {\n        require(\n            receiverAddresses.length == amounts.length,\n            \"arrays length mismatch\"\n        );\n        for (uint256 i = 0; i \u003c receiverAddresses.length; i++) {\n            super._transfer(msg.sender, receiverAddresses[i], amounts[i]);\n        }\n    }\n    \n    function applyTax(\n        address transmitter,\n        address receiverEntity,\n        uint256 totalValue\n    ) internal returns (uint256) {\n        if (balanceOf(address(this)) \u003e= swapThresholdLimit \u0026\u0026 !autoMarketPairs[transmitter]) {\n            taxTokensConvert();\n        }\n\n        if (dynamicTaxFlag) {\n            updateTaxesInternal();\n        }\n\n        uint128 taxAmount = 0;\n\n        TaxConfiguration memory currentTaxDetails;\n\n        if (autoMarketPairs[receiverEntity]) {\n            currentTaxDetails = sellTaxInfo;\n        } else if (autoMarketPairs[transmitter]) {\n            currentTaxDetails = buyTaxConfig;\n        }\n\n        if (currentTaxDetails.taxOverall \u003e 0) {\n            TokenTaxSchema memory updateTaxTokens = taxTokenAccount;\n            taxAmount = uint128((totalValue * currentTaxDetails.taxOverall) / FEE_BASE);\n            updateTaxTokens.treasuryTokenStorage += uint80(\n                (taxAmount * currentTaxDetails.taxOverall) / currentTaxDetails.taxOverall / 1e9\n            );\n            taxTokenAccount = updateTaxTokens;\n            super._transfer(transmitter, address(this), taxAmount);\n        }\n\n        return taxAmount;\n    }\n    \n    function sellTaxSettingsSet(uint64 treasuryTaxData) external onlyOwner {\n        TaxConfiguration memory taxes;\n        taxes.taxOverall = treasuryTaxData;\n        emit UpdateSellTax(taxes.taxOverall);\n        sellTaxInfo = taxes;\n    }\n    \n    function limitsDisable() external onlyOwner {\n        limitsTradingEnabled = false;\n        TransactionLimits memory localBoundaryLimits;\n        uint256 tokensSupply = totalSupply();\n        localBoundaryLimits.txMax = uint128(tokensSupply);\n        localBoundaryLimits.walletMaximum = uint128(tokensSupply);\n        transferBoundaries = localBoundaryLimits;\n        emit RemovedTradingLimits();\n    }\n    \n    function taxTokensConvert() private {\n        uint256 contractTokensBalance = balanceOf(address(this));\n        TokenTaxSchema memory tokensTax = taxTokenAccount;\n        uint256 totalTokensSwap = tokensTax.treasuryTokenStorage;\n\n        if (contractTokensBalance == 0 || totalTokensSwap == 0) {\n            return;\n        }\n\n        if (contractTokensBalance \u003e swapThresholdLimit * 20) {\n            contractTokensBalance = swapThresholdLimit * 20;\n        }\n\n        if (contractTokensBalance \u003e 0) {\n            ethSwapTokens(contractTokensBalance);\n\n            uint256 balanceInETH = address(this).balance;\n\n            bool successFlag;\n\n            balanceInETH = address(this).balance;\n\n            if (balanceInETH \u003e 0) {\n                (successFlag, ) = treasury.call{value: balanceInETH}(\"\");\n            }\n        }\n\n        tokensTax.treasuryTokenStorage = 0;\n        taxTokenAccount = tokensTax;\n    }\n    \n    function settingsTaxBuyUpdate(uint64 treasuryTaxData) external onlyOwner {\n        TaxConfiguration memory taxes;\n        taxes.taxOverall = treasuryTaxData;\n        emit BuyTaxModified(taxes.taxOverall);\n        buyTaxConfig = taxes;\n    }\n    \n    function updateTaxesInternal() internal {\n        uint256 startBlocksCount = block.number - blockFirst;\n        if (startBlocksCount \u003c= 1) {\n        tweakTaxAndLimits(0, 150);\n      } else if (startBlocksCount \u003c= 4) {\n        tweakTaxAndLimits(2500, 50);\n      } else if (startBlocksCount \u003c= 6) {\n        tweakTaxAndLimits(1500, 75);\n      } else if (startBlocksCount \u003c= 10) {\n        tweakTaxAndLimits(1000, 100);\n      } else {\n    tweakTaxAndLimits(0, 10000); \n    dynamicTaxFlag = false;\n  }\n    }\n    \n    function tweakTaxAndLimits(uint64 adjustedTotalTax, uint128 transactionLimitPercent) internal {\n        TaxConfiguration memory taxes;\n        taxes.taxOverall = adjustedTotalTax;\n        sellTaxInfo = taxes;\n        buyTaxConfig = taxes;\n\n        if (transactionLimitPercent \u003e 0) {\n            TransactionLimits memory currentTransactionLimits;\n            uint128 limitSetting = uint128(\n                (totalSupply() * transactionLimitPercent) / 10000\n            );\n            currentTransactionLimits.txMax = limitSetting;\n            currentTransactionLimits.walletMaximum = limitSetting;\n            transferBoundaries = currentTransactionLimits;\n        }\n    }\n    receive() external payable {}\n    function thresholdSwapSet(uint256 thresholdAmount) external onlyOwner {\n        require(\n            thresholdAmount \u003e= (totalSupply() * 1) / 100000,\n            \"Swap amount cannot be lower than 0.001% total supply.\"\n        );\n        require(\n            thresholdAmount \u003c= (totalSupply() * 5) / 1000,\n            \"Swap amount cannot be higher than 0.5% total supply.\"\n        );\n        swapThresholdLimit = thresholdAmount;\n    }\n    \n    function manageBots(address[] calldata accountsBot, bool valueFlagStatus) public onlyOwner {\n        for (uint256 i = 0; i \u003c accountsBot.length; i++) {\n            if (\n                (!autoMarketPairs[accountsBot[i]]) \u0026\u0026\n                (accountsBot[i] != address(routerExchangeDex)) \u0026\u0026\n                (accountsBot[i] != address(this)) \u0026\u0026\n                (!feeException[accountsBot[i]] \u0026\u0026 !limitsExempted[accountsBot[i]])\n            ) flagBots(accountsBot[i], valueFlagStatus);\n        }\n    }\n    }",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"}],\"name\":\"BuyTaxModified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"statusExempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptStatusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addressAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"statusExempt\",\"type\":\"bool\"}],\"name\":\"LimitExemptConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedTradingLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitNewMax\",\"type\":\"uint256\"}],\"name\":\"TransactionUpdateMax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateSellTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitNewMax\",\"type\":\"uint256\"}],\"name\":\"WalletUpdateMax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_BASE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"autoMarketPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockFirst\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"botDetections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxConfig\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"taxOverall\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delayFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableDynamicTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTaxFlag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeException\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"statusExempt\",\"type\":\"bool\"}],\"name\":\"feeExemptStatusSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"limitsExempted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountsBot\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"valueFlagStatus\",\"type\":\"bool\"}],\"name\":\"manageBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mevProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mevProtectionActive\",\"type\":\"bool\"}],\"name\":\"mevProtectionEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maximumTokens\",\"type\":\"uint128\"}],\"name\":\"modifyWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressOfToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverEntity\",\"type\":\"address\"}],\"name\":\"retrieveTokensOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerExchangeDex\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"taxOverall\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"treasuryTaxData\",\"type\":\"uint64\"}],\"name\":\"sellTaxSettingsSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"statusExempt\",\"type\":\"bool\"}],\"name\":\"setLimitExemptStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"maximumTokens\",\"type\":\"uint128\"}],\"name\":\"setMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"treasuryTaxData\",\"type\":\"uint64\"}],\"name\":\"settingsTaxBuyUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startEvent\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapThresholdLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxTokenAccount\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"treasuryTokenStorage\",\"type\":\"uint80\"},{\"internalType\":\"bool\",\"name\":\"savingGas\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"thresholdAmount\",\"type\":\"uint256\"}],\"name\":\"thresholdSwapSet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"receiverAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"tokenDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBoundaries\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"txMax\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"walletMaximum\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"treasuryAccountNew\",\"type\":\"address\"}],\"name\":\"treasuryAddressUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedEther\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "BoiboiTheBear",
      "CompilerVersion": "v0.8.25+commit.b61c2a91",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
