{
  "TxHash": "0x10e07f80f35e1ef3c840762d43f22389c48f753a44e98021689cbc7964bfe880",
  "ContractAddress": "0x549D3a7973F0112A79A96046633D7d3e22c64b64",
  "Name": "Bajs",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.25;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = _msgSender();\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\ncontract Bajs is Context, IERC20, Ownable {\r\n    using Address for address;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n\r\n    address payable private _taxWallet;\r\n    address private _router;\r\n\r\n    uint256 private _initialBuyTax = 25;\r\n    uint256 private _initialSellTax = 35;\r\n    uint256 private _finalBuyTax = 0;\r\n    uint256 private _finalSellTax = 0;\r\n    uint256 private _reduceBuyTaxAt = 100;\r\n    uint256 private _reduceSellTaxAt = 115;\r\n    uint256 private _preventSwapBefore = 3;\r\n    uint256 private _transferTax = 0;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 1_000_000_000 * 10 ** _decimals;\r\n    string private constant _name = \"BAJS\";\r\n    string private constant _symbol = \"BAJS\";\r\n    uint256 public _maxTxAmount = (_tTotal * 2) / 100;\r\n    uint256 public _maxWalletSize = (_tTotal * 2) / 100;\r\n    uint256 public _taxSwapThreshold = (_tTotal * 1) / 100;\r\n    uint256 public _maxTaxSwap = (_tTotal * 1) / 100;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address public uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private sellCount = 0;\r\n    uint256 private lastSellBlock = 0;\r\n    uint256 private firstBlock = 0;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    event TransferTaxUpdated(uint _tax);\r\n    event ClearToken(address tokenAddressCleared, uint256 amount);\r\n\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    modifier whenTradingEnabled(address from, address to) {\r\n        if (from != owner() \u0026\u0026 to != owner()) {\r\n            require(tradingOpen, \"Trading is not yet enabled\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address routerAddress) {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        _router = routerAddress;\r\n        uniswapV2Router = IUniswapV2Router02(routerAddress);\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    )\r\n        public\r\n        override\r\n        whenTradingEnabled(_msgSender(), recipient)\r\n        returns (bool)\r\n    {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override whenTradingEnabled(sender, recipient) returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()] - amount\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private whenTradingEnabled(from, to) {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n        if (from != owner() \u0026\u0026 to != owner()) {\r\n            if (\r\n                from == uniswapV2Pair \u0026\u0026\r\n                to != address(uniswapV2Router) \u0026\u0026\r\n                !_isExcludedFromFee[to]\r\n            ) {\r\n                // Buy transaction\r\n                require(amount \u003c= _maxTxAmount, \"Exceeds the maxTxAmount.\");\r\n                require(\r\n                    balanceOf(to) + amount \u003c= _maxWalletSize,\r\n                    \"Exceeds the maxWalletSize.\"\r\n                );\r\n                taxAmount = (amount * getBuyTax()) / 100;\r\n                _buyCount++;\r\n            } else if (to == uniswapV2Pair \u0026\u0026 from != address(this)) {\r\n                // Sell transaction\r\n                taxAmount = (amount * getSellTax()) / 100;\r\n            }\r\n\r\n            uint256 contractTokenBalance = _balances[address(this)];\r\n            if (\r\n                !inSwap \u0026\u0026\r\n                to == uniswapV2Pair \u0026\u0026\r\n                swapEnabled \u0026\u0026\r\n                contractTokenBalance \u003e _taxSwapThreshold \u0026\u0026\r\n                _buyCount \u003e _preventSwapBefore\r\n            ) {\r\n                if (block.number \u003e lastSellBlock) {\r\n                    sellCount = 0;\r\n                }\r\n                require(sellCount \u003c 3, \"Only 3 sells per block!\");\r\n\r\n                swapTokensForEth(\r\n                    min(amount, min(contractTokenBalance, _maxTaxSwap))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance \u003e 0) {\r\n                    sendETHToFee(contractETHBalance);\r\n                }\r\n\r\n                sellCount++;\r\n                lastSellBlock = block.number;\r\n            }\r\n        }\r\n\r\n        if (taxAmount \u003e 0) {\r\n            _balances[address(this)] += taxAmount;\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        _balances[from] -= amount;\r\n        _balances[to] += (amount - taxAmount);\r\n        emit Transfer(from, to, amount - taxAmount);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a \u003c b) ? a : b;\r\n    }\r\n\r\n    function getBuyTax() private view returns (uint256) {\r\n        if (_buyCount \u003e= 160) {\r\n            return 0;\r\n        } else if (_buyCount \u003e= 145) {\r\n            return 5;\r\n        } else if (_buyCount \u003e= 130) {\r\n            return 10;\r\n        } else if (_buyCount \u003e= 115) {\r\n            return 15;\r\n        } else {\r\n            return _initialBuyTax;\r\n        }\r\n    }\r\n\r\n    function getSellTax() private view returns (uint256) {\r\n        if (_buyCount \u003e= 190) {\r\n            return 0;\r\n        } else if (_buyCount \u003e= 175) {\r\n            return 5;\r\n        } else if (_buyCount \u003e= 160) {\r\n            return 15;\r\n        } else if (_buyCount \u003e= 145) {\r\n            return 20;\r\n        } else {\r\n            return _initialSellTax;\r\n        }\r\n    }\r\n\r\n    function setTaxRates(\r\n        uint256 initialBuyTax,\r\n        uint256 initialSellTax,\r\n        uint256 finalBuyTax,\r\n        uint256 finalSellTax,\r\n        uint256 reduceBuyTaxAt,\r\n        uint256 reduceSellTaxAt\r\n    ) external onlyOwner {\r\n        require(initialBuyTax \u003c= 25, \"Initial buy tax cannot exceed 25%\");\r\n        require(initialSellTax \u003c= 35, \"Initial sell tax cannot exceed 35%\");\r\n        require(finalBuyTax \u003c= 25, \"Final buy tax cannot exceed 25%\");\r\n        require(finalSellTax \u003c= 35, \"Final sell tax cannot exceed 35%\");\r\n\r\n        _initialBuyTax = initialBuyTax;\r\n        _initialSellTax = initialSellTax;\r\n        _finalBuyTax = finalBuyTax;\r\n        _finalSellTax = finalSellTax;\r\n        _reduceBuyTaxAt = reduceBuyTaxAt;\r\n        _reduceSellTaxAt = reduceSellTaxAt;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimit() external onlyOwner {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function removeTransferTax() external onlyOwner {\r\n        _transferTax = 0;\r\n        emit TransferTaxUpdated(0);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function enableTrading() external onlyOwner {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }\r\n\r\n    function isTradingOpen() external view returns (bool) {\r\n        return tradingOpen;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function reduceFee(uint256 _newFee) external {\r\n        require(_msgSender() == _taxWallet);\r\n        require(_newFee \u003c= _finalBuyTax \u0026\u0026 _newFee \u003c= _finalSellTax);\r\n\r\n        _finalBuyTax = _newFee;\r\n        _finalSellTax = _newFee;\r\n    }\r\n\r\n    function withdrawETH(uint256 amount) external {\r\n        require(_msgSender() == _taxWallet, \"Unauthorized\");\r\n        require(address(this).balance \u003e= amount, \"Insufficient ETH balance\");\r\n\r\n        payable(_taxWallet).transfer(amount);\r\n    }\r\n\r\n    function clearStuckToken(\r\n        address tokenAddress,\r\n        uint256 tokens\r\n    ) external returns (bool success) {\r\n        require(_msgSender() == _taxWallet);\r\n\r\n        if (tokens == 0) {\r\n            tokens = IERC20(tokenAddress).balanceOf(address(this));\r\n        }\r\n\r\n        emit ClearToken(tokenAddress, tokens);\r\n        return IERC20(tokenAddress).transfer(_taxWallet, tokens);\r\n    }\r\n\r\n    function manualSend() external {\r\n        require(_msgSender() == _taxWallet);\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        require(ethBalance \u003e 0, \"Contract balance must be greater than zero\");\r\n        sendETHToFee(ethBalance);\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet);\r\n\r\n        uint256 tokenBalance = _balances[address(this)];\r\n        if (tokenBalance \u003e 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance \u003e 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    function setTaxWallet(address newTaxWallet) external onlyOwner {\r\n        require(\r\n            newTaxWallet != address(0),\r\n            \"New tax wallet is the zero address\"\r\n        );\r\n        _taxWallet = payable(newTaxWallet);\r\n    }\r\n\r\n    function setRouterAddress(address newRouter) external onlyOwner {\r\n        _router = newRouter;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddressCleared\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClearToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"TransferTaxUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"clearStuckToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeTransferTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalBuyTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalSellTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reduceBuyTaxAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reduceSellTaxAt\",\"type\":\"uint256\"}],\"name\":\"setTaxRates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTaxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Bajs",
      "CompilerVersion": "v0.8.25+commit.b61c2a91",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d",
      "EVMVersion": "paris",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://95a4968ec0dbca02ef185f910d2de2070178f4975a536ecff2a8cd355934c42c"
    }
  ]
}
