{
  "TxHash": "0x3070b3abd901babb8b4a7b0f90d1f41e5d415fc89519bbfa9b6187a3d1bd382d",
  "ContractAddress": "0x0449f2db273f7a523e796a2465eed0d57ea4a635",
  "Name": "ChatCompletion",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\nhttps://resistorai.org\r\n\r\n * @title Resistor AI Chat Completion Oracle V1\r\n * Resistor AI\r\n */\r\n// solhint-disable custom-errors\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\n\r\ncontract ChatCompletion {\r\n  address private _adminAddress = address(0);\r\n  address private _oracleAddress = address(0);\r\n  uint256 public _callPrice = 1 * 10**15; // 0.001 ETH per Chat Completion\r\n\r\n  uint32 private _requestCount = 1;\r\n  mapping(bytes32 =\u003e bool) public _pendingRequests;\r\n  mapping(bytes32 =\u003e string) public _queries;\r\n  mapping(bytes32 =\u003e string) public _responses;\r\n\r\n  event ChatCompletionRequested(bytes32 indexed id, address requester, address oraclet, uint256 price, string prompt);\r\n  event ChatCompletionFulfilled(bytes32 indexed id, string response);\r\n\r\n  constructor() {\r\n    _adminAddress = msg.sender;\r\n    _oracleAddress = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @notice Creates a Chat Completion to be fulfilled by a Resistor oracle or miner\r\n   * @dev This method receives a message input, iterates a new requestId, sends the funds\r\n     to the oracle and emit an event that will trigger the off-chain routine.\r\n   * Emits ChatCompletionRequested event.\r\n   * @param message The chat completion request message\r\n   * @return requestId The Chat Completion request ID\r\n   */\r\n\r\n  function requestCompletion(\r\n    string calldata message\r\n  ) external payable returns (bytes32) {\r\n    require(msg.value \u003e= _callPrice, \"Insufficient funds sent.\");\r\n\r\n    bytes32 requestId = keccak256(abi.encodePacked(this, _requestCount));\r\n    _requestCount = _requestCount + 1;\r\n    _queries[requestId] = message;\r\n    _pendingRequests[requestId] = true;\r\n    payable(_oracleAddress).transfer(msg.value);\r\n\r\n    emit ChatCompletionRequested(requestId, msg.sender, _oracleAddress, msg.value, message);\r\n\r\n    return requestId;\r\n  }\r\n\r\n  /**\r\n   * @notice Fulfills the Chat Completion request sending the response data as a string.\r\n   * @dev After the oracle performs the off-chain routine, it will send the response data\r\n   to this method\r\n   * Emits ChatCompletionFulfilled event.\r\n   * @param requestId The Chat Completion Request ID\r\n   * @param response The Chat Completion Response String\r\n   */\r\n\r\n  function fulfill(\r\n    bytes32 requestId,\r\n    string memory response\r\n  ) external onlyPending(requestId) {\r\n    require(msg.sender == _oracleAddress, \"Only the designated oracle can fulfill requests.\");\r\n    _responses[requestId] = response;\r\n    delete _pendingRequests[requestId];\r\n    emit ChatCompletionFulfilled(requestId, response);\r\n  }\r\n\r\n  /**\r\n   * @notice the next request count to be used in generating a nonce\r\n   * @dev starts at 1 in order to ensure consistent gas cost\r\n   * @return returns the next request count to be used in a nonce\r\n   */\r\n  function _getNextRequestId() internal view returns (uint256) {\r\n    return _requestCount;\r\n  }\r\n\r\n  /**\r\n   * @notice Updates the Oracle Address\r\n   * @param oracleAddress: The address of the oracle contract\r\n   */\r\n  function updateOracle(address oracleAddress) external  {\r\n    require(msg.sender == _adminAddress, \"Only an administrator can call this function\");\r\n    _oracleAddress = oracleAddress;\r\n  }\r\n\r\n    /**\r\n   * @notice Gets the Chat Completion query message of a request\r\n   * @param requestId: The Chat Completion Request ID\r\n   * @return returns the request's query string\r\n   */\r\n  function getQuery(bytes32 requestId) external view returns (string memory)  {\r\n    return _queries[requestId];\r\n  }\r\n\r\n    /**\r\n   * @notice Gets the Chat Completion request response\r\n   * @param requestId: The Chat Completion Request ID\r\n   * @return returns the request's response string\r\n   */\r\n  function getResponse(bytes32 requestId) external view returns (string memory)  {\r\n    return _responses[requestId];\r\n  }\r\n\r\n    /**\r\n   * @notice Checks if a request is still pending\r\n   * @param requestId: The Chat Completion Request ID\r\n   * @return returns a boolean if the request is pending or not\r\n   */\r\n  function isPending(bytes32 requestId) external view returns (bool)  {\r\n    return _pendingRequests[requestId] == true;\r\n  }\r\n\r\n  /**\r\n   * @dev Reverts if the request is not pending.\r\n   * @param requestId The request ID to fulfill\r\n   */\r\n  modifier onlyPending(bytes32 requestId) {\r\n    require(_pendingRequests[requestId] == true, \"This request is not pending\");\r\n    _;\r\n  }\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"ChatCompletionFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oraclet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"prompt\",\"type\":\"string\"}],\"name\":\"ChatCompletionRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_callPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_pendingRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_queries\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"_responses\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getQuery\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getResponse\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"isPending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"requestCompletion\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "ChatCompletion",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "paris",
      "Library": "",
      "LicenseType": "Unlicense",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://fd8b659192b7fd0496af4f10154ed9dc7b7bef9d279e394f8df26d5890ae4966"
    }
  ]
}
