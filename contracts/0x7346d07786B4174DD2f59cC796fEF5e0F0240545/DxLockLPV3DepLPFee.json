{
  "TxHash": "0x321fb70babd0efe63ce474b47b17dbdc1dcd651ff98eb4a019faac4972fa02a6",
  "ContractAddress": "0x7346d07786B4174DD2f59cC796fEF5e0F0240545",
  "Name": "DxLockLPV3DepLPFee",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\n* @title DXLock - Empowering Trust through Token Locking\r\n* @dev Secure, User-Friendly Smart Contract to Lock Liquidity and Regular Tokens.\r\n*\r\n* üöÄ Introduction:\r\n* Welcome to DXLock, the pinnacle of token locking on the blockchain! Developed with passion and precision,\r\n* DXLock stands out as a beacon of trust and commitment in the crypto world. This smart contract is meticulously\r\n* crafted to lock both liquidity tokens and regular ERC20 tokens, ensuring a secure and transparent environment\r\n* for your assets.\r\n*\r\n* üåê Visit DXLock:\r\n* Dive deeper into the world of DXLock by visiting our platform at [dx.app](\r\nhttps://dx.app).\r\nDiscover a treasure trove of features,\r\n* tutorials, and support to elevate your token locking experience!\r\n*\r\n* üí° Features:\r\n* 1. **Liquidity Locking**: Cement your project's credibility by locking liquidity tokens. Show the world that you're here to stay!\r\n* 2. **Token Locking**: Not just for liquidity! Lock any ERC20 tokens with ease and confidence.\r\n* 3. **Time-locked Security**: Your tokens are safe and sound until the predetermined unlock time hits the clock.\r\n* 4. **Transparent and Trustworthy**: Open-source and audited, DXLock is a fortress of reliability.\r\n*\r\n* üõ°Ô∏è Security:\r\n* Your trust is our top priority. DXLock is fortified with industry-leading security practices to shield your assets\r\n* and ensure a seamless experience. Though thorough audits have been conducted, we encourage users to do their own\r\n* research and verify the contract's integrity before engaging.\r\n*\r\n* üìñ How to Use:\r\n* Engaging with DXLock is a breeze! Simply deposit your tokens, set the lock duration, and rest easy knowing\r\n* your assets are in good hands. Once the lock period concludes, withdrawing is just a click away.\r\n*\r\n* üë• Community and Support:\r\n* Join our vibrant community and connect with the DXLock team and fellow users! Your feedback and questions are invaluable\r\n* to us, as we continually strive to enhance DXLock‚Äôs functionality and user experience.\r\n*\r\n* üìú License:\r\n* DXLock is proudly released under the MIT License. We believe in openness and the power of community-driven innovation.\r\n*\r\n* @author The DXLock Team\r\n* @notice Utilize DXLock at your own discretion. We‚Äôve done everything to ensure its security, but the final responsibility lies with the user.\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.17 ^0.8.0 ^0.8.1;\r\n\r\n// node_modules/@openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// contracts/LPLockerV3/LpFee/LPv3LockV2Deployer.sol\r\n\r\ninterface decentralizedStorage {\r\n    function addNewLock(\r\n        address _lpAddress,\r\n        uint256 _locktime,\r\n        address _lockContract,\r\n        uint256 _tokenAmount,\r\n        string memory _logo\r\n    ) external;\r\n\r\n    function extendLockerTime(\r\n        uint256 _userLockerNumber,\r\n        uint256 _newLockTime\r\n    ) external;\r\n\r\n    function transferLocker(\r\n        address _newOwner,\r\n        uint256 _userLockerNumber\r\n    ) external;\r\n\r\n    function unlockLocker(uint256 _userLockerNumber) external;\r\n\r\n    function changeLogo(\r\n        string memory _newLogo,\r\n        uint256 _userLockerNumber\r\n    ) external;\r\n\r\n    function getPersonalLockerCount(address _owner) external returns (uint256);\r\n\r\n    function getBurnContractAddress() external view returns (address);\r\n}\r\n\r\ninterface ReferralContract {\r\n    function getDiscountedPrice(string memory _code) external returns (uint256);\r\n\r\n    function validateCode(string memory _code) external returns (bool);\r\n\r\n    function fetchCodeOwner(string memory _code) external returns (address);\r\n\r\n    function fetchCodeOwnerPercentage(\r\n        string memory _code\r\n    ) external returns (uint256);\r\n\r\n    function updateReferrerAmounts(\r\n        address _referrer,\r\n        uint256 _updateAmount\r\n    ) external returns (bool);\r\n\r\n    function updateCodeUseNumber(\r\n        string memory _code,\r\n        address _presaleAddress\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface INonfungiblePositionManager {\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    struct MintParams {\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        address recipient;\r\n        uint256 deadline;\r\n    }\r\n\r\n    function mint(\r\n        MintParams calldata params\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 tokenId,\r\n            uint128 liquidity,\r\n            uint256 amount0,\r\n            uint256 amount1\r\n        );\r\n\r\n    struct Position {\r\n        uint96 nonce;\r\n        address operator;\r\n        address token0;\r\n        address token1;\r\n        uint24 fee;\r\n        int24 tickLower;\r\n        int24 tickUpper;\r\n        uint128 liquidity;\r\n        uint256 feeGrowthInside0LastX128;\r\n        uint256 feeGrowthInside1LastX128;\r\n        uint128 tokensOwed0;\r\n        uint128 tokensOwed1;\r\n    }\r\n\r\n    function positions(\r\n        uint256 tokenId\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint96 nonce,\r\n            address operator,\r\n            address token0,\r\n            address token1,\r\n            uint24 fee,\r\n            int24 tickLower,\r\n            int24 tickUpper,\r\n            uint128 liquidity,\r\n            uint256 feeGrowthInside0LastX128,\r\n            uint256 feeGrowthInside1LastX128,\r\n            uint128 tokensOwed0,\r\n            uint128 tokensOwed1\r\n        );\r\n\r\n    struct IncreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint256 amount0Desired;\r\n        uint256 amount1Desired;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\r\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\r\n    /// amount0Desired The desired amount of token0 to be spent,\r\n    /// amount1Desired The desired amount of token1 to be spent,\r\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\r\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return liquidity The new liquidity amount as a result of the increase\r\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\r\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\r\n    function increaseLiquidity(\r\n        IncreaseLiquidityParams calldata params\r\n    )\r\n        external\r\n        payable\r\n        returns (uint128 liquidity, uint256 amount0, uint256 amount1);\r\n\r\n    struct DecreaseLiquidityParams {\r\n        uint256 tokenId;\r\n        uint128 liquidity;\r\n        uint256 amount0Min;\r\n        uint256 amount1Min;\r\n        uint256 deadline;\r\n    }\r\n\r\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\r\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\r\n    /// amount The amount by which liquidity will be decreased,\r\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\r\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\r\n    /// deadline The time by which the transaction must be included to effect the change\r\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\r\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\r\n    function decreaseLiquidity(\r\n        DecreaseLiquidityParams calldata params\r\n    ) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n\r\n    function collect(\r\n        CollectParams calldata params\r\n    ) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function burn(uint256 tokenId) external payable;\r\n}\r\n\r\ncontract PersonalLPv3LockerLPFee is IERC721Receiver, Ownable, ReentrancyGuard {\r\n    uint256 public LockerType = 4;\r\n\r\n    uint256 public personalLockerCount;\r\n    address public storagePersonal;\r\n\r\n    uint256 public LockExpireTimestamp;\r\n    uint256 public LockerCreationTimestamp;\r\n\r\n    uint256 public tokenId;\r\n    bool public tokenWithdrawn;\r\n\r\n    address internal feeDeposit;\r\n    uint256 public relockFee;\r\n    uint256 public collectFee;\r\n\r\n    bool public relockAfterExpire = true;\r\n\r\n    INonfungiblePositionManager public immutable nftPositionManager;\r\n\r\n    uint256 public constant FEE_DENOMINATOR = 10000; // denominator for lp fees\r\n\r\n    constructor(\r\n        address _lockTokenAddress,\r\n        uint256 _tokenId,\r\n        uint256 _lockTimeEnd,\r\n        uint256 _personalLockerCount,\r\n        address _lockerStorage,\r\n        uint256 _collectFee,\r\n        uint256 _relockFee,\r\n        address _feeDeposit\r\n    ) {\r\n        require(\r\n            _lockTimeEnd \u003e (block.timestamp + 600),\r\n            \"Please lock longer than now\"\r\n        );\r\n\r\n        nftPositionManager = INonfungiblePositionManager(_lockTokenAddress);\r\n        tokenId = _tokenId;\r\n\r\n        LockExpireTimestamp = _lockTimeEnd;\r\n        personalLockerCount = _personalLockerCount;\r\n        storagePersonal = _lockerStorage;\r\n\r\n        LockerCreationTimestamp = block.timestamp;\r\n\r\n        collectFee = _collectFee;\r\n        relockFee = _relockFee;\r\n        feeDeposit = _feeDeposit;\r\n\r\n        _transferOwnership(tx.origin);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function changeLogo(string memory _logo) external onlyOwner {\r\n        decentralizedStorage(storagePersonal).changeLogo(\r\n            _logo,\r\n            personalLockerCount\r\n        );\r\n    }\r\n\r\n    function CheckLockedTokenId() public view returns (uint256) {\r\n        return tokenId;\r\n    }\r\n\r\n    function ExtendPersonalLocker(\r\n        uint256 _newLockTime\r\n    ) external payable nonReentrant onlyOwner {\r\n        require(\r\n            LockExpireTimestamp \u003c _newLockTime,\r\n            \"You cant reduce locktime...\"\r\n        );\r\n        require(\r\n            block.timestamp \u003c _newLockTime,\r\n            \"You cant extend locktime in the past\"\r\n        );\r\n        require(!tokenWithdrawn, \"Tokens were already withdrawn\");\r\n\r\n        (, , uint128 liquidity) = _getLPTokensAndLiquidity();\r\n\r\n        _takeRelockLPFee(liquidity);\r\n\r\n        LockExpireTimestamp = _newLockTime;\r\n        decentralizedStorage(storagePersonal).extendLockerTime(\r\n            LockExpireTimestamp,\r\n            personalLockerCount\r\n        );\r\n    }\r\n\r\n    function _takeRelockLPFee(uint128 liquidity) internal {\r\n        nftPositionManager.decreaseLiquidity(\r\n            INonfungiblePositionManager.DecreaseLiquidityParams(\r\n                tokenId,\r\n                uint128((liquidity * relockFee) / FEE_DENOMINATOR),\r\n                0,\r\n                0,\r\n                block.timestamp\r\n            )\r\n        );\r\n        nftPositionManager.collect(\r\n            INonfungiblePositionManager.CollectParams(\r\n                tokenId,\r\n                feeDeposit,\r\n                type(uint128).max,\r\n                type(uint128).max\r\n            )\r\n        );\r\n    }\r\n\r\n    function _getLPTokensAndLiquidity()\r\n        internal\r\n        view\r\n        returns (address token0, address token1, uint128 liquidity)\r\n    {\r\n        (, , token0, token1, , , , liquidity, , , , ) = nftPositionManager\r\n            .positions(tokenId);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public override onlyOwner {\r\n        _transferOwnership(_newOwner);\r\n        decentralizedStorage(storagePersonal).transferLocker(\r\n            _newOwner,\r\n            personalLockerCount\r\n        );\r\n    }\r\n\r\n    function unlockTokenAfterTimestamp() external onlyOwner nonReentrant {\r\n        require(\r\n            block.timestamp \u003e= LockExpireTimestamp,\r\n            \"Token is still Locked\"\r\n        );\r\n        IERC721(address(nftPositionManager)).safeTransferFrom(\r\n            address(this),\r\n            owner(),\r\n            tokenId\r\n        );\r\n\r\n        if (!tokenWithdrawn) {\r\n            decentralizedStorage(storagePersonal).unlockLocker(\r\n                personalLockerCount\r\n            );\r\n            tokenWithdrawn = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Collect fees to _recipient if msg.sender is the owner of tokenId\r\n     */\r\n    function collect()\r\n        external\r\n        nonReentrant\r\n        onlyOwner\r\n        returns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1)\r\n    {\r\n        (amount0, amount1, fee0, fee1) = _collect();\r\n    }\r\n\r\n    function _collect()\r\n        private\r\n        returns (uint256 amount0, uint256 amount1, uint256 fee0, uint256 fee1)\r\n    {\r\n        if (collectFee == 0) {\r\n            (amount0, amount1) = nftPositionManager.collect(\r\n                INonfungiblePositionManager.CollectParams(\r\n                    tokenId,\r\n                    owner(),\r\n                    type(uint128).max,\r\n                    type(uint128).max\r\n                )\r\n            );\r\n        } else {\r\n            (address token0, address token1, ) = _getLPTokensAndLiquidity();\r\n            nftPositionManager.collect(\r\n                INonfungiblePositionManager.CollectParams(\r\n                    tokenId,\r\n                    address(this),\r\n                    type(uint128).max,\r\n                    type(uint128).max\r\n                )\r\n            );\r\n\r\n            uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n            uint256 balance1 = IERC20(token1).balanceOf(address(this));\r\n            address feeTo = feeDeposit;\r\n            address remainderTo = owner();\r\n\r\n            if (balance0 \u003e 0) {\r\n                fee0 = (balance0 * collectFee) / FEE_DENOMINATOR;\r\n                require(\r\n                    IERC20(token0).transfer(feeTo, fee0),\r\n                    \"erc20 transfer failed\"\r\n                );\r\n                amount0 = balance0 - fee0;\r\n                require(\r\n                    IERC20(token0).transfer(remainderTo, amount0),\r\n                    \"erc20 transfer failed\"\r\n                );\r\n            }\r\n\r\n            if (balance1 \u003e 0) {\r\n                fee1 = (balance1 * collectFee) / FEE_DENOMINATOR;\r\n                require(\r\n                    IERC20(token1).transfer(feeTo, fee1),\r\n                    \"erc20 transfer failed\"\r\n                );\r\n                amount1 = balance1 - fee1;\r\n                require(\r\n                    IERC20(token1).transfer(remainderTo, amount1),\r\n                    \"erc20 transfer failed\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function withdrawNativeToken(\r\n        address payable user\r\n    ) public onlyOwner nonReentrant {\r\n        require(user != address(0), \"zero address\");\r\n        Address.sendValue(user, address(this).balance);\r\n    }\r\n\r\n    function withdrawStuckCurrency(\r\n        address payable user,\r\n        address _token\r\n    ) external onlyOwner nonReentrant {\r\n        uint256 amount = IERC20(_token).balanceOf(address(this));\r\n        IERC20(_token).transfer(user, amount);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n}\r\n\r\ncontract DxLockLPV3DepLPFee is Ownable, ReentrancyGuard, IERC721Receiver {\r\n    uint256 public constant FEE_DENOMINATOR = 10000; // denominator for lp fees\r\n    uint256 public constant HUNDRED = 100;\r\n    address public PersonalLockerStorage;\r\n    address public referralDappAddr;\r\n    bool public referralDisabled;\r\n    string public dappFeeName = \"dxlockFeesTokenLPv3v2\";\r\n    uint256 public lpFee = 100;\r\n    uint256 public collectFee = 100;\r\n    uint256 public relockFee = 100;\r\n    address public tokenFeeAddress = 0xb44ea272f317E379567Ce54Acd94a2891597024E;\r\n    address[] public LockerContractStorage;\r\n    mapping(address =\u003e bool) public whitelistedNFTPositionManagers;\r\n\r\n    constructor(address _lockerStorage, address _referralContract) {\r\n        PersonalLockerStorage = _lockerStorage;\r\n        referralDappAddr = _referralContract;\r\n    }\r\n\r\n    function whitelistNFTPositionManager(\r\n        address _nftPositionManager\r\n    ) external onlyOwner {\r\n        require(_nftPositionManager != address(0), \"address(0)\");\r\n        require(\r\n            !whitelistedNFTPositionManagers[_nftPositionManager],\r\n            \"already whitelisted\"\r\n        );\r\n        whitelistedNFTPositionManagers[_nftPositionManager] = true;\r\n    }\r\n\r\n    function blacklistNFTPositionManager(\r\n        address _nftPositionManager\r\n    ) external onlyOwner {\r\n        require(_nftPositionManager != address(0), \"address(0)\");\r\n        require(\r\n            whitelistedNFTPositionManagers[_nftPositionManager],\r\n            \"not whitelisted\"\r\n        );\r\n        whitelistedNFTPositionManagers[_nftPositionManager] = false;\r\n    }\r\n\r\n    function createLPLocker(\r\n        INonfungiblePositionManager _nftPositionManager,\r\n        uint256 _tokenId,\r\n        uint256 _lockerEndTimeStamp,\r\n        string memory _logo,\r\n        string memory _referralCode\r\n    ) public nonReentrant returns (address newLock) {\r\n        require(address(_nftPositionManager) != address(0), \"address(0)\");\r\n        require(address(referralDappAddr) != address(0), \"address(0)\");\r\n        require(address(PersonalLockerStorage) != address(0), \"address(0)\");\r\n        require(\r\n            whitelistedNFTPositionManagers[address(_nftPositionManager)],\r\n            \"not whitelisted NFTPositionManager\"\r\n        );\r\n        require(_tokenId != 0, \"invalid tokenId\");\r\n\r\n        (\r\n            address token0,\r\n            address token1,\r\n            uint128 liquidity\r\n        ) = _getLPTokensAndLiquidity(_nftPositionManager, _tokenId);\r\n\r\n        if (lpFee \u003e 0) {\r\n            uint256 balance0 = IERC20(token0).balanceOf(address(this));\r\n            uint256 balance1 = IERC20(token1).balanceOf(address(this));\r\n\r\n            _takeLPFee((_nftPositionManager), _tokenId, liquidity);\r\n\r\n            uint256 balance0After = IERC20(token0).balanceOf(address(this));\r\n            uint256 balance1After = IERC20(token1).balanceOf(address(this));\r\n\r\n            _distributeReferralFee(\r\n                _referralCode,\r\n                token0,\r\n                token1,\r\n                balance0After - balance0,\r\n                balance1After - balance1\r\n            );\r\n\r\n            _sendLPFeeToFeeAddress(token0, token1);\r\n        }\r\n\r\n        address lock = _createLockerAndLockNFT(\r\n            address(_nftPositionManager),\r\n            _tokenId,\r\n            _lockerEndTimeStamp,\r\n            _logo\r\n        );\r\n\r\n        if (!referralDisabled) {\r\n            require(\r\n                ReferralContract(referralDappAddr).updateCodeUseNumber(\r\n                    _referralCode,\r\n                    address(lock)\r\n                ),\r\n                \"code use update failed\"\r\n            );\r\n        }\r\n\r\n        return address(lock);\r\n    }\r\n\r\n    function _takeLPFee(\r\n        INonfungiblePositionManager nftPositionManager,\r\n        uint256 tokenId,\r\n        uint128 liquidity\r\n    ) internal {\r\n        IERC721(address(nftPositionManager)).safeTransferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            tokenId,\r\n            \"\"\r\n        );\r\n\r\n        nftPositionManager.decreaseLiquidity(\r\n            INonfungiblePositionManager.DecreaseLiquidityParams(\r\n                tokenId,\r\n                uint128((liquidity * lpFee) / FEE_DENOMINATOR),\r\n                0,\r\n                0,\r\n                block.timestamp\r\n            )\r\n        );\r\n        nftPositionManager.collect(\r\n            INonfungiblePositionManager.CollectParams(\r\n                tokenId,\r\n                address(this),\r\n                type(uint128).max,\r\n                type(uint128).max\r\n            )\r\n        );\r\n    }\r\n\r\n    function _distributeReferralFee(\r\n        string memory _referralCode,\r\n        address token0,\r\n        address token1,\r\n        uint256 amount0,\r\n        uint256 amount1\r\n    ) internal {\r\n        bytes32 referralCode = keccak256(abi.encodePacked(_referralCode));\r\n        bytes32 defaultReferralCode = keccak256(abi.encodePacked(\"default\"));\r\n\r\n        if (referralDisabled) {\r\n            require(\r\n                referralCode == defaultReferralCode,\r\n                \"only default code allowed\"\r\n            );\r\n        }\r\n        if (referralCode != defaultReferralCode) {\r\n            require(\r\n                ReferralContract(referralDappAddr).validateCode(_referralCode),\r\n                \"invalid discount code\"\r\n            );\r\n\r\n            uint256 referrerPerc = ReferralContract(referralDappAddr)\r\n                .fetchCodeOwnerPercentage(_referralCode);\r\n\r\n            address referrerAddress = ReferralContract(referralDappAddr)\r\n                .fetchCodeOwner(_referralCode);\r\n\r\n            uint256 referrerToken0Amount = ((amount0) * (referrerPerc)) /\r\n                HUNDRED;\r\n\r\n            uint256 referrerToken1Amount = ((amount1) * (referrerPerc)) /\r\n                HUNDRED;\r\n\r\n            if (referrerToken0Amount \u003e 0) {\r\n                require(\r\n                    IERC20(token0).transfer(\r\n                        referrerAddress,\r\n                        referrerToken0Amount\r\n                    ),\r\n                    \"erc20 transfer failed\"\r\n                );\r\n            }\r\n\r\n            if (referrerToken1Amount \u003e 0) {\r\n                require(\r\n                    IERC20(token1).transfer(\r\n                        referrerAddress,\r\n                        referrerToken1Amount\r\n                    ),\r\n                    \"erc20 transfer failed\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function _sendLPFeeToFeeAddress(address token0, address token1) internal {\r\n        require(\r\n            IERC20(token0).transfer(\r\n                tokenFeeAddress,\r\n                IERC20(token0).balanceOf(address(this))\r\n            ),\r\n            \"erc20 transfer failed\"\r\n        );\r\n        require(\r\n            IERC20(token1).transfer(\r\n                tokenFeeAddress,\r\n                IERC20(token1).balanceOf(address(this))\r\n            ),\r\n            \"erc20 transfer failed\"\r\n        );\r\n    }\r\n\r\n    function _createLockerAndLockNFT(\r\n        address _lockingToken,\r\n        uint256 _tokenId,\r\n        uint256 _lockerEndTimeStamp,\r\n        string memory _logo\r\n    ) internal returns (address lock) {\r\n        uint256 _counter = decentralizedStorage(PersonalLockerStorage)\r\n            .getPersonalLockerCount(msg.sender);\r\n\r\n        PersonalLPv3LockerLPFee createNewLock;\r\n        createNewLock = new PersonalLPv3LockerLPFee(\r\n            _lockingToken,\r\n            _tokenId,\r\n            _lockerEndTimeStamp,\r\n            _counter,\r\n            PersonalLockerStorage,\r\n            collectFee,\r\n            relockFee,\r\n            tokenFeeAddress\r\n        );\r\n\r\n        IERC721(_lockingToken).safeTransferFrom(\r\n            address(this),\r\n            address(createNewLock),\r\n            _tokenId,\r\n            \"\"\r\n        );\r\n\r\n        decentralizedStorage(PersonalLockerStorage).addNewLock(\r\n            _lockingToken,\r\n            _lockerEndTimeStamp,\r\n            address(createNewLock),\r\n            _tokenId,\r\n            _logo\r\n        );\r\n        LockerContractStorage.push(address(createNewLock));\r\n\r\n        return address(createNewLock);\r\n    }\r\n\r\n    function changeStorageContract(address _lockerStorage) external onlyOwner {\r\n        PersonalLockerStorage = _lockerStorage;\r\n    }\r\n\r\n    function changeReferralContract(\r\n        address _newRefContract\r\n    ) external onlyOwner {\r\n        referralDappAddr = _newRefContract;\r\n    }\r\n\r\n    function disableReferral() external onlyOwner {\r\n        require(!referralDisabled, \"referral already disabled\");\r\n        referralDisabled = true;\r\n    }\r\n\r\n    function enableReferral() external onlyOwner {\r\n        require(referralDisabled, \"referral already enabled\");\r\n        referralDisabled = false;\r\n    }\r\n\r\n    function changeLPFee(uint256 _lpFee) external onlyOwner {\r\n        require(_lpFee \u003c= 1000, \"LP fee out of bounds\");\r\n        lpFee = _lpFee;\r\n    }\r\n\r\n    function changeRelockFee(uint256 _relockFee) external onlyOwner {\r\n        require(_relockFee \u003c= 1000, \"Relock fee out of bounds\");\r\n        relockFee = _relockFee;\r\n    }\r\n\r\n    function changeCollectFee(uint256 _collectFee) external onlyOwner {\r\n        require(_collectFee \u003c= 1000, \"Collect fee out of bounds\");\r\n        collectFee = _collectFee;\r\n    }\r\n\r\n    function changeTokenFeeAddress(address _feeAddress) external onlyOwner {\r\n        require(\r\n            _feeAddress != address(0),\r\n            \"token fee address cannot be zero address\"\r\n        );\r\n        tokenFeeAddress = _feeAddress;\r\n    }\r\n\r\n    function updateFeesName(string memory _newFeesName) external onlyOwner {\r\n        dappFeeName = _newFeesName;\r\n    }\r\n\r\n    function _getLPTokensAndLiquidity(\r\n        INonfungiblePositionManager nftPositionManager,\r\n        uint256 tokenId\r\n    )\r\n        internal\r\n        view\r\n        returns (address token0, address token1, uint128 liquidity)\r\n    {\r\n        (, , token0, token1, , , , liquidity, , , , ) = nftPositionManager\r\n            .positions(tokenId);\r\n    }\r\n\r\n    function getLockerCount() public view returns (uint256 isSize) {\r\n        return LockerContractStorage.length;\r\n    }\r\n\r\n    function getAllLockers() public view returns (address[] memory) {\r\n        address[] memory allTokens = new address[](\r\n            LockerContractStorage.length\r\n        );\r\n        for (uint256 i = 0; i \u003c LockerContractStorage.length; i++) {\r\n            allTokens[i] = LockerContractStorage[i];\r\n        }\r\n        return allTokens;\r\n    }\r\n\r\n    function withdrawNativeToken(\r\n        address payable user\r\n    ) public onlyOwner nonReentrant {\r\n        require(user != address(0), \"zero address\");\r\n        Address.sendValue(user, address(this).balance);\r\n    }\r\n\r\n    function withdrawStuckCurrency(\r\n        address user,\r\n        address _token\r\n    ) external onlyOwner nonReentrant {\r\n        require(user != address(0), \"zero address\");\r\n        IERC20 token = IERC20(_token);\r\n        require(\r\n            token.transfer(user, token.balanceOf(address(this))),\r\n            \"token transfer failed\"\r\n        );\r\n    }\r\n\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external override returns (bytes4) {\r\n        return this.onERC721Received.selector;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerStorage\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referralContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LockerContractStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PersonalLockerStorage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftPositionManager\",\"type\":\"address\"}],\"name\":\"blacklistNFTPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collectFee\",\"type\":\"uint256\"}],\"name\":\"changeCollectFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpFee\",\"type\":\"uint256\"}],\"name\":\"changeLPFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRefContract\",\"type\":\"address\"}],\"name\":\"changeReferralContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_relockFee\",\"type\":\"uint256\"}],\"name\":\"changeRelockFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerStorage\",\"type\":\"address\"}],\"name\":\"changeStorageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddress\",\"type\":\"address\"}],\"name\":\"changeTokenFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INonfungiblePositionManager\",\"name\":\"_nftPositionManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockerEndTimeStamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_logo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_referralCode\",\"type\":\"string\"}],\"name\":\"createLPLocker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newLock\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dappFeeName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLockers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLockerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"isSize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralDappAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relockFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFeeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newFeesName\",\"type\":\"string\"}],\"name\":\"updateFeesName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftPositionManager\",\"type\":\"address\"}],\"name\":\"whitelistNFTPositionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedNFTPositionManagers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawStuckCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "DxLockLPV3DepLPFee",
      "CompilerVersion": "v0.8.17+commit.8df45f5f",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000934b825af7cdbb626ddddc849458e2471b302d4b0000000000000000000000001f042559e7ebec15e273d31c1ed9f19c4fdc6d8a",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://bfe56b53faef9453305ae94c015d785e3213b76233f3802872f4a4e0e11f5fa3"
    }
  ]
}
