{
  "TxHash": "0xabf7d58a998128ea86d6f7c99e11d05d52d72a2994dc27bdcd7cdc633944c812",
  "ContractAddress": "0x5e342d7b1561fb30a0aad7ece025fa76582b5807",
  "Name": "LlamaLendSwapper",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.24;\n\n\n\n\n\n\n\n\n\ncontract DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x + y;\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x - y;\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x * y;\n    }\n\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x / y;\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x \u003c= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x \u003e= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x \u003c= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x \u003e= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetAuthAddresses {\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n    address internal constant DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\n    address internal constant PROXY_AUTH_ADDRESS = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant MODULE_AUTH_ADDRESS = 0x7407974DDBF539e552F1d051e44573090912CC3D;\n}\n\n\n\n\n\n\n\ncontract AuthHelper is MainnetAuthAddresses {\n}\n\n\n\n\n\n\n\n\ncontract AdminVault is AuthHelper {\n    address public owner;\n    address public admin;\n\n    error SenderNotAdmin();\n\n    constructor() {\n        owner = msg.sender;\n        admin = ADMIN_ADDR;\n    }\n\n    /// @notice Admin is able to change owner\n    /// @param _owner Address of new owner\n    function changeOwner(address _owner) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        owner = _owner;\n    }\n\n    /// @notice Admin is able to set new admin\n    /// @param _admin Address of multisig that becomes new admin\n    function changeAdmin(address _admin) public {\n        if (admin != msg.sender){\n            revert SenderNotAdmin();\n        }\n        admin = _admin;\n    }\n\n}\n\n\n\n\n\n\n\ninterface IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint256 digits);\n    function totalSupply() external view returns (uint256 supply);\n\n    function balanceOf(address _owner) external view returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n\n\n\n\nlibrary Address {\n    //insufficient balance\n    error InsufficientBalance(uint256 available, uint256 required);\n    //unable to send value, recipient may have reverted\n    error SendingValueFail();\n    //insufficient balance for call\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\n    //call to non-contract\n    error NonContractCall();\n    \n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash \u0026\u0026 codehash != 0x0);\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        uint256 balance = address(this).balance;\n        if (balance \u003c amount){\n            revert InsufficientBalance(balance, amount);\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!(success)){\n            revert SendingValueFail();\n        }\n    }\n\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        uint256 balance = address(this).balance;\n        if (balance \u003c value){\n            revert InsufficientBalanceForCall(balance, value);\n        }\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        if (!(isContract(target))){\n            revert NonContractCall();\n        }\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success \u0026\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026 address(token).code.length \u003e 0;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\ncontract AdminAuth is AuthHelper {\n    using SafeERC20 for IERC20;\n\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n\n    error SenderNotOwner();\n    error SenderNotAdmin();\n\n    modifier onlyOwner() {\n        if (adminVault.owner() != msg.sender){\n            revert SenderNotOwner();\n        }\n        _;\n    }\n\n    modifier onlyAdmin() {\n        if (adminVault.admin() != msg.sender){\n            revert SenderNotAdmin();\n        }\n        _;\n    }\n\n    /// @notice withdraw stuck funds\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n            payable(_receiver).transfer(_amount);\n        } else {\n            IERC20(_token).safeTransfer(_receiver, _amount);\n        }\n    }\n\n    /// @notice Destroy the contract\n    /// @dev Deprecated method, selfdestruct will soon just send eth\n    function kill() public onlyAdmin {\n        selfdestruct(payable(msg.sender));\n    }\n}\n\n\n\n\n\n\n\n\ncontract FeeRecipient is AdminAuth {\n\n    address public wallet;\n\n    constructor(address _newWallet) {\n        wallet = _newWallet;\n    }\n\n    function getFeeAddr() public view returns (address) {\n        return wallet;\n    }\n\n    function changeWalletAddr(address _newWallet) public onlyOwner {\n        wallet = _newWallet;\n    }\n}\n\n\n\n\n\n\n\ninterface ILendingPoolAddressesProviderV2 {\n  event LendingPoolUpdated(address indexed newAddress);\n  event ConfigurationAdminUpdated(address indexed newAddress);\n  event EmergencyAdminUpdated(address indexed newAddress);\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n  event PriceOracleUpdated(address indexed newAddress);\n  event LendingRateOracleUpdated(address indexed newAddress);\n  event ProxyCreated(bytes32 id, address indexed newAddress);\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n\n  function setAddress(bytes32 id, address newAddress) external;\n\n  function setAddressAsProxy(bytes32 id, address impl) external;\n\n  function getAddress(bytes32 id) external view returns (address);\n\n  function getLendingPool() external view returns (address);\n\n  function setLendingPoolImpl(address pool) external;\n\n  function getLendingPoolConfigurator() external view returns (address);\n\n  function setLendingPoolConfiguratorImpl(address configurator) external;\n\n  function getLendingPoolCollateralManager() external view returns (address);\n\n  function setLendingPoolCollateralManager(address manager) external;\n\n  function getPoolAdmin() external view returns (address);\n\n  function setPoolAdmin(address admin) external;\n\n  function getEmergencyAdmin() external view returns (address);\n\n  function setEmergencyAdmin(address admin) external;\n\n  function getPriceOracle() external view returns (address);\n\n  function setPriceOracle(address priceOracle) external;\n\n  function getLendingRateOracle() external view returns (address);\n\n  function setLendingRateOracle(address lendingRateOracle) external;\n}\n\n\n\n\n\n\n\nabstract contract IPriceOracleGetterAave {\n    function getAssetPrice(address _asset) external virtual view returns (uint256);\n    function getAssetsPrices(address[] calldata _assets) external virtual view returns(uint256[] memory);\n    function getSourceOfAsset(address _asset) external virtual view returns(address);\n    function getFallbackOracle() external virtual view returns(address);\n}\n\n\n\n\n\n\ninterface IAggregatorV3 {\n    function decimals() external view returns (uint8);\n\n    function description() external view returns (string memory);\n\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 _roundId)\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestRoundData()\n        external\n        view\n        returns (\n            uint80 roundId,\n            int256 answer,\n            uint256 startedAt,\n            uint256 updatedAt,\n            uint80 answeredInRound\n        );\n\n    function latestAnswer() external view returns (uint256);\n\n    function getTimestamp(uint256 _roundId) external view returns (uint256);\n\n    function phaseId() external view returns (uint16);\n\n    function phaseAggregators(uint16 _phaseId) external view returns (address);\n}\n\n\n\n\n\n\ninterface IFeedRegistry {\n  struct Phase {\n    uint16 phaseId;\n    uint80 startingAggregatorRoundId;\n    uint80 endingAggregatorRoundId;\n  }\n\n  event FeedProposed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed proposedAggregator,\n    address currentAggregator,\n    address sender\n  );\n  event FeedConfirmed(\n    address indexed asset,\n    address indexed denomination,\n    address indexed latestAggregator,\n    address previousAggregator,\n    uint16 nextPhaseId,\n    address sender\n  );\n\n  // V3 AggregatorV3Interface\n\n  function decimals(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256\n    );\n\n  function latestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function getRoundData(\n    address base,\n    address quote,\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // V2 AggregatorInterface\n\n  function latestAnswer(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function latestTimestamp(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n  function latestRound(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint256 roundId\n    );\n\n  function getAnswer(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      int256 answer\n    );\n\n  function getTimestamp(\n    address base,\n    address quote,\n    uint256 roundId\n  )\n    external\n    view\n    returns (\n      uint256 timestamp\n    );\n\n\n  function isFeedEnabled(\n    address aggregator\n  )\n    external\n    view\n    returns (\n      bool\n    );\n\n  function getPhase(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      Phase memory phase\n    );\n\n  // Round helpers\n\n\n  function getPhaseRange(\n    address base,\n    address quote,\n    uint16 phaseId\n  )\n    external\n    view\n    returns (\n      uint80 startingRoundId,\n      uint80 endingRoundId\n    );\n\n  function getPreviousRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 previousRoundId\n    );\n\n  function getNextRoundId(\n    address base,\n    address quote,\n    uint80 roundId\n  ) external\n    view\n    returns (\n      uint80 nextRoundId\n    );\n\n  // Feed management\n\n  function proposeFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  function confirmFeed(\n    address base,\n    address quote,\n    address aggregator\n  ) external;\n\n  // Proposed aggregator\n\n  function proposedGetRoundData(\n    address base,\n    address quote,\n    uint80 roundId\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function proposedLatestRoundData(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint80 id,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  // Phases\n  function getCurrentPhaseId(\n    address base,\n    address quote\n  )\n    external\n    view\n    returns (\n      uint16 currentPhaseId\n    );\n\n    function getFeed(address base, address quote) external view returns (address);\n}\n\n\n\n\n\n\n\n\ninterface IWStEth {\n    function wrap(uint256 _stETHAmount) external returns (uint256);\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\n    function stEthPerToken() external view returns (uint256);\n    function tokensPerStEth() external view returns (uint256);\n}\n\n\n\n\n\n\n\nlibrary Denominations {\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\n  address public constant USD = address(840);\n  address public constant GBP = address(826);\n  address public constant EUR = address(978);\n  address public constant JPY = address(392);\n  address public constant KRW = address(410);\n  address public constant CNY = address(156);\n  address public constant AUD = address(36);\n  address public constant CAD = address(124);\n  address public constant CHF = address(756);\n  address public constant ARS = address(32);\n  address public constant PHP = address(608);\n  address public constant NZD = address(554);\n  address public constant SGD = address(702);\n  address public constant NGN = address(566);\n  address public constant ZAR = address(710);\n  address public constant RUB = address(643);\n  address public constant INR = address(356);\n  address public constant BRL = address(986);\n}\n\n\n\n\n\n\n\ncontract MainnetUtilAddresses {\n    address internal refillCaller = 0x33fDb79aFB4456B604f376A45A546e7ae700e880;\n    address internal feeAddr = 0x76720aC2574631530eC8163e4085d6F98513fb27;\n\n    address internal constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\n    address internal constant UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address internal constant MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\n    address internal constant AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\n    address internal constant AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;\n    address internal constant SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE;\n\n    address internal constant DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed;\n\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address internal constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\n    address internal constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\n    address internal constant WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n    address internal constant CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\n    address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n\n    address internal constant FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06;\n\n    address internal constant UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\n    address internal constant UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6;\n\n    address internal constant FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n\n    // not needed on mainnet\n    address internal constant DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address public constant CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf;\n    \n    address public constant TX_SAVER_FEE_RECIPIENT = 0x0eD7f3223266Ca1694F85C23aBe06E614Af3A479;\n\n}\n\n\n\n\n\n\n\ncontract UtilHelper is MainnetUtilAddresses{\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract TokenPriceHelper is DSMath, UtilHelper {\n    IFeedRegistry public constant feedRegistry = IFeedRegistry(CHAINLINK_FEED_REGISTRY);\n\n    /// @dev Helper function that returns chainlink price data\n    /// @param _inputTokenAddr Token address we are looking the usd price for\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId, IAggregatorV3 aggregator)\n        public\n        view\n        returns (uint256, uint256 updateTimestamp)\n    {\n        int256 price;\n\n        /// @dev Price staleness not checked, the risk has been deemed acceptable\n        if (_roundId == 0) {\n            (, price, , updateTimestamp, ) = aggregator.latestRoundData();\n        } else {\n            (, price, , updateTimestamp, ) = aggregator.getRoundData(_roundId);\n        }\n\n        // no price for wsteth, can calculate from steth\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\n\n        return (uint256(price), updateTimestamp);\n    }\n\n    /// @dev Helper function that returns chainlink price data\n    /// @param _inputTokenAddr Token address we are looking the usd price for\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId)\n        public\n        view\n        returns (uint256, uint256 updateTimestamp)\n    {\n        address tokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n        IAggregatorV3 aggregator = IAggregatorV3(feedRegistry.getFeed(tokenAddr, Denominations.USD));\n\n        return getRoundInfo(_inputTokenAddr, _roundId, aggregator);\n    }\n\n    /// @dev helper function that returns latest token price in USD\n    /// @dev 1. Chainlink USD feed\n    /// @dev 2. Chainlink ETH feed\n    /// @dev 3. Aave feed\n    /// @dev if no price found return 0\n    function getPriceInUSD(address _inputTokenAddr) public view returns (uint256) {\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n\n        int256 price;\n        price = getChainlinkPriceInUSD(chainlinkTokenAddr, true);\n        if (price == 0){\n            price = int256(getAaveTokenPriceInUSD(_inputTokenAddr));\n        }\n        if (price == 0){\n            price = int256(getAaveV3TokenPriceInUSD(_inputTokenAddr));\n        }\n        if (price == 0){\n            price = int256(getSparkTokenPriceInUSD(_inputTokenAddr));\n        }\n        if (price == 0){\n            return 0;\n        }\n\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\n        if (_inputTokenAddr == WBTC_ADDR) price = getWBtcPrice(price);\n        return uint256(price);\n    }\n\n    /// @dev helper function that returns latest token price in USD\n    /// @dev 1. Chainlink USD feed\n    /// @dev 2. Chainlink ETH feed\n    /// @dev 3. Aave feed\n    /// @dev if no price found return 0\n    /// @dev expect WBTC and WSTETH to have chainlink USD price\n    function getPriceInETH(address _inputTokenAddr) public view returns (uint256) {\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\n\n        uint256 chainlinkPriceInUSD = uint256(getChainlinkPriceInUSD(chainlinkTokenAddr, false));\n        if (chainlinkPriceInUSD != 0){\n            uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n            uint256 priceInEth = wdiv(chainlinkPriceInUSD, chainlinkETHPriceInUSD);\n            if (_inputTokenAddr == WSTETH_ADDR) return uint256(getWStEthPrice(int256(priceInEth)));\n            if (_inputTokenAddr == WBTC_ADDR) return uint256(getWBtcPrice(int256(priceInEth)));\n            return priceInEth;\n        }\n\n        uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(chainlinkTokenAddr));\n        if (chainlinkPriceInETH != 0) return chainlinkPriceInETH;\n\n        uint256 aavePriceInETH = getAaveTokenPriceInETH(_inputTokenAddr);\n        if (aavePriceInETH != 0) return aavePriceInETH;\n\n        uint256 aaveV3PriceInETH = getAaveV3TokenPriceInETH(_inputTokenAddr);\n        if (aaveV3PriceInETH != 0) return aaveV3PriceInETH;\n\n        uint256 sparkPriceInETH = getSparkTokenPriceInETH(_inputTokenAddr);\n        if (sparkPriceInETH != 0) return sparkPriceInETH;\n        \n        return 0;\n    }\n\n    /// @dev If there's no USD price feed can fallback to ETH price feed, if there's no USD or ETH price feed return 0\n    function getChainlinkPriceInUSD(address _inputTokenAddr, bool _useFallback) public view returns (int256 chainlinkPriceInUSD) {\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.USD) returns (uint80, int256 answer, uint256, uint256, uint80){\n            chainlinkPriceInUSD = answer;\n        } catch {\n            if (_useFallback){\n                uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(_inputTokenAddr));\n                uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n                chainlinkPriceInUSD = int256(wmul(chainlinkPriceInETH, chainlinkETHPriceInUSD));\n            } else {\n                chainlinkPriceInUSD = 0;\n            }\n        }\n    }\n\n    /// @dev If there's no ETH price feed returns 0\n    function getChainlinkPriceInETH(address _inputTokenAddr) public view returns (int256 chainlinkPriceInETH) {\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.ETH) returns (uint80, int256 answer, uint256, uint256, uint80){\n            chainlinkPriceInETH = answer;\n        } catch {\n            chainlinkPriceInETH = 0;\n        }\n    }\n    \n    /// @dev chainlink uses different addresses for WBTC and ETH\n    /// @dev there is only STETH price feed so we use that for WSTETH and handle later \n    function getAddrForChainlinkOracle(address _inputTokenAddr)\n        public\n        pure\n        returns (address tokenAddrForChainlinkUsage)\n    {\n        if (_inputTokenAddr == WETH_ADDR) {\n            tokenAddrForChainlinkUsage = ETH_ADDR;\n        } else if (_inputTokenAddr == WSTETH_ADDR) {\n            tokenAddrForChainlinkUsage = STETH_ADDR;\n        } else if (_inputTokenAddr == WBTC_ADDR) {\n            tokenAddrForChainlinkUsage = CHAINLINK_WBTC_ADDR;\n        } else {\n            tokenAddrForChainlinkUsage = _inputTokenAddr;\n        }\n    }\n\n    function getWStEthPrice(int256 _stEthPrice) public view returns (int256 wStEthPrice) {\n        wStEthPrice = int256(wmul(uint256(_stEthPrice), IWStEth(WSTETH_ADDR).stEthPerToken()));\n    }\n\n    function getWBtcPrice(int256 _btcPrice) public view returns (int256 wBtcPrice) {\n        (, int256 wBtcPriceToPeg, , , ) = feedRegistry.latestRoundData(WBTC_ADDR, CHAINLINK_WBTC_ADDR);\n        wBtcPrice = (_btcPrice * wBtcPriceToPeg + 1e8 / 2) / 1e8;\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveTokenPriceInETH(address _tokenAddr) public view returns (uint256 price) {\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(AAVE_MARKET).getPriceOracle();\n\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice){\n            price = tokenPrice;\n        } catch {\n            price = 0;\n        }\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveTokenPriceInUSD(address _tokenAddr) public view returns (uint256) {\n        uint256 tokenAavePriceInETH = getAaveTokenPriceInETH(_tokenAddr);\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n\n        return wmul(tokenAavePriceInETH, ethPriceInUSD);\n    }\n\n    function getAaveV3TokenPriceInUSD(address _tokenAddr) public view returns (uint256 price) {\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(AAVE_V3_MARKET).getPriceOracle();\n\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice) {\n            price = tokenPrice;\n        } catch {\n            price = 0;\n        }\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getAaveV3TokenPriceInETH(address _tokenAddr) public view returns (uint256) {\n        uint256 tokenAavePriceInUSD = getAaveV3TokenPriceInUSD(_tokenAddr);\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n\n        return wdiv(tokenAavePriceInUSD, ethPriceInUSD);\n    }\n\n    function getSparkTokenPriceInUSD(address _tokenAddr) public view returns (uint256 price) {\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(SPARK_MARKET).getPriceOracle();\n\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice) {\n            price = tokenPrice;\n        } catch {\n            price = 0;\n        }\n    }\n\n    /// @dev if price isn't found this returns 0\n    function getSparkTokenPriceInETH(address _tokenAddr) public view returns (uint256) {\n        uint256 tokenSparkPriceInUSD = getSparkTokenPriceInUSD(_tokenAddr);\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\n\n        return wdiv(tokenSparkPriceInUSD, ethPriceInUSD);\n    }\n}\n\n\n\n\n\n\n\nabstract contract IWETH {\n    function allowance(address, address) public virtual view returns (uint256);\n\n    function balanceOf(address) public virtual view returns (uint256);\n\n    function approve(address, uint256) public virtual;\n\n    function transfer(address, uint256) public virtual returns (bool);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) public virtual returns (bool);\n\n    function deposit() public payable virtual;\n\n    function withdraw(uint256) public virtual;\n}\n\n\n\n\n\n\n\n\n\nlibrary TokenUtils {\n    using SafeERC20 for IERC20;\n\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    /// @dev Only approves the amount if allowance is lower than amount, does not decrease allowance\n    function approveToken(\n        address _tokenAddr,\n        address _to,\n        uint256 _amount\n    ) internal {\n        if (_tokenAddr == ETH_ADDR) return;\n\n        if (IERC20(_tokenAddr).allowance(address(this), _to) \u003c _amount) {\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\n        }\n    }\n\n    function pullTokensIfNeeded(\n        address _token,\n        address _from,\n        uint256 _amount\n    ) internal returns (uint256) {\n        // handle max uint amount\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, _from);\n        }\n\n        if (_from != address(0) \u0026\u0026 _from != address(this) \u0026\u0026 _token != ETH_ADDR \u0026\u0026 _amount != 0) {\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n        }\n\n        return _amount;\n    }\n\n    function withdrawTokens(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        if (_amount == type(uint256).max) {\n            _amount = getBalance(_token, address(this));\n        }\n\n        if (_to != address(0) \u0026\u0026 _to != address(this) \u0026\u0026 _amount != 0) {\n            if (_token != ETH_ADDR) {\n                IERC20(_token).safeTransfer(_to, _amount);\n            } else {\n                (bool success, ) = _to.call{value: _amount}(\"\");\n                require(success, \"Eth send fail\");\n            }\n        }\n\n        return _amount;\n    }\n\n    function depositWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).deposit{value: _amount}();\n    }\n\n    function withdrawWeth(uint256 _amount) internal {\n        IWETH(WETH_ADDR).withdraw(_amount);\n    }\n\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n        if (_tokenAddr == ETH_ADDR) {\n            return _acc.balance;\n        } else {\n            return IERC20(_tokenAddr).balanceOf(_acc);\n        }\n    }\n\n    function getTokenDecimals(address _token) internal view returns (uint256) {\n        if (_token == ETH_ADDR) return 18;\n\n        return IERC20(_token).decimals();\n    }\n}\n\n\n\n\n\n\n\n\n\n\ncontract GasFeeHelper is DSMath, TokenPriceHelper {\n    using TokenUtils for address;\n\n    // only support token with decimals \u003c= 18\n    error TokenDecimalsUnsupportedError(uint256 decimals);\n\n    FeeRecipient public constant feeRecipient = FeeRecipient(FEE_RECIPIENT);\n\n    uint256 public constant SANITY_GAS_PRICE = 1000 gwei;\n\n    /// @dev Divider for input amount, 5 bps\n    uint256 public constant MAX_DFS_FEE = 2000;\n\n    function calcGasCost(uint256 _gasUsed, address _feeToken, uint256 _l1GasCostInEth) public view returns (uint256 txCost) {\n        uint256 gasPrice = tx.gasprice;\n\n        // gas price must be in a reasonable range\n        if (tx.gasprice \u003e SANITY_GAS_PRICE) {\n            gasPrice = SANITY_GAS_PRICE;\n        }\n\n        // can't use more gas than the block gas limit\n        if (_gasUsed \u003e block.gaslimit) {\n            _gasUsed = block.gaslimit;\n        }\n\n        // calc gas used\n        txCost = (_gasUsed * gasPrice) + _l1GasCostInEth;\n\n        // convert to token amount\n        if (_feeToken != TokenUtils.WETH_ADDR) {\n            uint256 price = getPriceInETH(_feeToken);\n            uint256 tokenDecimals = _feeToken.getTokenDecimals();\n\n            if (tokenDecimals \u003e 18) revert TokenDecimalsUnsupportedError(tokenDecimals);\n\n            if (price \u003e 0) {\n                txCost = wdiv(txCost, uint256(price)) / (10**(18 - tokenDecimals));\n            } else {\n                txCost = 0;\n            }\n        }\n    }\n\n    \n}\n\n\n\n\n\n\n\ncontract MainnetLlamaLendAddresses {\n    address internal constant BYTES_TRANSIENT_STORAGE = 0xB3FE6f712c8B8c64CD2780ce714A36e7640DDf0f;\n    address internal constant LLAMALEND_FACTORY = 0xeA6876DDE9e3467564acBeE1Ed5bac88783205E0;\n    /// @dev this is the only WETH controller which has use_eth param default to True in Controller.remove_collateral \n    address internal constant OLD_WETH_CONTROLLER = 0xaade9230AA9161880E13a38C83400d3D1995267b;\n}\n\n\n\n\n\n\nabstract contract IBytesTransientStorage {\n    function setBytesTransiently(bytes calldata) public virtual;\n    function getBytesTransiently() public virtual returns (bytes memory);\n}\n\n\n\n\n\n\n\ninterface IAGG {\n    function rate() external view returns (uint256);\n    function rate(address) external view returns (uint256);\n    function rate0() external view returns (uint256);\n    function target_debt_fraction() external view returns (uint256);\n    function sigma() external view returns (int256);\n    function peg_keepers(uint256) external view returns (address); \n}\n\n\n\n\n\n\ninterface ILLAMMA {\n    function active_band_with_skip() external view returns (int256);\n    function get_sum_xy(address) external view returns (uint256[2] memory);\n    function get_xy(address) external view returns (uint256[][2] memory);\n    function get_p() external view returns (uint256);\n    function read_user_tick_numbers(address) external view returns (int256[2] memory);\n    function p_oracle_up(int256) external view returns (uint256);\n    function p_oracle_down(int256) external view returns (uint256);\n    function p_current_up(int256) external view returns (uint256);\n    function p_current_down(int256) external view returns (uint256);\n    function bands_x(int256) external view returns (uint256);\n    function bands_y(int256) external view returns (uint256);\n    function get_base_price() external view returns (uint256);\n    function price_oracle() external view returns (uint256);\n    function active_band() external view returns (int256);\n    function A() external view returns (uint256);\n    function min_band() external view returns (int256);\n    function max_band() external view returns (int256);\n    function rate() external view returns (uint256);\n    function exchange(uint256 i, uint256 j, uint256 in_amount, uint256 min_amount) external returns (uint256[2] memory);\n    function coins(uint256 i) external view returns (address);\n    function user_state(address _user) external view returns (uint256[4] memory);\n}\n\n\n\n\n\n\ninterface ILlamaLendController {\n    function create_loan(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands) external payable;\n    function create_loan_extended(uint256 _collateralAmount, uint256 _debtAmount, uint256 _nBands, address _callbacker, uint256[] memory _callbackArgs) external payable;\n\n    /// @dev all functions below: if _collateralAmount is 0 will just return\n    function add_collateral(uint256 _collateralAmount) external payable;\n    function add_collateral(uint256 _collateralAmount, address _for) external payable;\n\n    function remove_collateral(uint256 _collateralAmount) external;\n    /// @param _useEth relevant only for ETH collateral pools (currently not deployed)\n    function remove_collateral(uint256 _collateralAmount, bool _useEth) external;\n\n    /// @dev all functions below: if _debtAmount is 0 will just return\n    function borrow_more(uint256 _collateralAmount, uint256 _debtAmount) external payable;\n    function borrow_more_extended(uint256 _collateralAmount, uint256 _debt, address _callbacker, uint256[] memory _callbackArgs) external payable;\n\n    /// @dev if _debtAmount \u003e debt will do full repay\n    function repay(uint256 _debtAmount) external payable;\n    function repay(uint256 _debtAmount, address _for) external payable;\n    /// @param _maxActiveBand Don't allow active band to be higher than this (to prevent front-running the repay)\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand) external payable;\n    function repay(uint256 _debtAmount, address _for, int256 _maxActiveBand, bool _useEth) external payable;\n    function repay_extended(address _callbacker, uint256[] memory _callbackArgs) external;\n\n    function liquidate(address user, uint256 min_x) external;\n    function liquidate(address user, uint256 min_x, bool _useEth) external;\n    function liquidate_extended(address user, uint256 min_x, uint256 frac, bool use_eth, address callbacker, uint256[] memory _callbackArgs) external;\n    function liquidate_extended(address user, uint256 min_x, uint256 frac, address callbacker, uint256[] memory _callbackArgs) external;\n\n\n    /// GETTERS\n    function amm() external view returns (address);\n    function monetary_policy() external view returns (address);\n    function collateral_token() external view returns (address);\n    function borrowed_token() external view returns (address);\n    function debt(address) external view returns (uint256);\n    function total_debt() external view returns (uint256);\n    function health_calculator(address, int256, int256, bool, uint256) external view returns (int256);\n    function health_calculator(address, int256, int256, bool) external view returns (int256);\n    function health(address) external view returns (int256);\n    function health(address, bool) external view returns (int256);\n    function max_borrowable(uint256 collateralAmount, uint256 nBands) external view returns (uint256);\n    function min_collateral(uint256 debtAmount, uint256 nBands) external view returns (uint256);\n    function calculate_debt_n1(uint256, uint256, uint256) external view returns (int256);\n    function minted() external view returns (uint256);\n    function redeemed() external view returns (uint256);\n    function amm_price() external view returns (uint256);\n    function user_state(address) external view returns (uint256[4] memory);\n    function user_prices(address) external view returns (uint256[2] memory);\n    function loan_exists(address) external view returns (bool);\n    function liquidation_discount() external view returns (uint256);\n    function factory() external view returns (address);\n    function loan_discount() external view returns (uint256);\n}\n\n\n\n\n\n\n\ninterface ILlamaLendFactory {\n    function controllers(uint256) external view returns (address);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract LlamaLendHelper is MainnetLlamaLendAddresses, DSMath {\n    using TokenUtils for address;\n\n    error InvalidLlamaLendController();\n\n    IBytesTransientStorage constant transientStorage = IBytesTransientStorage(BYTES_TRANSIENT_STORAGE);\n    ILlamaLendFactory constant factory = ILlamaLendFactory(LLAMALEND_FACTORY);\n\n    bytes4 constant LLAMALEND_SWAPPER_ID = bytes4(keccak256(\"LlamaLendSwapper\"));\n\n    function isControllerValid(address _controllerAddr, uint256 _controllerId) public view returns (bool) {\n        return (factory.controllers(_controllerId) == _controllerAddr);\n    }\n\n    function getCollateralRatio(address _user, address _controllerAddr) public view returns (uint256 collRatio, bool isInSoftLiquidation) {\n        // fetch users debt\n        uint256 debt = ILlamaLendController(_controllerAddr).debt(_user);\n        // no position can exist without debt\n        if (debt == 0) return (0, false);\n        (uint256 debtAssetCollAmount, uint256 collAmount) = getCollAmountsFromAMM(_controllerAddr, _user);\n        // if user has debt asset as coll he is currently underwater\n        if (debtAssetCollAmount \u003e 0) isInSoftLiquidation = true;\n\n        // fetch collToken oracle price\n        address amm = ILlamaLendController(_controllerAddr).amm();\n        uint256 oraclePrice = ILLAMMA(amm).price_oracle();\n        // calculate collAmount as WAD (18 decimals)\n        address collToken = ILlamaLendController(_controllerAddr).collateral_token();\n        uint256 assetDec = IERC20(collToken).decimals();\n        uint256 collAmountWAD = assetDec \u003e 18 ? (collAmount / 10 ** (assetDec - 18)) : (collAmount * 10 ** (18 - assetDec));\n        \n        collRatio = wdiv(wmul(collAmountWAD, oraclePrice) + debtAssetCollAmount, debt);\n    }\n\n    function _sendLeftoverFunds(\n        address _collToken,\n        address _debtToken,\n        uint256 _collStartingBalance,\n        uint256 _debtStartingBalance,\n        address _to\n    ) internal returns (uint256 collTokenReceived, uint256 debtTokenReceived) {\n        collTokenReceived = _collToken.getBalance(address(this)) - _collStartingBalance;\n        debtTokenReceived = _debtToken.getBalance(address(this)) - _debtStartingBalance;\n        _collToken.withdrawTokens(_to, collTokenReceived);\n        _debtToken.withdrawTokens(_to, debtTokenReceived);\n    }\n\n    function userMaxWithdraw(\n        address _controllerAddress,\n        address _user\n    ) public view returns (uint256 maxWithdraw) {\n        uint256[4] memory userState = ILlamaLendController(_controllerAddress).user_state(_user);\n        return\n            userState[0] -\n            ILlamaLendController(_controllerAddress).min_collateral(userState[2], userState[3]);\n    }\n\n    function getCollAmountsFromAMM(\n        address _controllerAddress,\n        address _user\n    ) public view returns (uint256 debtAssetCollAmount, uint256 collAssetCollAmount) {\n        address llammaAddress = ILlamaLendController(_controllerAddress).amm();\n        uint256[2] memory xy = ILLAMMA(llammaAddress).get_sum_xy(_user);\n        debtAssetCollAmount = xy[0];\n        collAssetCollAmount = xy[1];\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetActionsUtilAddresses {\n    address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\n    address internal constant DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\n    address internal constant LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e;\n    address internal constant TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2;\n}\n\n\n\n\n\n\n\ncontract ActionsUtilHelper is MainnetActionsUtilAddresses {\n}\n\n\n\n\n\n\n\n\ncontract DFSRegistry is AdminAuth {\n    error EntryAlreadyExistsError(bytes4);\n    error EntryNonExistentError(bytes4);\n    error EntryNotInChangeError(bytes4);\n    error ChangeNotReadyError(uint256,uint256);\n    error EmptyPrevAddrError(bytes4);\n    error AlreadyInContractChangeError(bytes4);\n    error AlreadyInWaitPeriodChangeError(bytes4);\n\n    event AddNewContract(address,bytes4,address,uint256);\n    event RevertToPreviousAddress(address,bytes4,address,address);\n    event StartContractChange(address,bytes4,address,address);\n    event ApproveContractChange(address,bytes4,address,address);\n    event CancelContractChange(address,bytes4,address,address);\n    event StartWaitPeriodChange(address,bytes4,uint256);\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\n\n    struct Entry {\n        address contractAddr;\n        uint256 waitPeriod;\n        uint256 changeStartTime;\n        bool inContractChange;\n        bool inWaitPeriodChange;\n        bool exists;\n    }\n\n    mapping(bytes4 =\u003e Entry) public entries;\n    mapping(bytes4 =\u003e address) public previousAddresses;\n\n    mapping(bytes4 =\u003e address) public pendingAddresses;\n    mapping(bytes4 =\u003e uint256) public pendingWaitTimes;\n\n    /// @notice Given an contract id returns the registered address\n    /// @dev Id is keccak256 of the contract name\n    /// @param _id Id of contract\n    function getAddr(bytes4 _id) public view returns (address) {\n        return entries[_id].contractAddr;\n    }\n\n    /// @notice Helper function to easily query if id is registered\n    /// @param _id Id of contract\n    function isRegistered(bytes4 _id) public view returns (bool) {\n        return entries[_id].exists;\n    }\n\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n\n    /// @notice Adds a new contract to the registry\n    /// @param _id Id of contract\n    /// @param _contractAddr Address of the contract\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n    function addNewContract(\n        bytes4 _id,\n        address _contractAddr,\n        uint256 _waitPeriod\n    ) public onlyOwner {\n        if (entries[_id].exists){\n            revert EntryAlreadyExistsError(_id);\n        }\n\n        entries[_id] = Entry({\n            contractAddr: _contractAddr,\n            waitPeriod: _waitPeriod,\n            changeStartTime: 0,\n            inContractChange: false,\n            inWaitPeriodChange: false,\n            exists: true\n        });\n\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\n    }\n\n    /// @notice Reverts to the previous address immediately\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n    /// @param _id Id of contract\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\n        if (!(entries[_id].exists)){\n            revert EntryNonExistentError(_id);\n        }\n        if (previousAddresses[_id] == address(0)){\n            revert EmptyPrevAddrError(_id);\n        }\n\n        address currentAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = previousAddresses[_id];\n\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\n    }\n\n    /// @notice Starts an address change for an existing entry\n    /// @dev Can override a change that is currently in progress\n    /// @param _id Id of contract\n    /// @param _newContractAddr Address of the new contract\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inWaitPeriodChange){\n            revert AlreadyInWaitPeriodChangeError(_id);\n        }\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inContractChange = true;\n\n        pendingAddresses[_id] = _newContractAddr;\n\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\n    }\n\n    /// @notice Changes new contract address, correct time must have passed\n    /// @param _id Id of contract\n    function approveContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp \u003c (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        address oldContractAddr = entries[_id].contractAddr;\n        entries[_id].contractAddr = pendingAddresses[_id];\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingAddresses[_id] = address(0);\n        previousAddresses[_id] = oldContractAddr;\n\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Cancel pending change\n    /// @param _id Id of contract\n    function cancelContractChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inContractChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        address oldContractAddr = pendingAddresses[_id];\n\n        pendingAddresses[_id] = address(0);\n        entries[_id].inContractChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\n    }\n\n    /// @notice Starts the change for waitPeriod\n    /// @param _id Id of contract\n    /// @param _newWaitPeriod New wait time\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (entries[_id].inContractChange){\n            revert AlreadyInContractChangeError(_id);\n        }\n\n        pendingWaitTimes[_id] = _newWaitPeriod;\n\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n        entries[_id].inWaitPeriodChange = true;\n\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\n    }\n\n    /// @notice Changes new wait period, correct time must have passed\n    /// @param _id Id of contract\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n        if (block.timestamp \u003c (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\n        }\n\n        uint256 oldWaitTime = entries[_id].waitPeriod;\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\n        \n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        pendingWaitTimes[_id] = 0;\n\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\n    }\n\n    /// @notice Cancel wait period change\n    /// @param _id Id of contract\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\n        if (!entries[_id].exists){\n            revert EntryNonExistentError(_id);\n        }\n        if (!entries[_id].inWaitPeriodChange){\n            revert EntryNotInChangeError(_id);\n        }\n\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n\n        pendingWaitTimes[_id] = 0;\n        entries[_id].inWaitPeriodChange = false;\n        entries[_id].changeStartTime = 0;\n\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\n    }\n}\n\n\n\n\n\n\ncontract DFSExchangeData {\n\n    struct OffchainData {\n        address wrapper; // dfs wrapper address for the aggregator (must be in WrapperExchangeRegistry)\n        address exchangeAddr; // exchange address we are calling to execute the order (must be in ExchangeAggregatorRegistry)\n        address allowanceTarget; // exchange aggregator contract we give allowance to\n        uint256 price; // expected price that the aggregator sent us\n        uint256 protocolFee; // deprecated (used as a separate fee amount for 0x v1)\n        bytes callData; // 0ff-chain calldata the aggregator gives to perform the swap\n    }\n\n    struct ExchangeData {\n        address srcAddr; // source token address (which we're selling)\n        address destAddr; // destination token address (which we're buying)\n        uint256 srcAmount; // amount of source token in token decimals\n        uint256 destAmount; // amount of bought token in token decimals\n        uint256 minPrice; // minPrice we are expecting (checked in DFSExchangeCore)\n        uint256 dfsFeeDivider; // service fee divider\n        address user; // currently deprecated (used to check custom fees for the user)\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n\n    struct InjectedExchangeData {\n        address wrapper; // on-chain wrapper address (must be in WrapperExchangeRegistry)\n        bytes wrapperData; // on-chain additional data for on-chain (uniswap route for example)\n        OffchainData offchainData; // offchain aggregator order\n    }\n}\n\n\n\n\n\n\n\n\n\ncontract StrategyModel {\n        \n    /// @dev Group of strategies bundled together so user can sub to multiple strategies at once\n    /// @param creator Address of the user who created the bundle\n    /// @param strategyIds Array of strategy ids stored in StrategyStorage\n    struct StrategyBundle {\n        address creator;\n        uint64[] strategyIds;\n    }\n\n    /// @dev Template/Class which defines a Strategy\n    /// @param name Name of the strategy useful for logging what strategy is executing\n    /// @param creator Address of the user which created the strategy\n    /// @param triggerIds Array of identifiers for trigger - bytes4(keccak256(TriggerName))\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    /// @param continuous If the action is repeated (continuos) or one time\n    struct Strategy {\n        string name;\n        address creator;\n        bytes4[] triggerIds;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n        bool continuous;\n    }\n\n    /// @dev List of actions grouped as a recipe\n    /// @param name Name of the recipe useful for logging what recipe is executing\n    /// @param callData Array of calldata inputs to each action\n    /// @param subData Used only as part of strategy, subData injected from StrategySub.subData\n    /// @param actionIds Array of identifiers for actions - bytes4(keccak256(ActionName))\n    /// @param paramMapping Describes how inputs to functions are piped from return/subbed values\n    struct Recipe {\n        string name;\n        bytes[] callData;\n        bytes32[] subData;\n        bytes4[] actionIds;\n        uint8[][] paramMapping;\n    }\n\n    /// @dev Actual data of the sub we store on-chain\n    /// @dev In order to save on gas we store a keccak256(StrategySub) and verify later on\n    /// @param walletAddr Address of the users smart wallet/proxy\n    /// @param isEnabled Toggle if the subscription is active\n    /// @param strategySubHash Hash of the StrategySub data the user inputted\n    struct StoredSubData {\n        bytes20 walletAddr; // address but put in bytes20 for gas savings\n        bool isEnabled;\n        bytes32 strategySubHash;\n    }\n\n    /// @dev Instance of a strategy, user supplied data\n    /// @param strategyOrBundleId Id of the strategy or bundle, depending on the isBundle bool\n    /// @param isBundle If true the id points to bundle, if false points directly to strategyId\n    /// @param triggerData User supplied data needed for checking trigger conditions\n    /// @param subData User supplied data used in recipe\n    struct StrategySub {\n        uint64 strategyOrBundleId;\n        bool isBundle;\n        bytes[] triggerData;\n        bytes32[] subData;\n    }\n\n    /// @dev Data needed when signing relay transaction\n    /// @param maxTxCostInFeeToken Max tx cost user is willing to pay in fee token\n    /// @param feeToken Address of the token user is willing to pay fee in\n    /// @param tokenPriceInEth Price of the token in ETH\n    /// @param deadline Deadline for the relay transaction to be executed\n    /// @param shouldTakeFeeFromPosition Flag to indicate if fee should be taken from position, otherwise from EOA/wallet\n    struct TxSaverSignedData {\n        uint256 maxTxCostInFeeToken;\n        address feeToken;\n        uint256 tokenPriceInEth;\n        uint256 deadline;\n        bool shouldTakeFeeFromPosition;\n    }\n}\n\n\n\n\n\n\n\n\n\ncontract DFSExchangeHelper {\n    \n    using TokenUtils for address;\n    \n    error InvalidOffchainData();\n    error OutOfRangeSlicingError();\n    //Order success but amount 0\n    error ZeroTokensSwapped();\n\n    using SafeERC20 for IERC20;\n\n    function sendLeftover(\n        address _srcAddr,\n        address _destAddr,\n        address payable _to\n    ) internal {\n        // clean out any eth leftover\n        TokenUtils.ETH_ADDR.withdrawTokens(_to, type(uint256).max);\n\n        _srcAddr.withdrawTokens(_to, type(uint256).max);\n        _destAddr.withdrawTokens(_to, type(uint256).max);\n    }\n\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n        if (bs.length \u003c start + 32){\n            revert OutOfRangeSlicingError();\n        }\n\n        uint256 x;\n        assembly {\n            x := mload(add(bs, add(0x20, start)))\n        }\n\n        return x;\n    }\n\n    function writeUint256(\n        bytes memory _b,\n        uint256 _index,\n        uint256 _input\n    ) internal pure {\n        if (_b.length \u003c _index + 32) {\n            revert InvalidOffchainData();\n        }\n\n        bytes32 input = bytes32(_input);\n\n        _index += 32;\n\n        // Read the bytes32 from array memory\n        assembly {\n            mstore(add(_b, _index), input)\n        }\n    }\n}\n\n\n\n\n\n\n\ncontract MainnetExchangeAddresses {\n\n    address internal constant FEE_RECIPIENT_ADDRESS = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\n    address internal constant DISCOUNT_ADDRESS = 0x84fE6D4aaD0CA1ce3af7153eecd11729fa7a74f0;\n    address internal constant WRAPPER_EXCHANGE_REGISTRY = 0x653893375dD1D942D2C429caB51641F2bf14d426;\n    address internal constant EXCHANGE_AGGREGATOR_REGISTRY_ADDR = 0x7b67D9D7993A258C4b2C31CDD9E6cbD5Fb674985;\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n    address internal constant TOKEN_GROUP_REGISTRY = 0xcA49e64FE1FE8be40ED30F682edA1b27a6c8611c;\n    address internal constant BYTES_TRANSIENT_STORAGE_ADDR = 0xB3FE6f712c8B8c64CD2780ce714A36e7640DDf0f;\n}\n\n\n\n\n\n\n\ncontract ExchangeHelper is MainnetExchangeAddresses {\n}\n\n\n\n\n\n\n\ncontract ExchangeAggregatorRegistry is AdminAuth {\n    mapping(address =\u003e bool) public exchangeTargetAddresses;\n\n    error EmptyAddrError();\n\n    function setExchangeTargetAddr(address _exchangeAddr, bool _state) public onlyOwner {\n        if(_exchangeAddr == address(0)) {\n\t\t\trevert EmptyAddrError();\n\t\t}\n\n        exchangeTargetAddresses[_exchangeAddr] = _state;\n    }\n\n    function isExchangeAggregatorAddr(address _exchangeAddr) public view returns (bool) {\n        return exchangeTargetAddresses[_exchangeAddr];\n    }\n}\n\n\n\n\n\n\ncontract WrapperExchangeRegistry is AdminAuth {\n\tmapping(address =\u003e bool) private wrappers;\n\n\terror EmptyAddrError();\n\n\tfunction addWrapper(address _wrapper) public onlyOwner {\n\t\tif(_wrapper == address(0)) {\n\t\t\trevert EmptyAddrError();\n\t\t}\n\n\t\twrappers[_wrapper] = true;\n\t}\n\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\n\t\twrappers[_wrapper] = false;\n\t}\n\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\n\t\treturn wrappers[_wrapper];\n\t}\n}\n\n\n\n\n\n\n\ninterface IExchangeV3 {\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n}\n\n\n\n\n\n\n\nabstract contract IOffchainWrapper is DFSExchangeData {\n    function takeOrder(\n        ExchangeData memory _exData\n    ) virtual public payable returns (bool success, uint256);\n}\n\n\n\n\n\n\n\ncontract Discount is AdminAuth{\n    mapping(address =\u003e bool) public serviceFeesDisabled;\n\n    function reenableServiceFee(address _wallet) public onlyOwner{\n        serviceFeesDisabled[_wallet] = false;\n    }\n\n    function disableServiceFee(address _wallet) public onlyOwner{\n        serviceFeesDisabled[_wallet] = true;\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract DFSExchangeCore is\n    DSMath,\n    DFSExchangeHelper,\n    DFSExchangeData,\n    ExchangeHelper,\n    StrategyModel\n{   \n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    error SlippageHitError(uint256 amountBought, uint256 amountExpected);\n    error InvalidWrapperError(address wrapperAddr);\n\n    ExchangeAggregatorRegistry internal constant exchangeAggRegistry = ExchangeAggregatorRegistry(EXCHANGE_AGGREGATOR_REGISTRY_ADDR);\n    WrapperExchangeRegistry internal constant wrapperRegistry = WrapperExchangeRegistry(WRAPPER_EXCHANGE_REGISTRY);\n\n    /// @notice Internal method that performs a sell on offchain aggregator/on-chain\n    /// @dev Useful for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    function _sell(ExchangeData memory exData) internal returns (address wrapperAddress, uint256 destAmount) {\n        (wrapperAddress, destAmount, ) = _sell(exData, address(this));\n    }\n\n    /// @notice Internal method that performs a sell on offchain aggregator/on-chain\n    /// @dev Useful for other DFS contract to integrate for exchanging\n    /// @param exData Exchange data struct\n    /// @return (address, uint, bool) Address of the wrapper used and destAmount and if there was fee\n    function _sell(ExchangeData memory exData, address smartWallet) internal returns (address, uint256, bool) {\n        uint256 amountWithoutFee = exData.srcAmount;\n        uint256 destBalanceBefore = exData.destAddr.getBalance(address(this));\n\n        _takeDfsExchangeFee(exData, smartWallet);\n\n        address wrapperAddr = _executeSwap(exData);\n\n        uint256 destBalanceAfter = exData.destAddr.getBalance(address(this));\n        uint256 amountBought = destBalanceAfter - destBalanceBefore;\n\n        // check slippage\n        if (amountBought \u003c wmul(exData.minPrice, exData.srcAmount)){\n            revert SlippageHitError(amountBought, wmul(exData.minPrice, exData.srcAmount));\n        }\n\n        bool hasFee = exData.srcAmount != amountWithoutFee;\n        // revert back exData changes to keep it consistent\n        exData.srcAmount = amountWithoutFee;\n\n        return (wrapperAddr, amountBought, hasFee);\n    }\n\n    /// @notice Takes order from exchange aggregator and returns bool indicating if it is successful\n    /// @param _exData Exchange data\n    function offChainSwap(ExchangeData memory _exData)\n        internal\n        returns (bool success, uint256)\n    {\n        /// @dev Check if exchange address is in our registry to not call an untrusted contract\n        if (!exchangeAggRegistry.isExchangeAggregatorAddr(_exData.offchainData.exchangeAddr)) {\n            return (false, 0);\n        }\n\n        /// @dev Check if we have the address is a registered wrapper\n        if (!wrapperRegistry.isWrapper(_exData.offchainData.wrapper)) {\n            return (false, 0);\n        }\n\n        // send src amount\n        IERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n\n        return IOffchainWrapper(_exData.offchainData.wrapper).takeOrder(_exData);\n    }\n\n    /// @notice Calls wrapper contract for exchange to preform an on-chain swap\n    /// @param _exData Exchange data struct\n    /// @return swappedTokens Dest amount of tokens we get after sell\n    function onChainSwap(ExchangeData memory _exData)\n        internal\n        returns (uint256 swappedTokens)\n    {\n        if (!(WrapperExchangeRegistry(WRAPPER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper))){\n            revert InvalidWrapperError(_exData.wrapper);\n        }\n\n        IERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n\n        swappedTokens = IExchangeV3(_exData.wrapper).sell(\n            _exData.srcAddr,\n            _exData.destAddr,\n            _exData.srcAmount,\n            _exData.wrapperData\n        );\n    }\n\n    function _takeDfsExchangeFee(ExchangeData memory exData, address smartWallet) internal {\n        if (exData.dfsFeeDivider != 0) {\n            exData.srcAmount = sub(exData.srcAmount, getFee(\n                exData.srcAmount,\n                smartWallet,\n                exData.srcAddr,\n                exData.dfsFeeDivider\n            ));\n        }\n    }\n\n    function _executeSwap(ExchangeData memory exData) internal returns (address wrapperAddr) {\n        wrapperAddr = exData.offchainData.wrapper;\n        bool offChainSwapSuccess;\n\n         // Try offchain aggregator first and then fallback on specific wrapper\n        if (exData.offchainData.price \u003e 0) {\n            (offChainSwapSuccess, ) = offChainSwap(exData);\n        }\n\n        // fallback to desired wrapper if offchain aggregator failed\n        if (!offChainSwapSuccess) {\n            onChainSwap(exData);\n            wrapperAddr = exData.wrapper;\n        }\n    }\n\n    /// @notice Takes a feePercentage and sends it to wallet\n    /// @param _amount Amount of the whole trade\n    /// @param _wallet Address of the users wallet (safe or dsproxy)\n    /// @param _token Address of the token\n    /// @param _dfsFeeDivider Dfs fee divider\n    /// @return feeAmount Amount owner earned on the fee\n    function getFee(\n        uint256 _amount,\n        address _wallet,\n        address _token,\n        uint256 _dfsFeeDivider\n    ) internal returns (uint256 feeAmount) {\n        if (_dfsFeeDivider != 0 \u0026\u0026 Discount(DISCOUNT_ADDRESS).serviceFeesDisabled(_wallet)) {\n            _dfsFeeDivider = 0;\n        }\n\n        if (_dfsFeeDivider == 0) {\n            feeAmount = 0;\n        } else {\n            feeAmount = _amount / _dfsFeeDivider;\n            address walletAddr = FeeRecipient(FEE_RECIPIENT_ADDRESS).getFeeAddr();\n            _token.withdrawTokens(walletAddr, feeAmount);\n        }\n    }\n}\n\n\n\n\n\n\n\ninterface ITxSaverBytesTransientStorage {\n    function getFeeType() external view returns (uint256);\n    function getBytesTransiently() external view returns (bytes memory result);\n}\n\n\n\n\n\n\n\n\n\ncontract TxSaverGasCostCalc is DSMath, UtilHelper {\n    using TokenUtils for address;\n    \n    // only support token with decimals \u003c= 18\n    error TokenDecimalsTooHigh(uint256 decimals);\n    // when injecting price, price must be greater than 0\n    error ZeroTokenPriceInEthError();\n\n    function calcGasCostUsingInjectedPrice(\n        uint256 _gasUsed,\n        address _feeToken,\n        uint256 _tokenPriceInEth,\n        uint256 _l1GasCostInEth\n    ) internal view returns (uint256 txCost) {\n        // can't use more gas than the block gas limit\n        if (_gasUsed \u003e block.gaslimit) {\n            _gasUsed = block.gaslimit;\n        }\n\n        // calc gas used\n        txCost = (_gasUsed * tx.gasprice) + _l1GasCostInEth;    \n\n        // convert to token amount\n        if (_feeToken != TokenUtils.WETH_ADDR) {\n            uint256 tokenDecimals = _feeToken.getTokenDecimals();\n\n            if (tokenDecimals \u003e 18) revert TokenDecimalsTooHigh(tokenDecimals);\n\n            if (_tokenPriceInEth == 0) revert ZeroTokenPriceInEthError();\n\n            txCost = wdiv(txCost, _tokenPriceInEth) / (10**(18 - tokenDecimals));\n        }\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\ncontract DFSExchangeWithTxSaver is DFSExchangeCore, TxSaverGasCostCalc\n{   \n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    bytes4 internal constant TX_SAVER_EXECUTOR_ID = bytes4(keccak256(\"TxSaverExecutor\"));\n    uint256 constant EOA_OR_WALLET_FEE_FLAG = 2; // see TxSaverBytesTransientStorage\n\n    /// For TxSaver, total gas cost fee taken from user can't be higher than maxTxCost set by user\n    error TxCostInFeeTokenTooHighError(uint256 maxTxCost, uint256 txCost);\n\n    error FeeTokenNotSameAsSrcToken(address srcToken, address feeToken);\n\n    function _sellWithTxSaverChoice(ExchangeData memory _exData, address _user, DFSRegistry _registry) \n        internal returns (\n            address wrapperAddress,\n            uint256 destAmount,\n            bool hasFee,\n            bool txSaverFeeTaken\n        ) \n    {   \n        address txSaverAddr = _registry.getAddr(TX_SAVER_EXECUTOR_ID);\n        ITxSaverBytesTransientStorage tStorage = ITxSaverBytesTransientStorage(txSaverAddr);\n\n        // Check if TxSaverExecutor initiated transaction by setting right flag in transient storage\n        // we can't just check for msg.sender, as that wouldn't work for flashloan actions\n        uint256 feeType = tStorage.getFeeType();\n        \n        // if not initiated by TxSaverExecutor, perform regular sell\n        if (feeType == 0) {\n            txSaverFeeTaken = false;\n            (wrapperAddress, destAmount, hasFee) = _sell(_exData, _user);\n            return (wrapperAddress, destAmount, hasFee, txSaverFeeTaken);\n        }\n\n        (\n            uint256 estimatedGas,\n            uint256 l1GasCostInEth,\n            TxSaverSignedData memory txSaverData,\n            InjectedExchangeData memory injectedExchangeData\n        ) = _readDataFromTransientStorage(feeType, tStorage);\n\n        uint256 amountWithoutFee = _exData.srcAmount;\n\n        _injectExchangeData(_exData, injectedExchangeData);\n\n        // when taking fee from EOA/wallet perform regular sell\n        // fee is taken inside the RecipeExecutor\n        if (feeType == EOA_OR_WALLET_FEE_FLAG) {\n            txSaverFeeTaken = false;\n            (wrapperAddress, destAmount, hasFee) = _sell(_exData, _user);\n            return (wrapperAddress, destAmount, hasFee, txSaverFeeTaken);\n        }\n        \n        // when taking fee from position, take tx cost before regular sell\n        _takeTxSaverFee(_exData, txSaverData, estimatedGas, l1GasCostInEth);\n        txSaverFeeTaken = true;\n    \n        // perform regular sell\n        (wrapperAddress, destAmount, hasFee) = _sell(_exData, _user);\n    \n        // revert back exData changes to keep it consistent\n        _exData.srcAmount = amountWithoutFee;\n    }\n\n    function _injectExchangeData(ExchangeData memory _exData, InjectedExchangeData memory _injectedExchangeData) internal pure {\n        // if offchain order data is present, inject it here\n        if (_injectedExchangeData.offchainData.price \u003e 0) {\n            _exData.offchainData = _injectedExchangeData.offchainData;\n        }\n\n        // if onchain order data is present, inject it here \n        if (_injectedExchangeData.wrapper != address(0)) {\n            _exData.wrapper = _injectedExchangeData.wrapper;\n            _exData.wrapperData = _injectedExchangeData.wrapperData;\n        }\n    }\n\n    function _readDataFromTransientStorage(uint256 _feeType, ITxSaverBytesTransientStorage _tStorage) \n        internal view returns (\n            uint256 estimatedGas,\n            uint256 l1GasCostInEth,\n            TxSaverSignedData memory txSaverData,\n            InjectedExchangeData memory injectedExchangeData\n        ) \n    {\n        if (_feeType == EOA_OR_WALLET_FEE_FLAG) {\n            (estimatedGas, l1GasCostInEth, injectedExchangeData) = abi.decode(\n                _tStorage.getBytesTransiently(),\n                (uint256, uint256, InjectedExchangeData)\n            );\n        } else {\n            (estimatedGas, l1GasCostInEth, txSaverData, injectedExchangeData) = abi.decode(\n                _tStorage.getBytesTransiently(),\n                (uint256, uint256, TxSaverSignedData, InjectedExchangeData)\n            );\n        }\n    }\n\n    function _takeTxSaverFee(\n        ExchangeData memory _exData,\n        TxSaverSignedData memory _txSaverData,\n        uint256 _estimatedGas,\n        uint256 _l1GasCostInEth\n    ) internal {\n        // when sending sponsored tx, no tx cost is taken\n        if (_estimatedGas == 0) return;\n\n        // calculate gas cost in src token\n        uint256 txCostInSrcToken = calcGasCostUsingInjectedPrice(\n            _estimatedGas,\n            _exData.srcAddr,\n            _txSaverData.tokenPriceInEth,\n            _l1GasCostInEth\n        );\n\n        // revert if tx cost is higher than max value set by user\n        if (txCostInSrcToken \u003e _txSaverData.maxTxCostInFeeToken) {\n            revert TxCostInFeeTokenTooHighError(_txSaverData.maxTxCostInFeeToken, txCostInSrcToken);\n        }\n        if (_exData.srcAddr != _txSaverData.feeToken){\n            revert FeeTokenNotSameAsSrcToken(_exData.srcAddr, _txSaverData.feeToken);\n        }\n\n        // subtract tx cost from src amount and send it to fee recipient\n        _exData.srcAmount = sub(_exData.srcAmount, txCostInSrcToken);\n        _exData.srcAddr.withdrawTokens(TX_SAVER_FEE_RECIPIENT, txCostInSrcToken);\n    }\n}\n\n\n\n\n\n\n\n\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length \u003e 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * Since version 5.1, this library also support writing and reading value types to and from transient storage.\n *\n *  * Example using transient storage:\n * ```solidity\n * contract Lock {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _LOCK_SLOT = 0xf4678858b2b588224636b8522b729e7722d32fc491da849ed75b3fdf3c84f542;\n *\n *     modifier locked() {\n *         require(!_LOCK_SLOT.asBoolean().tload());\n *\n *         _LOCK_SLOT.asBoolean().tstore(true);\n *         _;\n *         _LOCK_SLOT.asBoolean().tstore(false);\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a address.\n     */\n    type AddressSlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a AddressSlotType.\n     */\n    function asAddress(bytes32 slot) internal pure returns (AddressSlotType) {\n        return AddressSlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a bool.\n     */\n    type BooleanSlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a BooleanSlotType.\n     */\n    function asBoolean(bytes32 slot) internal pure returns (BooleanSlotType) {\n        return BooleanSlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a bytes32.\n     */\n    type Bytes32SlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Bytes32SlotType.\n     */\n    function asBytes32(bytes32 slot) internal pure returns (Bytes32SlotType) {\n        return Bytes32SlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a uint256.\n     */\n    type Uint256SlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Uint256SlotType.\n     */\n    function asUint256(bytes32 slot) internal pure returns (Uint256SlotType) {\n        return Uint256SlotType.wrap(slot);\n    }\n\n    /**\n     * @dev UDVT that represent a slot holding a int256.\n     */\n    type Int256SlotType is bytes32;\n\n    /**\n     * @dev Cast an arbitrary slot to a Int256SlotType.\n     */\n    function asInt256(bytes32 slot) internal pure returns (Int256SlotType) {\n        return Int256SlotType.wrap(slot);\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(AddressSlotType slot) internal view returns (address value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(AddressSlotType slot, address value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(BooleanSlotType slot) internal view returns (bool value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(BooleanSlotType slot, bool value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Bytes32SlotType slot) internal view returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Bytes32SlotType slot, bytes32 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Uint256SlotType slot) internal view returns (uint256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Uint256SlotType slot, uint256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n\n    /**\n     * @dev Load the value held at location `slot` in transient storage.\n     */\n    function tload(Int256SlotType slot) internal view returns (int256 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            value := tload(slot)\n        }\n    }\n\n    /**\n     * @dev Store `value` at location `slot` in transient storage.\n     */\n    function tstore(Int256SlotType slot, int256 value) internal {\n        /// @solidity memory-safe-assembly\n        assembly {\n            tstore(slot, value)\n        }\n    }\n}\n\n\n\n\n\n\n\n/**\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuardTransient.sol\n *\n * @dev Variant of {ReentrancyGuard} that uses transient storage.\n *\n * NOTE: This variant only works on networks where EIP-1153 is available.\n */\nabstract contract ReentrancyGuardTransient {\n    using StorageSlot for *;\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.ReentrancyGuard\")) - 1)) \u0026 ~bytes32(uint256(0xff))\n    bytes32 private constant REENTRANCY_GUARD_STORAGE =\n        0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_reentrancyGuardEntered()) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(true);\n    }\n\n    function _nonReentrantAfter() private {\n        REENTRANCY_GUARD_STORAGE.asBoolean().tstore(false);\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return REENTRANCY_GUARD_STORAGE.asBoolean().tload();\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontract LlamaLendSwapper is \n    LlamaLendHelper,\n    DFSExchangeWithTxSaver,\n    AdminAuth,\n    ActionsUtilHelper,\n    GasFeeHelper,\n    ReentrancyGuardTransient\n{\n    using SafeERC20 for IERC20;\n    using TokenUtils for address;\n\n    /// @dev Divider for automation fee, 5 bps\n    uint256 internal constant AUTOMATION_DFS_FEE = 2000;\n\n    struct CallbackData {\n        uint256 stablecoins;\n        uint256 collateral;\n    }\n\n    ///@dev called by llamalend controller after repay_extended\n    ///@dev sends all collateral the user has to this contract, we swap a part or all of it\n    ///@dev after swapping, llamalend will either recreate the position or close it fully\n    function callback_repay(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory info\n    ) external nonReentrant returns (CallbackData memory cb) {\n        uint256 gasUsed = info[0];\n        if (!isControllerValid(msg.sender, info[1])) revert InvalidLlamaLendController();\n\n        ExchangeData memory exData = abi.decode(transientStorage.getBytesTransiently(), (DFSExchangeData.ExchangeData));\n        address collToken = exData.srcAddr;\n        address debtToken = exData.destAddr;\n\n        (, uint256 receivedAmount, bool hasFee, bool txSaverFeeTaken) = _sellWithTxSaverChoice(\n            exData,\n            _user,\n            DFSRegistry(REGISTRY_ADDR)\n        );\n        \n        // can't take both automation fee and TxSaver fee\n        if (gasUsed \u003e 0 \u0026\u0026 !txSaverFeeTaken){\n            receivedAmount -= _takeAutomationFee(receivedAmount, debtToken, gasUsed, hasFee);\n        }\n\n        // if receivedAmount \u003e current debt, leftover coll will be returned and receivedAmount-currentDebt will be returned\n        // if receivedAmount \u003c current debt, new position will be created with leftover coll and currentDebt-receivedAmount\n        cb.stablecoins = receivedAmount;\n        cb.collateral = collToken.getBalance(address(this));\n\n        // approve the controller to create new position\n        IERC20(collToken).safeApprove(msg.sender, cb.collateral);\n        IERC20(debtToken).safeApprove(msg.sender, cb.stablecoins);\n    }\n\n    ///@dev called by llamalend controller after create_loan_extended and borrow_more_extended\n    ///@dev sends exData.srcAmount of debt token to this contract for us to sell then pulls received coll token\n    function callback_deposit(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory info\n    ) external nonReentrant returns (CallbackData memory cb) {\n        uint256 gasUsed = info[0];\n        if (!isControllerValid(msg.sender, info[1])) revert InvalidLlamaLendController();\n        ExchangeData memory exData = abi.decode(transientStorage.getBytesTransiently(), (DFSExchangeData.ExchangeData));\n\n        address collToken = exData.destAddr;\n\n        (, uint256 receivedAmount, bool hasFee, bool txSaverFeeTaken) = _sellWithTxSaverChoice(\n            exData,\n            _user,\n            DFSRegistry(REGISTRY_ADDR)\n        );\n\n        // can't take both automation fee and TxSaver fee\n        if (gasUsed \u003e 0 \u0026\u0026 !txSaverFeeTaken){\n            receivedAmount -= _takeAutomationFee(receivedAmount, collToken, gasUsed, hasFee);\n        }\n\n        cb.collateral = receivedAmount;\n\n        // approve the controller to create new position\n        IERC20(collToken).safeApprove(msg.sender, cb.collateral);\n    }\n\n    ///@dev called by llamalend controller after liquidate_extended\n    ///@dev if users debtTokenCollateralAmount is higher than debt, this won'te be called at all\n    ///@dev this will send all marketCollateralAmount from users position to this contract, which we can sell all or a part of it\n    function callback_liquidate(\n        address _user,\n        uint256,\n        uint256,\n        uint256,\n        uint256[] memory info\n    ) external nonReentrant returns (CallbackData memory cb) {\n        uint256 gasUsed = info[0];\n        if (!isControllerValid(msg.sender, info[1])) revert InvalidLlamaLendController();\n        bool sellMax = info[2] \u003e 0;\n        ExchangeData memory exData = abi.decode(transientStorage.getBytesTransiently(), (DFSExchangeData.ExchangeData));\n        \n        address collToken = exData.srcAddr;\n        address debtToken = exData.destAddr;\n        if (sellMax) {\n            exData.srcAmount = collToken.getBalance(address(this));\n        }\n\n        (, uint256 receivedAmount, bool hasFee, bool txSaverFeeTaken) = _sellWithTxSaverChoice(\n            exData,\n            _user,\n            DFSRegistry(REGISTRY_ADDR)\n        );\n\n        // can't take both automation fee and TxSaver fee\n        if (gasUsed \u003e 0 \u0026\u0026 !txSaverFeeTaken) {\n            receivedAmount -= _takeAutomationFee(receivedAmount, debtToken, gasUsed, hasFee);\n        }\n\n        cb.stablecoins = receivedAmount;\n        cb.collateral = collToken.getBalance(address(this));\n\n        IERC20(collToken).safeApprove(msg.sender, cb.collateral);\n        IERC20(debtToken).safeApprove(msg.sender, cb.stablecoins);\n    }\n\n    /// @dev No funds should be stored on this contract, but if anything is left send back to the user\n    function withdrawAll(address _controllerAddress) external nonReentrant {\n        address collToken = ILlamaLendController(_controllerAddress).collateral_token();\n        address debtToken = ILlamaLendController(_controllerAddress).borrowed_token();\n\n        debtToken.withdrawTokens(msg.sender, type(uint256).max);\n        collToken.withdrawTokens(msg.sender, type(uint256).max);\n    }\n\n    function _takeAutomationFee(\n        uint256 _destTokenAmount,\n        address _token,\n        uint256 _gasUsed,\n        bool hasFee\n    ) internal returns (uint256 feeAmount) {\n        // we need to take the fee for tx cost as well, as it's in a strategy\n        feeAmount += calcGasCost(_gasUsed, _token, 0);\n        \n        // gas fee can't go over 20% of the whole amount\n        if (feeAmount \u003e (_destTokenAmount / 5)) {\n            feeAmount = _destTokenAmount / 5;\n        }\n        // if user has been whitelisted we don't take 0.05% fee\n        if (hasFee) {\n            feeAmount += _destTokenAmount / AUTOMATION_DFS_FEE;\n        }\n\n        address walletAddr = FeeRecipient(FEE_RECIPIENT_ADDRESS).getFeeAddr();\n        _token.withdrawTokens(walletAddr, feeAmount);\n    }\n\n}\n",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"FeeTokenNotSameAsSrcToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLlamaLendController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffchainData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapperAddr\",\"type\":\"address\"}],\"name\":\"InvalidWrapperError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfRangeSlicingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountExpected\",\"type\":\"uint256\"}],\"name\":\"SlippageHitError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"TokenDecimalsTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"TokenDecimalsUnsupportedError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"txCost\",\"type\":\"uint256\"}],\"name\":\"TxCostInFeeTokenTooHighError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTokenPriceInEthError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroTokensSwapped\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CHAINLINK_FEED_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DFS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SANITY_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TX_SAVER_FEE_RECIPIENT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l1GasCostInEth\",\"type\":\"uint256\"}],\"name\":\"calcGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"info\",\"type\":\"uint256[]\"}],\"name\":\"callback_deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct LlamaLendSwapper.CallbackData\",\"name\":\"cb\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"info\",\"type\":\"uint256[]\"}],\"name\":\"callback_liquidate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct LlamaLendSwapper.CallbackData\",\"name\":\"cb\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"info\",\"type\":\"uint256[]\"}],\"name\":\"callback_repay\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stablecoins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct LlamaLendSwapper.CallbackData\",\"name\":\"cb\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract FeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRegistry\",\"outputs\":[{\"internalType\":\"contract IFeedRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveTokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveTokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveV3TokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveV3TokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getAddrForChainlinkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddrForChainlinkUsage\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getChainlinkPriceInETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chainlinkPriceInETH\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useFallback\",\"type\":\"bool\"}],\"name\":\"getChainlinkPriceInUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chainlinkPriceInUSD\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getCollAmountsFromAMM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAssetCollAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collAssetCollAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerAddr\",\"type\":\"address\"}],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isInSoftLiquidation\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"contract IAggregatorV3\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getSparkTokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getSparkTokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_btcPrice\",\"type\":\"int256\"}],\"name\":\"getWBtcPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"wBtcPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_stEthPrice\",\"type\":\"int256\"}],\"name\":\"getWStEthPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"wStEthPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_controllerId\",\"type\":\"uint256\"}],\"name\":\"isControllerValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userMaxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "LlamaLendSwapper",
      "CompilerVersion": "v0.8.24+commit.e11b9ed9",
      "OptimizationUsed": "1",
      "Runs": "1000",
      "ConstructorArguments": "",
      "EVMVersion": "cancun",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
