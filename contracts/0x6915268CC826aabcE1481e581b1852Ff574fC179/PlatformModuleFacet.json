{
  "TxHash": "0x0f58ef900ebe1f8243169d305e9a356fa2ea1ac36068e65f459353bf864453fb",
  "ContractAddress": "0x6915268CC826aabcE1481e581b1852Ff574fC179",
  "Name": "PlatformModuleFacet",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@solidstate/contracts/access/access_control/AccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\nimport { AddressUtils } from '../../utils/AddressUtils.sol';\\nimport { UintUtils } from '../../utils/UintUtils.sol';\\nimport { IAccessControlInternal } from './IAccessControlInternal.sol';\\nimport { AccessControlStorage } from './AccessControlStorage.sol';\\n\\n/**\\n * @title Role-based access control system\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nabstract contract AccessControlInternal is IAccessControlInternal {\\n    using AddressUtils for address;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using UintUtils for uint256;\\n\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /*\\n     * @notice query whether role is assigned to account\\n     * @param role role to query\\n     * @param account account to query\\n     * @return whether role is assigned to account\\n     */\\n    function _hasRole(\\n        bytes32 role,\\n        address account\\n    ) internal view virtual returns (bool) {\\n        return\\n            AccessControlStorage.layout().roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @notice revert if sender does not have given role\\n     * @param role role to query\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice revert if given account does not have given role\\n     * @param role role to query\\n     * @param account to query\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        'AccessControl: account ',\\n                        account.toString(),\\n                        ' is missing role ',\\n                        uint256(role).toHexString(32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /*\\n     * @notice query admin role for given role\\n     * @param role role to query\\n     * @return admin role\\n     */\\n    function _getRoleAdmin(\\n        bytes32 role\\n    ) internal view virtual returns (bytes32) {\\n        return AccessControlStorage.layout().roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @notice set role as admin role\\n     * @param role role to set\\n     * @param adminRole admin role to set\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin(role);\\n        AccessControlStorage.layout().roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /*\\n     * @notice assign role to given account\\n     * @param role role to assign\\n     * @param account recipient of role assignment\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.add(account);\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /*\\n     * @notice unassign role from given account\\n     * @param role role to unassign\\n     * @parm account\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        AccessControlStorage.layout().roles[role].members.remove(account);\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /**\\n     * @notice relinquish role\\n     * @param role role to relinquish\\n     */\\n    function _renounceRole(bytes32 role) internal virtual {\\n        _revokeRole(role, msg.sender);\\n    }\\n\\n    /**\\n     * @notice query role for member at given index\\n     * @param role role to query\\n     * @param index index to query\\n     */\\n    function _getRoleMember(\\n        bytes32 role,\\n        uint256 index\\n    ) internal view virtual returns (address) {\\n        return AccessControlStorage.layout().roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @notice query role for member count\\n     * @param role role to query\\n     */\\n    function _getRoleMemberCount(\\n        bytes32 role\\n    ) internal view virtual returns (uint256) {\\n        return AccessControlStorage.layout().roles[role].members.length();\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/AccessControlStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../data/EnumerableSet.sol';\\n\\nlibrary AccessControlStorage {\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct Layout {\\n        mapping(bytes32 =\u003e RoleData) roles;\\n    }\\n\\n    bytes32 internal constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.AccessControl');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/access/access_control/IAccessControlInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial AccessControl interface needed by internal functions\\n */\\ninterface IAccessControlInternal {\\n    event RoleAdminChanged(\\n        bytes32 indexed role,\\n        bytes32 indexed previousAdminRole,\\n        bytes32 indexed newAdminRole\\n    );\\n\\n    event RoleGranted(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n\\n    event RoleRevoked(\\n        bytes32 indexed role,\\n        address indexed account,\\n        address indexed sender\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/data/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    error EnumerableSet__IndexOutOfBounds();\\n\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 =\u003e uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(\\n        Bytes32Set storage set,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(\\n        AddressSet storage set,\\n        uint256 index\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(\\n        UintSet storage set,\\n        uint256 index\\n    ) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(\\n        AddressSet storage set,\\n        address value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal view returns (uint256) {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(\\n        Bytes32Set storage set,\\n        bytes32 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(\\n        AddressSet storage set,\\n        address value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(\\n        UintSet storage set,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function toArray(\\n        Bytes32Set storage set\\n    ) internal view returns (bytes32[] memory) {\\n        return set._inner._values;\\n    }\\n\\n    function toArray(\\n        AddressSet storage set\\n    ) internal view returns (address[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        address[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function toArray(\\n        UintSet storage set\\n    ) internal view returns (uint256[] memory) {\\n        bytes32[] storage values = set._inner._values;\\n        uint256[] storage array;\\n\\n        assembly {\\n            array.slot := values.slot\\n        }\\n\\n        return array;\\n    }\\n\\n    function _at(\\n        Set storage set,\\n        uint256 index\\n    ) private view returns (bytes32) {\\n        if (index \u003e= set._values.length)\\n            revert EnumerableSet__IndexOutOfBounds();\\n        return set._values[index];\\n    }\\n\\n    function _contains(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(\\n        Set storage set,\\n        bytes32 value\\n    ) private view returns (uint256) {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            status = true;\\n        }\\n    }\\n\\n    function _remove(\\n        Set storage set,\\n        bytes32 value\\n    ) private returns (bool status) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            unchecked {\\n                bytes32 last = set._values[set._values.length - 1];\\n\\n                // move last value to now-vacant index\\n\\n                set._values[valueIndex - 1] = last;\\n                set._indexes[last] = valueIndex;\\n            }\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            status = true;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \u003e 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value \u003e address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length \u003e 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b \u003c 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b \u003c 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp \u003e\u003e= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value \u0026 0xf];\\n                value \u003e\u003e= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/admin/facets/PlatformModuleFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { AccessControlInternal } from \\\"@solidstate/contracts/access/access_control/AccessControlInternal.sol\\\";\\nimport { IPlatformModule } from \\\"../interfaces/IPlatformModule.sol\\\";\\nimport { LibPlatformModuleStorage } from \\\"../libraries/LibPlatformModuleStorage.sol\\\";\\nimport { LibPaymentModuleConsts } from \\\"../libraries/LibPaymentModuleConsts.sol\\\";\\n\\ncontract PlatformModuleFacet is IPlatformModule, AccessControlInternal {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function PLATFORM_MANAGER_ROLE() external pure override returns (bytes32) {\\n        return LibPaymentModuleConsts.PLATFORM_MANAGER_ROLE;\\n    }\\n\\n    function getPlatformCount() external view override returns (uint256) {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        return ds.platformIds.length;\\n    }\\n\\n    function getPlatformIds() external view override returns (bytes32[] memory) {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        return ds.platformIds;\\n    }\\n\\n    function getPlatformIdByIndex(uint256 index) external view override returns (bytes32) {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        return ds.platformIds[index];\\n    }\\n\\n    function getPlatformById(bytes32 platformId) external view override returns (IPlatformModule.Platform memory) {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        return ds.platformById[platformId];\\n    }\\n\\n    function addPlatform(IPlatformModule.Platform memory platform) external override onlyRole(LibPaymentModuleConsts.PLATFORM_MANAGER_ROLE) {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        // if the platform is already exists, should revert\\n        require(ds.platformById[platform.id].id != platform.id, \\\"PlatformModule:addPlatform: Platform already exists\\\");\\n        require(platform.treasury != address(0), \\\"PlatformModule:addPlatform::ZERO: treasuryAddress cannot be zero address.\\\");\\n\\n        _copyPlatform(platform.id, platform);\\n\\n        ds.platformIds.push(platform.id);\\n\\n        emit LibPlatformModuleStorage.PlatformAdded(platform.id, platform);\\n    }\\n\\n    function removePlatform(bytes32 platformId) external override onlyRole(LibPaymentModuleConsts.PLATFORM_MANAGER_ROLE) {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        require(ds.platformById[platformId].id == platformId, \\\"PlatformModule:removePlatform Platform does not exist\\\");\\n\\n        delete ds.platformById[platformId];\\n\\n        for (uint256 index = 0; index \u003c ds.platformIds.length; index++) {\\n            if (ds.platformIds[index] == platformId) {\\n                ds.platformIds[index] = ds.platformIds[ds.platformIds.length - 1];\\n                break;\\n            }\\n        }\\n        ds.platformIds.pop();\\n\\n        emit LibPlatformModuleStorage.PlatformRemoved(platformId, ds.platformById[platformId]);\\n    }\\n\\n    function updatePlatform(IPlatformModule.Platform memory platform) external override {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        require(platform.treasury != address(0), \\\"PlatformModule:updatePlatform::ZERO: treasuryAddress cannot be zero address.\\\");\\n\\n        uint256 platformIndex = ds.platformIds.length;\\n        for (uint256 index = 0; index \u003c ds.platformIds.length; index++) {\\n            if (ds.platformIds[index] == platform.id) {\\n                platformIndex = index;\\n                break;\\n            }\\n        }\\n        require(platformIndex \u003c ds.platformIds.length, \\\"PlatformModule:updatePlatform: Platform does not exist\\\");\\n\\n        bytes32 platformId = ds.platformIds[platformIndex];\\n\\n        require(ds.platformById[platformId].owner == msg.sender, \\\"PlatformModule:updatePlatform: Only owner can update platform\\\");\\n\\n        emit LibPlatformModuleStorage.PlatformUpdated(platformId, ds.platformById[platformId], platform);\\n\\n        _copyPlatform(platformId, platform);\\n    }\\n\\n    function addPlatformService(bytes32 platformId, IPlatformModule.Service memory service) external override {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        require(ds.platformById[platformId].id == platformId, \\\"PlatformModule:addPlatformService: Platform does not exist\\\");\\n\\n        IPlatformModule.Platform storage platform = ds.platformById[platformId];\\n\\n        require(platform.owner == msg.sender, \\\"PlatformModule:addPlatformService: Only owner can add service\\\");\\n\\n        emit LibPlatformModuleStorage.ServiceAdded(platformId, platform.services.length, service);\\n\\n        platform.services.push(service);\\n    }\\n\\n    function removePlatformService(bytes32 platformId, uint256 serviceId) external override {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n        IPlatformModule.Platform storage platform = ds.platformById[platformId];\\n\\n        require(platform.owner == msg.sender, \\\"PlatformModule:removePlatformService: Only owner can remove service\\\");\\n\\n        emit LibPlatformModuleStorage.ServiceRemoved(platformId, serviceId, platform.services[serviceId]);\\n\\n        platform.services[serviceId] = platform.services[platform.services.length - 1];\\n        platform.services.pop();\\n    }\\n\\n    function updatePlatformService(bytes32 platformId, uint256 serviceId, IPlatformModule.Service memory service) external override {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n        IPlatformModule.Platform storage platform = ds.platformById[platformId];\\n\\n        require(platform.owner == msg.sender, \\\"PlatformModule:updatePlatformService: Only owner can update service\\\");\\n        require(platform.services.length \u003e serviceId, \\\"PlatformModule:updatePlatformService: Service does not exist\\\");\\n\\n        emit LibPlatformModuleStorage.ServiceUpdated(platformId, serviceId, platform.services[serviceId], service);\\n\\n        platform.services[serviceId] = service;\\n    }\\n\\n    function _copyPlatform(bytes32 platformId, IPlatformModule.Platform memory platform) private {\\n        LibPlatformModuleStorage.DiamondStorage storage ds = LibPlatformModuleStorage.diamondStorage();\\n\\n        ds.platformById[platformId].name = platform.name;\\n        ds.platformById[platformId].id = platform.id;\\n        ds.platformById[platformId].owner = platform.owner;\\n        ds.platformById[platformId].treasury = platform.treasury;\\n        ds.platformById[platformId].referrerBasisPoints = platform.referrerBasisPoints;\\n        ds.platformById[platformId].burnToken = platform.burnToken;\\n        ds.platformById[platformId].burnBasisPoints = platform.burnBasisPoints;\\n        ds.platformById[platformId].isDiscountEnabled = platform.isDiscountEnabled;\\n\\n        delete ds.platformById[platformId].services;\\n        for (uint256 i = 0; i \u003c platform.services.length; i++) {\\n            ds.platformById[platformId].services.push(platform.services[i]);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/admin/interfaces/IPlatformModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\ninterface IPlatformModule {\\n    struct Service {\\n        string name;\\n        uint256 usdPrice;\\n    }\\n\\n    struct Platform {\\n        string name;\\n        bytes32 id;\\n        address owner;\\n        address treasury;\\n        uint256 referrerBasisPoints;\\n        address burnToken;\\n        uint256 burnBasisPoints;\\n        bool isDiscountEnabled;\\n        Service[] services;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function PLATFORM_MANAGER_ROLE() external pure returns (bytes32);\\n\\n    function getPlatformCount() external view returns (uint256);\\n\\n    function getPlatformIds() external view returns (bytes32[] memory);\\n\\n    function getPlatformIdByIndex(uint256 index) external view returns (bytes32);\\n\\n    function getPlatformById(bytes32 platformId) external view returns (IPlatformModule.Platform memory);\\n\\n    function addPlatform(IPlatformModule.Platform memory platform) external;\\n\\n    function removePlatform(bytes32 platformId) external;\\n\\n    function updatePlatform(IPlatformModule.Platform memory platform) external;\\n\\n    function addPlatformService(bytes32 platformId, IPlatformModule.Service memory service) external;\\n\\n    function removePlatformService(bytes32 platformId, uint256 serviceId) external;\\n\\n    function updatePlatformService(bytes32 platformId, uint256 serviceId, IPlatformModule.Service memory service) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/admin/libraries/LibPaymentModuleConsts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nlibrary LibPaymentModuleConsts {\\n    bytes32 internal constant PAYMENT_PROCESSOR_ROLE = keccak256(\\\"PAYMENT_PROCESSOR_ROLE\\\");\\n    bytes32 internal constant PLATFORM_MANAGER_ROLE = keccak256(\\\"PLATFORM_MANAGER_ROLE\\\");\\n}\\n\"\r\n    },\r\n    \"contracts/common/admin/libraries/LibPlatformModuleStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport { IPlatformModule } from \\\"../interfaces/IPlatformModule.sol\\\";\\n\\nlibrary LibPlatformModuleStorage {\\n    bytes32 internal constant DIAMOND_STORAGE_POSITION = keccak256(\\\"floki.platform.diamond.storage\\\");\\n\\n    struct DiamondStorage {\\n        mapping(bytes32 =\u003e IPlatformModule.Platform) platformById;\\n        bytes32[] platformIds;\\n    }\\n\\n    event PlatformAdded(bytes32 platformId, IPlatformModule.Platform platform);\\n\\n    event PlatformUpdated(bytes32 platformId, IPlatformModule.Platform oldPlatform, IPlatformModule.Platform newPlatform);\\n\\n    event PlatformRemoved(bytes32 platformId, IPlatformModule.Platform platform);\\n\\n    event ServiceAdded(bytes32 platformId, uint256 serviceId, IPlatformModule.Service service);\\n\\n    event ServiceUpdated(bytes32 platformId, uint256 serviceId, IPlatformModule.Service oldService, IPlatformModule.Service newService);\\n\\n    event ServiceRemoved(bytes32 platformId, uint256 serviceId, IPlatformModule.Service service);\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  }\r\n}}",
      "ABI": "[{\"inputs\":[],\"name\":\"UintUtils__InsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service[]\",\"name\":\"services\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Platform\",\"name\":\"platform\",\"type\":\"tuple\"}],\"name\":\"PlatformAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service[]\",\"name\":\"services\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Platform\",\"name\":\"platform\",\"type\":\"tuple\"}],\"name\":\"PlatformRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service[]\",\"name\":\"services\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Platform\",\"name\":\"oldPlatform\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service[]\",\"name\":\"services\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Platform\",\"name\":\"newPlatform\",\"type\":\"tuple\"}],\"name\":\"PlatformUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Service\",\"name\":\"service\",\"type\":\"tuple\"}],\"name\":\"ServiceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Service\",\"name\":\"service\",\"type\":\"tuple\"}],\"name\":\"ServiceRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Service\",\"name\":\"oldService\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IPlatformModule.Service\",\"name\":\"newService\",\"type\":\"tuple\"}],\"name\":\"ServiceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PLATFORM_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service[]\",\"name\":\"services\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPlatformModule.Platform\",\"name\":\"platform\",\"type\":\"tuple\"}],\"name\":\"addPlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service\",\"name\":\"service\",\"type\":\"tuple\"}],\"name\":\"addPlatformService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"}],\"name\":\"getPlatformById\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service[]\",\"name\":\"services\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPlatformModule.Platform\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlatformIdByIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlatformIds\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"}],\"name\":\"removePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"}],\"name\":\"removePlatformService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referrerBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burnToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"burnBasisPoints\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDiscountEnabled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service[]\",\"name\":\"services\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPlatformModule.Platform\",\"name\":\"platform\",\"type\":\"tuple\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"platformId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IPlatformModule.Service\",\"name\":\"service\",\"type\":\"tuple\"}],\"name\":\"updatePlatformService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "PlatformModuleFacet",
      "CompilerVersion": "v0.8.23+commit.f704f362",
      "OptimizationUsed": "1",
      "Runs": "10",
      "ConstructorArguments": "",
      "EVMVersion": "london",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
