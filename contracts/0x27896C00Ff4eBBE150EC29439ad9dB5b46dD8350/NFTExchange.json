{
  "TxHash": "0x274a7baa6387bcfd709a903846c7bf195b58846b8e5d4a8d62d5152fa296da13",
  "ContractAddress": "0x27896C00Ff4eBBE150EC29439ad9dB5b46dD8350",
  "Name": "NFTExchange",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {},\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"remappings\": [],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/NFTExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"erc721a/contracts/interfaces/IERC721AQueryable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Interface of ERC721 token receiver.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external returns (bytes4);\\n}\\n\\ncontract NFTExchange is ReentrancyGuard, Ownable, IERC721Receiver {\\n    IERC721AQueryable public nft;\\n    IERC20 public token;\\n\\n    enum Rarity {\\n        // Token IDs: 1200-1999 (800 total)\\n        Common,\\n        // Token IDs: 550-1199 (650 total)\\n        Rare,\\n        // Token IDs: 100-549 (450 total)\\n        Epic,\\n        // Token IDs: 0-99 (100 total)\\n        Legendary\\n    }\\n\\n    uint256 constant public legendaryTokenIdStart = 0;\\n    uint256 constant public epicTokenIdStart = 100;\\n    uint256 constant public rareTokenIdStart = 550;\\n    uint256 constant public commonTokenIdStart = 1200;\\n\\n    mapping(Rarity =\u003e uint256[]) internal availableNftsByRarity;\\n    mapping(Rarity =\u003e uint256) internal availableNftsCountByRarity;\\n    Rarity[] internal availableRarities;\\n\\n    address public feesRecipient;\\n\\n    // Fee structure based on rarity (in Ether)\\n    mapping(Rarity =\u003e uint256) public rarityExchangeFees;\\n\\n    // Price for exchanging ERC20 to NFT\\n    uint256 public nftPrice = 3_450_000_000 * 10 ** 18;\\n\\n    // Fee for exchanging ERC20 to NFT. It should discourage \\\"fishing\\\" for rare NFTs instead of using the exchangeNFT function.\\n    uint256 public exchangeFee = 250_000_000 * 10 ** 18;\\n\\n    // Fee for exchanging to the same or lower tier\\n    uint256 public feeSameLower = 0.02 ether;\\n\\n    bool public initialized = false;\\n\\n    event NFTForNFT(\\n        uint256 indexed tokenIdGiven,\\n        uint256 indexed tokenIdReceived,\\n        address indexed exchanger\\n    );\\n    event NFTForERC20(uint256 indexed tokenId, address indexed exchanger);\\n    event ERC20ForNFT(uint256 indexed tokenId, address indexed exchanger);\\n\\n    /// ------------------------\\n    /// ---- INITIALIZATION ----\\n    /// ------------------------\\n\\n    constructor(address _feesRecipient, address _tokenAddress) Ownable(msg.sender) {\\n        token = IERC20(_tokenAddress);\\n\\n        feesRecipient = _feesRecipient;\\n\\n        // Initialize fees for each rarity tier (in Ether)\\n        rarityExchangeFees[Rarity.Common] = 0.02 ether;\\n        rarityExchangeFees[Rarity.Rare] = 0.1 ether;\\n        rarityExchangeFees[Rarity.Epic] = 0.3 ether;\\n        rarityExchangeFees[Rarity.Legendary] = 0.6 ether;\\n    }\\n\\n    function setNFTAddress(address nftAddress) external onlyOwner {\\n        require(!initialized, \\\"NFT Exchange already initialized\\\");\\n        require(address(nftAddress) != address(0), \\\"NFT address cannot be zero address\\\");\\n        nft = IERC721AQueryable(nftAddress);\\n    }\\n\\n    function initializeNftsOfRarity(Rarity rarity, uint256 start, uint256 stop) external onlyOwner {\\n        require(!initialized, \\\"NFT Exchange already initialized\\\");\\n        require(address(nft) != address(0), \\\"NFT address not set\\\");\\n\\n        uint256[] memory nfts = nft.tokensOfOwnerIn(address(this), start, stop);\\n\\n        availableNftsByRarity[rarity] = nfts;\\n        availableNftsCountByRarity[rarity] = nfts.length;\\n\\n        addRarity(rarity);\\n\\n        if (availableRarities.length == 4) {\\n            initialized = true;\\n        }\\n    }\\n\\n    /// -----------------\\n    /// ---- HELPERS ----\\n    /// -----------------\\n\\n    function getFullNftPrice() public view returns (uint256) {\\n        return nftPrice + exchangeFee;\\n    }\\n\\n    function getTotalAvailableNfts() public view returns (uint256) {\\n        return availableNftsCountByRarity[Rarity.Legendary] + availableNftsCountByRarity[Rarity.Epic] + availableNftsCountByRarity[Rarity.Rare] + availableNftsCountByRarity[Rarity.Common];\\n    }\\n\\n    function getRarity(uint256 tokenId) public view returns (Rarity) {\\n        if (tokenId \u003e= legendaryTokenIdStart \u0026\u0026 tokenId \u003c epicTokenIdStart) {\\n            return Rarity.Legendary;\\n        } else if (tokenId \u003e= epicTokenIdStart \u0026\u0026 tokenId \u003c rareTokenIdStart) {\\n            return Rarity.Epic;\\n        } else if (tokenId \u003e= rareTokenIdStart \u0026\u0026 tokenId \u003c commonTokenIdStart) {\\n            return Rarity.Rare;\\n        } else if (tokenId \u003e= commonTokenIdStart \u0026\u0026 tokenId \u003c nft.totalSupply()) {\\n            return Rarity.Common;\\n        } else {\\n            revert(\\\"Invalid tokenId\\\");\\n        }\\n    }\\n\\n    function calculateExchangeFee(Rarity currentRarity, Rarity targetRarity) public view returns (uint256) {\\n        if (targetRarity \u003c= currentRarity) {\\n            return feeSameLower;\\n        } else if (targetRarity == Rarity.Rare) {\\n            return rarityExchangeFees[Rarity.Rare];\\n        } else if (targetRarity == Rarity.Epic) {\\n            return rarityExchangeFees[Rarity.Epic];\\n        } else if (targetRarity == Rarity.Legendary) {\\n            return rarityExchangeFees[Rarity.Legendary];\\n        } else {\\n            // Handle the case when targetRarity is not recognized (e.g., invalid input)\\n            revert(\\\"Invalid target rarity\\\");\\n        }\\n    }\\n\\n    // Removes a selected rarity from the `availableRarities` array while maintaining correct order\\n    function removeRarity(Rarity _rarity) internal {\\n        uint256 length = availableRarities.length;\\n        uint256 index = length;\\n        bool found = false;\\n\\n        for (uint256 i = 0; i \u003c length; i++) {\\n            if (availableRarities[i] == _rarity) {\\n                index = i;\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        require(found, \\\"Rarity does not exist\\\");\\n\\n        for (uint256 j = index; j \u003c length - 1; j++) {\\n            availableRarities[j] = availableRarities[j + 1];\\n        }\\n        availableRarities.pop();\\n    }\\n\\n    // Adds a selected rarity to the `availableRarities` array while maintaining correct order\\n    function addRarity(Rarity _rarity) internal {\\n        uint256 length = availableRarities.length;\\n        uint256 index = length;\\n\\n        for (uint256 i = 0; i \u003c length; i++) {\\n            require(availableRarities[i] != _rarity, \\\"Rarity already exists\\\");\\n\\n            if (uint256(availableRarities[i]) \u003e uint256(_rarity)) {\\n                index = i;\\n                break;\\n            }\\n        }\\n\\n        availableRarities.push();  // Increase the array length by 1\\n\\n        for (uint256 j = length; j \u003e index; j--) {\\n            availableRarities[j] = availableRarities[j - 1];\\n        }\\n        availableRarities[index] = _rarity;\\n    }\\n\\n    // Pseudo-random number generator - should be sufficient based on that the number of NFTs in the pool is limited\\n    function random() internal view returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, msg.sender)));\\n    }\\n\\n    function removeNftFromAvailableNftsByRarityArray(Rarity rarity, uint256 index) internal {\\n        uint256 arrayLength = availableNftsCountByRarity[rarity];\\n        require(index \u003c arrayLength);\\n\\n        // If there is only one NFT left, it means the last NFT was already exchanged\\n        // and we can safely remove the rarity from the available rarities array\\n        if (arrayLength == 1) {\\n            removeRarity(rarity);\\n        }\\n\\n        availableNftsByRarity[rarity][index] = availableNftsByRarity[rarity][arrayLength-1];\\n        availableNftsByRarity[rarity].pop();\\n        availableNftsCountByRarity[rarity]--;\\n    }\\n\\n    function getRarityAndParsedIndexOfRandomNftIndex(uint256 randomIndex) internal view returns (Rarity, uint256) {\\n        uint256 legendaryNfts = availableNftsCountByRarity[Rarity.Legendary];\\n        uint256 epicNfts = availableNftsCountByRarity[Rarity.Epic];\\n        uint256 rareNfts = availableNftsCountByRarity[Rarity.Rare];\\n\\n        if (randomIndex \u003c legendaryNfts) {\\n            return (Rarity.Legendary, randomIndex);\\n        } else if (randomIndex \u003c legendaryNfts + epicNfts) {\\n            return (Rarity.Epic, randomIndex - legendaryNfts);\\n        } else if (randomIndex \u003c legendaryNfts + epicNfts + rareNfts) {\\n            return (Rarity.Rare, randomIndex - legendaryNfts - epicNfts);\\n        } else {\\n            return (Rarity.Common, randomIndex - legendaryNfts - epicNfts - rareNfts);\\n        }\\n    }\\n\\n    function getRandomNftTokenId() internal returns (uint256) {\\n        uint256 availableNfts = getTotalAvailableNfts();\\n        require(availableNfts \u003e 0, \\\"No NFTs available for exchange\\\");\\n\\n        uint256 randomNftIndex = random() % availableNfts;\\n        (Rarity rarity, uint256 parsedRandomNftIndex) = getRarityAndParsedIndexOfRandomNftIndex(randomNftIndex);\\n\\n        return getTokenIdFromIndex(rarity, parsedRandomNftIndex);\\n    }\\n\\n    function getRandomNftTokenIdOfRarity(Rarity rarity) internal returns (uint256) {\\n        uint256 availableNfts = availableNftsCountByRarity[rarity];\\n        require(availableNfts \u003e 0, \\\"No NFTs of given rarity available for exchange\\\");\\n\\n        uint256 randomNftIndex = random() % availableNfts;\\n\\n        return getTokenIdFromIndex(rarity, randomNftIndex);\\n    }\\n\\n    function getTokenIdFromIndex(Rarity rarity, uint256 randomNftIndex) internal returns (uint256) {\\n        uint256 tokenId = availableNftsByRarity[rarity][randomNftIndex];\\n\\n        removeNftFromAvailableNftsByRarityArray(rarity, randomNftIndex);\\n\\n        return tokenId;\\n    }\\n\\n    /// ------------------------\\n    /// ---- CORE FUNCTIONS ----\\n    /// ------------------------\\n\\n    modifier onlyEOA() {\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    // Exchange ERC20 for a random ERC721\\n    function exchangeERC20ForNFT() external onlyEOA nonReentrant {\\n        require(initialized, \\\"NFT Exchange not initialized\\\");\\n\\n        require(availableRarities.length \u003e 0, \\\"No NFTs available for exchange\\\");\\n\\n        // Ensure that the sender has approved the contract to spend the ERC20 tokens\\n        require(token.allowance(msg.sender, address(this)) \u003e= getFullNftPrice(), \\\"Not enough allowance for exchange\\\");\\n\\n        uint256 tokenId = getRandomNftTokenId();\\n\\n        token.transferFrom(msg.sender, feesRecipient, exchangeFee);\\n        token.transferFrom(msg.sender, address(this), nftPrice);\\n\\n        require(nft.ownerOf(tokenId) == address(this), \\\"NFT not owned by contract\\\");\\n        nft.safeTransferFrom(address(this), msg.sender, tokenId);\\n\\n        emit ERC20ForNFT(tokenId, msg.sender);\\n    }\\n\\n    // Exchange ERC721 for ERC20\\n    function exchangeNFTForERC20(uint256 tokenId) external onlyEOA nonReentrant {\\n        require(initialized, \\\"NFT Exchange not initialized\\\");\\n\\n        require(nft.ownerOf(tokenId) == msg.sender, \\\"You do not own this NFT\\\");\\n\\n        require(token.balanceOf(address(this)) \u003e= nftPrice, \\\"Not enough ERC20 tokens in the contract\\\");\\n\\n        nft.safeTransferFrom(msg.sender, address(this), tokenId);\\n\\n        token.transfer(feesRecipient, exchangeFee);\\n        token.transfer(msg.sender, nftPrice - exchangeFee);\\n\\n        emit NFTForERC20(tokenId, msg.sender);\\n    }\\n\\n    // NFT for NFT exchange function with rarity consideration\\n    function exchangeNFT(uint256 tokenId, Rarity targetRarity) external payable onlyEOA nonReentrant {\\n        require(initialized, \\\"NFT Exchange not initialized\\\");\\n\\n        require(nft.ownerOf(tokenId) == msg.sender, \\\"You do not own this NFT\\\");\\n\\n        Rarity currentRarity = getRarity(tokenId);\\n\\n        // Calculate fee based on target rarity\\n        uint256 exchangeFeeRarity = calculateExchangeFee(currentRarity, targetRarity);\\n        require(msg.value \u003e= exchangeFeeRarity, \\\"Insufficient Ether sent for fee\\\");\\n\\n        require(availableNftsByRarity[targetRarity].length \u003e 0, \\\"No NFTs available for exchange in target rarity\\\");\\n\\n        // Get a random NFT of the target rarity\\n        uint256 newTokenId = getRandomNftTokenIdOfRarity(targetRarity);\\n\\n        // Transfer the NFT to the contract\\n        nft.safeTransferFrom(msg.sender, address(this), tokenId);\\n\\n        // Transfer the new NFT to the msg.sender\\n        nft.safeTransferFrom(address(this), msg.sender, newTokenId);\\n\\n        payable(feesRecipient).transfer(exchangeFeeRarity);\\n\\n        // Refund excess Ether back to the sender\\n        if (msg.value \u003e exchangeFeeRarity) {\\n            msg.sender.call{value: msg.value - exchangeFeeRarity}(\\\"\\\");\\n        }\\n\\n        emit NFTForNFT(tokenId, newTokenId, msg.sender);\\n    }\\n\\n    /// -------------------------\\n    /// ---- ADMIN FUNCTIONS ----\\n    /// -------------------------\\n\\n    // Function to set exchange mint fee\\n    function updateNftPrice(uint256 newNftPrice) external onlyOwner {\\n        nftPrice = newNftPrice;\\n    }\\n\\n    // Function to set exchange mint fee\\n    function updateExchangeFee(uint256 newExchangeFee) external onlyOwner {\\n        exchangeFee = newExchangeFee;\\n    }\\n\\n    // Function to update the fixed fee amount for same and lower rarity exchanges\\n    function updateFeeSameLower(uint256 newFee) external onlyOwner {\\n        feeSameLower = newFee;\\n    }\\n\\n    // Function to update the fee for a specific rarity\\n    function updateFeeForRarity(Rarity rarity, uint256 newFee) external onlyOwner {\\n        require(rarity \u003e= Rarity.Common \u0026\u0026 rarity \u003c= Rarity.Legendary, \\\"Invalid rarity\\\");\\n        rarityExchangeFees[rarity] = newFee;\\n    }\\n\\n    // Function to update the fee receiver\\n    function updateFeeReceiver(address newFeeReceiver) external onlyOwner {\\n        feesRecipient = newFeeReceiver;\\n    }\\n\\n    // Withdraw any ERC20 token\\n    function withdrawERC20(address _tokenAddress) external onlyOwner {\\n        require(_tokenAddress != address(token), \\\"Cannot withdraw the main ERC-20 token\\\");\\n\\n        uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));\\n        IERC20(_tokenAddress).transfer(owner(), balance);\\n    }\\n\\n    // Function to withdraw a specific ERC721 token\\n    function withdrawNFT(address _nftAddress, uint256 _tokenId) external onlyOwner {\\n        bool isIndexedNft = false;\\n\\n        // Check if the NFT is indexed. If it's not, then it means that this NFT is \\\"stuck\\\" in the contract\\n        // and can be withdrawn by the owner without bricking the contract\\n        if (_nftAddress == address(nft)) {\\n            Rarity rarity = getRarity(_tokenId);\\n            for(uint256 i = 0; i \u003c availableNftsByRarity[rarity].length; i++) {\\n                if (availableNftsByRarity[rarity][i] == _tokenId) {\\n                    isIndexedNft = true;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        if (isIndexedNft) {\\n            require(_nftAddress != address(nft), \\\"Cannot withdraw the main NFT\\\");\\n        }\\n\\n        // Ensure that the contract owns the token\\n        require(IERC721(_nftAddress).ownerOf(_tokenId) == address(this), \\\"Contract does not own this token\\\");\\n\\n        // Transfer the NFT token to the owner\\n        IERC721(_nftAddress).transferFrom(address(this), owner(), _tokenId);\\n    }\\n\\n    /// ------------------------\\n    /// ------ RECEIVERS -------\\n    /// ------------------------\\n\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 tokenId,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        Rarity rarity = getRarity(tokenId);\\n\\n        if (availableNftsCountByRarity[rarity] == 0) {\\n            addRarity(rarity);\\n        }\\n\\n        availableNftsByRarity[rarity].push(tokenId);\\n        availableNftsCountByRarity[rarity]++;\\n\\n        // Return the function selector to confirm the transfer\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/IERC721A.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    /**\\n     * `_sequentialUpTo()` must be greater than `_startTokenId()`.\\n     */\\n    error SequentialUpToTooSmall();\\n\\n    /**\\n     * The `tokenId` of a sequential mint exceeds `_sequentialUpTo()`.\\n     */\\n    error SequentialMintExceedsLimit();\\n\\n    /**\\n     * Spot minting requires a `tokenId` greater than `_sequentialUpTo()`.\\n     */\\n    error SpotMintTokenIdTooSmall();\\n\\n    /**\\n     * Cannot mint over a token that already exists.\\n     */\\n    error TokenAlreadyExists();\\n\\n    /**\\n     * The feature is not compatible with spot mints.\\n     */\\n    error NotCompatibleWithSpotMints();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/extensions/IERC721AQueryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../IERC721A.sol';\\n\\n/**\\n * @dev Interface of ERC721AQueryable.\\n */\\ninterface IERC721AQueryable is IERC721A {\\n    /**\\n     * Invalid query range (`start` \u003e= `stop`).\\n     */\\n    error InvalidQueryRange();\\n\\n    /**\\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\\n     *\\n     * If the `tokenId` is out of bounds:\\n     *\\n     * - `addr = address(0)`\\n     * - `startTimestamp = 0`\\n     * - `burned = false`\\n     * - `extraData = 0`\\n     *\\n     * If the `tokenId` is burned:\\n     *\\n     * - `addr = \u003cAddress of owner before token was burned\u003e`\\n     * - `startTimestamp = \u003cTimestamp when token was burned\u003e`\\n     * - `burned = true`\\n     * - `extraData = \u003cExtra data when token was burned\u003e`\\n     *\\n     * Otherwise:\\n     *\\n     * - `addr = \u003cAddress of owner\u003e`\\n     * - `startTimestamp = \u003cTimestamp of start of ownership\u003e`\\n     * - `burned = false`\\n     * - `extraData = \u003cExtra data at start of ownership\u003e`\\n     */\\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\\n\\n    /**\\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\\n     * See {ERC721AQueryable-explicitOwnershipOf}\\n     */\\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`,\\n     * in the range [`start`, `stop`)\\n     * (i.e. `start \u003c= tokenId \u003c stop`).\\n     *\\n     * This function allows for tokens to be queried if the collection\\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\\n     *\\n     * Requirements:\\n     *\\n     * - `start \u003c stop`\\n     */\\n    function tokensOfOwnerIn(\\n        address owner,\\n        uint256 start,\\n        uint256 stop\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Returns an array of token IDs owned by `owner`.\\n     *\\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\\n     * It is meant to be called off-chain.\\n     *\\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\\n     * multiple smaller scans if the collection is large enough to cause\\n     * an out-of-gas error (10K collections should be fine).\\n     */\\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"erc721a/contracts/interfaces/IERC721AQueryable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.3.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport '../extensions/IERC721AQueryable.sol';\\n\"\r\n    }\r\n  }\r\n}}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feesRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"ERC20ForNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"NFTForERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdGiven\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenIdReceived\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchanger\",\"type\":\"address\"}],\"name\":\"NFTForNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum NFTExchange.Rarity\",\"name\":\"currentRarity\",\"type\":\"uint8\"},{\"internalType\":\"enum NFTExchange.Rarity\",\"name\":\"targetRarity\",\"type\":\"uint8\"}],\"name\":\"calculateExchangeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commonTokenIdStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epicTokenIdStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeERC20ForNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum NFTExchange.Rarity\",\"name\":\"targetRarity\",\"type\":\"uint8\"}],\"name\":\"exchangeNFT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exchangeNFTForERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSameLower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullNftPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRarity\",\"outputs\":[{\"internalType\":\"enum NFTExchange.Rarity\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalAvailableNfts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTExchange.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stop\",\"type\":\"uint256\"}],\"name\":\"initializeNftsOfRarity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legendaryTokenIdStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IERC721AQueryable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rareTokenIdStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTExchange.Rarity\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"rarityExchangeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newExchangeFee\",\"type\":\"uint256\"}],\"name\":\"updateExchangeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum NFTExchange.Rarity\",\"name\":\"rarity\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateFeeForRarity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeReceiver\",\"type\":\"address\"}],\"name\":\"updateFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateFeeSameLower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNftPrice\",\"type\":\"uint256\"}],\"name\":\"updateNftPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "NFTExchange",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "1",
      "Runs": "10000",
      "ConstructorArguments": "00000000000000000000000073d3715b8bcd75959a5be67d8ab9f4eebeb27407000000000000000000000000c8168d5665f4418353728ac970713e09c0b7c20e",
      "EVMVersion": "paris",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
