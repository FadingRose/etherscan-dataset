{
  "TxHash": "0x239ed98739f3057127125f161be0266e6a24cf1a1498a0283431e7db4a6add32",
  "ContractAddress": "0x5bD1c3edDeeC399aE665cb0aB91c95732443614F",
  "Name": "Olympe",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\n\r\nOLYMPE\r\n\r\nUnleash your inner champion with OLYMPE:\r\nThe crypto project that embodies excellence and triumph in all arenas!\r\n\r\nhttps://olympecoin.com\r\n\r\nhttps://linktr.ee/olympe_coin\r\n\r\n */\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20 is IERC20, Ownable {\r\n    string public name;\r\n    string public symbol;\r\n    uint8 public decimals;\r\n    uint256 private _totalSupply;\r\n    mapping(address =\u003e uint256) internal _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal _allowances;\r\n\r\n    constructor(string memory _name, string memory _symbol) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(\r\n            currentAllowance \u003e= amount,\r\n            \"Transfer amount exceeds allowance\"\r\n        );\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(\r\n            sender != address(0),\r\n            \"Transfer from the zero address\"\r\n        );\r\n        require(\r\n            recipient != address(0),\r\n            \"Transfer to the zero address\"\r\n        );\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(\r\n            senderBalance \u003e= amount,\r\n            \"Transfer amount exceeds balance\"\r\n        );\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(\r\n            owner != address(0),\r\n            \"Approve from zero address\"\r\n        );\r\n        require(\r\n            spender != address(0),\r\n            \"Approve to zero address\"\r\n        );\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"Mint to zero address\");\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(\r\n            account != address(0),\r\n            \"Burn from zero address\"\r\n        );\r\n        uint256 accountBalance = _balances[account];\r\n        require(\r\n            accountBalance \u003e= amount,\r\n            \"Burn amount exceeds balance\"\r\n        );\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n}\r\ninterface IUniswapV2Router02 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Pair {\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        bytes calldata data\r\n    ) external;\r\n    function sync() external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n}\r\n\r\ncontract Olympe is ERC20 {\r\n    uint256 MAX_BALANCE = 500000000000 * (10 ** decimals);\r\n    IUniswapV2Router02 private uniswapRouter;\r\n    address public uniswapPair;\r\n    address private _taxWallet;\r\n    bool taxes = true;\r\n\r\n    constructor() ERC20(\"Olympe\", \"OLYMPE\") {\r\n        _mint(msg.sender, 500000000000 * (10 ** decimals));\r\n        _taxWallet = msg.sender;\r\n        uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal override whenTransferEnabled {\r\n        uint24 taxRate = getTaxRate();\r\n        uint256 taxAmount = 0;\r\n        if (\r\n            sender == address(this) ||\r\n            recipient == address(this) ||\r\n            sender == _taxWallet ||\r\n            recipient == _taxWallet\r\n        ) {\r\n            taxAmount = 0;\r\n        } else if (sender == uniswapPair \u0026\u0026 taxRate \u003e 0) {\r\n            taxAmount = (amount * taxRate) / 10000;\r\n            _ethSpent += getWETHSpent(amount);\r\n        }\r\n        uint256 amountAfterTax = amount - taxAmount;\r\n        if (taxRate \u003e= 1700) {\r\n            require(\r\n                recipient == address(this) ||\r\n                    recipient == address(uniswapPair) ||\r\n                    recipient == address(uniswapRouter) ||\r\n                    sender == address(this) ||\r\n                    recipient == _taxWallet ||\r\n                    _balances[recipient] + amountAfterTax \u003c= MAX_BALANCE,\r\n                \"Balance exceeds max\"\r\n            );\r\n        }\r\n        super._transfer(sender, recipient, amountAfterTax);\r\n        if (taxAmount \u003e 0) {\r\n            super._transfer(sender, address(this), taxAmount);\r\n        }\r\n        if (\r\n            recipient != uniswapPair \u0026\u0026\r\n            sender != uniswapPair \u0026\u0026\r\n            recipient != address(this) \u0026\u0026\r\n            shouldSwapAndSendTax()\r\n        ) {\r\n            swapTax();\r\n        }\r\n    }\r\n\r\n    function getTaxRate() public view returns (uint24) {\r\n        if (taxes == false) {\r\n            return 500;\r\n        } else if (_ethSpent \u003c 10 ether) {\r\n            return 4300;\r\n        } else if (_ethSpent \u003c 20 ether) {\r\n            return 2700;\r\n        } else if (_ethSpent \u003c 30 ether) {\r\n            return 1900;\r\n        } else if (_ethSpent \u003c 40 ether) {\r\n            return 1500;\r\n        } else if (_ethSpent \u003c 50 ether) {\r\n            return 1100;\r\n        } else {\r\n            return 500;\r\n        }\r\n    }\r\n\r\n    function getWETHSpent(\r\n        uint256 tokenAmount\r\n    ) internal view returns (uint256 wethSpent) {\r\n        (uint256 reserveA, uint256 reserveB, ) = IUniswapV2Pair(uniswapPair)\r\n            .getReserves();\r\n\r\n        if (IUniswapV2Pair(uniswapPair).token0() == address(this)) {\r\n            uint amountInWithFee = tokenAmount * 997;\r\n            uint numerator = amountInWithFee * reserveB;\r\n            uint denominator = (reserveA * 1000) + amountInWithFee;\r\n            wethSpent = numerator / denominator;\r\n        } else {\r\n            uint amountInWithFee = tokenAmount * 997;\r\n            uint numerator = amountInWithFee * reserveA;\r\n            uint denominator = (reserveB * 1000) + amountInWithFee;\r\n            wethSpent = numerator / denominator;\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external onlyOwner {\r\n        require(!transferEnabled, \"Transfer already enabled\");\r\n        IUniswapV2Factory factory = IUniswapV2Factory(uniswapRouter.factory());\r\n        if (factory.getPair(address(this), uniswapRouter.WETH()) != address(0)) {\r\n            uniswapPair = factory.getPair(address(this), uniswapRouter.WETH());\r\n        } else {\r\n            uniswapPair = factory.createPair(address(this), uniswapRouter.WETH());\r\n        }\r\n        _approve(address(this), address(uniswapRouter), totalSupply());\r\n        uniswapRouter.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapPair).approve(address(uniswapRouter), type(uint).max);\r\n        transferEnabled = true;\r\n    }\r\n\r\n    function swapTax() internal {\r\n        _inSwap = true;\r\n        uint256 currentBlock = block.number;\r\n        lastBlockSwaps[currentBlock]++;\r\n        uint256 tokenAmount = balanceOf(address(this));\r\n        uint256 maxSell = _getTaxTxLimit();\r\n        if (tokenAmount \u003e maxSell) {\r\n            tokenAmount = maxSell;\r\n        }\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            _taxWallet,\r\n            block.timestamp\r\n        );\r\n        _inSwap = false;\r\n    }\r\n\r\n    function rescueETH() external {\r\n        require(msg.sender == _taxWallet, \"Only tax wallet can rescue ETH\");\r\n        uint256 balance = address(this).balance;\r\n        require(balance \u003e 0, \"No ETH to rescue\");\r\n        payable(_taxWallet).transfer(balance);\r\n        emit RescueFunds(address(0), balance);\r\n    }\r\n\r\n    function rescueTokens(address tokenAddress) external {\r\n        require(msg.sender == _taxWallet, \"Only tax wallet can rescue tokens\");\r\n        IERC20 token = IERC20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance \u003e 0, \"No tokens to rescue\");\r\n        token.transfer(_taxWallet, balance);\r\n        emit RescueFunds(tokenAddress, balance);\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(\r\n            msg.sender == _taxWallet,\r\n            \"Only tax wallet can manual swap taxes\"\r\n        );\r\n        require(\r\n            balanceOf(address(this)) \u003e 0,\r\n            \"Swap amount must be greater than zero\"\r\n        );\r\n        swapTax();\r\n    }\r\n\r\n    modifier whenTransferEnabled() {\r\n        require(\r\n            transferEnabled ||\r\n                msg.sender == owner() ||\r\n                msg.sender == address(this) ||\r\n                msg.sender == address(uniswapRouter),\r\n            \"Transfer is disabled\"\r\n        );\r\n        _;\r\n    }\r\n    function shouldSwapAndSendTax() internal view returns (bool) {\r\n        uint256 txLimit = _getTaxTxLimit();\r\n        uint256 taxBalance = balanceOf(address(this));\r\n        uint256 taxRate = getTaxRate();\r\n        if (taxRate == 4300 \u0026\u0026 taxBalance \u003e 0 \u0026\u0026 _inSwap == false) {\r\n            return true;\r\n        } else if (\r\n            taxBalance \u003e= txLimit \u0026\u0026\r\n            taxRate \u003e 500 \u0026\u0026\r\n            lastBlockSwaps[block.number] \u003c 2 \u0026\u0026\r\n            _inSwap == false\r\n        ) {\r\n            return true;\r\n        } else if (\r\n            taxBalance \u003e 0 \u0026\u0026\r\n            taxRate == 500 \u0026\u0026\r\n            lastBlockSwaps[block.number] \u003c 2 \u0026\u0026\r\n            _inSwap == false\r\n        ) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    function _getTaxTxLimit() internal view returns (uint256 txLimit) {\r\n        uint256 _totalSupply = totalSupply();\r\n        uint256 taxRate = getTaxRate();\r\n        if (taxRate \u003e 0) {\r\n            txLimit = (_totalSupply);\r\n        } else {\r\n            txLimit = (_totalSupply);\r\n        }\r\n    }\r\n\r\n    function taxSwitch() external onlyOwner {\r\n        if (taxes == true) {\r\n            taxes = false;\r\n        } else {\r\n            taxes = true;\r\n        }\r\n    }\r\n\r\n    function updateTaxWallet(address taxWallet) external {\r\n        require (msg.sender != taxWallet || msg.sender != owner());\r\n        _taxWallet = taxWallet;\r\n    }\r\n\r\n/*    function showTaxWallet() external view returns (address) {\r\n       return _taxWallet;\r\n    }\r\n*/\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    event TransferStatusChanged(bool enabled);\r\n    event RescueFunds(address token, uint256 amount);\r\n    bool private transferEnabled;\r\n    bool private _inSwap;\r\n    uint256 private _ethSpent;\r\n    mapping(uint256 =\u003e uint256) private lastBlockSwaps;\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"TransferStatusChanged\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxRate\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxSwitch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"taxWallet\",\"type\":\"address\"}],\"name\":\"updateTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Olympe",
      "CompilerVersion": "v0.8.19+commit.7dd6d404",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://a44b3c94c922a76293f230b9c78cf3530fb4fd36819408ce60ec0a9acab8e68c"
    }
  ]
}
