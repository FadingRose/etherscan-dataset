{
  "TxHash": "0x0ea3744ce9013a595d551cf2e0c433f63a7ed2c7abac4fc74f807bce2af5f72e",
  "ContractAddress": "0xdDb11a733C3Db7d71ED882A8847A162C65CF6488",
  "Name": "GROWLSALE",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract GROWLSALE {\r\n    IERC20 public memecoin;\r\n    IERC20 public usdt;\r\n    address public owner;\r\n    uint256 public price; // Price in USDT (1 USDT = 1 * 10^6)\r\n    uint256 public maxSpendAmount = 500 * 10**6; // $500 in USDT (assuming USDT has 6 decimals)\r\n    mapping(address =\u003e uint256) public userSpendAmount;\r\n\r\n    event TokensPurchased(address buyer, uint256 amountSpent, uint256 amountBought);\r\n    event TokensDeposited(address owner, uint256 amount);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor(IERC20 _memecoin, IERC20 _usdt, uint256 _price) {\r\n        memecoin = _memecoin;\r\n        usdt = _usdt;\r\n        owner = msg.sender;\r\n        price = _price; // Price per memecoin in USDT (e.g., 0.01 USDT per memecoin)\r\n    }\r\n\r\n    function setPrice(uint256 _price) external onlyOwner {\r\n        price = _price;\r\n    }\r\n\r\n    function setMaxSpendAmount(uint256 _maxSpendAmount) external onlyOwner {\r\n        maxSpendAmount = _maxSpendAmount;\r\n    }\r\n\r\n    function buyMemecoins(uint256 usdtAmount) external {\r\n        require(usdtAmount \u003e 0, \"Amount should be greater than zero\");\r\n        require(userSpendAmount[msg.sender] + usdtAmount \u003c= maxSpendAmount, \"Exceeds maximum spend limit\");\r\n\r\n        uint256 memecoinsToBuy = (usdtAmount * 10**18) / (price); // USDT has 6 decimals, token has 18 decimals\r\n\r\n        require(memecoin.balanceOf(address(this)) \u003e= memecoinsToBuy, \"Not enough memecoins in the reserve\");\r\n\r\n        // Transfer USDT from the buyer to the contract\r\n        require(usdt.transferFrom(msg.sender, address(this), usdtAmount), \"USDT transfer failed\");\r\n\r\n        // Update the user's spend amount\r\n        userSpendAmount[msg.sender] += usdtAmount;\r\n\r\n        // Transfer memecoins from the contract to the buyer\r\n        require(memecoin.transfer(msg.sender, memecoinsToBuy), \"Memecoin transfer failed\");\r\n\r\n        emit TokensPurchased(msg.sender, usdtAmount, memecoinsToBuy);\r\n    }\r\n\r\n    function depositGrowlcoins(uint256 amount) external onlyOwner {\r\n        require(memecoin.transferFrom(msg.sender, address(this), amount), \"Memecoin transfer failed\");\r\n        emit TokensDeposited(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawUSDT(uint256 amount) external onlyOwner {\r\n        require(usdt.balanceOf(address(this)) \u003e= amount, \"Not enough USDT in the reserve\");\r\n        usdt.transfer(owner, amount);\r\n    }\r\n\r\n    function withdrawGrowlcoins(uint256 amount) external onlyOwner {\r\n        require(memecoin.balanceOf(address(this)) \u003e= amount, \"Not enough memecoins in the reserve\");\r\n        memecoin.transfer(owner, amount);\r\n    }\r\n\r\n    // Fallback function to reject any ETH sent directly to the contract\r\n    fallback() external payable {\r\n        revert(\"Do not send ETH directly to this contract\");\r\n    }\r\n\r\n    receive() external payable {\r\n        revert(\"Do not send ETH directly to this contract\");\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_memecoin\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountBought\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyMemecoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositGrowlcoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSpendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memecoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSpendAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxSpendAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userSpendAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGrowlcoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "GROWLSALE",
      "CompilerVersion": "v0.8.0+commit.c7dfd78e",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000001f7118401b9c606e8b77202ff807725918b35726000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000000000000000000000000000000000000002328",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://ddfad5c71a6345f2c609d18c1245568f5d352815c0db3221e565262f5e83d065"
    }
  ]
}
