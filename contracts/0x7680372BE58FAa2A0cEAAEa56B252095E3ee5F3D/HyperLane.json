{
  "TxHash": "0x9816674e83efd997410647fdeef5bbad26fd2b599a0254c981255916cfa1f779",
  "ContractAddress": "0x7680372BE58FAa2A0cEAAEa56B252095E3ee5F3D",
  "Name": "HyperLane",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT OR Apache-2.0\r\npragma solidity ^0.8.0;\r\n\r\n/*@@@@@@@@       @@@@@@@@@\r\n @@@@@@@@@       @@@@@@@@@\r\n @@@@@@@@@       @@@@@@@@@\r\n @@@@@@@@@       @@@@@@@@@\r\n @@@@@@@@@@@@@@@@@@@@@@@@@\r\n @@@@@@ Gas Refill @@@@@@@\r\n @@@@@@@@@@@@@@@@@@@@@@@@@\r\n @@@@@@@@@       @@@@@@@@@\r\n @@@@@@@@@       @@@@@@@@@\r\n @@@@@@@@@       @@@@@@@@@\r\n @@@@@@@@@       @@@@@@@@*/\r\n\r\n\r\ninterface IMailbox {\r\n    function dispatch(\r\n        uint32 destinationDomain,\r\n        bytes32 recipientAddress,\r\n        bytes calldata messageBody\r\n    ) external payable returns (bytes32 messageId);\r\n\r\n    function process(bytes calldata _metadata, bytes calldata _message) external;\r\n\r\n    function handle(\r\n        uint32 _origin,\r\n        bytes32 _sender,\r\n        bytes calldata _message\r\n    ) external payable;\r\n\r\n    function quoteDispatch(\r\n        uint32 destinationDomain,\r\n        bytes32 recipientAddress,\r\n        bytes calldata messageBody\r\n    ) external view returns (uint256 fee);\r\n\r\n}\r\n\r\nlibrary TypeCasts {\r\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(_addr)));\r\n    }\r\n\r\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\r\n        return address(uint160(uint256(_buf)));\r\n    }\r\n}\r\n\r\n\r\ncontract HyperLane {\r\n    IMailbox public mailbox;\r\n    bytes32 public allowed_contract;\r\n    address public owner;\r\n    uint256 public maximumFee;\r\n    uint256 public platformFeePercent; // Platform fee in percentage\r\n\r\n    event ReceivedMessage(uint32 indexed origin, bytes32 indexed sender, uint256 value, string message);\r\n    event EtherDeposited(address indexed from, uint256 amount);\r\n    event EtherWithdrawn(address indexed to, uint256 amount);\r\n    event ExtraGasStored(uint256 amount);\r\n    event ExtraGasReleased(address indexed to, uint256 amount);\r\n    event PlatformFeeSet(uint256 feePercent);\r\n    event MaximumFeeSet(uint256 maxFee);\r\n\r\n    constructor(address _mailbox,address _owner) {\r\n        mailbox = IMailbox(_mailbox);\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only the owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMailbox() {\r\n        require(\r\n            msg.sender == address(mailbox),\r\n            \"MailboxClient: sender not mailbox\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    function dispatch(\r\n        uint32 destinationDomain,\r\n        bytes32 recipientAddress,\r\n        uint256 extraGasAmount\r\n\r\n    ) external payable returns (bytes32 messageId) {\r\n        \r\n        uint256 fee = mailbox.quoteDispatch(destinationDomain, recipientAddress, abi.encode(msg.value, msg.sender));\r\n\r\n        uint256 platformFee = (msg.value * platformFeePercent) / 100;\r\n\r\n        uint256 totalFee = fee + platformFee;\r\n\r\n        require(msg.value \u003e= totalFee, \"Insufficient Ether to cover fees\");\r\n\r\n        // Store the extra gas amount in the contract balance\r\n        uint256 extraGas = (msg.value - totalFee);\r\n\r\n        require(extraGas \u003c= maximumFee, \"Extra gas amount exceeds maximum fee\");\r\n\r\n        bytes32 _messageId = mailbox.dispatch{value: fee}(\r\n            destinationDomain,\r\n            recipientAddress,\r\n            abi.encode(extraGas, msg.sender)\r\n        );\r\n\r\n        emit ExtraGasStored(extraGas);\r\n        return _messageId;\r\n    }\r\n \r\n    function handle(\r\n        uint32 _origin,\r\n        bytes32 _sender,\r\n        bytes calldata _data\r\n    ) external payable virtual onlyMailbox {\r\n\r\n        require(_sender == allowed_contract, \"Caller not allowed contract\");\r\n\r\n        (uint256 extraGasAmount, address recipient) = abi.decode(_data, (uint256, address));\r\n\r\n        address receiver = TypeCasts.bytes32ToAddress(_sender);\r\n\r\n        payable(recipient).transfer(extraGasAmount);\r\n\r\n        emit ReceivedMessage(_origin, _sender, msg.value, string(_data));\r\n\r\n        emit ExtraGasReleased(receiver, extraGasAmount);\r\n    }\r\n\r\n    function addressToBytes32(address _addr) public pure returns (bytes32) {\r\n        return bytes32(uint256(uint160(_addr)));\r\n    }\r\n\r\n    function depositEther() external payable {\r\n        require(msg.value \u003e 0, \"Must send ether to deposit\");\r\n        emit EtherDeposited(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdrawEther(uint256 amount, address _address) public onlyOwner {\r\n        require(amount \u003c= address(this).balance, \"Insufficient balance in contract\");\r\n        payable(_address).transfer(amount);\r\n        emit EtherWithdrawn(_address, amount);\r\n    }\r\n\r\n    function getContractBalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function setAllowedContract(bytes32 _allowedContract) external onlyOwner {\r\n        allowed_contract = _allowedContract;\r\n    }\r\n\r\n    function getFee(\r\n        uint32 destinationDomain,\r\n        bytes32 recipientAddress,\r\n        uint256 value\r\n    ) view public returns (uint256) {\r\n        return mailbox.quoteDispatch(destinationDomain, recipientAddress, abi.encode(value));\r\n    }\r\n\r\n\r\n    function setMaximumFee(uint256 _maximumFeeEther) public onlyOwner {\r\n        maximumFee = _maximumFeeEther * 1 wei;\r\n        emit MaximumFeeSet(maximumFee);\r\n    }\r\n\r\n    function setPlatformFee(uint256 _platformFeePercent) public onlyOwner {\r\n        platformFeePercent = _platformFeePercent;\r\n        emit PlatformFeeSet(_platformFeePercent);\r\n    }\r\n\r\n    function setMailbox(address _mailBox) public onlyOwner {\r\n        mailbox = IMailbox(_mailBox);\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExtraGasReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExtraGasStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"}],\"name\":\"MaximumFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feePercent\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ReceivedMessage\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"addressToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowed_contract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipientAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"extraGasAmount\",\"type\":\"uint256\"}],\"name\":\"dispatch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipientAddress\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_allowedContract\",\"type\":\"bytes32\"}],\"name\":\"setAllowedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mailBox\",\"type\":\"address\"}],\"name\":\"setMailbox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maximumFeeEther\",\"type\":\"uint256\"}],\"name\":\"setMaximumFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFeePercent\",\"type\":\"uint256\"}],\"name\":\"setPlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "HyperLane",
      "CompilerVersion": "v0.8.0+commit.c7dfd78e",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000c005dc82818d67af737725bd4bf75435d065d239000000000000000000000000d3ae73f4fa5ba54db8bfd8f80371351e49647efd",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://37c7f3c736cc2ff6b137019e66889b761d80292c68b8c8799a785189dc0dffb9"
    }
  ]
}
