{
  "TxHash": "0xa1a29470f51d48c0aca4bf448780f1c34d0423111591506d70548be8d14faaeb",
  "ContractAddress": "0x98b6d962223f4a420e7397fd5280cc6c06869c16",
  "Name": "EWT",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n    /**\r\n    * Escrow Wallet\r\n    * \r\n    * Official Telegram Channel :\r\n    * https://t.me/EscrowWalletOfficial\r\n    * \r\n    * Wallet Developer\r\n    * https://t.me/Jorbs\r\n    * \r\n    * Wallet App\r\n    * https://t.me/Escrow_Wallet_Bot/Connect\r\n    */\r\n\r\n\r\n    pragma solidity ^0.8.26;\r\n\r\n\r\n    interface CONTRACTOR {\r\n        function totalSupply() external view returns(uint256);\r\n        function decimals() external view returns(uint8);\r\n        function symbol() external view returns(string memory);\r\n        function name() external view returns(string memory);\r\n        function getOwner() external view returns(address);\r\n        function balanceOf(address account) external view returns(uint256);\r\n        function transfer(address recipient, uint256 amount) external returns(bool); \r\n        function approve(address spender, uint256 amount) external returns(bool);\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\r\n        event Transfer(address indexed from, address indexed to, uint256 value);\r\n        event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    contract Context {\r\n        constructor() {}\r\n        function _msgSender() internal view returns(address) {\r\n            return msg.sender;\r\n        }\r\n        function _msgData() internal view returns(bytes memory) {\r\n            this;\r\n            return msg.data;\r\n        }\r\n    }\r\n    library SafeMath {\r\n        function add(uint256 a, uint256 b) internal pure returns(uint256) {\r\n            uint256 c = a + b;\r\n            require(c \u003e= a, \"SafeMath: addition overflow\");\r\n\r\n            return c;\r\n        }\r\n        function sub(uint256 a, uint256 b) internal pure returns(uint256) {\r\n            return sub(a, b, \"SafeMath: subtraction overflow\");\r\n        }\r\n        function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n            require(b \u003c= a, errorMessage);\r\n            uint256 c = a - b;\r\n\r\n            return c;\r\n        }\r\n        function mul(uint256 a, uint256 b) internal pure returns(uint256) {\r\n            if (a == 0) {\r\n                return 0;\r\n            }\r\n            uint256 c = a * b;\r\n            require(c / a == b, \"SafeMath: multiplication overflow\");\r\n            return c;\r\n        }\r\n        function div(uint256 a, uint256 b) internal pure returns(uint256) {\r\n            return div(a, b, \"SafeMath: division by zero\");\r\n        }\r\n        function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n            // Solidity only automatically asserts when dividing by 0\r\n            require(b \u003e 0, errorMessage);\r\n            uint256 c = a / b;\r\n            // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n            return c;\r\n        }\r\n        function mod(uint256 a, uint256 b) internal pure returns(uint256) {\r\n            return mod(a, b, \"SafeMath: modulo by zero\");\r\n        }\r\n        function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns(uint256) {\r\n            require(b != 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n    contract Ownable is Context {\r\n        address private _owner;\r\n\r\n        event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n        constructor() {\r\n            address msgSender = _msgSender();\r\n            _owner = msgSender;\r\n            emit OwnershipTransferred(address(0), msgSender);\r\n        }\r\n        function owner() public view returns(address) {\r\n            return _owner;\r\n        }\r\n        modifier onlyOwner() {\r\n            require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n            _;\r\n        }\r\n        function renounceOwnership() public onlyOwner {\r\n            emit OwnershipTransferred(_owner, address(0));\r\n            _owner = address(0);\r\n        }\r\n    }\r\n\r\n    contract EWT is Context, CONTRACTOR, Ownable {\r\n        using SafeMath\r\n        for uint256;\r\n\r\n        mapping(address =\u003e uint256) private _balances;\r\n\r\n        mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n        uint256 private _totalSupply;\r\n        uint8 private _decimals;\r\n        string private _symbol;\r\n        string private _name;\r\n\r\n        constructor() {\r\n            _name        = \"Escrow Wallet Token\";\r\n            _symbol      = \"EWT\";\r\n            _decimals    = 8;\r\n            _totalSupply = 2400000 * (10 ** _decimals);\r\n            _balances[msg.sender] = _totalSupply;\r\n            emit Transfer(address(0), msg.sender, _totalSupply);\r\n        }\r\n        function getOwner() external view returns(address) {\r\n            return owner();\r\n        }\r\n        function decimals() external view returns(uint8) {\r\n            return _decimals;\r\n        }\r\n        function symbol() external view returns(string memory) {\r\n            return _symbol;\r\n        }\r\n        function name() external view returns(string memory) {\r\n            return _name;\r\n        }\r\n        function totalSupply() external view returns(uint256) {\r\n            return _totalSupply;\r\n        }\r\n        function balanceOf(address account) external view returns(uint256) {\r\n            return _balances[account];\r\n        }\r\n        function transfer(address recipient, uint256 amount) external returns(bool) {\r\n            _transfer(_msgSender(), recipient, amount);\r\n            return true;\r\n        }\r\n        function transferFrom(address sender, address recipient, uint256 amount) external returns(bool) {\r\n            _transfer(sender, recipient, amount);\r\n            _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\r\n            return true;\r\n        }\r\n        function _transfer(address sender, address recipient, uint256 amount) internal {\r\n            require(sender != address(0), \"BEP20: transfer from the zero address\");\r\n            require(recipient != address(0), \"BEP20: transfer to the zero address\");\r\n\r\n            _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n        function _approve(address owner, address spender, uint256 amount) internal {\r\n            require(owner != address(0), \"BEP20: approve from the zero address\");\r\n            require(spender != address(0), \"BEP20: approve to the zero address\");\r\n\r\n            _allowances[owner][spender] = amount;\r\n            emit Approval(owner, spender, amount);\r\n        }\r\n        function approve(address spender, uint256 amount) external returns(bool) {\r\n            _approve(_msgSender(), spender, amount);\r\n            return true;\r\n        }\r\n   \r\n    }",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "EWT",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://f06e83ad12b8c5ef1a7cd6f3be79193c904c81b632f9b8460e1afa331fb61ff7"
    }
  ]
}
