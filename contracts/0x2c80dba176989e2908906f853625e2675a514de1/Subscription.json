{
  "TxHash": "0xa178d0e2f9f679d11b7157bd635cf706cc5a9c976fe18cc515efd6b9be8c710b",
  "ContractAddress": "0x2c80dba176989e2908906f853625e2675a514de1",
  "Name": "Subscription",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// Sources flattened with hardhat v2.22.6 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File contracts/Subscription.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n\r\npragma solidity \u003e= 0.7.0 \u003c 0.9.0;\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b \u003e 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b \u003c= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c \u003e= a);\r\n    return c;\r\n  }\r\n}\r\n\r\ninterface IMevrora {\r\n  function allowance ( address _owner, address spender ) external view returns ( uint256 );\r\n  function approve ( address spender, uint256 amount ) external returns ( bool );\r\n  function balanceOf ( address account ) external view returns ( uint256 );\r\n  function decimals (  ) external view returns ( uint8 );\r\n  function decreaseAllowance ( address spender, uint256 subtractedValue ) external returns ( bool );\r\n  function editFees ( uint256 _feeBuy, uint256 _feeSell ) external;\r\n  function editSwapPair ( address adr ) external;\r\n  function editWallets ( address _marketingWallet, address _teamWallet ) external;\r\n  function feeBuy (  ) external view returns ( uint256 );\r\n  function feeSell (  ) external view returns ( uint256 );\r\n  function increaseAllowance ( address spender, uint256 addedValue ) external returns ( bool );\r\n  function marketingWallet (  ) external view returns ( address );\r\n  function mint ( address account, uint256 amount ) external;\r\n  function name (  ) external view returns ( string memory );\r\n  function owner (  ) external view returns ( address );\r\n  function swapPair (  ) external view returns ( address );\r\n  function symbol (  ) external view returns ( string memory );\r\n  function teamWallet (  ) external view returns ( address );\r\n  function totalSupply (  ) external view returns ( uint256 );\r\n  function transfer ( address recipient, uint256 amount ) external returns ( bool );\r\n  function transferFrom ( address sender, address recipient, uint256 amount ) external returns ( bool );\r\n}\r\n\r\n\r\ncontract Subscription {\r\n    using SafeMath for uint;\r\n\r\n    address public owner;\r\n    address public mevrora;\r\n    address public devrora;\r\n    uint256 public tax;\r\n    address public swap;\r\n    uint public holdTarget;\r\n\r\n    struct holder {\r\n        address payable holderAddr;\r\n        uint256 amount;\r\n        bool temp;\r\n    }\r\n\r\n    constructor(address _devrora, address _mevrora, uint256 _tax, address _swap) {\r\n        owner = msg.sender;\r\n        devrora = _devrora;\r\n        mevrora = _mevrora;\r\n        tax = _tax;\r\n        swap = _swap;\r\n        holdTarget = 1 ether;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"You are not an owner\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {\r\n        if (address(this).balance \u003e= holdTarget) {\r\n            distribute();\r\n        }\r\n    }\r\n\r\n    function transferOwnership(address account) external onlyOwner {\r\n        require(account != address(0), \"Wrong address!\");\r\n        owner = account;\r\n    }\r\n\r\n    function deposit() external payable {\r\n        if (address(this).balance \u003e= holdTarget) {\r\n            distribute();\r\n        }\r\n    }\r\n\r\n    function changeHoldTarget(uint _value) external onlyOwner {\r\n        (bool success, bytes memory data) = devrora.call(abi.encodeWithSignature(\"enoughConfirms()\"));\r\n\r\n        if (success) {\r\n            (bool confirmed) = abi.decode(data, (bool));\r\n            if (!confirmed) {\r\n                return;\r\n            }\r\n            holdTarget = _value;\r\n        }\r\n    }\r\n\r\n    function getSwap() external view returns(address) {\r\n        return swap;\r\n    }\r\n\r\n    function changeSwap(address _swap) external onlyOwner {\r\n        swap = _swap;\r\n    }\r\n\r\n    function distributeProjTokens() external onlyOwner {\r\n        (bool success, bytes memory data) = devrora.call(abi.encodeWithSignature(\"calcDistribution()\"));\r\n        \r\n        if (success) {\r\n            (holder[] memory _holders) = abi.decode(data, (holder[]));\r\n\r\n            uint256 _balance = IMevrora(mevrora).balanceOf(address(this));\r\n\r\n            IMevrora(mevrora).transfer(swap, _balance.mul(tax).div(100));\r\n            \r\n            _balance = IMevrora(mevrora).balanceOf(address(this));\r\n            for (uint i = 0; i \u003c _holders.length; i++) {\r\n                IMevrora(mevrora).transfer(_holders[i].holderAddr, _balance.mul(_holders[i].amount).div(100));\r\n            }\r\n        }\r\n    }\r\n\r\n    function changeTax(uint _tax) external onlyOwner {\r\n        require(_tax \u003c= 100, \"incorrect tax value\");\r\n\r\n        (bool success, bytes memory data) = devrora.call(abi.encodeWithSignature(\"enoughConfirms()\"));\r\n\r\n        if (success) {\r\n            (bool confirmed) = abi.decode(data, (bool));\r\n            if (!confirmed) {\r\n                revert(\"Not enough confirms from devrora holders\");\r\n            }\r\n            tax = _tax;\r\n        }\r\n    }\r\n\r\n\r\n    function distribute() internal {\r\n        (bool success, bytes memory data) = devrora.call(abi.encodeWithSignature(\"calcDistribution()\"));\r\n\r\n        if (success) {\r\n            (holder[] memory _holders) = abi.decode(data, (holder[]));\r\n\r\n            uint256 _balance = address(this).balance;\r\n\r\n            payable(swap).transfer(_balance.mul(tax).div(100));\r\n\r\n            _balance = address(this).balance;\r\n            for (uint i = 0; i \u003c _holders.length; i++) {\r\n                _holders[i].holderAddr.transfer(_balance.mul(_holders[i].amount).div(100));\r\n            }\r\n        }\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devrora\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mevrora\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"changeHoldTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swap\",\"type\":\"address\"}],\"name\":\"changeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"changeTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devrora\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeProjTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mevrora\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Subscription",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000b3a6b55e5ae7aa14fefc7dd92497fe386d050e29000000000000000000000000194dda379e606cb72f5c0c616c75df0c9b6f0c26000000000000000000000000000000000000000000000000000000000000000000000000000000000000000088c5a47c88c458993ab4ec79d1ef61c2927da187",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://fc6a6c3db3d98cdca4f19930619f601de7149b3f8e283b8eaa0af077c92eea19"
    }
  ]
}
