{
  "TxHash": "0x622aa3a39197ee43f93b9cbb3771db5178722552eab9b9a2ae3abb8a19a96016",
  "ContractAddress": "0xc25289863ea9dac85b4d08b107b9732fc34ba411",
  "Name": "SmartOTC",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.5;\r\n\r\n/*\r\n * Copyright (c) 2024 SmartOTC.org\r\n */\r\n\r\ninterface Money20 {\r\n\r\n    //function name() external view returns (string memory);\r\n\r\n    function symbol() external  view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    //function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    //function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\ninterface AnySwap{\r\n\tfunction queryOrders(address money, uint160 chainCoin,uint start,uint queryType,address user,uint gtMoneyAmt,uint ltMoneyAmt,uint gtPrice18,uint ltPrice18,uint timeBefore, uint limit) view external returns( uint[] memory orders ) ;\r\n\tfunction addBuyOrder(address money,uint moneyAmt, uint160 chainCoin, uint amount8, uint8 times,string memory buyerCoinAddress) external payable returns(uint);\r\n\tfunction addSellOrder(address money, uint moneyAmt, uint160 chainCoin,uint amount8, uint8 times) external payable returns (uint);\r\n\tfunction lockBuyOrder(address money, uint160 chainCoin,uint orderkey) external payable returns(bool);\r\n\tfunction lockSellOrder(address money,uint160 chainCoin,uint orderkey,string memory buyerCoinAddress) external payable returns(bool);\r\n\tfunction buyerReceivedCoins(address money,uint160 chainCoin,uint orderkey) external returns (bool,bool);\r\n\tfunction cancelOrder(address money,uint160 chainCoin,uint orderkey) external returns (bool);\r\n    function getOrder(address money, uint160 chainCoin, uint orderkey)\r\n                view external returns (address seller,uint96 amount8,address buyer\r\n                        , uint136 moneyAmt, uint8 times,string memory coinAddr, uint64 sellTime, uint64 buyTime );\r\n\r\n\tevent AddBuyOrder(address sender,address money, uint160 chainCoin,uint orderkey);\r\n\tevent AddSellOrder(address sender,address money,uint160 chainCoin,uint orderkey);\r\n\tevent LockBuyOrder(address sender,address money,uint160 chainCoin,uint orderkey,uint moneyAmt,address buyer);\r\n\tevent LockSellOrder(address sender,address money,uint160 chainCoin,uint orderkey,uint moneyAmt,address seller);\r\n\tevent BuyerReceivedCoins(address sender,address money, uint160 chainCoin,uint orderkey,uint moneyAmt,address seller,bool,bool,string);\r\n\tevent CancelOrder(address sender,address money,uint160 chainCoin,uint orderkey,bool,string);\r\n\t//event CancelSellOrder(address sender,address money,uint160 chainCoin,uint orderkey,bool,string);\r\n}\r\n\r\ncontract SmartOTC is Money20, AnySwap{\r\n\t\r\n\tstruct UserOrder {\r\n\t\taddress seller;\r\n\t\tuint64 timeSell;\r\n\t\t\r\n\t\tuint96 amount8;\r\n\t\tuint136 moneyAmt;\r\n\t\tuint8 times;\r\n\t\t\r\n\t\taddress buyer;\r\n\t\tuint64 timeBuy;\r\n\t\t\r\n        string buyerCoinAddress;\r\n    }\r\n\r\n\taddress constant _maxquery = address(0x5f6d6178);//\"_max\";\r\n\taddress constant _admin = address(0x5f61646d696e); //\"_admin\";\r\n    uint160 constant _help = 0x5f68656c70;\r\n    uint160 constant _sym = 0x5f73796d;\r\n\r\n\tuint8 public override constant decimals = 18;\r\n\r\n\tmapping( address =\u003e\r\n      \tmapping( uint160 =\u003e  \r\n\t\t      mapping( uint =\u003e UserOrder ) ) ) markets;\r\n\r\n    mapping(address =\u003e uint) public minVolumes;\r\n\tmapping(address =\u003e uint) public serviceFees;\r\n\tmapping(uint160 =\u003e string) public texts;\r\n\r\n\taddress public immutable owner ;\r\n\r\n\tmodifier onlyAdmin() {\r\n        require( msg.sender==owner || (minVolumes[_admin]!=0\u0026\u0026uint160(msg.sender) == minVolumes[_admin]), \"Not admin\");\r\n        _;\r\n    }\r\n\r\n\t//event Log(string,uint,address);\r\n\r\n\t\r\n\tconstructor() payable {\r\n\t\towner = msg.sender;\r\n\t\t//admin = msg.sender;\r\n\r\n\t\t//chains[_running] = 1; \r\n\t\tminVolumes[_maxquery] = 30000; \r\n\t\ttexts[_sym] = \"ETH\";\r\n        texts[_help] = \"https://SmartOTC.org/ for cross-chain swap. v1.0.2\";\r\n\r\n\t}\r\n    \r\n    function help() external view returns (string memory txt)\r\n                        {\r\n        txt = texts[_help];\r\n\r\n    }\r\n    \r\n    function symbol() external view override returns (string memory sym)\r\n                        {\r\n        sym = texts[_sym];\r\n\r\n    }\r\n \r\n\tfunction transfer(address, uint256) pure external override returns (bool){\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tfunction transferFrom(address , address , uint256 ) pure external override returns (bool){\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction allowance(address , address ) external pure override returns (uint256){\r\n\t\treturn type(uint).max;\r\n\t}\r\n    \r\n    function balanceOf(address account) external view override returns (uint256){\r\n        return account.balance;\r\n    }\r\n\r\n\tfunction queryOrders(address money, uint160 chainCoin,uint start\r\n\t\t,uint queryType,address user,uint gtMoneyAmt,uint ltMoneyAmt\r\n\t\t\t\t,uint gtPrice18, uint ltPrice18, uint timeBefore, uint limit)\r\n\t\t\t\t\tview external override returns( uint[] memory keyvalues ) {\r\n\t\t\r\n        mapping( uint =\u003e UserOrder ) storage market = markets[money][chainCoin];\r\n\r\n\t\tif(start == 0)\r\n\t\t\tstart = market[0].amount8;\r\n\r\n\t\tif(limit\u003e200)\r\n\t\t\tlimit = 200;\r\n\r\n\t\tUserOrder memory uo;\r\n\t\tuint end = (start\u003eminVolumes[_maxquery])?(start-minVolumes[_maxquery]):0;\r\n\t\t//uint size = limit*10;\r\n\t\tuint[] memory keys = new uint[](limit*10);\r\n\t\tuint ind;\r\n\r\n\t\tfor( uint orderkey = start;  orderkey\u003eend \u0026\u0026 ind\u003c(limit*10); orderkey-=1 ) {\r\n\t\t\t\tuo = market[ orderkey ];\r\n\t\t\t\tif(uo.amount8==0){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(queryType==1){ //sell orders unlocked\r\n\t\t\t\t\tif(  uo.buyer!=address(0) ){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(queryType==2){ //buy orders unlocked\r\n\t\t\t\t\tif(  uo.seller!=address(0) ){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else if(queryType==12){ //unlocked\r\n\t\t\t\t\tif(uo.seller!=address(0)\u0026\u0026uo.buyer!=address(0))\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}else if(queryType==10){ //locked\r\n\t\t\t\t\tif(uo.seller==address(0)||uo.buyer==address(0))\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif( user!=address(0) \u0026\u0026 uo.buyer!=user \u0026\u0026 uo.seller!=user ){\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(gtMoneyAmt\u003e0 \u0026\u0026 (uo.moneyAmt*uo.times)\u003cgtMoneyAmt){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(ltMoneyAmt\u003e0 \u0026\u0026 (uo.moneyAmt*uo.times)\u003eltMoneyAmt){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(ltPrice18\u003e0 \u0026\u0026 (uint(uo.moneyAmt)*100000000/uo.amount8)\u003eltPrice18){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(gtPrice18\u003e0 \u0026\u0026 (uint(uo.moneyAmt)*100000000/uo.amount8)\u003cgtPrice18){\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif(timeBefore\u003e0){\r\n\t\t\t\t\tif(uo.timeSell\u003etimeBefore||uo.timeBuy\u003etimeBefore)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkeys[ind] = orderkey;\r\n\t\t\t\tkeys[ind+1] = uint160(uo.seller);\r\n                keys[ind+1] = (keys[ind+1]\u003c\u003c64) + uo.timeSell;\r\n\t\t\t\tkeys[ind+2] = uo.amount8;\r\n                keys[ind+3] = uint160(uo.buyer);\r\n                keys[ind+3] = (keys[ind+3]\u003c\u003c64) + uo.timeBuy;\r\n\t\t\t\tkeys[ind+4] = uo.moneyAmt;\r\n\t\t\t\tkeys[ind+5] = uo.times;\r\n\t\t\t\tbytes memory byts = bytes(uo.buyerCoinAddress);\r\n\t\t\t\tkeys[ind+6] = uint(bytes32(byts));\r\n\t\t\t\tif(byts.length\u003e32){\r\n\t\t\t\t\t//get byts[32:64]\r\n\t\t\t\t\tkeys[ind+7] = uint(bytes32( bytesSlice(byts,32,64) ));\r\n\t\t\t\t}\r\n\t\t\t\tif(byts.length\u003e64){\r\n\t\t\t\t\t//get byts[64:96]\r\n\t\t\t\t\tkeys[ind+8] = uint(bytes32( bytesSlice(byts,64,96) ));\r\n\t\t\t\t}\r\n                if(byts.length\u003e96){\r\n                    //get byts[96:128]\r\n                    keys[ind+9] = uint(bytes32( bytesSlice(byts,96,128) ));\r\n                }\r\n\t\t\t\tind += 10;\r\n\t\t}\r\n\r\n\t\tkeyvalues = new uint[](ind);\r\n\t\tfor(uint32 i=0; i\u003cind;i++){\r\n\t\t\tkeyvalues[i] = keys[i];\r\n\t\t}\r\n\t\t\r\n\t }\r\n\r\n\tfunction bytesSlice(bytes memory byts,uint start, uint end) internal pure returns (bytes memory newbyts){\r\n\t\tfor(uint i=start;i\u003cbyts.length \u0026\u0026 i\u003cend;i++){\r\n\t\t\tnewbyts = bytes.concat(newbyts,byts[i]);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tfunction orderDeposit(address money,address from, uint amount) internal{\r\n\t\t//emit Log(\"Deposit amount\",amount,address(0));\r\n\t\tif(money == address(this)){\r\n\t\t\trequire(msg.value\u003e=amount, \"Deposit failed0\");\r\n\t\t\tif(msg.value\u003eamount){\r\n\t\t\t\tpayable(from).transfer(msg.value-amount);\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\trequire(msg.value==0, \"Deposit failed1\");\r\n\t\t\tMoney20 mny = Money20(money);\r\n\t\t\tbool succ = mny.transferFrom(from,address(this),amount);\r\n\t\t\trequire(succ, \"Deposit failed2\");\r\n\t\t}\r\n\r\n\t}\r\n\t \r\n\tfunction addBuyOrder( address money, uint moneyAmt\r\n\t\t\t\t\t\t, uint160 chainCoin, uint amount8, uint8 times,string memory buyerCoinAddress)\r\n\t\t\t\tpayable public override returns( uint orderkey ) {\r\n        require( bytes(buyerCoinAddress).length\u003c129, \"Address too long\" );\r\n\t\tuint minvol = minVolumes[money];\r\n\t\trequire( minvol \u003e 1 ,\"Money invalid\" );\r\n\t\trequire( times \u003e 0 ,\"Zero times\" );\r\n\r\n        require( amount8 \u003e 0,\"Zero amount\");\r\n\t\trequire( moneyAmt \u003e= minvol,\"Tiny order\");\r\n\t\t\r\n\t\torderDeposit(money,msg.sender,moneyAmt+moneyAmt);\r\n\r\n\t\t//buy market\r\n        mapping( uint =\u003e UserOrder ) storage market = markets[money][chainCoin];\r\n\r\n\t\torderkey = market[0].amount8;\r\n\t\torderkey += 1;\r\n\t\tmarket[0].amount8 = uint96(orderkey);\r\n\r\n\t\tUserOrder storage ord = market[orderkey];\r\n\t\tord.amount8 = uint96(amount8);\r\n\t\tord.moneyAmt = uint136(moneyAmt);\r\n\r\n\t\tord.times = times;\r\n\t\tord.buyer = msg.sender;\r\n\r\n\t\tord.timeBuy = uint64(block.timestamp);\r\n\t\tif(bytes(buyerCoinAddress).length\u003e0)\r\n\t\t   ord.buyerCoinAddress = buyerCoinAddress;\r\n\r\n\t\temit AddBuyOrder(msg.sender,money, chainCoin, orderkey);\r\n\r\n\t}\r\n\t\r\n\r\n\tfunction lockBuyOrder(address money, uint160 chainCoin, uint orderkey)\r\n\t\t\t\t\t\t\tpayable public override returns(bool succ) {\r\n\r\n\t\t\tUserOrder storage uo = markets[money][chainCoin][orderkey];\r\n\r\n\t\t\tif(uo.seller == address(0) \u0026\u0026 uo.buyer!=address(0) ){\r\n\t\t\t\tuint mamount = uo.moneyAmt;\r\n\r\n\t\t\t\trequire(mamount\u003e0,\"Missed order\"); //finished\r\n\t\t\t\torderDeposit(money,msg.sender,mamount);\r\n\t\t\t\tuo.seller = msg.sender;\r\n\t\t\t\tuo.timeSell = uint64(block.timestamp);\r\n                succ = true;\r\n\t\t\t\t\r\n\t\t\t\temit LockBuyOrder(msg.sender,money, chainCoin, orderkey,mamount,uo.buyer);\r\n\t\t\t}else{\r\n\t\t\t\t//return msg.value\r\n\t\t\t\trevert(\"Others locked\");\r\n\t\t\t}\t\t\t\r\n\r\n\t}\r\n\r\n\r\n\tfunction buyerReceivedCoins(address money,uint160 chainCoin,uint orderkey) \r\n                            public override returns (bool succSeller, bool succBuyer){\r\n\t\t\tmapping( uint =\u003e UserOrder ) storage market = markets[money][chainCoin];\r\n\t\t\tUserOrder memory uo = market[orderkey];\r\n\r\n\t\t\trequire(msg.sender!=address(0)\u0026\u0026uo.buyer == msg.sender,\"Not buyer\");\r\n\t\t\trequire(uo.seller != address(0) ,\"Unlocked\");\r\n\r\n            //uint fee = uo.moneyAmt/100;\r\n\t\t\tuint buyeramt = uo.moneyAmt-uo.moneyAmt/200;\r\n\t\t\tuint selleramt = uo.moneyAmt+buyeramt;\r\n\t\t\tuint servfee = uo.moneyAmt/100;\r\n\t\t\t\r\n\t\t\tdelete market[orderkey]; //reEntry guard\r\n\r\n\t\t\tsuccSeller = moneySend(money,uo.seller, selleramt);\r\n\t\t\tsuccBuyer = moneySend(money,uo.buyer,buyeramt);\r\n\r\n\t\t\tif(!succSeller)\r\n\t\t\t\tservfee += selleramt;\r\n\r\n\t\t\tif(!succBuyer)\r\n\t\t\t\tservfee += buyeramt;\r\n\t\t\t\r\n\t\t\t//if(servfee\u003e0)\r\n\t\t\t\tserviceFees[money] += servfee;\r\n\r\n\t\t\temit BuyerReceivedCoins(msg.sender,money, chainCoin, orderkey,uo.moneyAmt,uo.seller\r\n\t\t\t,succSeller,succBuyer,(succSeller\u0026\u0026succBuyer)?\"\":\"Failed funds to admin\");\r\n\t\t\t\r\n\t}\r\n\r\n\tfunction moneySend(address token,address rcv,uint amt) \r\n\t\t\tinternal returns(bool succ){\r\n\t\t\tif(token == address(this))\r\n\t\t\t\treturn payable(rcv).send(amt);\r\n\t\t\telse{\r\n\t\t\t\tMoney20 mny = Money20(token);\r\n\t\t\t\ttry mny.transfer(rcv,amt) returns (bool suc){\r\n\t\t\t\t\tsucc = suc;\r\n\t\t\t\t}catch{\r\n\t\t\t\t\tsucc = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\t\r\n\t}\r\n\r\n\r\n\tfunction addSellOrder(address money, uint moneyAmt, uint160 chainCoin, uint amount8, uint8 times)\r\n\t\t\t\tpayable public override returns( uint orderkey ) { \r\n\t\tuint minvol = minVolumes[money];\r\n\t\trequire( minvol \u003e 1 ,\"Money invalid\" );\r\n\t\trequire(times\u003e0,\"Zero times\");\r\n\r\n        require( amount8 \u003e 0,\"Zero amount\");\r\n\t\trequire( moneyAmt \u003e= minvol,\"Tiny order\");\r\n\r\n\t\torderDeposit(money,msg.sender, moneyAmt);\r\n\r\n\t\t//sell market\r\n        mapping( uint =\u003e UserOrder ) storage market = markets[money][chainCoin];\r\n\r\n\t\torderkey = market[0].amount8;\r\n\t\torderkey += 1;\r\n\t\tmarket[0].amount8 = uint96(orderkey);\r\n\t\t\r\n\t\tUserOrder storage ord = market[orderkey];\r\n\t\tord.amount8 = uint96(amount8);\r\n\t\tord.moneyAmt = uint136(moneyAmt);\r\n\t\tord.times = times;\r\n\t\tord.seller = msg.sender;\r\n\t\tord.timeSell = uint64(block.timestamp);\r\n\t\t//market[orderkey] = ord;\r\n\r\n\t\temit AddSellOrder(msg.sender,money, chainCoin, orderkey);\r\n\r\n\t}\r\n\t\r\n\r\n\tfunction lockSellOrder(address money, uint160 chainCoin, uint orderkey\r\n\t\t\t\t\t\t\t\t\t\t , string memory buyerCoinAddress)\r\n\t\t\t\t\t\tpayable public override returns(bool succ) {\r\n            require( bytes(buyerCoinAddress).length\u003c129, \"Address too long\" );\r\n\t\t\tUserOrder storage uo = markets[money][chainCoin][orderkey];\r\n\r\n\t\t\tif(uo.buyer == address(0) \u0026\u0026 uo.seller!=address(0) ){\r\n\t\t\t\tuint mamount = uo.moneyAmt;\r\n\t\t\t\trequire(mamount\u003e0,\"Missed order\"); //finished\r\n\t\t\t\torderDeposit(money, msg.sender,mamount+mamount);\r\n\t\t\t\tuo.buyer = msg.sender;\r\n\t\t\t\tuo.timeBuy = uint64(block.timestamp);\r\n\t\t\t\tif(bytes(buyerCoinAddress).length\u003e0)\r\n\t\t\t\t\tuo.buyerCoinAddress = buyerCoinAddress;\r\n                succ = true;\r\n\t\t\t\t\r\n\t\t\t\temit LockSellOrder(msg.sender,money, chainCoin, orderkey,mamount,uo.seller);\r\n\t\t\t}else{\r\n\t\t\t\trevert(\"Others locked\");\r\n\t\t\t}\t\t\r\n\r\n\t}\r\n\r\n\r\n\tfunction cancelOrder(address money, uint160 chainCoin, uint orderkey)\r\n\t\t\t\tpublic override returns (bool succ) {\r\n            require(msg.sender!=address(0), \"Unknown user\");\r\n\t\t\tmapping( uint =\u003e UserOrder ) storage market = markets[money][chainCoin];\r\n\t\t\tUserOrder memory uo = market[orderkey];\r\n            uint refundamt = uo.moneyAmt;\r\n            require( refundamt\u003e0 ,\"Zero amount\");\r\n            \r\n            if(uo.buyer == address(0)){ //sell order\r\n                    require( uo.seller==msg.sender ,\"Not seller\");\r\n                                   \r\n            }else if(uo.seller == address(0)){ //buy order\r\n                    require( uo.buyer==msg.sender, \"Not buyer\");\r\n                    refundamt += refundamt;\r\n            }else{\r\n                    revert(\"Order locked\");\r\n            }\r\n                                   \r\n\t\t\tdelete market[orderkey];//reEntry guard\r\n\t\t\tsucc = moneySend(money,msg.sender, refundamt);\r\n            string memory txt;\r\n\r\n\t\t\tif(!succ){\r\n\t\t\t\tserviceFees[money] += refundamt;\r\n\t\t\t\ttxt = \"Failed funds to admin\";\r\n\t\t\t}\r\n\r\n\t\t\temit CancelOrder(msg.sender,money, chainCoin, orderkey,succ,txt );\r\n\r\n\t}\r\n                                   \r\n\r\n                                   \r\n    function getOrder(address money, uint160 chainCoin, uint orderkey)\r\n                    view public override returns (address seller,uint96 amount8,address buyer\r\n                            , uint136 moneyAmt, uint8 times,string memory coinAddr, uint64 sellTime, uint64 buyTime ) {\r\n\r\n        UserOrder memory uo = markets[money][chainCoin][orderkey];\r\n        seller = uo.seller;\r\n        amount8 = uo.amount8;\r\n        buyer = uo.buyer;\r\n        moneyAmt = uo.moneyAmt;\r\n        times = uo.times;\r\n        coinAddr = uo.buyerCoinAddress;\r\n        sellTime = uo.timeSell;\r\n        buyTime = uo.timeBuy;\r\n\r\n    }\r\n                                   \r\n\t\r\n\tfunction string2hex(string memory str) pure public returns(bytes memory){\r\n\t\t\r\n\t\treturn bytes(str);\r\n\t\t\r\n\t}\r\n                                   \r\n    function hex2string(bytes memory byts) pure public returns(string memory){\r\n\r\n        return string(byts);\r\n                                       \r\n    }\r\n\r\n\tfunction setMinVolume(address money, uint vol) \r\n\t\t\t\t\t\t\t\t\t\tonlyAdmin public {\r\n        minVolumes[money] = vol;\r\n\t}\r\n                                   \r\n\r\n\tfunction setText(uint160 key,string memory txt)\r\n\t             \t\t\t\t\t  \tonlyAdmin public{\r\n\t\ttexts[key] = txt;\r\n\r\n\t}\r\n\r\n\tfunction withdrawServiceFee(address money)\r\n\t\t        \t            \tonlyAdmin public {\r\n\t\t\tuint fee = serviceFees[money];\r\n\t\t\tuint remain = fee/10;\r\n\t\t\trequire(remain\u003e0,\"Tiny order\");\r\n            serviceFees[money] = remain; //keep not zero\r\n\t\t\tbool succ = moneySend(money,msg.sender,fee-remain);\r\n\t\t\trequire(succ,\"Failed funds to admin\");\r\n\r\n\t}\r\n\r\n\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"name\":\"AddBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"name\":\"AddSellOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moneyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"BuyerReceivedCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"CancelOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moneyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"LockBuyOrder\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moneyAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"LockSellOrder\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moneyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"amount8\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"times\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"buyerCoinAddress\",\"type\":\"string\"}],\"name\":\"addBuyOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"moneyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"amount8\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"times\",\"type\":\"uint8\"}],\"name\":\"addSellOrder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"name\":\"buyerReceivedCoins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succSeller\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"succBuyer\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"name\":\"cancelOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succ\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"name\":\"getOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"amount8\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint136\",\"name\":\"moneyAmt\",\"type\":\"uint136\"},{\"internalType\":\"uint8\",\"name\":\"times\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"coinAddr\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"sellTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"buyTime\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"help\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"txt\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byts\",\"type\":\"bytes\"}],\"name\":\"hex2string\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"}],\"name\":\"lockBuyOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succ\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"orderkey\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"buyerCoinAddress\",\"type\":\"string\"}],\"name\":\"lockSellOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"succ\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minVolumes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"chainCoin\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"queryType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gtMoneyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltMoneyAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gtPrice18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ltPrice18\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeBefore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"queryOrders\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"keyvalues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"serviceFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vol\",\"type\":\"uint256\"}],\"name\":\"setMinVolume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"key\",\"type\":\"uint160\"},{\"internalType\":\"string\",\"name\":\"txt\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"string2hex\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sym\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"texts\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"money\",\"type\":\"address\"}],\"name\":\"withdrawServiceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "SmartOTC",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "20000",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://d96967d19518cf2f9553d1e5f177a444057457b78324556dbd34caa37041184a"
    }
  ]
}
