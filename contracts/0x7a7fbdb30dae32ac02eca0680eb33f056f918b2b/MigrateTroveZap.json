{
  "TxHash": "0x20892a231a4202ea7ae2371902d07ac2f19465624108661475552efc37c11e4a",
  "ContractAddress": "0x7a7fbdb30dae32ac02eca0680eb33f056f918b2b",
  "Name": "MigrateTroveZap",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity =0.8.19 ^0.8.0 ^0.8.1;\r\n\r\n// contracts/interfaces/IBorrowerOperations.sol\r\n\r\ninterface IBorrowerOperations {\r\n    struct Balances {\r\n        uint256[] collaterals;\r\n        uint256[] debts;\r\n        uint256[] prices;\r\n    }\r\n\r\n    event BorrowingFeePaid(address indexed borrower, uint256 amount);\r\n    event CollateralConfigured(address troveManager, address collateralToken);\r\n    event TroveCreated(address indexed _borrower, uint256 arrayIndex);\r\n    event TroveManagerRemoved(address troveManager);\r\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 stake, uint8 operation);\r\n\r\n    function addColl(\r\n        address troveManager,\r\n        address account,\r\n        uint256 _collateralAmount,\r\n        address _upperHint,\r\n        address _lowerHint\r\n    ) external;\r\n\r\n    function adjustTrove(\r\n        address troveManager,\r\n        address account,\r\n        uint256 _maxFeePercentage,\r\n        uint256 _collDeposit,\r\n        uint256 _collWithdrawal,\r\n        uint256 _debtChange,\r\n        bool _isDebtIncrease,\r\n        address _upperHint,\r\n        address _lowerHint\r\n    ) external;\r\n\r\n    function closeTrove(address troveManager, address account) external;\r\n\r\n    function configureCollateral(address troveManager, address collateralToken) external;\r\n\r\n    function fetchBalances() external returns (Balances memory balances);\r\n\r\n    function getGlobalSystemBalances() external returns (uint256 totalPricedCollateral, uint256 totalDebt);\r\n\r\n    function getTCR() external returns (uint256 globalTotalCollateralRatio);\r\n\r\n    function openTrove(\r\n        address troveManager,\r\n        address account,\r\n        uint256 _maxFeePercentage,\r\n        uint256 _collateralAmount,\r\n        uint256 _debtAmount,\r\n        address _upperHint,\r\n        address _lowerHint\r\n    ) external;\r\n\r\n    function removeTroveManager(address troveManager) external;\r\n\r\n    function repayDebt(\r\n        address troveManager,\r\n        address account,\r\n        uint256 _debtAmount,\r\n        address _upperHint,\r\n        address _lowerHint\r\n    ) external;\r\n\r\n    function setDelegateApproval(address _delegate, bool _isApproved) external;\r\n\r\n    function setMinNetDebt(uint256 _minNetDebt) external;\r\n\r\n    function withdrawColl(\r\n        address troveManager,\r\n        address account,\r\n        uint256 _collWithdrawal,\r\n        address _upperHint,\r\n        address _lowerHint\r\n    ) external;\r\n\r\n    function withdrawDebt(\r\n        address troveManager,\r\n        address account,\r\n        uint256 _maxFeePercentage,\r\n        uint256 _debtAmount,\r\n        address _upperHint,\r\n        address _lowerHint\r\n    ) external;\r\n\r\n    function checkRecoveryMode(uint256 TCR) external pure returns (bool);\r\n\r\n    function CCR() external view returns (uint256);\r\n\r\n    function DEBT_GAS_COMPENSATION() external view returns (uint256);\r\n\r\n    function DECIMAL_PRECISION() external view returns (uint256);\r\n\r\n    function PERCENT_DIVISOR() external view returns (uint256);\r\n\r\n    function PRISMA_CORE() external view returns (address);\r\n\r\n    function _100pct() external view returns (uint256);\r\n\r\n    function debtToken() external view returns (address);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function getCompositeDebt(uint256 _debt) external view returns (uint256);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function isApprovedDelegate(address owner, address caller) external view returns (bool isApproved);\r\n\r\n    function minNetDebt() external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function troveManagersData(address) external view returns (address collateralToken, uint16 index);\r\n}\r\n\r\n// contracts/interfaces/IDebtToken.sol\r\n\r\ninterface IDebtToken {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint256 _amount);\r\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\r\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes _toAddress, uint256 _amount);\r\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint256 _minDstGas);\r\n    event SetPrecrime(address precrime);\r\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\r\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\r\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function burn(address _account, uint256 _amount) external;\r\n\r\n    function burnWithGasCompensation(address _account, uint256 _amount) external returns (bool);\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\r\n\r\n    function enableTroveManager(address _troveManager) external;\r\n\r\n    function flashLoan(address receiver, address token, uint256 amount, bytes calldata data) external returns (bool);\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n\r\n    function mint(address _account, uint256 _amount) external;\r\n\r\n    function mintWithGasCompensation(address _account, uint256 _amount) external returns (bool);\r\n\r\n    function nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint64 _nonce,\r\n        bytes calldata _payload\r\n    ) external;\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function returnFromPool(address _poolAddress, address _receiver, uint256 _amount) external;\r\n\r\n    function sendToSP(address _sender, uint256 _amount) external;\r\n\r\n    function setConfig(uint16 _version, uint16 _chainId, uint256 _configType, bytes calldata _config) external;\r\n\r\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint256 _minGas) external;\r\n\r\n    function setPayloadSizeLimit(uint16 _dstChainId, uint256 _size) external;\r\n\r\n    function setPrecrime(address _precrime) external;\r\n\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external;\r\n\r\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external;\r\n\r\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams) external;\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function retryMessage(\r\n        uint16 _srcChainId,\r\n        bytes calldata _srcAddress,\r\n        uint64 _nonce,\r\n        bytes calldata _payload\r\n    ) external payable;\r\n\r\n    function sendFrom(\r\n        address _from,\r\n        uint16 _dstChainId,\r\n        bytes calldata _toAddress,\r\n        uint256 _amount,\r\n        address _refundAddress,\r\n        address _zroPaymentAddress,\r\n        bytes calldata _adapterParams\r\n    ) external payable;\r\n\r\n    function DEBT_GAS_COMPENSATION() external view returns (uint256);\r\n\r\n    function DEFAULT_PAYLOAD_SIZE_LIMIT() external view returns (uint256);\r\n\r\n    function FLASH_LOAN_FEE() external view returns (uint256);\r\n\r\n    function NO_EXTRA_GAS() external view returns (uint256);\r\n\r\n    function PT_SEND() external view returns (uint16);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function borrowerOperationsAddress() external view returns (address);\r\n\r\n    function circulatingSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function domainSeparator() external view returns (bytes32);\r\n\r\n    function estimateSendFee(\r\n        uint16 _dstChainId,\r\n        bytes calldata _toAddress,\r\n        uint256 _amount,\r\n        bool _useZro,\r\n        bytes calldata _adapterParams\r\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function failedMessages(uint16, bytes calldata, uint64) external view returns (bytes32);\r\n\r\n    function flashFee(address token, uint256 amount) external view returns (uint256);\r\n\r\n    function gasPool() external view returns (address);\r\n\r\n    function getConfig(\r\n        uint16 _version,\r\n        uint16 _chainId,\r\n        address,\r\n        uint256 _configType\r\n    ) external view returns (bytes memory);\r\n\r\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory);\r\n\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    function lzEndpoint() external view returns (address);\r\n\r\n    function maxFlashLoan(address token) external view returns (uint256);\r\n\r\n    function minDstGasLookup(uint16, uint16) external view returns (uint256);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function payloadSizeLimitLookup(uint16) external view returns (uint256);\r\n\r\n    function permitTypeHash() external view returns (bytes32);\r\n\r\n    function precrime() external view returns (address);\r\n\r\n    function stabilityPoolAddress() external view returns (address);\r\n\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function token() external view returns (address);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function troveManager(address) external view returns (bool);\r\n\r\n    function trustedRemoteLookup(uint16) external view returns (bytes memory);\r\n\r\n    function useCustomAdapterParams() external view returns (bool);\r\n\r\n    function version() external view returns (string memory);\r\n}\r\n\r\n// contracts/interfaces/ITroveManager.sol\r\n\r\ninterface ITroveManager {\r\n    event BaseRateUpdated(uint256 _baseRate);\r\n    event CollateralSent(address _to, uint256 _amount);\r\n    event LTermsUpdated(uint256 _L_collateral, uint256 _L_debt);\r\n    event LastFeeOpTimeUpdated(uint256 _lastFeeOpTime);\r\n    event Redemption(\r\n        uint256 _attemptedDebtAmount,\r\n        uint256 _actualDebtAmount,\r\n        uint256 _collateralSent,\r\n        uint256 _collateralFee\r\n    );\r\n    event RewardClaimed(address indexed account, address indexed recipient, uint256 claimed);\r\n    event SystemSnapshotsUpdated(uint256 _totalStakesSnapshot, uint256 _totalCollateralSnapshot);\r\n    event TotalStakesUpdated(uint256 _newTotalStakes);\r\n    event TroveIndexUpdated(address _borrower, uint256 _newIndex);\r\n    event TroveSnapshotsUpdated(uint256 _L_collateral, uint256 _L_debt);\r\n    event TroveUpdated(address indexed _borrower, uint256 _debt, uint256 _coll, uint256 _stake, uint8 _operation);\r\n\r\n    function addCollateralSurplus(address borrower, uint256 collSurplus) external;\r\n\r\n    function applyPendingRewards(address _borrower) external returns (uint256 coll, uint256 debt);\r\n\r\n    function claimCollateral(address _receiver) external;\r\n\r\n    function claimReward(address receiver) external returns (uint256);\r\n\r\n    function closeTrove(address _borrower, address _receiver, uint256 collAmount, uint256 debtAmount) external;\r\n\r\n    function closeTroveByLiquidation(address _borrower) external;\r\n\r\n    function collectInterests() external;\r\n\r\n    function decayBaseRateAndGetBorrowingFee(uint256 _debt) external returns (uint256);\r\n\r\n    function decreaseDebtAndSendCollateral(address account, uint256 debt, uint256 coll) external;\r\n\r\n    function fetchPrice() external returns (uint256);\r\n\r\n    function finalizeLiquidation(\r\n        address _liquidator,\r\n        uint256 _debt,\r\n        uint256 _coll,\r\n        uint256 _collSurplus,\r\n        uint256 _debtGasComp,\r\n        uint256 _collGasComp\r\n    ) external;\r\n\r\n    function getEntireSystemBalances() external returns (uint256, uint256, uint256);\r\n\r\n    function movePendingTroveRewardsToActiveBalances(uint256 _debt, uint256 _collateral) external;\r\n\r\n    function notifyRegisteredId(uint256[] calldata _assignedIds) external returns (bool);\r\n\r\n    function openTrove(\r\n        address _borrower,\r\n        uint256 _collateralAmount,\r\n        uint256 _compositeDebt,\r\n        uint256 NICR,\r\n        address _upperHint,\r\n        address _lowerHint,\r\n        bool _isRecoveryMode\r\n    ) external returns (uint256 stake, uint256 arrayIndex);\r\n\r\n    function redeemCollateral(\r\n        uint256 _debtAmount,\r\n        address _firstRedemptionHint,\r\n        address _upperPartialRedemptionHint,\r\n        address _lowerPartialRedemptionHint,\r\n        uint256 _partialRedemptionHintNICR,\r\n        uint256 _maxIterations,\r\n        uint256 _maxFeePercentage\r\n    ) external;\r\n\r\n    function setAddresses(address _priceFeedAddress, address _sortedTrovesAddress, address _collateralToken) external;\r\n\r\n    function setParameters(\r\n        uint256 _minuteDecayFactor,\r\n        uint256 _redemptionFeeFloor,\r\n        uint256 _maxRedemptionFee,\r\n        uint256 _borrowingFeeFloor,\r\n        uint256 _maxBorrowingFee,\r\n        uint256 _interestRateInBPS,\r\n        uint256 _maxSystemDebt,\r\n        uint256 _MCR\r\n    ) external;\r\n\r\n    function setPaused(bool _paused) external;\r\n\r\n    function setPriceFeed(address _priceFeedAddress) external;\r\n\r\n    function startSunset() external;\r\n\r\n    function updateBalances() external;\r\n\r\n    function updateTroveFromAdjustment(\r\n        bool _isRecoveryMode,\r\n        bool _isDebtIncrease,\r\n        uint256 _debtChange,\r\n        uint256 _netDebtChange,\r\n        bool _isCollIncrease,\r\n        uint256 _collChange,\r\n        address _upperHint,\r\n        address _lowerHint,\r\n        address _borrower,\r\n        address _receiver\r\n    ) external returns (uint256, uint256, uint256);\r\n\r\n    function vaultClaimReward(address claimant, address) external returns (uint256);\r\n\r\n    function BOOTSTRAP_PERIOD() external view returns (uint256);\r\n\r\n    function CCR() external view returns (uint256);\r\n\r\n    function DEBT_GAS_COMPENSATION() external view returns (uint256);\r\n\r\n    function DECIMAL_PRECISION() external view returns (uint256);\r\n\r\n    function L_collateral() external view returns (uint256);\r\n\r\n    function L_debt() external view returns (uint256);\r\n\r\n    function MAX_INTEREST_RATE_IN_BPS() external view returns (uint256);\r\n\r\n    function MCR() external view returns (uint256);\r\n\r\n    function PERCENT_DIVISOR() external view returns (uint256);\r\n\r\n    function PRISMA_CORE() external view returns (address);\r\n\r\n    function Troves(\r\n        address\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            uint256 debt,\r\n            uint256 coll,\r\n            uint256 stake,\r\n            uint8 status,\r\n            uint128 arrayIndex,\r\n            uint256 activeInterestIndex\r\n        );\r\n\r\n    function accountLatestMint(address) external view returns (uint32 amount, uint32 week, uint32 day);\r\n\r\n    function baseRate() external view returns (uint256);\r\n\r\n    function borrowerOperationsAddress() external view returns (address);\r\n\r\n    function borrowingFeeFloor() external view returns (uint256);\r\n\r\n    function claimableReward(address account) external view returns (uint256);\r\n\r\n    function collateralToken() external view returns (address);\r\n\r\n    function dailyMintReward(uint256) external view returns (uint256);\r\n\r\n    function debtToken() external view returns (address);\r\n\r\n    function defaultedCollateral() external view returns (uint256);\r\n\r\n    function defaultedDebt() external view returns (uint256);\r\n\r\n    function emissionId() external view returns (uint16 debt, uint16 minting);\r\n\r\n    function getBorrowingFee(uint256 _debt) external view returns (uint256);\r\n\r\n    function getBorrowingFeeWithDecay(uint256 _debt) external view returns (uint256);\r\n\r\n    function getBorrowingRate() external view returns (uint256);\r\n\r\n    function getBorrowingRateWithDecay() external view returns (uint256);\r\n\r\n    function getCurrentICR(address _borrower, uint256 _price) external view returns (uint256);\r\n\r\n    function getEntireDebtAndColl(\r\n        address _borrower\r\n    ) external view returns (uint256 debt, uint256 coll, uint256 pendingDebtReward, uint256 pendingCollateralReward);\r\n\r\n    function getEntireSystemColl() external view returns (uint256);\r\n\r\n    function getEntireSystemDebt() external view returns (uint256);\r\n\r\n    function getNominalICR(address _borrower) external view returns (uint256);\r\n\r\n    function getPendingCollAndDebtRewards(address _borrower) external view returns (uint256, uint256);\r\n\r\n    function getRedemptionFeeWithDecay(uint256 _collateralDrawn) external view returns (uint256);\r\n\r\n    function getRedemptionRate() external view returns (uint256);\r\n\r\n    function getRedemptionRateWithDecay() external view returns (uint256);\r\n\r\n    function getTotalActiveCollateral() external view returns (uint256);\r\n\r\n    function getTotalActiveDebt() external view returns (uint256);\r\n\r\n    function getTotalMints(uint256 week) external view returns (uint32[7] memory);\r\n\r\n    function getTroveCollAndDebt(address _borrower) external view returns (uint256 coll, uint256 debt);\r\n\r\n    function getTroveFromTroveOwnersArray(uint256 _index) external view returns (address);\r\n\r\n    function getTroveOwnersCount() external view returns (uint256);\r\n\r\n    function getTroveStake(address _borrower) external view returns (uint256);\r\n\r\n    function getTroveStatus(address _borrower) external view returns (uint256);\r\n\r\n    function getWeek() external view returns (uint256 week);\r\n\r\n    function getWeekAndDay() external view returns (uint256, uint256);\r\n\r\n    function guardian() external view returns (address);\r\n\r\n    function hasPendingRewards(address _borrower) external view returns (bool);\r\n\r\n    function interestPayable() external view returns (uint256);\r\n\r\n    function interestRate() external view returns (uint256);\r\n\r\n    function lastFeeOperationTime() external view returns (uint256);\r\n\r\n    function lastUpdate() external view returns (uint32);\r\n\r\n    function liquidationManager() external view returns (address);\r\n\r\n    function maxSystemDebt() external view returns (uint256);\r\n\r\n    function minuteDecayFactor() external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function paused() external view returns (bool);\r\n\r\n    function periodFinish() external view returns (uint32);\r\n\r\n    function priceFeed() external view returns (address);\r\n\r\n    function redemptionFeeFloor() external view returns (uint256);\r\n\r\n    function rewardIntegral() external view returns (uint256);\r\n\r\n    function rewardIntegralFor(address) external view returns (uint256);\r\n\r\n    function rewardRate() external view returns (uint128);\r\n\r\n    function rewardSnapshots(address) external view returns (uint256 collateral, uint256 debt);\r\n\r\n    function sortedTroves() external view returns (address);\r\n\r\n    function sunsetting() external view returns (bool);\r\n\r\n    function surplusBalances(address) external view returns (uint256);\r\n\r\n    function totalCollateralSnapshot() external view returns (uint256);\r\n\r\n    function totalStakes() external view returns (uint256);\r\n\r\n    function totalStakesSnapshot() external view returns (uint256);\r\n\r\n    function vault() external view returns (address);\r\n}\r\n\r\n// contracts/token/ERC20/IERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// contracts/token/ERC20/extensions/IERC20Permit.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// contracts/access/Ownable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// contracts/security/Pausable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n// contracts/token/ERC20/utils/SafeERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success \u0026\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026 Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n// BaseZap.sol\r\n\r\n/**\r\n    @title Base Zap\r\n    @notice Abstract contract with common functions for Prisma Zaps\r\n            for the same collateral.\r\n */\r\nabstract contract BaseZap is Ownable, Pausable {\r\n    using SafeERC20 for IERC20;\r\n    using Address for address;\r\n\r\n    event EmergencyEtherRecovered(uint256 amount);\r\n    event EmergencyERC20Recovered(address tokenAddress, uint256 tokenAmount);\r\n\r\n    // Admin routines ---------------------------------------------------------------------------------------------------\r\n\r\n    /// @notice For emergencies if something gets stuck\r\n    function recoverEther(uint256 amount) external onlyOwner {\r\n        (bool success, ) = owner().call{ value: amount }(\"\");\r\n        require(success, \"Invalid transfer\");\r\n\r\n        emit EmergencyEtherRecovered(amount);\r\n    }\r\n\r\n    /// @notice For emergencies if someone accidentally sent some ERC20 tokens here\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\r\n        IERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\r\n\r\n        emit EmergencyERC20Recovered(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    function pause() external virtual whenNotPaused onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external virtual whenPaused onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n\r\n// MigrateTroveZap.sol\r\n\r\n/**\r\n    @title Prisma Migrate Trove Zap\r\n    @notice Zap to automate migrating to a different version of a Trove Manager\r\n            for the same collateral.\r\n */\r\ncontract MigrateTroveZap is BaseZap {\r\n    bytes32 private constant _RETURN_VALUE = keccak256(\"ERC3156FlashBorrower.onFlashLoan\");\r\n    uint256 public immutable DEBT_GAS_COMPENSATION;\r\n\r\n    IBorrowerOperations public immutable borrowerOps;\r\n    IDebtToken public immutable debtToken;\r\n    // State  ---------------------------------------------------------------------------------------------------------\r\n    mapping(address collateral =\u003e bool approved) public approvedCollaterals;\r\n    // Events ---------------------------------------------------------------------------------------------------------\r\n\r\n    event TroveMigrated(address account, address troveManagerFrom, address troveManagerTo, uint256 coll, uint256 debt);\r\n    event NewTokenRegistered(address token);\r\n\r\n    constructor(IBorrowerOperations _borrowerOps, IDebtToken _debtToken) {\r\n        borrowerOps = _borrowerOps;\r\n        debtToken = _debtToken;\r\n        IDebtToken(debtToken).approve(address(_borrowerOps), type(uint256).max);\r\n        IDebtToken(debtToken).approve(address(_debtToken), type(uint256).max);\r\n        DEBT_GAS_COMPENSATION = _debtToken.DEBT_GAS_COMPENSATION();\r\n    }\r\n\r\n    // Public functions -------------------------------------------------------------------------------------------------\r\n\r\n    /// @notice Flashloan callback function\r\n    /// @dev This callback fails if there is any leftover collateral in the Zap\r\n    function onFlashLoan(\r\n        address originator,\r\n        address,\r\n        uint256 amount,\r\n        uint256 fee,\r\n        bytes calldata data\r\n    ) external whenNotPaused returns (bytes32) {\r\n        require(msg.sender == address(debtToken), \"!DebtToken\");\r\n        require(originator == address(this), \"!Zap\");\r\n        (\r\n            address collateralFrom,\r\n            address account,\r\n            address troveManagerFrom,\r\n            address troveManagerTo,\r\n            uint256 maxFeePercentage,\r\n            uint256 coll,\r\n            address upperHint,\r\n            address lowerHint\r\n        ) = abi.decode(data, (address, address, address, address, uint256, uint256, address, address));\r\n        uint256 toMint = amount + fee;\r\n        uint256 balanceBefore = IERC20(collateralFrom).balanceOf(address(this));\r\n        borrowerOps.closeTrove(troveManagerFrom, account);\r\n        borrowerOps.openTrove(troveManagerTo, account, maxFeePercentage, coll, toMint, upperHint, lowerHint);\r\n        require(IERC20(collateralFrom).balanceOf(address(this)) == balanceBefore, \"Invalid migration amount\");\r\n        return _RETURN_VALUE;\r\n    }\r\n\r\n    /**\r\n        @notice Migrates a trove to another TroveManager for the same collateral\r\n        @param troveManagerFrom Trove manager to migrate the user trove from \r\n        @param troveManagerTo Trove manager to migrate the user trove to\r\n        @param maxFeePercentage Maximum fee accepted by the user for this operation\r\n        @param upperHint Upper Hint for locating the trove in the list of troves\r\n        @param lowerHint Lower Hint for locating the trove in the list of troves\r\n     */\r\n    function migrateTrove(\r\n        ITroveManager troveManagerFrom,\r\n        ITroveManager troveManagerTo,\r\n        uint256 maxFeePercentage,\r\n        address upperHint,\r\n        address lowerHint\r\n    ) external {\r\n        (address collateralFrom, ) = borrowerOps.troveManagersData(address(troveManagerFrom));\r\n        {\r\n            (address collateralTo, ) = borrowerOps.troveManagersData(address(troveManagerTo));\r\n            require(collateralFrom != address(0), \"Invalid TM\");\r\n            require(address(troveManagerTo) != address(troveManagerFrom), \"Cannot migrate to same TM\");\r\n            //require(collateralFrom == collateralTo, \"Migration not supported\");\r\n        }\r\n        (uint256 coll, uint256 debt) = troveManagerFrom.getTroveCollAndDebt(msg.sender);\r\n        require(debt \u003e 0, \"Trove not active\");\r\n        // One SLOAD to allow set and forget\r\n        if (!approvedCollaterals[collateralFrom]) {\r\n            IERC20(collateralFrom).approve(address(borrowerOps), type(uint256).max);\r\n            approvedCollaterals[collateralFrom] = true;\r\n        }\r\n        debtToken.flashLoan(\r\n            address(this),\r\n            address(debtToken),\r\n            debt - DEBT_GAS_COMPENSATION,\r\n            abi.encode(\r\n                collateralFrom,\r\n                msg.sender,\r\n                address(troveManagerFrom),\r\n                address(troveManagerTo),\r\n                maxFeePercentage,\r\n                coll,\r\n                upperHint,\r\n                lowerHint\r\n            )\r\n        );\r\n        emit TroveMigrated(msg.sender, address(troveManagerFrom), address(troveManagerTo), coll, debt);\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"_borrowerOps\",\"type\":\"address\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"_debtToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyERC20Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyEtherRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"NewTokenRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"troveManagerFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"troveManagerTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coll\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"TroveMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEBT_GAS_COMPENSATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"approvedCollaterals\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowerOps\",\"outputs\":[{\"internalType\":\"contract IBorrowerOperations\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITroveManager\",\"name\":\"troveManagerFrom\",\"type\":\"address\"},{\"internalType\":\"contract ITroveManager\",\"name\":\"troveManagerTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"upperHint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lowerHint\",\"type\":\"address\"}],\"name\":\"migrateTrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"originator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onFlashLoan\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "MigrateTroveZap",
      "CompilerVersion": "v0.8.19+commit.7dd6d404",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "00000000000000000000000072c590349535ad52e6953744cb2a36b4095427190000000000000000000000004591dbff62656e7859afe5e45f6f47d3669fbb28",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://7b7c077c827150d8c69466fd4c49d372c2e4b9f29b2d02074990a377a37aab4b"
    }
  ]
}
