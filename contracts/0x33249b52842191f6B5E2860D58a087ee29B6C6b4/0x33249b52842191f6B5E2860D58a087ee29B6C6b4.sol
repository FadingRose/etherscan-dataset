{{
  "language": "Solidity",
  "settings": {
    "evmVersion": "paris",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 4000
    },
    "remappings": [],
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  },
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/core/DarkpoolAssetManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\nimport {BaseAssetManager} from \"./base/BaseAssetManager.sol\";\nimport {DarkpoolInputBuilder} from \"./DarkpoolInputBuilder.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title DarkpoolAssetManager\n * @dev Asset manager for deposit/withdrawal/transfer/join/split/join-split.\n */\ncontract DarkpoolAssetManager is BaseAssetManager, DarkpoolInputBuilder {\n    using SafeERC20 for IERC20;\n\n    event Deposit(\n        address depositor,\n        bytes32 noteOut, \n        uint256 amount, \n        address asset\n    );\n\n    event Withdraw(\n        bytes32 nullifierIn,\n        uint256 amount,\n        address asset,\n        address recipient\n    );\n\n    event Transfer(\n        bytes32 nullifierIn, \n        uint256 amount,\n        address asset,\n        bytes32 noteOut,\n        bytes32 noteFooter\n    );\n\n    event Split(\n        bytes32 nullifierIn,\n        bytes32 noteOut1,\n        bytes32 noteOut2\n    );\n\n    event JoinSplit(\n        bytes32 nullifierIn1,\n        bytes32 nullifierIn2,\n        bytes32 noteOut1,\n        bytes32 noteOut2\n    );\n\n    event Join(\n        bytes32 nullifierIn1,\n        bytes32 nullifierIn2,\n        bytes32 noteOut1\n    );\n\n    constructor(\n        address assetPoolERC20,\n        address assetPoolERC721,\n        address assetPoolETH,\n        address verifierHub,\n        address relayerHub,\n        address feeManager,\n        address comlianceManager,\n        address merkleTreeOperator,\n        address mimc254,\n        address initialOwner\n    )\n        BaseAssetManager(\n            assetPoolERC20,\n            assetPoolERC721,\n            assetPoolETH,\n            verifierHub,\n            relayerHub,\n            feeManager,\n            comlianceManager,\n            merkleTreeOperator,\n            mimc254,\n            initialOwner\n        )\n        DarkpoolInputBuilder(P)\n    {}\n\n    /**\n     * @dev Function to deposit ERC20 tokens, guarded by the compliance manager.\n     * @param _asset Address of the ERC20 token.\n     * @param _amount Amount of ERC20 tokens to be deposited.\n     * @param _noteCommitment Deposit note for commiting to the merkle tree.\n     * @param _proof Deposit proof.\n     */\n    function depositERC20(\n        address _asset,\n        uint256 _amount,\n        bytes32 _noteCommitment,\n        bytes32 _noteFooter,\n        bytes calldata _proof\n    ) public {\n        require(\n            _complianceManager.isAuthorized(address(this), msg.sender),\n            \"BaseAssetManager: invalid credential\"\n        );\n        _validateNoteIsNotCreated(_noteCommitment);\n        _validateNoteFooterIsNotUsed(_noteFooter);\n\n        DepositRawInputs memory inputs = DepositRawInputs(\n            msg.sender,\n            _noteCommitment,\n            _asset,\n            _amount,\n            _noteFooter\n        );\n\n        _verifyProof(_proof, _buildDepositInputs(inputs), \"deposit\");\n        _registerNoteFooter(_noteFooter);\n\n        IERC20(_asset).safeTransferFrom(\n            msg.sender,\n            address(_assetPoolERC20),\n            _amount\n        );\n\n        _postDeposit(_noteCommitment);\n\n        emit Deposit(msg.sender, _noteCommitment, _amount, _asset);\n    }\n\n    /**\n     * @dev Function to deposit ETH, guarded by the compliance manager.\n     * @param _noteCommitment Deposit note for commiting to the merkle tree.\n     * @param _proof Deposit proof.\n     */\n    function depositETH(\n        bytes32 _noteCommitment,\n        bytes32 _noteFooter,\n        bytes calldata _proof\n    ) public payable {\n        require(\n            _complianceManager.isAuthorized(address(this), msg.sender),\n            \"BaseAssetManager: invalid credential\"\n        );\n        _validateNoteIsNotCreated(_noteCommitment);\n        _validateNoteFooterIsNotUsed(_noteFooter);\n\n        DepositRawInputs memory inputs = DepositRawInputs(\n            msg.sender,\n            _noteCommitment,\n            ETH_ADDRESS,\n            msg.value,\n            _noteFooter\n        );\n\n        _verifyProof(_proof, _buildDepositInputs(inputs), \"deposit\");\n        _registerNoteFooter(_noteFooter);\n\n        (bool success, ) = address(_assetPoolETH).call{value: msg.value}(\"\");\n        require(success, \"depositETH: transfer failed\");\n\n        _postDeposit(_noteCommitment);\n\n        emit Deposit(msg.sender, _noteCommitment, msg.value, ETH_ADDRESS);\n    }\n\n    /**\n     * @dev Function to withdraw ERC20 tokens, guarded by the compliance manager.\n     * @param _asset Address of the ERC20 token.\n     * @param _proof Withdraw proof.\n     * @param _merkleRoot Merkle root of the merkle tree.\n     * @param _nullifier Nullifier of the note to be withdrawn.\n     * @param _recipient Address of the recipient.\n     * @param _relayer Address of the relayer.\n     * @param _amount Amount of ERC20 tokens to be withdrawn.\n     * @param _relayerGasFee Gas fee to refund to the relayer.\n     */\n    function withdrawERC20(\n        address _asset,\n        bytes calldata _proof,\n        bytes32 _merkleRoot,\n        bytes32 _nullifier,\n        address _recipient,\n        address _relayer,\n        uint256 _amount,\n        uint256 _relayerGasFee\n    ) public {\n        require(\n            _complianceManager.isAuthorized(address(this), _recipient),\n            \"BaseAssetManager: invalid credential\"\n        );\n\n        _validateMerkleRootIsAllowed(_merkleRoot);\n        _validateNullifierIsNotUsed(_nullifier);\n        _validateNullifierIsNotLocked(_nullifier);\n        _validateRelayerIsRegistered(_relayer);\n        _validateSenderIsRelayer(_relayer);\n\n        WithdrawRawInputs memory inputs = WithdrawRawInputs(\n            _recipient,\n            _merkleRoot,\n            _asset,\n            _amount,\n            _nullifier,\n            _relayer\n        );\n\n        _verifyProof(_proof, _buildWithdrawInputs(inputs), \"withdraw\");\n\n        _postWithdraw(_nullifier);\n\n        _releaseERC20WithFee(\n            _asset,\n            _recipient,\n            _relayer,\n            _relayerGasFee,\n            _amount\n        );\n\n        emit Withdraw(_nullifier, _amount, _asset, _recipient);\n    }\n\n    /**\n     * @dev Function to withdraw ETH from darkpool, guarded by the compliance manager.\n     * @param _proof Withdraw proof.\n     * @param _merkleRoot Merkle root of the merkle tree.\n     * @param _nullifier Nullifier of the note to be withdrawn.\n     * @param _recipient Address of the recipient.\n     * @param _relayer Address of the relayer.\n     * @param _relayerGasFee Gas fee to refund to the relayer.\n     * @param _amount Amount of ETH to be withdrawn.\n     */\n    function withdrawETH(\n        bytes calldata _proof,\n        bytes32 _merkleRoot,\n        bytes32 _nullifier,\n        address payable _recipient,\n        address payable _relayer,\n        uint256 _relayerGasFee,\n        uint256 _amount\n    ) public {\n        require(\n            _complianceManager.isAuthorized(address(this), _recipient),\n            \"BaseAssetManager: invalid credential\"\n        );\n\n        _validateMerkleRootIsAllowed(_merkleRoot);\n        _validateNullifierIsNotUsed(_nullifier);\n        _validateNullifierIsNotLocked(_nullifier);\n        _validateRelayerIsRegistered(_relayer);\n        _validateSenderIsRelayer(_relayer);\n\n        WithdrawRawInputs memory inputs = WithdrawRawInputs(\n            _recipient,\n            _merkleRoot,\n            ETH_ADDRESS,\n            _amount,\n            _nullifier,\n            _relayer\n        );\n\n        _verifyProof(_proof, _buildWithdrawInputs(inputs), \"withdraw\");\n        \n        _postWithdraw(_nullifier);\n\n        _releaseETHWithFee(_recipient, _relayer, _relayerGasFee, _amount);\n\n        emit Withdraw(_nullifier, _amount, ETH_ADDRESS, _recipient);\n    }\n\n    /**\n     * @dev Function to transfer assets within the darkpool.\n     * @param _merkleRoot Merkle root of the merkle tree.\n     * @param _nullifierIn Nullifier of the input note.\n     * @param _noteOut note of the transfee.\n     * @param _proof Transfer proof.\n     */\n    function transfer(\n        bytes32 _merkleRoot,\n        bytes32 _nullifierIn,\n        address _asset,\n        uint256 _amount,\n        bytes32 _noteOut,\n        bytes32 _noteFooter,\n        bytes calldata _proof\n    ) public {\n        _validateMerkleRootIsAllowed(_merkleRoot);\n        _validateNullifierIsNotUsed(_nullifierIn);\n        _validateNullifierIsNotLocked(_nullifierIn);\n        _validateNoteIsNotCreated(_noteOut);\n        _validateNoteFooterIsNotUsed(_noteFooter);\n\n        TransferRawInputs memory inputs = TransferRawInputs(\n            _merkleRoot,\n            _asset,\n            _amount,\n            _nullifierIn,\n            _noteOut,\n            _noteFooter\n        );\n\n        _verifyProof(_proof, _buildTransferInputs(inputs), \"transfer\");\n        _registerNoteFooter(_noteFooter);\n        _postWithdraw(_nullifierIn);\n        _postDeposit(_noteOut);\n\n        emit Transfer(\n            _nullifierIn,\n            _amount,\n            _asset,\n            _noteOut,\n            _noteFooter\n        );\n    }\n\n    /**\n     * @dev Function to split a note into two.\n     * @param _merkleRoot Merkle root of the merkle tree.\n     * @param _nullifierIn1 Nullifier of the input note.\n     * @param _noteOut1 note of the first output note.\n     * @param _noteOut2 note of the second output note.\n     * @param _proof Split proof.\n     */\n    function split(\n        bytes32 _merkleRoot,\n        bytes32 _nullifierIn1,\n        bytes32 _noteOut1,\n        bytes32 _noteOut2,\n        bytes32 _noteFooter1,\n        bytes32 _noteFooter2,\n        bytes calldata _proof\n    ) public payable {\n        _validateMerkleRootIsAllowed(_merkleRoot);\n        _validateNullifierIsNotUsed(_nullifierIn1);\n        _validateNullifierIsNotLocked(_nullifierIn1);\n        _validateNoteIsNotCreated(_noteOut1);\n        _validateNoteIsNotCreated(_noteOut2);\n        _validateNoteFooterIsNotUsed(_noteFooter1);\n        _validateNoteFooterIsNotUsed(_noteFooter2);\n\n        if(_noteFooter1 == _noteFooter2) {\n            revert NoteFooterDuplicated();\n        }\n\n        SplitRawInputs memory inputs = SplitRawInputs(\n            _merkleRoot,\n            _nullifierIn1,\n            _noteOut1,\n            _noteOut2,\n            _noteFooter1,\n            _noteFooter2\n        );\n\n        _verifyProof(_proof, _buildSplitInputs(inputs), \"split\");\n        _registerNoteFooter(_noteFooter1);\n        _registerNoteFooter(_noteFooter2);\n        _postWithdraw(_nullifierIn1);\n        _postDeposit(_noteOut1);\n        _postDeposit(_noteOut2);\n\n        emit Split(_nullifierIn1, _noteOut1, _noteOut2);\n    }\n\n    /**\n     * @dev Function to reassemble two notes' assets.\n     * @param _merkleRoot Merkle root of the merkle tree.\n     * @param _nullifierIn1 Nullifier of the first input note.\n     * @param _nullifierIn2 Nullifier of the second input note.\n     * @param _noteOut1 note of the first output note.\n     * @param _noteOut2 note of the second output note.\n     * @param _proof Join proof.\n     */\n    function joinSplit(\n        bytes32 _merkleRoot,\n        bytes32 _nullifierIn1,\n        bytes32 _nullifierIn2,\n        bytes32 _noteOut1,\n        bytes32 _noteOut2,\n        bytes32 _noteFooter1,\n        bytes32 _noteFooter2,\n        bytes calldata _proof\n    ) public payable {\n        _validateMerkleRootIsAllowed(_merkleRoot);\n        _validateNullifierIsNotUsed(_nullifierIn1);\n        _validateNullifierIsNotUsed(_nullifierIn2);\n        _validateNullifierIsNotLocked(_nullifierIn1);\n        _validateNullifierIsNotLocked(_nullifierIn2);\n        _validateNoteIsNotCreated(_noteOut1);\n        _validateNoteIsNotCreated(_noteOut2);\n        _validateNoteFooterIsNotUsed(_noteFooter1);\n        _validateNoteFooterIsNotUsed(_noteFooter2);\n\n        if (_noteFooter1 == _noteFooter2) {\n            revert NoteFooterDuplicated();\n        }\n\n        JoinSplitRawInputs memory inputs = JoinSplitRawInputs(\n            _merkleRoot,\n            _nullifierIn1,\n            _nullifierIn2,\n            _noteOut1,\n            _noteOut2,\n            _noteFooter1,\n            _noteFooter2\n        );\n\n        _verifyProof(_proof, _buildJoinSplitInputs(inputs), \"joinSplit\");\n        _registerNoteFooter(_noteFooter1);\n        _registerNoteFooter(_noteFooter2);\n        _postWithdraw(_nullifierIn1);\n        _postWithdraw(_nullifierIn2);\n        _postDeposit(_noteOut1);\n        _postDeposit(_noteOut2);\n\n        emit JoinSplit(_nullifierIn1, _nullifierIn2, _noteOut1, _noteOut2);\n    }\n\n    /**\n     * @dev Function to join two notes into one.\n     * @param _merkleRoot Merkle root of the merkle tree.\n     * @param _nullifierIn1 Nullifier of the first input note.\n     * @param _nullifierIn2 Nullifier of the second input note.\n     * @param _noteOut note of the output note.\n     * @param _proof Join proof.\n     */\n    function join(\n        bytes32 _merkleRoot,\n        bytes32 _nullifierIn1,\n        bytes32 _nullifierIn2,\n        bytes32 _noteOut,\n        bytes32 _noteFooter,\n        bytes calldata _proof\n    ) public payable {\n        _validateMerkleRootIsAllowed(_merkleRoot);\n        _validateNullifierIsNotUsed(_nullifierIn1);\n        _validateNullifierIsNotUsed(_nullifierIn2);\n        _validateNullifierIsNotLocked(_nullifierIn1);\n        _validateNullifierIsNotLocked(_nullifierIn2);\n        _validateNoteIsNotCreated(_noteOut);\n        _validateNoteFooterIsNotUsed(_noteFooter);\n\n        JoinRawInputs memory inputs = JoinRawInputs(\n            _merkleRoot,\n            _nullifierIn1,\n            _nullifierIn2,\n            _noteOut,\n            _noteFooter\n        );\n\n        _verifyProof(_proof, _buildJoinInputs(inputs), \"join\");\n\n        _registerNoteFooter(_noteFooter);\n        _postWithdraw(_nullifierIn1);\n        _postWithdraw(_nullifierIn2);\n        _postDeposit(_noteOut);\n\n        emit Join(_nullifierIn1, _nullifierIn2, _noteOut);\n    }\n\n    /**\n     * @dev Function for ORC swapping within the darkpool.\n     * @param _merkleRoot Merkle root of the merkle tree.\n     * @param _aliceNullifier Nullifier of Alice's note for swapping out.\n     * @param _aliceOut note of the assets to be swapped in by Alice.\n     * @param _bobNullifier Nullifier of Bob's note for swapping out.\n     * @param _bobOut note of the assets to be swapped in by Bob.\n     * @param _proof Swap proof.\n     \n    function swap(\n        bytes32 _merkleRoot,\n        bytes32 _aliceNullifier,\n        bytes32 _aliceOut,\n        bytes32 _aliceOutFooter,\n\n        bytes32 _bobNullifier,\n        bytes32 _bobOut,\n        bytes32 _bobOutFooter,\n        bytes calldata _proof\n    ) public payable {\n        _validateMerkleRootIsAllowed(_merkleRoot);\n        _validateNullifierIsNotUsed(_aliceNullifier);\n        _validateNullifierIsNotUsed(_bobNullifier);\n        _validateNoteIsNotCreated(_aliceOut);\n        _validateNoteIsNotCreated(_bobOut);\n        _validateNoteFooterIsNotUsed(_aliceOutFooter);\n        _validateNoteFooterIsNotUsed(_bobOutFooter);\n\n        SwapRawInputs memory inputs = SwapRawInputs(\n            _merkleRoot,\n            _aliceNullifier,\n            _aliceOut,\n            _aliceOutFooter,\n            _bobNullifier,\n            _bobOut,\n            _bobOutFooter\n        );\n\n        _verifyProof(_proof, _buildSwapInputs(inputs), \"swap\");\n\n        _registerNoteFooter(_aliceOutFooter);\n        _registerNoteFooter(_bobOutFooter);\n        _postWithdraw(_aliceNullifier);\n        _postWithdraw(_bobNullifier);\n        _postDeposit(_aliceOut);\n        _postDeposit(_bobOut);\n    }*/\n}\n"
    },
    "contracts/core/DarkpoolInputBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {BaseInputBuilder} from \"./base/BaseInputBuilder.sol\";\n\ncontract DarkpoolInputBuilder is BaseInputBuilder {\n    struct DepositRawInputs {\n        address owner;\n        bytes32 noteCommitment;\n        address asset;\n        uint256 amount;\n        bytes32 noteFooter;\n    }\n\n    struct WithdrawRawInputs {\n        address recipient;\n        bytes32 merkleRoot;\n        address asset;\n        uint256 amount;\n        bytes32 nullifier;\n        address relayer;\n    }\n\n    struct TransferRawInputs {\n        bytes32 merkleRoot;\n        address asset;\n        uint256 amount;\n        bytes32 nullifierIn;\n        bytes32 noteOut;\n        bytes32 noteFooter;\n    }\n\n    struct SplitRawInputs {\n        bytes32 merkleRoot;\n        bytes32 nullifierIn1;\n        bytes32 noteOut1;\n        bytes32 noteOut2;\n        bytes32 noteFooter1;\n        bytes32 noteFooter2;\n    }\n\n    struct JoinSplitRawInputs {\n        bytes32 merkleRoot;\n        bytes32 nullifierIn1;\n        bytes32 nullifierIn2;\n        bytes32 noteOut1;\n        bytes32 noteOut2;\n        bytes32 noteFooter1;\n        bytes32 noteFooter2;\n    }\n\n    struct JoinRawInputs {\n        bytes32 merkleRoot;\n        bytes32 nullifierIn1;\n        bytes32 nullifierIn2;\n        bytes32 noteOut1;\n        bytes32 noteFooter1;\n    }\n\n    struct SwapRawInputs {\n        bytes32 merkleRoot;\n        bytes32 aliceNullifier;\n        bytes32 aliceOut;\n        bytes32 bobNullifier;\n        bytes32 bobOut;\n        bytes32 aliceNoteFooter;\n        bytes32 bobNoteFooter;\n    }\n\n    constructor(uint256 primeField) BaseInputBuilder(primeField) {}\n\n    function _buildDepositInputs(\n        DepositRawInputs memory _rawInputs\n    ) internal pure returns (bytes32[] memory) {\n        bytes32[] memory inputs = new bytes32[](5);\n        inputs[0] = _bytifyToNoir(_rawInputs.owner);\n        inputs[1] = bytes32(_rawInputs.noteCommitment);\n        inputs[2] = _bytifyToNoir(_rawInputs.asset);\n        inputs[3] = bytes32(_rawInputs.amount);\n        inputs[4] = _rawInputs.noteFooter;\n\n        return inputs;\n    }\n\n    function _buildWithdrawInputs(\n        WithdrawRawInputs memory _rawInputs\n    ) internal pure returns (bytes32[] memory) {\n        bytes32[] memory inputs = new bytes32[](6);\n        inputs[0] = _bytifyToNoir(_rawInputs.recipient);\n        inputs[1] = _rawInputs.merkleRoot;\n        inputs[2] = _bytifyToNoir(_rawInputs.asset);\n        inputs[3] = bytes32(_rawInputs.amount);\n        inputs[4] = _rawInputs.nullifier;\n        inputs[5] = _bytifyToNoir(_rawInputs.relayer);\n\n        return inputs;\n    }\n\n    function _buildTransferInputs(\n        TransferRawInputs memory _rawInputs\n    ) internal pure returns (bytes32[] memory) {\n        bytes32[] memory inputs = new bytes32[](6);\n        inputs[0] = _rawInputs.merkleRoot;\n        inputs[1] = _bytifyToNoir(_rawInputs.asset);\n        inputs[2] = bytes32(_rawInputs.amount);\n        inputs[3] = _rawInputs.nullifierIn;\n        inputs[4] = _rawInputs.noteOut;\n        inputs[5] = _rawInputs.noteFooter;\n\n        return inputs;\n    }\n\n    function _buildSplitInputs(\n        SplitRawInputs memory _rawInputs\n    ) internal pure returns (bytes32[] memory) {\n        bytes32[] memory inputs = new bytes32[](6);\n        inputs[0] = _rawInputs.merkleRoot;\n        inputs[1] = _rawInputs.nullifierIn1;\n        inputs[2] = _rawInputs.noteOut1;\n        inputs[3] = _rawInputs.noteOut2;\n        inputs[4] = _rawInputs.noteFooter1;\n        inputs[5] = _rawInputs.noteFooter2;\n\n        return inputs;\n    }\n\n    function _buildJoinSplitInputs(\n        JoinSplitRawInputs memory _rawInputs\n    ) internal pure returns (bytes32[] memory) {\n        bytes32[] memory inputs = new bytes32[](7);\n        inputs[0] = _rawInputs.merkleRoot;\n        inputs[1] = _rawInputs.nullifierIn1;\n        inputs[2] = _rawInputs.nullifierIn2;\n        inputs[3] = _rawInputs.noteOut1;\n        inputs[4] = _rawInputs.noteOut2;\n        inputs[5] = _rawInputs.noteFooter1;\n        inputs[6] = _rawInputs.noteFooter2;\n\n        return inputs;\n    }\n\n    function _buildJoinInputs(\n        JoinRawInputs memory _rawInputs\n    ) internal pure returns (bytes32[] memory) {\n        bytes32[] memory inputs = new bytes32[](5);\n        inputs[0] = _rawInputs.merkleRoot;\n        inputs[1] = _rawInputs.nullifierIn1;\n        inputs[2] = _rawInputs.nullifierIn2;\n        inputs[3] = _rawInputs.noteOut1;\n        inputs[4] = _rawInputs.noteFooter1;\n\n        return inputs;\n    }\n\n    function _buildSwapInputs(\n        SwapRawInputs memory _rawInputs\n    ) internal pure returns (bytes32[] memory) {\n        bytes32[] memory inputs = new bytes32[](7);\n        inputs[0] = _rawInputs.merkleRoot;\n        inputs[1] = _rawInputs.aliceNullifier;\n        inputs[2] = _rawInputs.aliceOut;\n        inputs[3] = _rawInputs.aliceNoteFooter;\n        inputs[4] = _rawInputs.bobNullifier;\n        inputs[5] = _rawInputs.bobOut;\n        inputs[6] = _rawInputs.bobNoteFooter;\n\n        return inputs;\n    }\n}\n"
    },
    "contracts/core/base/BaseAssetManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IAssetPool} from \"../interfaces/IAssetPool.sol\";\nimport {IVerifier} from \"../interfaces/IVerifier.sol\";\nimport {IVerifierHub} from \"../interfaces/IVerifierHub.sol\";\nimport {IRelayerHub} from \"../interfaces/IRelayerHub.sol\";\nimport {IFeeManager} from \"../interfaces/IFeeManager.sol\";\nimport {IComplianceManager} from \"../interfaces/IComplianceManager.sol\";\nimport {IMerkleTreeOperator} from \"../interfaces/IMerkleTreeOperator.sol\";\nimport {IMimc254} from \"../interfaces/IMimc254.sol\";\nimport {BaseInputBuilder} from \"./BaseInputBuilder.sol\";\n\n/**\n * @title BaseAssetManager\n * @dev Base contract for asset managers.\n */\nabstract contract BaseAssetManager is Ownable, BaseInputBuilder {\n    using SafeERC20 for IERC20;\n\n    struct FundReleaseDetails {\n        address assetAddress;\n        address payable recipient;\n        address payable relayer;\n        uint256 relayerGasFee;\n        uint256 amount;\n    }\n\n    IVerifierHub internal _verifierHub;\n    IAssetPool internal _assetPoolERC20;\n    IAssetPool internal _assetPoolERC721;\n    IAssetPool internal _assetPoolETH;\n    IRelayerHub internal _relayerHub;\n    IFeeManager internal _feeManager;\n    IComplianceManager internal _complianceManager;\n    IMerkleTreeOperator internal immutable _merkleTreeOperator;\n    IMimc254 internal immutable _mimc254;\n\n    address public constant ETH_ADDRESS =\n        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    bytes32 public constant ASSET_ETH = keccak256(abi.encode(ETH_ADDRESS));\n\n    uint256 public constant P =\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    error RelayerNotRegistered();\n    error NullifierUsed();\n    error NullifierLocked();\n    error MerkleRootNotAllowed();\n    error NoteFooterUsed();\n    error NoteAlreadyCreated();\n    error InvalidNoteParameters();\n    error ZeroAddress();\n    error NoteFooterDuplicated();\n    error RelayerMismatch();\n\n    // we dont use it for now\n    modifier onlyETHAssetPool() {\n        require(\n            msg.sender == address(_assetPoolETH),\n            \"BaseAssetManager: Only ETH Asset Pool\"\n        );\n        _;\n    }\n\n    constructor(\n        address assetPoolERC20,\n        address assetPoolERC721,\n        address assetPoolETH,\n        address verifierHub,\n        address relayerHub,\n        address feeManager,\n        address complianceManager,\n        address merkleTreeOperator,\n        address mimc254,\n        address initialOwner\n    ) Ownable(initialOwner) {\n        if (\n            assetPoolERC20 == address(0) ||\n            assetPoolERC721 == address(0) ||\n            assetPoolETH == address(0) ||\n            verifierHub == address(0) ||\n            relayerHub == address(0) ||\n            feeManager == address(0) ||\n            complianceManager == address(0) ||\n            merkleTreeOperator == address(0) ||\n            mimc254 == address(0) ||\n            initialOwner == address(0)\n        ) {\n            revert ZeroAddress();\n        }\n        _assetPoolERC20 = IAssetPool(assetPoolERC20);\n        _assetPoolERC721 = IAssetPool(assetPoolERC721);\n        _assetPoolETH = IAssetPool(assetPoolETH);\n        _verifierHub = IVerifierHub(verifierHub);\n        _relayerHub = IRelayerHub(relayerHub);\n        _feeManager = IFeeManager(feeManager);\n        _complianceManager = IComplianceManager(complianceManager);\n        _merkleTreeOperator = IMerkleTreeOperator(merkleTreeOperator);\n        _mimc254 = IMimc254(mimc254);\n    }\n\n    receive() external payable {}\n\n    /**\n     * @dev Transfers the asset to the asset pool if there are\n     *      any remaining assets due to network failures.\n     */\n    function releaseToAsssetPool(\n        address asset,\n        uint256 amount\n    ) external onlyOwner {\n        require(amount > 0, \"BaseAssetManager: amount must be greater than 0\");\n        if (asset == address(0) || asset == ETH_ADDRESS) {\n            (bool success, ) = address(_assetPoolETH).call{value: amount}(\"\");\n            require(success, \"BaseAssetManager: Failed to send Ether\");\n        } else {\n            IERC20(asset).safeTransfer(address(_assetPoolERC20), amount);\n        }\n    }\n\n    function setAssetPoolERC20(address assetPoolERC20) public onlyOwner {\n        if (assetPoolERC20 != address(0)) {\n            _assetPoolERC20 = IAssetPool(assetPoolERC20);\n        }\n    }\n\n    function setAssetPoolERC721(address assetPoolERC721) public onlyOwner {\n        if (assetPoolERC721 != address(0)) {\n            _assetPoolERC721 = IAssetPool(assetPoolERC721);\n        }\n    }\n\n    function setAssetPoolETH(address assetPoolETH) public onlyOwner {\n        if (assetPoolETH != address(0)) {\n            _assetPoolETH = IAssetPool(assetPoolETH);\n        }\n    }\n\n    function setVerifierHub(address verifierHub) public onlyOwner {\n        if (verifierHub != address(0)) {\n            _verifierHub = IVerifierHub(verifierHub);\n        }\n    }\n\n    function setRelayerHub(address relayerHub) public onlyOwner {\n        if (relayerHub != address(0)) {\n            _relayerHub = IRelayerHub(relayerHub);\n        }\n    }\n\n    function setFeeManager(address feeManager) public onlyOwner {\n        if (feeManager != address(0)) {\n            _feeManager = IFeeManager(feeManager);\n        }\n    }\n\n    function setComplianceManager(address complianceManager) public onlyOwner {\n        if (complianceManager != address(0)) {\n            _complianceManager = IComplianceManager(complianceManager);\n        }\n    }\n\n    function getAssetPoolERC20() public view returns (address) {\n        return address(_assetPoolERC20);\n    }\n\n    function getAssetPoolERC721() public view returns (address) {\n        return address(_assetPoolERC721);\n    }\n\n    function getAssetPoolETH() public view returns (address) {\n        return address(_assetPoolETH);\n    }\n\n    function getVerifierHub() public view returns (address) {\n        return address(_verifierHub);\n    }\n\n    function getRelayerHub() public view returns (address) {\n        return address(_relayerHub);\n    }\n\n    function getFeeManager() public view returns (address) {\n        return address(_feeManager);\n    }\n\n    function getComplianceManager() public view returns (address) {\n        return address(_complianceManager);\n    }\n\n    function getMerkleTreeOperator() public view returns (address) {\n        return address(_merkleTreeOperator);\n    }\n\n    function getMimc254() public view returns (address) {\n        return address(_mimc254);\n    }\n\n    function _postDeposit(bytes32 _noteCommitment) internal {\n        _merkleTreeOperator.setNoteCommitmentCreated(_noteCommitment);\n        _merkleTreeOperator.appendMerkleLeaf(bytes32(_noteCommitment));\n    }\n\n    function _postWithdraw(bytes32 _nullifier) internal {\n        _merkleTreeOperator.setNullifierUsed(_nullifier);\n    }\n\n    function _setNullifierLock(bytes32 _nullifier, bool _locked) internal {\n        _merkleTreeOperator.setNullifierLocked(_nullifier, _locked);\n    }\n\n    function _registerNoteFooter(bytes32 _noteFooter) internal {\n        _merkleTreeOperator.setNoteFooterUsed(_noteFooter);\n    }\n\n    function _releaseERC20WithFee(\n        address _asset,\n        address _to,\n        address _relayer,\n        uint256 _relayerGasFee,\n        uint256 _amount\n    ) internal returns (uint256, uint256, uint256) {\n        (\n            uint256 actualAmount,\n            uint256 serviceFee,\n            uint256 relayerRefund\n        ) = _feeManager.calculateFee(_amount, _relayerGasFee);\n\n        _assetPoolERC20.release(_asset, _to, actualAmount);\n\n        if (relayerRefund > 0) {\n            _assetPoolERC20.release(_asset, _relayer, relayerRefund);\n        }\n        if (serviceFee > 0) {\n            _assetPoolERC20.release(_asset, address(_feeManager), serviceFee);\n        }\n\n        return (actualAmount, serviceFee, relayerRefund);\n    }\n\n    function _releaseETHWithFee(\n        address payable _to,\n        address payable _relayer,\n        uint256 _relayerGasFee,\n        uint256 _amount\n    ) internal returns (uint256, uint256, uint256) {\n        (\n            uint256 actualAmount,\n            uint256 serviceFee,\n            uint256 relayerRefund\n        ) = _feeManager.calculateFee(_amount, _relayerGasFee);\n\n        _assetPoolETH.release(_to, actualAmount);\n\n        if (relayerRefund > 0) {\n            _assetPoolETH.release(_relayer, relayerRefund);\n        }\n        if (serviceFee > 0) {\n            _assetPoolETH.release(payable(address(_feeManager)), serviceFee);\n        }\n\n        return (actualAmount, serviceFee, relayerRefund);\n    }\n\n    function _releaseFunds(\n        FundReleaseDetails memory details\n    ) internal returns (uint256, uint256, uint256) {\n        if (\n            details.assetAddress == ETH_ADDRESS ||\n            details.assetAddress == address(0)\n        ) {\n            return\n                _releaseETHWithFee(\n                    details.recipient,\n                    details.relayer,\n                    details.relayerGasFee,\n                    details.amount\n                );\n        } else {\n            return\n                _releaseERC20WithFee(\n                    details.assetAddress,\n                    details.recipient,\n                    details.relayer,\n                    details.relayerGasFee,\n                    details.amount\n                );\n        }\n    }\n\n    function _verifyProof(\n        bytes calldata _proof,\n        bytes32[] memory _inputs,\n        string memory verifierType\n    ) internal view {\n        IVerifier verifier = _verifierHub.getVerifier(verifierType);\n        require(verifier.verify(_proof, _inputs), \"invalid proof\");\n    }\n\n    function _buildNoteForERC20(\n        address asset,\n        uint256 amount,\n        bytes32 noteFooter\n    ) internal view returns (bytes32) {\n        return\n            _buildNote(\n                asset,\n                amount,\n                noteFooter,\n                IMimc254.NoteDomainSeparator.FUNGIBLE\n            );\n    }\n\n    function _buildNoteForERC721(\n        address asset,\n        uint256 tokenId,\n        bytes32 noteFooter\n    ) internal view returns (bytes32) {\n        return\n            _buildNote(\n                asset,\n                tokenId,\n                noteFooter,\n                IMimc254.NoteDomainSeparator.NON_FUNGIBLE\n            );\n    }\n\n    function _validateRelayerIsRegistered(address relayer) internal view {\n        if (!_relayerHub.isRelayerRegistered(relayer)) {\n            revert RelayerNotRegistered();\n        }\n    }\n\n    function _validateNullifierIsNotUsed(bytes32 nullifier) internal view {\n        if (!_merkleTreeOperator.nullifierIsNotUsed(nullifier)) {\n            revert NullifierUsed();\n        }\n    }\n\n    function _validateNullifierIsNotLocked(bytes32 nullifier) internal view {\n        if (!_merkleTreeOperator.nullifierIsNotLocked(nullifier)) {\n            revert NullifierLocked();\n        }\n    }\n\n    function _validateMerkleRootIsAllowed(bytes32 merkleRoot) internal view {\n        if (!_merkleTreeOperator.merkleRootIsAllowed(merkleRoot)) {\n            revert MerkleRootNotAllowed();\n        }\n    }\n\n    function _validateNoteFooterIsNotUsed(bytes32 noteFooter) internal view {\n        if (!_merkleTreeOperator.noteFooterIsNotUsed(noteFooter)) {\n            revert NoteFooterUsed();\n        }\n    }\n\n    function _validateNoteIsNotCreated(bytes32 noteCommitment) internal view {\n        if (!_merkleTreeOperator.noteIsNotCreated(noteCommitment)) {\n            revert NoteAlreadyCreated();\n        }\n    }\n\n    function _validateSenderIsRelayer(address relayer) internal view {\n        if (msg.sender != relayer) {\n            revert RelayerMismatch();\n        }\n    }\n\n    function _buildNote(\n        address asset,\n        uint256 amount,\n        bytes32 noteFooter,\n        IMimc254.NoteDomainSeparator domainSeparator\n    ) private view returns (bytes32) {\n        if (asset == address(0) || amount == 0 || noteFooter == bytes32(0)) {\n            revert InvalidNoteParameters();\n        }\n        uint256[] memory array = new uint256[](4);\n        array[0] = uint256(domainSeparator);\n        array[1] = uint256(_bytifyToNoir(asset));\n        array[2] = amount;\n        array[3] = uint256(noteFooter);\n        return bytes32(_mimc254.mimcBn254(array));\n    }\n}\n"
    },
    "contracts/core/base/BaseInputBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @title BaseInputBuilder\n * @dev Base contract for ZK verify input builders.\n */\ncontract BaseInputBuilder {\n    uint256 internal _primeField;\n\n    constructor(uint256 primeField) {\n        _primeField = primeField;\n    }\n\n    function _bytifyToNoir(address value) internal pure returns (bytes32) {\n        return bytes32(uint256(uint160(ripemd160(abi.encode(value)))));\n    }\n}\n"
    },
    "contracts/core/interfaces/IAssetPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ninterface IAssetPool {\n    function setAssetManager(address assetManager,bool registered) external;\n\n    function release(address tokenOrNft, address to, uint256 amountOrNftId) external;\n\n    function release(address payable to, uint256 amount) external;\n\n    function getAssetManagerRegistration( address assetManager) \n        external view returns(bool);\n}"
    },
    "contracts/core/interfaces/IComplianceManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\n\ninterface IComplianceManager {\n    function isAuthorized(address observer, address subject) external returns (bool);\n}\n"
    },
    "contracts/core/interfaces/IFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ninterface IFeeManager {\n    function calculateFee(\n        uint256 amount,\n        uint256 relayerRefund\n    ) external view returns (uint256, uint256, uint256);\n\n    function calculateFeeForceServiceFee(\n        uint256 amount,\n        uint256 relayerRefund,\n        uint256 serviceFeePercent\n    ) external pure returns (uint256, uint256, uint256);\n\n    function calculateFee(\n        uint256[4] calldata amount,\n        uint256[4] calldata relayerRefund\n    )\n        external\n        view\n        returns (uint256[4] memory, uint256[4] memory, uint256[4] memory);\n\n    function calculateFeeForFSN(\n        uint256[4] calldata amount,\n        uint256[4] calldata relayerRefund\n    )\n        external\n        view\n        returns (uint256[] memory, uint256[4] memory, uint256[4] memory);\n}\n"
    },
    "contracts/core/interfaces/IMerkleTreeOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ninterface IMerkleTreeOperator {\n    function appendMerkleLeaf(bytes32 leaf) external;\n    function setNoteCommitmentCreated(bytes32 commitment) external;\n    function setNullifierUsed(bytes32 nullifier) external;\n    function setNullifierLocked(bytes32 nullifier, bool locked) external;\n    function setNoteFooterUsed(bytes32 noteFooter) external;\n\n    function isRelayerRegistered(address _relayer) external view returns (bool);\n\n    function merkleRootIsAllowed(\n        bytes32 _merkleRoot\n    ) external view returns (bool);\n\n    function nullifierIsNotUsed(\n        bytes32 _nullifier\n    ) external view returns (bool);\n   \n    function nullifierIsNotLocked(\n        bytes32 _nullifier\n    ) external view returns (bool);\n\n    function noteIsNotCreated(\n        bytes32 _noteCommitment\n    ) external view returns (bool);\n\n    function noteFooterIsNotUsed(\n        bytes32 _noteFooter\n    ) external view returns (bool);\n\n    function getMerkleRoot() external view returns (bytes32);\n\n    function getMerklePath(\n        bytes32 _noteCommitment\n    ) external view returns (bytes32[] memory, bool[] memory, bytes32);\n}\n"
    },
    "contracts/core/interfaces/IMimc254.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\n\ninterface IMimc254 {\n    enum NoteDomainSeparator {\n        FUNGIBLE,\n        NON_FUNGIBLE\n    }\n\n    function mimcBn254(uint256[] memory array) external view returns (uint256);\n\n    /*function mimcBn254ForNote(\n        uint256[3] memory array,\n        NoteDomainSeparator domainSeparator\n    ) external view returns (uint256);\n\n    function mimcBn254ForTree(\n        uint256[3] memory _array\n    ) external view returns (uint256);\n\n    function mimcBn254ForRoute(\n        uint256[12] memory _array\n    ) external view returns (uint256);*/\n    \n}\n"
    },
    "contracts/core/interfaces/IRelayerHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ninterface IRelayerHub {\n    function isRelayerRegistered(address _relayer) external view returns (bool);\n}\n"
    },
    "contracts/core/interfaces/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.8.20;\n\ninterface IVerifier {\n    function verify(\n        bytes calldata _proof,\n        bytes32[] calldata _publicInputs\n    ) external view returns (bool);\n}\n"
    },
    "contracts/core/interfaces/IVerifierHub.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {IVerifier} from \"./IVerifier.sol\";\n\ninterface IVerifierHub {\n    function setVerifier(string memory verifierName, address addr) external;\n\n    function getVerifierNames() external returns (string[] memory);\n\n    function getVerifier(\n        string memory verifierName\n    ) external view returns (IVerifier);\n}\n"
    }
  }
}}
