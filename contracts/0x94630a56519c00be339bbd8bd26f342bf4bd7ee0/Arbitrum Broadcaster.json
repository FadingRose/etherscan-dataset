{
  "TxHash": "0xe8fb8af91e33632050d96eb750109a97be9a83f8e7e81e2a762d21add608b86a",
  "ContractAddress": "0x94630a56519c00be339bbd8bd26f342bf4bd7ee0",
  "Name": "Arbitrum Broadcaster",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "# pragma version 0.3.10\r\n\"\"\"\r\n@title Arbitrum Broadcaster\r\n@author CurveFi\r\n@license MIT\r\n@custom:version 1.0.1\r\n\"\"\"\r\n\r\n\r\nversion: public(constant(String[8])) = \"1.0.1\"\r\n\r\n\r\ninterface IArbInbox:\r\n    def calculateRetryableSubmissionFee(_data_length: uint256, _base_fee: uint256) -\u003e uint256: view\r\n\r\n\r\nevent Broadcast:\r\n    chain_id: indexed(uint256)\r\n    agent: indexed(Agent)\r\n    messages: DynArray[Message, MAX_MESSAGES]\r\n\r\nevent SetDestinationData:\r\n    chain_id: indexed(uint256)\r\n    data: DestinationData\r\n\r\nevent ApplyAdmins:\r\n    admins: AdminSet\r\n\r\nevent CommitAdmins:\r\n    future_admins: AdminSet\r\n\r\n\r\nenum Agent:\r\n    OWNERSHIP\r\n    PARAMETER\r\n    EMERGENCY\r\n\r\n\r\nstruct AdminSet:\r\n    ownership: address\r\n    parameter: address\r\n    emergency: address\r\n\r\nstruct Message:\r\n    target: address\r\n    data: Bytes[MAX_BYTES]\r\n\r\nstruct DestinationData:\r\n    arb_inbox: IArbInbox\r\n    arb_refund: address  # DAO owned Vault for example\r\n    relayer: address\r\n\r\n\r\nMAX_BYTES: constant(uint256) = 1024\r\nMAX_MESSAGES: constant(uint256) = 8\r\nMAXSIZE: constant(uint256) = 16384\r\n\r\n\r\nadmins: public(AdminSet)\r\nfuture_admins: public(AdminSet)\r\n\r\ndestination_data: public(HashMap[uint256, DestinationData])\r\nagent: HashMap[address, Agent]\r\n\r\n\r\n@payable\r\n@external\r\ndef __init__(_admins: AdminSet):\r\n    assert _admins.ownership != _admins.parameter  # a != b\r\n    assert _admins.ownership != _admins.emergency  # a != c\r\n    assert _admins.parameter != _admins.emergency  # b != c\r\n\r\n    self.admins = _admins\r\n\r\n    self.agent[_admins.ownership] = Agent.OWNERSHIP\r\n    self.agent[_admins.parameter] = Agent.PARAMETER\r\n    self.agent[_admins.emergency] = Agent.EMERGENCY\r\n\r\n    log ApplyAdmins(_admins)\r\n\r\n\r\n@external\r\ndef broadcast(_chain_id: uint256, _messages: DynArray[Message, MAX_MESSAGES], _gas_limit: uint256, _max_fee_per_gas: uint256, _destination_data: DestinationData=empty(DestinationData)):\r\n    \"\"\"\r\n    @notice Broadcast a sequence of messages.\r\n    @param _chain_id Chain ID of L2\r\n    @param _messages The sequence of messages to broadcast.\r\n    @param _gas_limit The gas limit for the execution on L2.\r\n    @param _max_fee_per_gas The maximum gas price bid for the execution on L2.\r\n    @param _destination_data Specific DestinationData (self.destination_data by default)\r\n    \"\"\"\r\n    agent: Agent = self.agent[msg.sender]\r\n    assert agent != empty(Agent)\r\n    destination: DestinationData = _destination_data\r\n    if destination.relayer == empty(address):\r\n        destination = self.destination_data[_chain_id]\r\n    assert destination.relayer != empty(address)\r\n\r\n    # define all variables here before expanding memory enormously\r\n    submission_cost: uint256 = 0\r\n\r\n    data: Bytes[MAXSIZE] = _abi_encode(\r\n        agent,\r\n        _messages,\r\n        method_id=method_id(\"relay(uint256,(address,bytes)[])\"),\r\n    )\r\n    submission_cost = destination.arb_inbox.calculateRetryableSubmissionFee(len(data), block.basefee)\r\n\r\n    # NOTE: using `unsafeCreateRetryableTicket` so that refund address is not aliased\r\n    raw_call(\r\n        destination.arb_inbox.address,\r\n        _abi_encode(\r\n            destination.relayer,  # to\r\n            empty(uint256),  # l2CallValue\r\n            submission_cost,  # maxSubmissionCost\r\n            destination.arb_refund,  # excessFeeRefundAddress\r\n            destination.arb_refund,  # callValueRefundAddress\r\n            _gas_limit,\r\n            _max_fee_per_gas,\r\n            data,\r\n            method_id=method_id(\"unsafeCreateRetryableTicket(address,uint256,uint256,address,address,uint256,uint256,bytes)\"),\r\n        ),\r\n        value=submission_cost + _gas_limit * _max_fee_per_gas,\r\n    )\r\n\r\n\r\n@external\r\ndef set_destination_data(_chain_id: uint256, _destination_data: DestinationData):\r\n    \"\"\"\r\n    @notice Set destination data for child chain.\r\n    \"\"\"\r\n    assert msg.sender == self.admins.ownership\r\n    self.destination_data[_chain_id] = _destination_data\r\n    log SetDestinationData(_chain_id, _destination_data)\r\n\r\n\r\n@external\r\ndef commit_admins(_future_admins: AdminSet):\r\n    \"\"\"\r\n    @notice Commit an admin set to use in the future.\r\n    \"\"\"\r\n    assert msg.sender == self.admins.ownership\r\n\r\n    assert _future_admins.ownership != _future_admins.parameter  # a != b\r\n    assert _future_admins.ownership != _future_admins.emergency  # a != c\r\n    assert _future_admins.parameter != _future_admins.emergency  # b != c\r\n\r\n    self.future_admins = _future_admins\r\n    log CommitAdmins(_future_admins)\r\n\r\n\r\n@external\r\ndef apply_admins():\r\n    \"\"\"\r\n    @notice Apply the future admin set.\r\n    \"\"\"\r\n    admins: AdminSet = self.admins\r\n    assert msg.sender == admins.ownership\r\n\r\n    # reset old admins\r\n    self.agent[admins.ownership] = empty(Agent)\r\n    self.agent[admins.parameter] = empty(Agent)\r\n    self.agent[admins.emergency] = empty(Agent)\r\n\r\n    # set new admins\r\n    future_admins: AdminSet = self.future_admins\r\n    self.agent[future_admins.ownership] = Agent.OWNERSHIP\r\n    self.agent[future_admins.parameter] = Agent.PARAMETER\r\n    self.agent[future_admins.emergency] = Agent.EMERGENCY\r\n\r\n    self.admins = future_admins\r\n    log ApplyAdmins(future_admins)\r\n\r\n\r\n@payable\r\n@external\r\ndef __default__():\r\n    assert len(msg.data) == 0",
      "ABI": "[{\"name\":\"Broadcast\",\"inputs\":[{\"name\":\"chain_id\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"agent\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"messages\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetDestinationData\",\"inputs\":[{\"name\":\"chain_id\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"data\",\"type\":\"tuple\",\"components\":[{\"name\":\"arb_inbox\",\"type\":\"address\"},{\"name\":\"arb_refund\",\"type\":\"address\"},{\"name\":\"relayer\",\"type\":\"address\"}],\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"ApplyAdmins\",\"inputs\":[{\"name\":\"admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}],\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitAdmins\",\"inputs\":[{\"name\":\"future_admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}],\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"broadcast\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"name\":\"_messages\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}]},{\"name\":\"_gas_limit\",\"type\":\"uint256\"},{\"name\":\"_max_fee_per_gas\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"broadcast\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"name\":\"_messages\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}]},{\"name\":\"_gas_limit\",\"type\":\"uint256\"},{\"name\":\"_max_fee_per_gas\",\"type\":\"uint256\"},{\"name\":\"_destination_data\",\"type\":\"tuple\",\"components\":[{\"name\":\"arb_inbox\",\"type\":\"address\"},{\"name\":\"arb_refund\",\"type\":\"address\"},{\"name\":\"relayer\",\"type\":\"address\"}]}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_destination_data\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"name\":\"_destination_data\",\"type\":\"tuple\",\"components\":[{\"name\":\"arb_inbox\",\"type\":\"address\"},{\"name\":\"arb_refund\",\"type\":\"address\"},{\"name\":\"relayer\",\"type\":\"address\"}]}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_admins\",\"inputs\":[{\"name\":\"_future_admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"apply_admins\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"version\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\"}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admins\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admins\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"destination_data\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"arb_inbox\",\"type\":\"address\"},{\"name\":\"arb_refund\",\"type\":\"address\"},{\"name\":\"relayer\",\"type\":\"address\"}]}]}]",
      "ContractName": "Arbitrum Broadcaster",
      "CompilerVersion": "vyper:0.3.10",
      "OptimizationUsed": "0",
      "Runs": "0",
      "ConstructorArguments": "00000000000000000000000071f718d3e4d1449d1502a6a7595eb84ebccb16830000000000000000000000004eeb3ba4f221ca16ed4a0cc7254e2e32df948c5f000000000000000000000000467947ee34af926cf1dcac093870f613c96b1e0c",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
