{
  "TxHash": "0x3c52da6ce7a71b0c56f8f7931336663094a9abeda5e3bb9a9e401097c4c86aa2",
  "ContractAddress": "0xa15ed40e6a063165a5be6e147f0612ca2439dcab",
  "Name": "Merphy",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\r\n\r\n███╗   ███╗███████╗██████╗ ██████╗ ██╗  ██╗██╗   ██╗\r\n████╗ ████║██╔════╝██╔══██╗██╔══██╗██║  ██║╚██╗ ██╔╝\r\n██╔████╔██║█████╗  ██████╔╝██████╔╝███████║ ╚████╔╝ \r\n██║╚██╔╝██║██╔══╝  ██╔══██╗██╔═══╝ ██╔══██║  ╚██╔╝  \r\n██║ ╚═╝ ██║███████╗██║  ██║██║     ██║  ██║   ██║   \r\n╚═╝     ╚═╝╚══════╝╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝   ╚═╝   \r\n                                                    \r\n\r\nhttps://merphy.io/\r\nhttps://t.me/MerphyOnSol\r\nhttps://x.com/MerphySOL\r\nhttps://www.youtube.com/channel/UCRJoeRKB63jnZF9YPeHxLVg\r\n\r\n*/\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function circulatingSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n    constructor(address _owner) {owner = _owner;}\r\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\r\n    function isOwner(address account) public view returns (bool) {return account == owner;}\r\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IFactory{\r\n        function createPair(address tokenA, address tokenB) external returns (address pair);\r\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline) external;\r\n}\r\n\r\ncontract Merphy is IERC20, Ownable {\r\n    mapping (address =\u003e uint256) _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) public _isExcludedFromFee;\r\n   \r\n    string private constant _name = \"Merphy\";\r\n    string private constant _symbol = \"MERPHY\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private _totalSupply = 1000000000 * (10 ** _decimals);\r\n    \r\n    uint256 private _maxTransferAmount = 15000000 * 10**_decimals;\r\n    uint256 private _maxTxAmount = 15000000 * 10**_decimals;\r\n    uint256 private _maxWalletToken = 15000000 * 10**_decimals;\r\n    uint256 private _swapThreshold = 6000000 * 10**_decimals;\r\n    uint256 private _minTokenAmount = 1000000 * 10**_decimals;\r\n\r\n    uint256 private liquidityFee = 0;\r\n    uint256 private marketingFee = 50;\r\n    uint256 private developmentFee = 50;\r\n    uint256 private burnFee = 0;\r\n    uint256 private buyFee = 0;\r\n    uint256 private sellFee = 0;\r\n    uint256 private transferFee = 0;\r\n    uint256 private denominator = 1000;\r\n    \r\n     IRouter router;\r\n    address private pair;\r\n    bool private tradingAllowed = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private swapTimes;\r\n    bool private swapping; \r\n    \r\n    modifier lockTheSwap {\r\n        swapping = true; _; swapping = false;\r\n        }\r\n\r\n    address internal constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private development_receiver = 0xAA85F762dc14Ac4cbB45aFF7c4dD04E17F11CB00; \r\n    address private marketing_receiver = 0xEb2Ae8D9bbbaB45E607F13de16D9341DcBcE8C6f;\r\n    \r\n\r\n    constructor() Ownable(msg.sender) {\r\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\r\n        router = _router;\r\n        pair = _pair;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[development_receiver] = true;\r\n        _isExcludedFromFee[marketing_receiver] = true;\r\n        _isExcludedFromFee[msg.sender] = true;\r\n        \r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n        }\r\n    \r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n        }\r\n   \r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n        }\r\n    \r\n    function go_live() external onlyOwner {\r\n        tradingAllowed = true;\r\n        swapEnabled = true;\r\n        }\r\n    \r\n    function getOwner() external view override returns (address) {\r\n         return owner; \r\n         }\r\n   \r\n    function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n        }\r\n    \r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n        }\r\n    \r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(msg.sender, recipient, amount);return true;\r\n        }\r\n   \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n        }\r\n    \r\n    function isCont(address addr) internal view returns (bool) {\r\n        uint size; assembly { size := extcodesize(addr) } return size \u003e 0;\r\n         }\r\n   \r\n    function setWhitelistWallet(address _address, bool _enabled) external onlyOwner {\r\n        _isExcludedFromFee[_address] = _enabled;\r\n        }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);return true;\r\n        }\r\n   \r\n    function circulatingSupply() public view override returns (uint256) {\r\n        return _totalSupply - (balanceOf(DEAD)) - (balanceOf(address(0)));\r\n        }\r\n    \r\n    function setFeeWallets(address _newMarketingWallet, address _newDevelopmentWallet) external onlyOwner {\r\n       require(_newMarketingWallet != address(this), \"CA will not be the Fee Reciever\");\r\n       require(_newMarketingWallet != address(0), \"0 addy will not be the fee Reciever\");\r\n       require(_newDevelopmentWallet != address(this), \"CA will not be the Fee Reciever\");\r\n       require(_newDevelopmentWallet != address(0), \"0 addy will not be the fee Reciever\");\r\n       marketing_receiver = _newMarketingWallet;\r\n       development_receiver = _newDevelopmentWallet;\r\n       _isExcludedFromFee[_newMarketingWallet] = true;\r\n       _isExcludedFromFee[_newDevelopmentWallet] = true;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e uint256(0), \"Transfer amount must be greater than zero\");\r\n        require(amount \u003c= balanceOf(sender),\"You are trying to transfer more than your balance\");\r\n         \r\n         if (!_isExcludedFromFee[sender] \u0026\u0026 !_isExcludedFromFee[recipient]){\r\n             require(tradingAllowed, \"tradingAllowed\");\r\n        }\r\n         \r\n         if (!_isExcludedFromFee[sender] \u0026\u0026 !_isExcludedFromFee[recipient] \u0026\u0026 recipient != address(pair) \u0026\u0026 recipient != address(DEAD)){\r\n            require((_balances[recipient] + (amount)) \u003c= _maxWalletToken, \"Exceeds maximum wallet amount.\");\r\n      }\r\n        \r\n        if (sender != pair){\r\n        require(amount \u003c= _maxTransferAmount || _isExcludedFromFee[sender] || _isExcludedFromFee[recipient], \"TX Limit Exceeded\");\r\n        require(amount \u003c= _maxTxAmount || _isExcludedFromFee[sender] || _isExcludedFromFee[recipient], \"TX Limit Exceeded\");\r\n      }\r\n          \r\n      if (recipient == pair \u0026\u0026 !_isExcludedFromFee[sender]){\r\n         swapTimes += uint256(1);\r\n      }\r\n       \r\n        swapBack(sender, recipient, amount);\r\n        _balances[sender] = _balances[sender] - (amount);\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\r\n        _balances[recipient] = _balances[recipient] + (amountReceived);\r\n        emit Transfer(sender, recipient, amountReceived);\r\n    }\r\n\r\n    function setFee(uint256 _liquidity, uint256 _marketing, uint256 _burn, uint256 _development, uint256 _buyFee, uint256 _sell, uint256 _trans) external onlyOwner {\r\n        liquidityFee = _liquidity;\r\n        marketingFee = _marketing;\r\n        burnFee = _burn;\r\n        developmentFee = _development;\r\n        buyFee = _buyFee;\r\n        sellFee = _sell;\r\n        transferFee = _trans;\r\n    }\r\n\r\n    function setMxTxAmount(uint256 maxTxAmount, uint256 maxTransferAmount, uint256 maxWalletToken) external onlyOwner {\r\n          _maxTransferAmount = maxTxAmount * 10**_decimals;\r\n          _maxTxAmount = maxTransferAmount * 10**_decimals;\r\n          _maxWalletToken = maxWalletToken * 10**_decimals;\r\n    }\r\n\r\n    function removeAllLimit() external onlyOwner {\r\n          _maxTransferAmount = _totalSupply;\r\n          _maxTxAmount = _totalSupply;\r\n          _maxWalletToken = _totalSupply;\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\r\n        uint256 _denominator = (liquidityFee + (1) + (marketingFee) + (developmentFee)) * (2);\r\n        uint256 tokensToAddLiquidityWith = tokens * (liquidityFee) / (_denominator);\r\n        uint256 toSwap = tokens - (tokensToAddLiquidityWith);\r\n        uint256 initialBalance = address(this).balance;\r\n       \r\n        swapTokensForETH(toSwap);\r\n       \r\n        uint256 deltaBalance = address(this).balance - (initialBalance);\r\n        uint256 unitBalance= deltaBalance / (_denominator - (liquidityFee));\r\n        \r\n        uint256 ETHToAddLiquidityWith = unitBalance * (liquidityFee);\r\n        if(ETHToAddLiquidityWith \u003e uint256(0)){\r\n            addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); \r\n            }\r\n        \r\n        uint256 marketingAmt = unitBalance * (2) * (marketingFee);\r\n        if(marketingAmt \u003e 0){\r\n            payable(marketing_receiver).transfer(marketingAmt);\r\n            }\r\n       \r\n       uint256 developmentFeeAmt = unitBalance * (2) * (developmentFee);\r\n        if(developmentFeeAmt \u003e 0){\r\n            payable(development_receiver).transfer(developmentFeeAmt);\r\n            }\r\n        \r\n        uint256 remainingBalance = address(this).balance;\r\n        if(remainingBalance \u003e uint256(0)){\r\n            payable(development_receiver).transfer(remainingBalance);\r\n            }\r\n   }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.addLiquidityETH{value: ETHAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0,\r\n            0,\r\n            owner,\r\n            block.timestamp);\r\n    }\r\n\r\n    function swapTokensForETH(uint256 tokenAmount) private {\r\n        require(tokenAmount \u003e 0, \"amount must be greeter than 0\");\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n        _approve(address(this), address(router), tokenAmount);\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp);\r\n    }\r\n\r\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\r\n        bool aboveMin = amount \u003e= _minTokenAmount;\r\n        bool aboveThreshold = balanceOf(address(this)) \u003e= _swapThreshold;\r\n        return !swapping \u0026\u0026 swapEnabled \u0026\u0026 tradingAllowed \u0026\u0026 aboveMin \u0026\u0026 !_isExcludedFromFee[sender] \u0026\u0026 recipient == pair \u0026\u0026 swapTimes \u003e= uint256(0) \u0026\u0026 aboveThreshold;\r\n    }\r\n\r\n    function swapBack(address sender, address recipient, uint256 amount) internal {\r\n        if(shouldSwapBack(sender, recipient, amount)){\r\n            swapAndLiquify(_swapThreshold); swapTimes = uint256(0);\r\n            }\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !_isExcludedFromFee[sender] \u0026\u0026 !_isExcludedFromFee[recipient];\r\n    }\r\n\r\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\r\n        if(recipient == pair){\r\n            return sellFee;\r\n            }\r\n        \r\n        if(sender == pair){\r\n            return buyFee;\r\n            }\r\n       \r\n        return transferFee;\r\n    }\r\n\r\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        if(getTotalFee(sender, recipient) \u003e 0){\r\n        uint256 feeAmount = amount / (denominator) * (getTotalFee(sender, recipient));\r\n        _balances[address(this)] = _balances[address(this)] + (feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);\r\n        if(burnFee \u003e uint256(0)){_transfer(address(this), address(DEAD), amount / (denominator) * (burnFee));}\r\n        return amount - (feeAmount);} return amount;\r\n    }\r\n\r\n   function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"go_live\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeAllLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketing\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_development\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_trans\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMarketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newDevelopmentWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransferAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWalletToken\",\"type\":\"uint256\"}],\"name\":\"setMxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setWhitelistWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Merphy",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://8234fa6a30182fbd8a06db050ddd1e7436eca232c2ca10a2fd319f3b89d3dca8"
    }
  ]
}
