{
  "TxHash": "0x7c34c4be2c7ff493ae77b1d22e1475f801b77340771161f1ea7c2fa8d2667144",
  "ContractAddress": "0xf75A5f292cd33FA67253a0B95ECdb66D2349D3fd",
  "Name": "NoWarToken",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract AccessControl {\r\n    mapping(bytes32 =\u003e mapping(address =\u003e bool)) private _roles;\r\n\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    constructor () {\r\n        \r\n    }\r\n\r\n    function hasRole(bytes32 role, address account) public view returns (bool) {\r\n        return _roles[role][account];\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal {\r\n        require(account != address(0), \"AccessControl: cannot grant role to the zero address\");\r\n        if (!_roles[role][account]) {\r\n            _roles[role][account] = true;\r\n            emit RoleGranted(role, account, msg.sender);\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal {\r\n        require(account != address(0), \"AccessControl: cannot grant role to the zero address\");\r\n        if (_roles[role][account]) {\r\n            _roles[role][account] = false;\r\n            emit RoleRevoked(role, account, msg.sender);\r\n        }        \r\n    }\r\n}\r\n\r\nabstract contract Ownable2Step is Context, AccessControl {\r\n    address private _owner;\r\n    address private _newOwnerCandidate;\r\n    uint private changeOwnershipTimestamp;\r\n    uint256 private constant onwerDelayTime = 1 minutes;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event NewOwnerCandidateSet(address indexed previousCandidate, address indexed newCandidate);\r\n    event OwnershipRecoveryInitiated(address indexed currentOwner, address indexed newOwnerCandidate);\r\n    event OwnershipRecovered(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        require(msgSender != address(0), \"Invalid message sender address\");\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function newOwnerCandidate() public view returns (address) {\r\n        return _newOwnerCandidate;\r\n    }\r\n\r\n    function transferOwnership(address newOwnerCandidate_) public {\r\n        require(msg.sender == _owner, \"Caller not onwer\");\r\n        require(newOwnerCandidate_ != address(0), \"Invalid new owner candidate address\");\r\n        require(newOwnerCandidate_ != _owner, \"New onwer is the same as the current one\");\r\n        _newOwnerCandidate = newOwnerCandidate_;\r\n        changeOwnershipTimestamp = block.timestamp + onwerDelayTime; // 7 days delay for safety\r\n        emit NewOwnerCandidateSet(_newOwnerCandidate, newOwnerCandidate_);\r\n    }\r\n\r\n    function acceptOwnership() public {\r\n        require(_newOwnerCandidate != address(0), \"Invalid new owner candidate address\");\r\n        require(msg.sender == _newOwnerCandidate, \"Only new owner candidate can initiate recovery\");\r\n        require(block.timestamp \u003e= changeOwnershipTimestamp, \"Ownership change period not elapsed\");\r\n\r\n        address previousOwner = _owner;\r\n        _owner = _newOwnerCandidate;\r\n        delete _newOwnerCandidate;\r\n\r\n        emit OwnershipRecovered(previousOwner, _owner);\r\n        emit OwnershipTransferred(previousOwner, _owner);\r\n\r\n        _revokeRole(ADMIN_ROLE, previousOwner);\r\n        _grantRole(ADMIN_ROLE, _owner);\r\n    }\r\n\r\n    function cancelOwnershipRecovery() public {\r\n        require(msg.sender == _owner, \"Caller not onwer\");\r\n        require(_newOwnerCandidate != address(0), \"No ownership recovery in progress\");\r\n        delete _newOwnerCandidate;\r\n        emit NewOwnerCandidateSet(_newOwnerCandidate, address(0));\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract NoWarToken is IERC20, Ownable2Step {\r\n    using SafeMath for uint256;\r\n\r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private _isExcludedFromFee;\r\n    mapping(address =\u003e bool) private bots;\r\n    \r\n    address payable private _feeWallet;\r\n\r\n    uint256 public constant FEE_RATE = 2; // 2% fee\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _tTotal = 10**9 * 10**_decimals;\r\n    string private constant _name = unicode\"test18\";\r\n    string private constant _symbol = unicode\"TEST18\";\r\n    uint256 public _maxTxAmount = 2 * 10**7 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 2 * 10**7 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold = 1 * 10**5 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private sellCount = 0;\r\n    uint256 private lastSellBlock = 0;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    event FeeWalletUpdated(address indexed previousFeeWallet, address indexed newFeeWallet);\r\n    event EtherReceived(address indexed to, uint256 amount);\r\n    event EtherRescued(uint256 amount);\r\n    event BotAdded(address botAddress);\r\n    event BotRemoved(address botAddress);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor() {\r\n        _grantRole(ADMIN_ROLE, _msgSender());\r\n        \r\n        _feeWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_feeWallet] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"NOWAR: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"NOWAR: approve from the zero address\");\r\n        require(spender != address(0), \"NOWAR: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function addAdmin(address newAdmin) public {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: not an admin\");\r\n        _grantRole(ADMIN_ROLE, newAdmin);\r\n    }\r\n\r\n    function removeAdmin(address delAdmin) public {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: not an admin\");\r\n        require(delAdmin != owner(), \"NOWAR: can not remove onwer\");\r\n        _revokeRole(ADMIN_ROLE, delAdmin);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private  {\r\n        require(from != address(0), \"NOWAR: transfer from the zero address\");\r\n        require(to != address(0), \"NOWAR: transfer to the zero address\");\r\n        require(amount \u003e 0, \"NOWAR: Transfer amount must be greater than zero\");\r\n        require(_balances[from] \u003e= amount, \"NOWAR: transfer amount exceeds balance\");\r\n\r\n        uint256 taxAmount = 0;\r\n        \r\n        if (from != owner() \u0026\u0026 to != owner() \u0026\u0026 to != _feeWallet) {\r\n            require(!bots[from] \u0026\u0026 !bots[to], \"NOWAR: Bot can not transfer.\");\r\n\r\n            if (from == uniswapV2Pair \u0026\u0026 to != address(uniswapV2Router) \u0026\u0026 !_isExcludedFromFee[to]) {\r\n                require(amount \u003c= _maxTxAmount, \"NOWAR: Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount \u003c= _maxWalletSize, \"NOWAR: Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if (to == uniswapV2Pair \u0026\u0026 from != address(this)) {\r\n                taxAmount = amount.mul(FEE_RATE).div(100);\r\n            }\r\n\r\n            if (taxAmount \u003e 0) {\r\n                _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n                emit Transfer(from, address(this), taxAmount);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            bool canSwap = taxAmount \u003e 0 \u0026\u0026 !inSwap \u0026\u0026 to == uniswapV2Pair \u0026\u0026 swapEnabled \u0026\u0026 contractTokenBalance \u003e _taxSwapThreshold;\r\n\r\n            if (canSwap) {\r\n                if (block.number \u003e lastSellBlock) {\r\n                    sellCount = 0;\r\n                }\r\n                require(sellCount \u003c 3, \"NOWAR: Only 3 sells per block!\");\r\n                sellCount++;\r\n                lastSellBlock = block.number;\r\n\r\n                swapTokensForEth(min(amount, contractTokenBalance));\r\n            }\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a \u003e b) ? b : a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        require(tokenAmount \u003e 0, \"NOWAR: Token amount must be greater than zero\");\r\n        require(balanceOf(address(this)) \u003e= tokenAmount, \"NOWAR: Insufficient token balance\");\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance \u003e 0) {\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    // Function to get the current fee wallet address\r\n    function getFeeWallet() public view returns (address payable) {\r\n        return _feeWallet;\r\n    }\r\n    // Function to set a new fee wallet address\r\n    function setFeeWallet(address newFeeWallet_) public {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not an admin\");\r\n        require(newFeeWallet_ != address(0), \"Invalid address: zero address\");\r\n        require(newFeeWallet_ != _feeWallet, \"New fee wallet address is the same as the current one\");\r\n\r\n        address payable previousFeeWallet_ = _feeWallet;\r\n        _isExcludedFromFee[previousFeeWallet_] = false;\r\n        _isExcludedFromFee[newFeeWallet_] = true;\r\n        _feeWallet = payable(newFeeWallet_);\r\n        emit FeeWalletUpdated(previousFeeWallet_, newFeeWallet_);\r\n    }\r\n\r\n    function removeLimits() external{\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not an admin\");\r\n        \r\n        // Ensure the new values are within reasonable bounds\r\n        uint256 newMaxTxAmount_ = _tTotal;\r\n        uint256 newMaxWalletSize_ = _tTotal;\r\n        \r\n        require(newMaxTxAmount_ \u003e 0 \u0026\u0026 newMaxTxAmount_ \u003c= _tTotal, \"NOWAR: Invalid max transaction amount\");\r\n        require(newMaxWalletSize_ \u003e 0 \u0026\u0026 newMaxWalletSize_ \u003c= _tTotal, \"NOWAR: Invalid max wallet size\");\r\n        \r\n        _maxTxAmount = newMaxTxAmount_;\r\n        _maxWalletSize = newMaxWalletSize_;\r\n        \r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function openTrading() external {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not an admin\");\r\n        require(!tradingOpen, \"NOWAR: Trading is already open\");\r\n\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n\r\n        // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D  ether uniswap V2 router\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        \r\n        uint256 maxAllowance = type(uint96).max;\r\n        if (maxAllowance \u003e _tTotal) {\r\n            maxAllowance = _tTotal; // Limit allowance to total supply if necessary\r\n        }\r\n\r\n        bool success = IERC20(uniswapV2Pair).approve(address(uniswapV2Router), maxAllowance);\r\n        require(success, \"NOWAR: openTrading Approval failed\");\r\n    }\r\n\r\n    function addBot(address botAddress_) public {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not a admin\");\r\n        require(botAddress_ != address(0), \"NOWAR: Invalid address\");\r\n        bots[botAddress_] = true;\r\n        emit BotAdded(botAddress_);\r\n    }\r\n\r\n    function delBots(address nobotAddress_) public {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not a admin\");\r\n        require(nobotAddress_ != address(0), \"NOWAR: Invalid address\");\r\n        bots[nobotAddress_] = false;\r\n        emit BotRemoved(nobotAddress_);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not a admin\");\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if(tokenBalance \u003e 0 \u0026\u0026 swapEnabled) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n    }\r\n\r\n    function rescueNowar(uint256 percent) external {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not a admin\");\r\n        uint256 _amount = balanceOf(address(this)).mul(percent).div(100);\r\n        require(_amount \u003e 0, \"NOWAR: Insufficient NOWAR\");\r\n        _transfer(address(this), _feeWallet, _amount);\r\n    }\r\n\r\n    function rescueEth() external {\r\n        require(hasRole(ADMIN_ROLE, msg.sender), \"NOWAR: Not a admin\");\r\n        uint256 _amount = address(this).balance;\r\n        require(_amount \u003e 0, \"NOWAR: Insufficient Ether\");\r\n        sendETHToFee(_amount);\r\n    }\r\n\r\n    receive() external payable {\r\n        emit EtherReceived(msg.sender, msg.value);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        (bool success, ) = _feeWallet.call{value: amount}(\"\");\r\n        require(success, \"NOWAR: Transfer to fee wallet failed\");\r\n\r\n        emit EtherRescued(amount);\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"BotAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"botAddress\",\"type\":\"address\"}],\"name\":\"BotRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherRescued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousFeeWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeWallet\",\"type\":\"address\"}],\"name\":\"FeeWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousCandidate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newCandidate\",\"type\":\"address\"}],\"name\":\"NewOwnerCandidateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currentOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwnerCandidate\",\"type\":\"address\"}],\"name\":\"OwnershipRecoveryInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"botAddress_\",\"type\":\"address\"}],\"name\":\"addBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelOwnershipRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nobotAddress_\",\"type\":\"address\"}],\"name\":\"delBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwnerCandidate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delAdmin\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"name\":\"rescueNowar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFeeWallet_\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwnerCandidate_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "NoWarToken",
      "CompilerVersion": "v0.8.0+commit.c7dfd78e",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://9aacd2c34303ecdc3fd54b3fbe3967fe55710d1a68dfbc20f174b877123ff31f"
    }
  ]
}
