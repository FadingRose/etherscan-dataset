{
  "TxHash": "0xc7f499fa71c856b93db481dbe1e0d26bc6dac57b09557c361d32e17424f9098f",
  "ContractAddress": "0xcF9Bee2E20845A32DAdf130c3571B031645277d3",
  "Name": "OpenLiquidityExchange",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nLiquidity Exchange:\r\n\r\ndApp: openliquidity.io\r\n\r\nbacked by CryptoDo\r\n\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Library for reading and writing primitive types to specific storage slots.\r\n *\r\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\r\n * This library helps with reading and writing to such slots without the need for inline assembly.\r\n *\r\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\r\n *\r\n * Example usage to set ERC1967 implementation slot:\r\n * ```solidity\r\n * contract ERC1967 {\r\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n *\r\n *     function _getImplementation() internal view returns (address) {\r\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n *     }\r\n *\r\n *     function _setImplementation(address newImplementation) internal {\r\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\r\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\r\n * _Available since v4.9 for `string`, `bytes`._\r\n */\r\nlibrary StorageSlotUpgradeable {\r\n    struct AddressSlot {\r\n        address value;\r\n    }\r\n\r\n    struct BooleanSlot {\r\n        bool value;\r\n    }\r\n\r\n    struct Bytes32Slot {\r\n        bytes32 value;\r\n    }\r\n\r\n    struct Uint256Slot {\r\n        uint256 value;\r\n    }\r\n\r\n    struct StringSlot {\r\n        string value;\r\n    }\r\n\r\n    struct BytesSlot {\r\n        bytes value;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\r\n     */\r\n    function getAddressSlot(\r\n        bytes32 slot\r\n    ) internal pure returns (AddressSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBooleanSlot(\r\n        bytes32 slot\r\n    ) internal pure returns (BooleanSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\r\n     */\r\n    function getBytes32Slot(\r\n        bytes32 slot\r\n    ) internal pure returns (Bytes32Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\r\n     */\r\n    function getUint256Slot(\r\n        bytes32 slot\r\n    ) internal pure returns (Uint256Slot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\r\n     */\r\n    function getStringSlot(\r\n        bytes32 slot\r\n    ) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\r\n     */\r\n    function getStringSlot(\r\n        string storage store\r\n    ) internal pure returns (StringSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\r\n     */\r\n    function getBytesSlot(\r\n        bytes32 slot\r\n    ) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := slot\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\r\n     */\r\n    function getBytesSlot(\r\n        bytes storage store\r\n    ) internal pure returns (BytesSlot storage r) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            r.slot := store.slot\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/interfaces/IERC1967Upgradeable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\r\n *\r\n * _Available since v4.8.3._\r\n */\r\ninterface IERC1967Upgradeable {\r\n    /**\r\n     * @dev Emitted when the implementation is upgraded.\r\n     */\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /**\r\n     * @dev Emitted when the admin account has changed.\r\n     */\r\n    event AdminChanged(address previousAdmin, address newAdmin);\r\n\r\n    /**\r\n     * @dev Emitted when the beacon is changed.\r\n     */\r\n    event BeaconUpgraded(address indexed beacon);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/proxy/beacon/IBeaconUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\r\n */\r\ninterface IBeaconUpgradeable {\r\n    /**\r\n     * @dev Must return an address that can be used as a delegate call target.\r\n     *\r\n     * {BeaconProxy} will check that this address is a contract.\r\n     */\r\n    function implementation() external view returns (address);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/interfaces/draft-IERC1822Upgradeable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\r\n * proxy whose upgrades are fully controlled by the current implementation.\r\n */\r\ninterface IERC1822ProxiableUpgradeable {\r\n    /**\r\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\r\n     * address.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy.\r\n     */\r\n    function proxiableUUID() external view returns (bytes32);\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/utils/AddressUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(\r\n            address(this).balance \u003e= amount,\r\n            \"Address: insufficient balance\"\r\n        );\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(\r\n            success,\r\n            \"Address: unable to send value, recipient may have reverted\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                \"Address: low-level call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                value,\r\n                \"Address: low-level call with value failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            \"Address: insufficient balance for call\"\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal view returns (bytes memory) {\r\n        return\r\n            functionStaticCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level static call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionDelegateCall(\r\n                target,\r\n                data,\r\n                \"Address: low-level delegate call failed\"\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/Initializable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall \u0026\u0026 _initialized \u003c 1) ||\r\n                (!AddressUpgradeable.isContract(address(this)) \u0026\u0026\r\n                    _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(\r\n            !_initializing \u0026\u0026 _initialized \u003c version,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\n/**\r\n * @dev This abstract contract provides getters and event emitting update functions for\r\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract ERC1967UpgradeUpgradeable is\r\n    Initializable,\r\n    IERC1967Upgradeable\r\n{\r\n    function __ERC1967Upgrade_init() internal onlyInitializing {}\r\n\r\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {}\r\n\r\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\r\n    bytes32 private constant _ROLLBACK_SLOT =\r\n        0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\r\n\r\n    /**\r\n     * @dev Storage slot with the address of the current implementation.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\r\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\r\n\r\n    /**\r\n     * @dev Returns the current implementation address.\r\n     */\r\n    function _getImplementation() internal view returns (address) {\r\n        return\r\n            StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 implementation slot.\r\n     */\r\n    function _setImplementation(address newImplementation) private {\r\n        require(\r\n            AddressUpgradeable.isContract(newImplementation),\r\n            \"ERC1967: new implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable\r\n            .getAddressSlot(_IMPLEMENTATION_SLOT)\r\n            .value = newImplementation;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeTo(address newImplementation) internal {\r\n        _setImplementation(newImplementation);\r\n        emit Upgraded(newImplementation);\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _upgradeTo(newImplementation);\r\n        if (data.length \u003e 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     */\r\n    function _upgradeToAndCallUUPS(\r\n        address newImplementation,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\r\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\r\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\r\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\r\n            _setImplementation(newImplementation);\r\n        } else {\r\n            try\r\n                IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID()\r\n            returns (bytes32 slot) {\r\n                require(\r\n                    slot == _IMPLEMENTATION_SLOT,\r\n                    \"ERC1967Upgrade: unsupported proxiableUUID\"\r\n                );\r\n            } catch {\r\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\r\n            }\r\n            _upgradeToAndCall(newImplementation, data, forceCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Storage slot with the admin of the contract.\r\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\r\n     * validated in the constructor.\r\n     */\r\n    bytes32 internal constant _ADMIN_SLOT =\r\n        0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\r\n\r\n    /**\r\n     * @dev Returns the current admin.\r\n     */\r\n    function _getAdmin() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new address in the EIP1967 admin slot.\r\n     */\r\n    function _setAdmin(address newAdmin) private {\r\n        require(\r\n            newAdmin != address(0),\r\n            \"ERC1967: new admin is the zero address\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes the admin of the proxy.\r\n     *\r\n     * Emits an {AdminChanged} event.\r\n     */\r\n    function _changeAdmin(address newAdmin) internal {\r\n        emit AdminChanged(_getAdmin(), newAdmin);\r\n        _setAdmin(newAdmin);\r\n    }\r\n\r\n    /**\r\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\r\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\r\n     */\r\n    bytes32 internal constant _BEACON_SLOT =\r\n        0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\r\n\r\n    /**\r\n     * @dev Returns the current beacon.\r\n     */\r\n    function _getBeacon() internal view returns (address) {\r\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\r\n    }\r\n\r\n    /**\r\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\r\n     */\r\n    function _setBeacon(address newBeacon) private {\r\n        require(\r\n            AddressUpgradeable.isContract(newBeacon),\r\n            \"ERC1967: new beacon is not a contract\"\r\n        );\r\n        require(\r\n            AddressUpgradeable.isContract(\r\n                IBeaconUpgradeable(newBeacon).implementation()\r\n            ),\r\n            \"ERC1967: beacon implementation is not a contract\"\r\n        );\r\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\r\n    }\r\n\r\n    /**\r\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\r\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\r\n     *\r\n     * Emits a {BeaconUpgraded} event.\r\n     */\r\n    function _upgradeBeaconToAndCall(\r\n        address newBeacon,\r\n        bytes memory data,\r\n        bool forceCall\r\n    ) internal {\r\n        _setBeacon(newBeacon);\r\n        emit BeaconUpgraded(newBeacon);\r\n        if (data.length \u003e 0 || forceCall) {\r\n            AddressUpgradeable.functionDelegateCall(\r\n                IBeaconUpgradeable(newBeacon).implementation(),\r\n                data\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/proxy/utils/UUPSUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\r\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\r\n *\r\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\r\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\r\n * `UUPSUpgradeable` with a custom implementation of upgrades.\r\n *\r\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\r\n *\r\n * _Available since v4.1._\r\n */\r\nabstract contract UUPSUpgradeable is\r\n    Initializable,\r\n    IERC1822ProxiableUpgradeable,\r\n    ERC1967UpgradeUpgradeable\r\n{\r\n    function __UUPSUpgradeable_init() internal onlyInitializing {}\r\n\r\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {}\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\r\n    address private immutable __self = address(this);\r\n\r\n    /**\r\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\r\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\r\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\r\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\r\n     * fail.\r\n     */\r\n    modifier onlyProxy() {\r\n        require(\r\n            address(this) != __self,\r\n            \"Function must be called through delegatecall\"\r\n        );\r\n        require(\r\n            _getImplementation() == __self,\r\n            \"Function must be called through active proxy\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\r\n     * callable on the implementing contract but not through proxies.\r\n     */\r\n    modifier notDelegated() {\r\n        require(\r\n            address(this) == __self,\r\n            \"UUPSUpgradeable: must not be called through delegatecall\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\r\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\r\n     *\r\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\r\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\r\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\r\n     */\r\n    function proxiableUUID()\r\n        external\r\n        view\r\n        virtual\r\n        override\r\n        notDelegated\r\n        returns (bytes32)\r\n    {\r\n        return _IMPLEMENTATION_SLOT;\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\r\n    }\r\n\r\n    /**\r\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\r\n     * encoded in `data`.\r\n     *\r\n     * Calls {_authorizeUpgrade}.\r\n     *\r\n     * Emits an {Upgraded} event.\r\n     *\r\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\r\n     */\r\n    function upgradeToAndCall(\r\n        address newImplementation,\r\n        bytes memory data\r\n    ) public payable virtual onlyProxy {\r\n        _authorizeUpgrade(newImplementation);\r\n        _upgradeToAndCallUUPS(newImplementation, data, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\r\n     * {upgradeTo} and {upgradeToAndCall}.\r\n     *\r\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\r\n     *\r\n     * ```solidity\r\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\r\n     * ```\r\n     */\r\n    function _authorizeUpgrade(address newImplementation) internal virtual;\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/security/ReentrancyGuardUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/utils/ContextUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {}\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {}\r\n\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n\r\n// File: @openzeppelin/contracts-upgradeable@4.9.2/access/OwnableUpgradeable.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n\r\n// File: liq_flattened.sol\r\n\r\n// File: liquidity.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface ILiquidityLocker {\r\n    function transferLockOwnership(\r\n        address _lpToken,\r\n        uint256 _index,\r\n        uint256 _lockID,\r\n        address payable _newOwner\r\n    ) external;\r\n\r\n    function getUserLockForTokenAtIndex(\r\n        address _user,\r\n        address _lpToken,\r\n        uint256 _index\r\n    )\r\n        external\r\n        view\r\n        returns (uint256, uint256, uint256, uint256, uint256, address);\r\n}\r\n\r\ncontract OpenLiquidityExchange is\r\n    OwnableUpgradeable,\r\n    ReentrancyGuardUpgradeable,\r\n    UUPSUpgradeable\r\n{\r\n    ILiquidityLocker public liquidityLocker;\r\n\r\n    struct Deal {\r\n        address borrower;\r\n        address lpToken;\r\n        uint256 lockIndex;\r\n        uint256 dealAmount;\r\n        uint256 interestRate;\r\n        uint256 loanDuration;\r\n        uint256 startTime;\r\n        address lender;\r\n        bool isRepaid;\r\n        bool isActive;\r\n        bool collateralClaimed;\r\n    }\r\n\r\n    struct Auction {\r\n        address owner;\r\n        address highestBidOwner;\r\n        address lpToken;\r\n        uint256 lockIndex;\r\n        uint256 startPrice;\r\n        uint256 imeddiatelySellPrice;\r\n        uint256 bidStep;\r\n        uint256 duration;\r\n        uint256 startTime;\r\n        bool isActive;\r\n        bool isFinishedImmediately;\r\n        bool immediatelySell;\r\n        bool isRewardClaimed;\r\n    }\r\n\r\n    mapping(address =\u003e uint256[]) private userDeals;\r\n    mapping(address =\u003e uint256[]) private userAuction;\r\n    mapping(uint256 =\u003e bool) public auctionClaimed;\r\n\r\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) bids;\r\n    mapping(uint256 =\u003e Auction) public auctions;\r\n    mapping(uint256 =\u003e Deal) public loans;\r\n    uint256 public nextAuctionId;\r\n    uint256 public nextLoanId;\r\n    uint256 public ownerFee;\r\n    address public feeReceiver;\r\n\r\n    mapping(address =\u003e address) referrals;\r\n    uint256 public referralFee = 2000; // 20% from ownerFee\r\n\r\n    // События\r\n    event DealInitialized(\r\n        uint256 indexed dealId,\r\n        address indexed borrower,\r\n        address lpToken,\r\n        uint256 lockIndex,\r\n        uint256 dealAmount,\r\n        uint256 interestRate,\r\n        uint256 loanDuration\r\n    );\r\n    event DealActivated(uint256 indexed dealId, address indexed activator);\r\n    event DealMade(uint256 indexed dealId, address indexed lender);\r\n    event LoanRepaid(uint256 indexed dealId, address indexed repayer);\r\n    event CollateralClaimed(uint256 indexed dealId, address indexed claimer);\r\n    event AuctionStarted(\r\n        uint256 indexed auctionId,\r\n        address indexed owner,\r\n        address lpToken,\r\n        uint256 lockIndex,\r\n        uint256 startPrice,\r\n        uint256 imeddiatelySellPrice,\r\n        uint256 bidStep,\r\n        uint256 duration,\r\n        bool immediatelySell\r\n    );\r\n    event AuctionActivated(\r\n        uint256 indexed auctionId,\r\n        address indexed activator\r\n    );\r\n    event BidMade(\r\n        uint256 indexed auctionId,\r\n        address indexed bidder,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event AuctionWon(uint256 indexed auctionId, address indexed winner);\r\n    event AuctionPaymentClaimed(\r\n        uint256 indexed auctionId,\r\n        address indexed owner,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event BidWithdrawn(\r\n        uint256 indexed auctionId,\r\n        address indexed bidder,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n    event ImmediatelyBought(\r\n        uint256 indexed auctionId,\r\n        uint256 amount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    function initialize(\r\n        ILiquidityLocker _liquidityLocker,\r\n        uint256 _ownerFee,\r\n        address _feeReceiver\r\n    ) public initializer {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        require(_ownerFee \u003c 10000, \"Owner fee must be less than 10000\");\r\n        require(\r\n            _feeReceiver != address(0),\r\n            \"Fee receiver cannot be zero address\"\r\n        );\r\n        liquidityLocker = _liquidityLocker;\r\n        ownerFee = _ownerFee;\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    function _authorizeUpgrade(\r\n        address newImplementation\r\n    ) internal override onlyOwner {}\r\n\r\n    function setLiquidityLocker(\r\n        ILiquidityLocker _liquidityLocker\r\n    ) external onlyOwner {\r\n        liquidityLocker = _liquidityLocker;\r\n    }\r\n\r\n    function setOwnerFee(uint256 _ownerFee) external onlyOwner {\r\n        require(_ownerFee \u003c 10000, \"Owner fee must be less than 10000\");\r\n        ownerFee = _ownerFee;\r\n    }\r\n\r\n    function setFeeReceiver(address _feeReceiver) external onlyOwner {\r\n        require(\r\n            _feeReceiver != address(0),\r\n            \"Fee receiver cannot be zero address\"\r\n        );\r\n        feeReceiver = _feeReceiver;\r\n    }\r\n\r\n    function setReferralFee(uint256 _newReferralFee) external onlyOwner {\r\n        require(\r\n            _newReferralFee \u003c= 10000,\r\n            \"Referral Fee must be no greater than 10000\"\r\n        );\r\n        referralFee = _newReferralFee;\r\n    }\r\n\r\n    function checkLiquidityOwner(\r\n        address expectedOwner,\r\n        address lpToken,\r\n        uint256 index\r\n    ) public view returns (bool) {\r\n        (, , , , , address owner) = liquidityLocker.getUserLockForTokenAtIndex(\r\n            expectedOwner,\r\n            lpToken,\r\n            index\r\n        );\r\n        return owner == expectedOwner;\r\n    }\r\n\r\n    function getUserLoans(\r\n        address _address\r\n    ) external view returns (uint256[] memory) {\r\n        return userDeals[_address];\r\n    }\r\n\r\n    function getUserAuctions(\r\n        address _address\r\n    ) external view returns (uint256[] memory) {\r\n        return userAuction[_address];\r\n    }\r\n\r\n    function initializeLoan(\r\n        address lpToken,\r\n        uint256 lockIndex,\r\n        uint256 dealAmount,\r\n        uint256 interestRate,\r\n        uint256 loanDuration\r\n    ) public {\r\n        require(loanDuration \u003e 0, \"Loan duration must be greater than 0\");\r\n        require(\r\n            checkLiquidityOwner(msg.sender, lpToken, lockIndex),\r\n            \"User does not owner of this lock\"\r\n        );\r\n        require(interestRate \u003e 0, \"interestRate must be greater than 0\");\r\n        require(dealAmount \u003e 0, \"dealAmount must be greater than 0\");\r\n\r\n        loans[nextLoanId] = Deal({\r\n            borrower: msg.sender,\r\n            lpToken: lpToken,\r\n            lockIndex: lockIndex,\r\n            dealAmount: dealAmount,\r\n            interestRate: interestRate,\r\n            loanDuration: loanDuration,\r\n            startTime: 0,\r\n            lender: address(0),\r\n            isRepaid: false,\r\n            isActive: false,\r\n            collateralClaimed: false\r\n        });\r\n\r\n        emit DealInitialized(\r\n            nextLoanId,\r\n            msg.sender,\r\n            lpToken,\r\n            lockIndex,\r\n            dealAmount,\r\n            interestRate,\r\n            loanDuration\r\n        );\r\n\r\n        userDeals[msg.sender].push(nextLoanId);\r\n\r\n        nextLoanId++;\r\n    }\r\n\r\n    function placeLoanOffer(uint256 dealId) external {\r\n        Deal storage deal = loans[dealId];\r\n        require(deal.borrower != address(0), \"Deal is empty\");\r\n        require(\r\n            checkLiquidityOwner(address(this), deal.lpToken, deal.lockIndex),\r\n            \"Contract does not owner of this liquidity\"\r\n        );\r\n        deal.isActive = true;\r\n        emit DealActivated(dealId, msg.sender);\r\n    }\r\n\r\n    function acceptLoanOffer(\r\n        uint256 dealId,\r\n        address referrer\r\n    ) external payable nonReentrant {\r\n        Deal storage deal = loans[dealId];\r\n        require(\r\n            msg.sender.code.length == 0,\r\n            \"Caller cannot be a smart contract\"\r\n        );\r\n        require(deal.isActive, \"Deal inactive\");\r\n        require(deal.lender == address(0), \"Deal already has a lender\");\r\n        require(\r\n            deal.borrower != msg.sender,\r\n            \"Borrower cannot make loan for himself\"\r\n        );\r\n        require(msg.value \u003e= deal.dealAmount, \"Insufficient funds\");\r\n\r\n        deal.lender = msg.sender;\r\n        deal.startTime = block.timestamp;\r\n\r\n        uint256 feeAmount = (deal.dealAmount * ownerFee) / 10000;\r\n\r\n        uint256 ownerFeeAmount;\r\n        uint256 referralFeeAmount;\r\n\r\n        if (referrals[msg.sender] == address(0) \u0026\u0026 referrer != address(0)) {\r\n            referrals[msg.sender] = referrer;\r\n        }\r\n\r\n        address originalReferrer = referrals[msg.sender];\r\n\r\n        if (originalReferrer != address(0)) {\r\n            referralFeeAmount = (feeAmount * referralFee) / 10000;\r\n            (bool referralFeeSent, ) = payable(originalReferrer).call{\r\n                value: referralFeeAmount\r\n            }(\"\");\r\n            require(referralFeeSent, \"Failed to send referral fee\");\r\n        }\r\n\r\n        ownerFeeAmount = feeAmount - referralFeeAmount;\r\n\r\n        (bool feeSent, ) = payable(feeReceiver).call{value: ownerFeeAmount}(\"\");\r\n        require(feeSent, \"Failed to send fee\");\r\n\r\n        (bool sent, ) = payable(deal.borrower).call{\r\n            value: msg.value - feeAmount\r\n        }(\"\");\r\n        require(sent, \"Failed to send funds\");\r\n\r\n        emit DealMade(dealId, msg.sender);\r\n    }\r\n\r\n    function cancelLoan(uint256 dealId) public {\r\n        Deal storage deal = loans[dealId];\r\n        require(deal.isActive == true, \"Loan inactive\");\r\n        require(deal.borrower == msg.sender, \"Caller not lock owner\");\r\n        require(deal.lender == address(0), \"Cannot cancel processing deal\");\r\n        (, , , , uint256 lockId, ) = liquidityLocker.getUserLockForTokenAtIndex(\r\n            address(this),\r\n            deal.lpToken,\r\n            deal.lockIndex\r\n        );\r\n        liquidityLocker.transferLockOwnership(\r\n            deal.lpToken,\r\n            deal.lockIndex,\r\n            lockId,\r\n            payable(msg.sender)\r\n        );\r\n        loans[dealId].isActive = false;\r\n        loans[dealId].isRepaid = true;\r\n    }\r\n\r\n    function repayLoan(uint256 dealId) public payable nonReentrant {\r\n        Deal storage deal = loans[dealId];\r\n        uint256 repayAmount = deal.dealAmount +\r\n            (deal.dealAmount * deal.interestRate) /\r\n            10000;\r\n        require(!deal.isRepaid, \"Deal already repaid\");\r\n        require(msg.sender == deal.borrower, \"Sender is not a borrower\");\r\n        require(deal.lender != address(0), \"Nothing to repay\");\r\n        require(msg.value \u003e= repayAmount, \"Insuffitient payable amount\");\r\n        require(\r\n            deal.startTime + deal.loanDuration \u003e block.timestamp,\r\n            \"Loan duration exceed\"\r\n        );\r\n        deal.isRepaid = true;\r\n        (, , , , uint256 lockId, ) = liquidityLocker.getUserLockForTokenAtIndex(\r\n            address(this),\r\n            deal.lpToken,\r\n            deal.lockIndex\r\n        );\r\n        liquidityLocker.transferLockOwnership(\r\n            deal.lpToken,\r\n            deal.lockIndex,\r\n            lockId,\r\n            payable(msg.sender)\r\n        );\r\n        (bool sent, ) = payable(deal.lender).call{value: msg.value}(\"\");\r\n        require(sent, \"Repay failed\");\r\n        emit LoanRepaid(dealId, msg.sender);\r\n    }\r\n\r\n    function claimCollateral(uint256 dealId) public nonReentrant {\r\n        Deal storage deal = loans[dealId];\r\n        require(deal.lender == msg.sender, \"Caller is not lender\");\r\n        require(!deal.collateralClaimed, \"Already claimed\");\r\n        require(\r\n            deal.startTime + deal.loanDuration \u003c block.timestamp,\r\n            \"Deal is active yet\"\r\n        );\r\n        (, , , , uint256 lockId, ) = liquidityLocker.getUserLockForTokenAtIndex(\r\n            address(this),\r\n            deal.lpToken,\r\n            deal.lockIndex\r\n        );\r\n        liquidityLocker.transferLockOwnership(\r\n            deal.lpToken,\r\n            deal.lockIndex,\r\n            lockId,\r\n            payable(msg.sender)\r\n        );\r\n        deal.collateralClaimed = true;\r\n        emit CollateralClaimed(dealId, msg.sender);\r\n    }\r\n\r\n    function initializeAuction(\r\n        address lpToken,\r\n        uint256 lockIndex,\r\n        uint256 startPrice,\r\n        uint256 imeddiatelySellPrice,\r\n        uint256 bidStep,\r\n        uint256 duration,\r\n        bool immediatelySell\r\n    ) public {\r\n        require(duration \u003e 0, \"Duration must be greater than 0\");\r\n        require(\r\n            checkLiquidityOwner(msg.sender, lpToken, lockIndex),\r\n            \"User does not owner of this lock\"\r\n        );\r\n        require(\r\n            imeddiatelySellPrice \u003e 0,\r\n            \"imeddiatelySellPrice must be positive number\"\r\n        );\r\n\r\n        auctions[nextAuctionId] = Auction({\r\n            owner: msg.sender,\r\n            highestBidOwner: address(0),\r\n            lpToken: lpToken,\r\n            lockIndex: lockIndex,\r\n            startPrice: startPrice,\r\n            imeddiatelySellPrice: imeddiatelySellPrice,\r\n            bidStep: bidStep,\r\n            duration: duration,\r\n            startTime: block.timestamp,\r\n            isActive: false,\r\n            isFinishedImmediately: false,\r\n            immediatelySell: immediatelySell,\r\n            isRewardClaimed: false\r\n        });\r\n        emit AuctionStarted(\r\n            nextAuctionId,\r\n            msg.sender,\r\n            lpToken,\r\n            lockIndex,\r\n            startPrice,\r\n            imeddiatelySellPrice,\r\n            bidStep,\r\n            duration,\r\n            immediatelySell\r\n        );\r\n\r\n        userAuction[msg.sender].push(nextAuctionId);\r\n\r\n        nextAuctionId++;\r\n    }\r\n\r\n    function startAuction(uint256 auctionId) external {\r\n        Auction storage auction = auctions[auctionId];\r\n        require(!auction.isActive, \"Auction already active\");\r\n        require(auction.owner != address(0), \"Auction is empty\");\r\n        require(\r\n            checkLiquidityOwner(\r\n                address(this),\r\n                auction.lpToken,\r\n                auction.lockIndex\r\n            ),\r\n            \"Contract does not owner of this liquidity\"\r\n        );\r\n        auction.isActive = true;\r\n        auction.startTime = block.timestamp;\r\n        emit AuctionActivated(auctionId, msg.sender);\r\n    }\r\n\r\n    function buyNow(\r\n        uint256 auctionId,\r\n        address referrer\r\n    ) external payable nonReentrant {\r\n        Auction storage auction = auctions[auctionId];\r\n        require(\r\n            msg.sender.code.length == 0,\r\n            \"Caller cannot be a smart contract\"\r\n        );\r\n        require(\r\n            auction.immediatelySell,\r\n            \"Immediately selling is disabled for this lottery\"\r\n        );\r\n        require(auction.owner != msg.sender, \"Sender is auction owner\");\r\n        require(\r\n            msg.value \u003e= auction.imeddiatelySellPrice,\r\n            \"Insuffitient payable amount\"\r\n        );\r\n        require(\r\n            !auction.isFinishedImmediately \u0026\u0026\r\n                auction.isActive \u0026\u0026\r\n                auction.startTime + auction.duration \u003e block.timestamp,\r\n            \"Auction inactive\"\r\n        );\r\n        auction.isFinishedImmediately = true;\r\n        auction.highestBidOwner = address(0);\r\n        (, , , , uint256 lockId, ) = liquidityLocker.getUserLockForTokenAtIndex(\r\n            address(this),\r\n            auction.lpToken,\r\n            auction.lockIndex\r\n        );\r\n        liquidityLocker.transferLockOwnership(\r\n            auction.lpToken,\r\n            auction.lockIndex,\r\n            lockId,\r\n            payable(msg.sender)\r\n        );\r\n\r\n        uint256 feeAmount = (msg.value * ownerFee) / 10000;\r\n\r\n        uint256 ownerFeeAmount;\r\n        uint256 referralFeeAmount;\r\n\r\n        if (referrals[msg.sender] == address(0) \u0026\u0026 referrer != address(0)) {\r\n            referrals[msg.sender] = referrer;\r\n        }\r\n\r\n        address originalReferrer = referrals[msg.sender];\r\n\r\n        if (originalReferrer != address(0)) {\r\n            referralFeeAmount = (feeAmount * referralFee) / 10000;\r\n            (bool referralFeeSent, ) = payable(originalReferrer).call{\r\n                value: referralFeeAmount\r\n            }(\"\");\r\n            require(referralFeeSent, \"Failed to send referral fee\");\r\n        }\r\n\r\n        ownerFeeAmount = feeAmount - referralFeeAmount;\r\n\r\n        (bool feeSent, ) = payable(feeReceiver).call{value: ownerFeeAmount}(\"\");\r\n        require(feeSent, \"Failed to send fee\");\r\n\r\n        (bool sent, ) = payable(auction.owner).call{\r\n            value: msg.value - feeAmount\r\n        }(\"\");\r\n        require(sent, \"Failed to send funds\");\r\n\r\n        auction.isRewardClaimed = true;\r\n\r\n        emit ImmediatelyBought(auctionId, msg.value, block.timestamp);\r\n    }\r\n\r\n    function makeBid(uint256 auctionId) public payable {\r\n        Auction storage auction = auctions[auctionId];\r\n        require(\r\n            !auction.isFinishedImmediately \u0026\u0026\r\n                auction.isActive \u0026\u0026\r\n                auction.startTime + auction.duration \u003e block.timestamp,\r\n            \"Auction inactive\"\r\n        );\r\n        require(auction.owner != msg.sender, \"Sender is auction owner\");\r\n        require(\r\n            bids[auctionId][msg.sender] + msg.value \u003e= auction.startPrice,\r\n            \"Bid amount must be greater than startPrice\"\r\n        );\r\n        require(\r\n            bids[auctionId][msg.sender] + msg.value \u003e=\r\n                bids[auctionId][auction.highestBidOwner] + auction.bidStep,\r\n            \"Bid must be greater than previous + bidStep\"\r\n        );\r\n        bids[auctionId][msg.sender] += msg.value;\r\n        auction.highestBidOwner = msg.sender;\r\n        emit BidMade(auctionId, msg.sender, msg.value, block.timestamp);\r\n    }\r\n\r\n    function closeAuction(uint256 auctionId) public {\r\n        Auction storage auction = auctions[auctionId];\r\n        require(\r\n            auction.startTime + auction.duration \u003c block.timestamp,\r\n            \"Auction is active yet\"\r\n        );\r\n        require(\r\n            auction.highestBidOwner == address(0) \u0026\u0026\r\n                !auction.isFinishedImmediately,\r\n            \"Not claimable\"\r\n        );\r\n        require(msg.sender == auction.owner, \"Caller is not auction owner\");\r\n\r\n        (, , , , uint256 lockId, ) = liquidityLocker.getUserLockForTokenAtIndex(\r\n            address(this),\r\n            auction.lpToken,\r\n            auction.lockIndex\r\n        );\r\n        liquidityLocker.transferLockOwnership(\r\n            auction.lpToken,\r\n            auction.lockIndex,\r\n            lockId,\r\n            payable(msg.sender)\r\n        );\r\n    }\r\n\r\n    function claimAuctionLiquidity(uint256 auctionId) public nonReentrant {\r\n        Auction memory auction = auctions[auctionId];\r\n        require(\r\n            auction.startTime + auction.duration \u003c block.timestamp,\r\n            \"Auction is active yet\"\r\n        );\r\n        require(\r\n            msg.sender == auction.highestBidOwner \u0026\u0026\r\n                !auction.isFinishedImmediately,\r\n            \"Not eligible for claim\"\r\n        );\r\n        require(!auctionClaimed[auctionId], \"Already claimed\");\r\n        (, , , , uint256 lockId, ) = liquidityLocker.getUserLockForTokenAtIndex(\r\n            address(this),\r\n            auction.lpToken,\r\n            auction.lockIndex\r\n        );\r\n        liquidityLocker.transferLockOwnership(\r\n            auction.lpToken,\r\n            auction.lockIndex,\r\n            lockId,\r\n            payable(msg.sender)\r\n        );\r\n        auctionClaimed[auctionId] = true;\r\n        emit AuctionWon(auctionId, msg.sender);\r\n    }\r\n\r\n    function claimAuctionPayment(\r\n        uint256 auctionId,\r\n        address referrer\r\n    ) external nonReentrant {\r\n        Auction storage auction = auctions[auctionId];\r\n        require(\r\n            !auction.isFinishedImmediately \u0026\u0026\r\n                auction.startTime + auction.duration \u003c block.timestamp,\r\n            \"Auction active yet\"\r\n        );\r\n        require(\r\n            msg.sender == auction.owner \u0026\u0026 !auction.isRewardClaimed,\r\n            \"Not eligible for claim\"\r\n        );\r\n        uint256 bidAmount = bids[auctionId][auction.highestBidOwner];\r\n\r\n        require(bidAmount \u003e 0, \"Nothing to claim\");\r\n\r\n        uint256 feeAmount = (bidAmount * ownerFee) / 10000;\r\n\r\n        uint256 ownerFeeAmount;\r\n        uint256 referralFeeAmount;\r\n\r\n        if (referrals[msg.sender] == address(0) \u0026\u0026 referrer != address(0)) {\r\n            referrals[msg.sender] = referrer;\r\n        }\r\n\r\n        address originalReferrer = referrals[msg.sender];\r\n\r\n        if (originalReferrer != address(0)) {\r\n            referralFeeAmount = (feeAmount * referralFee) / 10000;\r\n            (bool referralFeeSent, ) = payable(originalReferrer).call{\r\n                value: referralFeeAmount\r\n            }(\"\");\r\n            require(referralFeeSent, \"Failed to send referral fee\");\r\n        }\r\n\r\n        ownerFeeAmount = feeAmount - referralFeeAmount;\r\n\r\n        (bool feeSent, ) = payable(feeReceiver).call{value: ownerFeeAmount}(\"\");\r\n        require(feeSent, \"Failed to send fee\");\r\n\r\n        (bool sent, ) = payable(msg.sender).call{value: bidAmount - feeAmount}(\r\n            \"\"\r\n        );\r\n        require(sent, \"Withdraw failed\");\r\n        auction.isRewardClaimed = true;\r\n        emit AuctionPaymentClaimed(\r\n            auctionId,\r\n            msg.sender,\r\n            bidAmount,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function withdrawBid(uint256 auctionId) external nonReentrant {\r\n        Auction storage auction = auctions[auctionId];\r\n        uint256 bidAmount = bids[auctionId][msg.sender];\r\n        require(\r\n            msg.sender != auction.highestBidOwner \u0026\u0026 bidAmount \u003e 0,\r\n            \"No eligible to withdraw\"\r\n        );\r\n        (bool sent, ) = payable(msg.sender).call{value: bidAmount}(\"\");\r\n        require(sent, \"Withdraw failed\");\r\n        bids[auctionId][msg.sender] = 0;\r\n        emit BidWithdrawn(auctionId, msg.sender, bidAmount, block.timestamp);\r\n    }\r\n}",
      "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"activator\",\"type\":\"address\"}],\"name\":\"AuctionActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionPaymentClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"imeddiatelySellPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidStep\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"immediatelySell\",\"type\":\"bool\"}],\"name\":\"AuctionStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"AuctionWon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BidWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"CollateralClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"activator\",\"type\":\"address\"}],\"name\":\"DealActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dealAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"}],\"name\":\"DealInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"DealMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ImmediatelyBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"}],\"name\":\"LoanRepaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"acceptLoanOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctionClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"highestBidOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imeddiatelySellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFinishedImmediately\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"immediatelySell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isRewardClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"buyNow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"cancelLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expectedOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"checkLiquidityOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"claimAuctionLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"claimAuctionPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"claimCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserAuctions\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserLoans\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityLocker\",\"name\":\"_liquidityLocker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"imeddiatelySellPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidStep\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"immediatelySell\",\"type\":\"bool\"}],\"name\":\"initializeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"}],\"name\":\"initializeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLocker\",\"outputs\":[{\"internalType\":\"contract ILiquidityLocker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lockIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dealAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isRepaid\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"collateralClaimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"makeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAuctionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLoanId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"placeLoanOffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"dealId\",\"type\":\"uint256\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILiquidityLocker\",\"name\":\"_liquidityLocker\",\"type\":\"address\"}],\"name\":\"setLiquidityLocker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ownerFee\",\"type\":\"uint256\"}],\"name\":\"setOwnerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newReferralFee\",\"type\":\"uint256\"}],\"name\":\"setReferralFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"startAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "OpenLiquidityExchange",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://46d16cbf313896cf900cf181289e0ce45c2312521b6ec33254c37f7acffaaecf"
    }
  ]
}
