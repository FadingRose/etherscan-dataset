{
  "TxHash": "0x3f3f8e8362f7d5950bbf9dd7ad4644a436f5446d36164adaf862e26f8779000c",
  "ContractAddress": "0x180E0F5efAD0a5299e9b6724BA3eF6Ea59914246",
  "Name": "RestakingPool",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) \u0026 ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 \u0026\u0026 isTopLevelCall;\\n        bool construction = initialized == 1 \u0026\u0026 address(this).code.length == 0;\\n\\n        if (!initialSetup \u0026\u0026 !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized \u003e= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) \u0026 ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Configurable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"./interfaces/IProtocolConfig.sol\\\";\\n\\n/**\\n * @title Basic layout with common variables and modifiers from config\\n * @author InceptionLRT V2\\n */\\nabstract contract Configurable is Initializable, ContextUpgradeable {\\n    error OnlyGovernanceAllowed();\\n    error OnlyOperatorAllowed();\\n    error OnlyRestakingPoolAllowed();\\n\\n    IProtocolConfig private _config;\\n    uint256[50 - 1] private __reserved;\\n\\n    modifier onlyGovernance() virtual {\\n        if (_msgSender() != _config.getGovernance()) {\\n            revert OnlyGovernanceAllowed();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOperator() virtual {\\n        if (_msgSender() != _config.getOperator()) {\\n            revert OnlyOperatorAllowed();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRestakingPool() virtual {\\n        if (_msgSender() != address(_config.getRestakingPool())) {\\n            revert OnlyRestakingPoolAllowed();\\n        }\\n        _;\\n    }\\n\\n    function __Configurable_init(\\n        IProtocolConfig config_\\n    ) internal onlyInitializing {\\n        _config = config_;\\n    }\\n\\n    function config() public view virtual returns (IProtocolConfig) {\\n        return _config;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IBeaconChainOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\n/**\\n * @title Interface for the BeaconStateOracle contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IBeaconChainOracle {\\n    /// @notice The block number to state root mapping.\\n    function timestampToBlockRoot(\\n        uint256 timestamp\\n    ) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface of the cToken.\\n */\\ninterface ICToken is IERC20 {\\n    /* errors */\\n\\n    /* functions */\\n\\n    function convertToShares(\\n        uint256 amount\\n    ) external view returns (uint256 shares);\\n\\n    function convertToAmount(\\n        uint256 shares\\n    ) external view returns (uint256 amount);\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function ratio() external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256 totalManagedEth);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDelegationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISignatureUtils.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\n\\n/**\\n * @title DelegationManager\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager is ISignatureUtils {\\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\\n    struct OperatorDetails {\\n        // @notice address to receive the rewards that the operator earns via serving applications built on EigenLayer.\\n        address earningsReceiver;\\n        /**\\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n         * @dev Signature verification follows these rules:\\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n         */\\n        address delegationApprover;\\n        /**\\n         * @notice A minimum delay -- measured in blocks -- enforced between:\\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n         * and\\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n         * then they are only allowed to either increase this value or keep it the same.\\n         */\\n        uint32 stakerOptOutWindowBlocks;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n     */\\n    struct StakerDelegation {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the staker's nonce\\n        uint256 nonce;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n     */\\n    struct DelegationApproval {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the operator's provided salt\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\\n     * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct Withdrawal {\\n        // The address that originated the Withdrawal\\n        address staker;\\n        // The address that the staker was delegated to at the time that the Withdrawal was created\\n        address delegatedTo;\\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n        address withdrawer;\\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n        uint256 nonce;\\n        // Block number when the Withdrawal was created\\n        uint32 startBlock;\\n        // Array of strategies that the Withdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n    }\\n\\n    struct QueuedWithdrawalParams {\\n        // Array of strategies that the QueuedWithdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n        // The address of the withdrawer\\n        address withdrawer;\\n    }\\n\\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\\n    event OperatorRegistered(\\n        address indexed operator,\\n        OperatorDetails operatorDetails\\n    );\\n\\n    /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n    event OperatorDetailsModified(\\n        address indexed operator,\\n        OperatorDetails newOperatorDetails\\n    );\\n\\n    /**\\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n     */\\n    event OperatorMetadataURIUpdated(\\n        address indexed operator,\\n        string metadataURI\\n    );\\n\\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesIncreased(\\n        address indexed operator,\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesDecreased(\\n        address indexed operator,\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted when @param staker delegates to @param operator.\\n    event StakerDelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker undelegates from @param operator.\\n    event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n    event StakerForceUndelegated(\\n        address indexed staker,\\n        address indexed operator\\n    );\\n\\n    /**\\n     * @notice Emitted when a new withdrawal is queued.\\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\\n     * @param withdrawal Is the withdrawal itself.\\n     */\\n    event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n    /// @notice Emitted when a queued withdrawal is completed\\n    event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n    /// @notice Emitted when a queued withdrawal is *migrated* from the StrategyManager to the DelegationManager\\n    event WithdrawalMigrated(\\n        bytes32 oldWithdrawalRoot,\\n        bytes32 newWithdrawalRoot\\n    );\\n\\n    /// @notice Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event MinWithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\\n\\n    /// @notice Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event StrategyWithdrawalDelayBlocksSet(\\n        IStrategy strategy,\\n        uint256 previousValue,\\n        uint256 newValue\\n    );\\n\\n    /**\\n     * @notice Registers the caller as an operator in EigenLayer.\\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n     *\\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n     */\\n    function registerAsOperator(\\n        OperatorDetails calldata registeringOperatorDetails,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice Updates an operator's stored `OperatorDetails`.\\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n     *\\n     * @dev The caller must have previously registered as an operator in EigenLayer.\\n     * @dev This function will revert if the caller attempts to set their `earningsReceiver` to address(0).\\n     */\\n    function modifyOperatorDetails(\\n        OperatorDetails calldata newOperatorDetails\\n    ) external;\\n\\n    /**\\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n     * @param metadataURI The URI for metadata associated with an operator\\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n     */\\n    function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n    /**\\n     * @notice Caller delegates their stake to an operator.\\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n     * @param approverSalt A unique single use value tied to an individual signature.\\n     * @dev The approverSignatureAndExpiry is used in the event that:\\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n     *                  AND\\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateTo(\\n        address operator,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n     * @param staker The account delegating stake to an `operator` account\\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n     *\\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n     * is the `msg.sender`, then approval is assumed.\\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateToBySignature(\\n        address staker,\\n        address operator,\\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager\\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\\n     * @param staker The account to be undelegated.\\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n     *\\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n     * @dev Reverts if the `staker` is already undelegated.\\n     */\\n    function undelegate(\\n        address staker\\n    ) external returns (bytes32[] memory withdrawalRoot);\\n\\n    /**\\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\\n     * their operator.\\n     *\\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\\n     */\\n    function queueWithdrawals(\\n        QueuedWithdrawalParams[] calldata queuedWithdrawalParams\\n    ) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n     * @param withdrawal The Withdrawal to complete.\\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n     * any other strategies, which will be transferred to the withdrawer.\\n     */\\n    function completeQueuedWithdrawal(\\n        Withdrawal calldata withdrawal,\\n        IERC20[] calldata tokens,\\n        uint256 middlewareTimesIndex,\\n        bool receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n     * @param withdrawals The Withdrawals to complete.\\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\\n     */\\n    function completeQueuedWithdrawals(\\n        Withdrawal[] calldata withdrawals,\\n        IERC20[][] calldata tokens,\\n        uint256[] calldata middlewareTimesIndexes,\\n        bool[] calldata receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Increases a staker's delegated share balance in a strategy.\\n     * @param staker The address to increase the delegated shares for their operator.\\n     * @param strategy The strategy in which to increase the delegated shares.\\n     * @param shares The number of shares to increase.\\n     *\\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager or EigenPodManager.\\n     */\\n    function increaseDelegatedShares(\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    ) external;\\n\\n    /**\\n     * @notice Decreases a staker's delegated share balance in a strategy.\\n     * @param staker The address to increase the delegated shares for their operator.\\n     * @param strategy The strategy in which to decrease the delegated shares.\\n     * @param shares The number of shares to decrease.\\n     *\\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager or EigenPodManager.\\n     */\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    ) external;\\n\\n    /**\\n     * @notice returns the address of the operator that `staker` is delegated to.\\n     * @notice Mapping: staker =\u003e operator whom the staker is currently delegated to.\\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n     */\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /**\\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\\n     */\\n    function operatorDetails(\\n        address operator\\n    ) external view returns (OperatorDetails memory);\\n\\n    /*\\n     * @notice Returns the earnings receiver address for an operator\\n     */\\n    function earningsReceiver(address operator) external view returns (address);\\n\\n    /**\\n     * @notice Returns the delegationApprover account for an operator\\n     */\\n    function delegationApprover(\\n        address operator\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\\n     */\\n    function stakerOptOutWindowBlocks(\\n        address operator\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Given array of strategies, returns array of shares for the operator\\n     */\\n    function getOperatorShares(\\n        address operator,\\n        IStrategy[] memory strategies\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\\n     * from all the inputted strategies. Return value is \u003e= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\\n     * @param strategies The strategies to check withdrawal delays for\\n     */\\n    function getWithdrawalDelay(\\n        IStrategy[] calldata strategies\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n     * @notice Mapping: operator =\u003e strategy =\u003e total number of shares in the strategy delegated to the operator.\\n     * @dev By design, the following invariant should hold for each Strategy:\\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n     * = sum (delegateable shares of all stakers delegated to the operator)\\n     */\\n    function operatorShares(\\n        address operator,\\n        IStrategy strategy\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n     */\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true is an operator has previously registered for delegation.\\n     */\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /// @notice Mapping: staker =\u003e number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n    function stakerNonce(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping: delegationApprover =\u003e 32-byte salt =\u003e whether or not the salt has already been used by the delegationApprover.\\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n     */\\n    function delegationApproverSaltIsSpent(\\n        address _delegationApprover,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass\\n     * to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\\n     */\\n    function minWithdrawalDelayBlocks() external view returns (uint256);\\n\\n    /**\\n     * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     */\\n    function strategyWithdrawalDelayBlocks(\\n        IStrategy strategy\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n     * @param staker The signing staker\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateCurrentStakerDelegationDigestHash(\\n        address staker,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n     * @param staker The signing staker\\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateStakerDelegationDigestHash(\\n        address staker,\\n        uint256 _stakerNonce,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n     * @param staker The account delegating their stake\\n     * @param operator The account receiving delegated stake\\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n     * @param approverSalt A unique and single use value associated with the approver signature.\\n     * @param expiry Time after which the approver's signature becomes invalid\\n     */\\n    function calculateDelegationApprovalDigestHash(\\n        address staker,\\n        address operator,\\n        address _delegationApprover,\\n        bytes32 approverSalt,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n    /**\\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\\n     *\\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n     * for more detailed information please read EIP-712.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /// @notice Mapping: staker =\u003e cumulative number of queued withdrawals they have ever initiated.\\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n    function cumulativeWithdrawalsQueued(\\n        address staker\\n    ) external view returns (uint256);\\n\\n    /// @notice Returns the keccak256 hash of `withdrawal`.\\n    function calculateWithdrawalRoot(\\n        Withdrawal memory withdrawal\\n    ) external pure returns (bytes32);\\n\\n    function migrateQueuedWithdrawals(\\n        IStrategyManager.DeprecatedStruct_QueuedWithdrawal[]\\n            memory withdrawalsToQueue\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEigenPod.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\nimport \\\"../libraries/BeaconChainProofs.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice The main functionalities are:\\n * - creating new ETH validators with their withdrawal credentials pointed to this contract\\n * - proving from beacon chain state roots that withdrawal credentials are pointed to this contract\\n * - proving from beacon chain state roots the balances of ETH validators with their withdrawal credentials\\n *   pointed to this contract\\n * - updating aggregate balances in the EigenPodManager\\n * - withdrawing eth when withdrawals are initiated\\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\\n */\\ninterface IEigenPod {\\n    enum VALIDATOR_STATUS {\\n        INACTIVE, // doesnt exist\\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\\n        WITHDRAWN // withdrawn from the Beacon Chain\\n    }\\n\\n    struct ValidatorInfo {\\n        // index of the validator in the beacon chain\\n        uint64 validatorIndex;\\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\\n        uint64 restakedBalanceGwei;\\n        //timestamp of the validator's most recent balance update\\n        uint64 mostRecentBalanceUpdateTimestamp;\\n        // status of the validator\\n        VALIDATOR_STATUS status;\\n    }\\n\\n    /**\\n     * @notice struct used to store amounts related to proven withdrawals in memory. Used to help\\n     * manage stack depth and optimize the number of external calls, when batching withdrawal operations.\\n     */\\n    struct VerifiedWithdrawal {\\n        // amount to send to a podOwner from a proven withdrawal\\n        uint256 amountToSendGwei;\\n        // difference in shares to be recorded in the eigenPodManager, as a result of the withdrawal\\n        int256 sharesDeltaGwei;\\n    }\\n\\n    enum PARTIAL_WITHDRAWAL_CLAIM_STATUS {\\n        REDEEMED,\\n        PENDING,\\n        FAILED\\n    }\\n\\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\\n    event EigenPodStaked(bytes pubkey);\\n\\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\\n    event ValidatorRestaked(uint40 validatorIndex);\\n\\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\\n    //  is the validator's balance that is credited on EigenLayer.\\n    event ValidatorBalanceUpdated(\\n        uint40 validatorIndex,\\n        uint64 balanceTimestamp,\\n        uint64 newValidatorBalanceGwei\\n    );\\n\\n    /// @notice Emitted when an ETH validator is prove to have withdrawn from the beacon chain\\n    event FullWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 withdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when a partial withdrawal claim is successfully redeemed\\n    event PartialWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 partialWithdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\\n    event RestakedBeaconChainETHWithdrawn(\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when podOwner enables restaking\\n    event RestakingActivated(address indexed podOwner);\\n\\n    /// @notice Emitted when ETH is received via the `receive` fallback\\n    event NonBeaconChainETHReceived(uint256 amountReceived);\\n\\n    /// @notice Emitted when ETH that was previously received via the `receive` fallback is withdrawn\\n    event NonBeaconChainETHWithdrawn(\\n        address indexed recipient,\\n        uint256 amountWithdrawn\\n    );\\n\\n    /// @notice The max amount of eth, in gwei, that can be restaked per validator\\n    function MAX_RESTAKED_BALANCE_GWEI_PER_VALIDATOR()\\n        external\\n        view\\n        returns (uint64);\\n\\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\\n    function withdrawableRestakedExecutionLayerGwei()\\n        external\\n        view\\n        returns (uint64);\\n\\n    /// @notice any ETH deposited into the EigenPod contract via the `receive` fallback function\\n    function nonBeaconChainETHBalanceWei() external view returns (uint256);\\n\\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\\n    function initialize(address owner) external;\\n\\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n\\n    /**\\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\\n     * @dev The podOwner must have already proved sufficient withdrawals, so that this pod's `withdrawableRestakedExecutionLayerGwei` exceeds the\\n     * `amountWei` input (when converted to GWEI).\\n     * @dev Reverts if `amountWei` is not a whole Gwei amount\\n     */\\n    function withdrawRestakedBeaconChainETH(\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /// @notice The single EigenPodManager for EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice The owner of this EigenPod\\n    function podOwner() external view returns (address);\\n\\n    /// @notice an indicator of whether or not the podOwner has ever \\\"fully restaked\\\" by successfully calling `verifyCorrectWithdrawalCredentials`.\\n    function hasRestaked() external view returns (bool);\\n\\n    /**\\n     * @notice The latest timestamp at which the pod owner withdrew the balance of the pod, via calling `withdrawBeforeRestaking`.\\n     * @dev This variable is only updated when the `withdrawBeforeRestaking` function is called, which can only occur before `hasRestaked` is set to true for this pod.\\n     * Proofs for this pod are only valid against Beacon Chain state roots corresponding to timestamps after the stored `mostRecentWithdrawalTimestamp`.\\n     */\\n    function mostRecentWithdrawalTimestamp() external view returns (uint64);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\\n    function validatorPubkeyHashToInfo(\\n        bytes32 validatorPubkeyHash\\n    ) external view returns (ValidatorInfo memory);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkey\\n    function validatorPubkeyToInfo(\\n        bytes calldata validatorPubkey\\n    ) external view returns (ValidatorInfo memory);\\n\\n    ///@notice mapping that tracks proven withdrawals\\n    function provenWithdrawal(\\n        bytes32 validatorPubkeyHash,\\n        uint64 slot\\n    ) external view returns (bool);\\n\\n    /// @notice This returns the status of a given validator\\n    function validatorStatus(\\n        bytes32 pubkeyHash\\n    ) external view returns (VALIDATOR_STATUS);\\n\\n    /// @notice This returns the status of a given validator pubkey\\n    function validatorStatus(\\n        bytes calldata validatorPubkey\\n    ) external view returns (VALIDATOR_STATUS);\\n\\n    /**\\n     * @notice This function verifies that the withdrawal credentials of validator(s) owned by the podOwner are pointed to\\n     * this contract. It also verifies the effective balance  of the validator.  It verifies the provided proof of the ETH validator against the beacon chain state\\n     * root, marks the validator as 'active' in EigenLayer, and credits the restaked ETH in Eigenlayer.\\n     * @param oracleTimestamp is the Beacon Chain timestamp whose state root the `proof` will be proven against.\\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs\\n     * @param withdrawalCredentialProofs is an array of proofs, where each proof proves each ETH validator's balance and withdrawal credentials\\n     * against a beacon chain state root\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * for details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyWithdrawalCredentials(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        uint40[] calldata validatorIndices,\\n        bytes[] calldata withdrawalCredentialProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @notice This function records an update (either increase or decrease) in the pod's balance in the StrategyManager.  \\n               It also verifies a merkle proof of the validator's current beacon chain balance.  \\n     * @param oracleTimestamp The oracleTimestamp whose state root the `proof` will be proven against.\\n     *        Must be within `VERIFY_BALANCE_UPDATE_WINDOW_SECONDS` of the current block.\\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs \\n     * @param validatorFieldsProofs proofs against the `beaconStateRoot` for each validator in `validatorFields`\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * @dev For more details on the Beacon Chain spec, see: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyBalanceUpdates(\\n        uint64 oracleTimestamp,\\n        uint40[] calldata validatorIndices,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @notice This function records full and partial withdrawals on behalf of one of the Ethereum validators for this EigenPod\\n     * @param oracleTimestamp is the timestamp of the oracle slot that the withdrawal is being proven against\\n     * @param withdrawalProofs is the information needed to check the veracity of the block numbers and withdrawals being proven\\n     * @param validatorFieldsProofs is the proof of the validator's fields' in the validator tree\\n     * @param withdrawalFields are the fields of the withdrawals being proven\\n     * @param validatorFields are the fields of the validators being proven\\n     */\\n    function verifyAndProcessWithdrawals(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.WithdrawalProof[] calldata withdrawalProofs,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields,\\n        bytes32[][] calldata withdrawalFields\\n    ) external;\\n\\n    /**\\n     * @notice Called by the pod owner to activate restaking by withdrawing\\n     * all existing ETH from the pod and preventing further withdrawals via\\n     * \\\"withdrawBeforeRestaking()\\\"\\n     */\\n    function activateRestaking() external;\\n\\n    /// @notice Called by the pod owner to withdraw the balance of the pod when `hasRestaked` is set to false\\n    function withdrawBeforeRestaking() external;\\n\\n    /// @notice Called by the pod owner to withdraw the nonBeaconChainETHBalanceWei\\n    function withdrawNonBeaconChainETHBalanceWei(\\n        address recipient,\\n        uint256 amountToWithdraw\\n    ) external;\\n\\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\\n    function recoverTokens(\\n        IERC20[] memory tokenList,\\n        uint256[] memory amountsToWithdraw,\\n        address recipient\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEigenPodManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./IETHPOSDeposit.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IEigenPod.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\n\\ninterface IEigenPodManager {\\n    /// @notice Emitted to notify the update of the beaconChainOracle address\\n    event BeaconOracleUpdated(address indexed newOracleAddress);\\n\\n    /// @notice Emitted to notify the deployment of an EigenPod\\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\\n\\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\\n\\n    /// @notice Emitted when the balance of an EigenPod is updated\\n    event PodSharesUpdated(address indexed podOwner, int256 sharesDelta);\\n\\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\\n    event BeaconChainETHWithdrawalCompleted(\\n        address indexed podOwner,\\n        uint256 shares,\\n        uint96 nonce,\\n        address delegatedAddress,\\n        address withdrawer,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    event DenebForkTimestampUpdated(uint64 newValue);\\n\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     * @dev Returns EigenPod address\\n     */\\n    function createPod() external returns (address);\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n\\n    /**\\n     * @notice Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager\\n     * to ensure that delegated shares are also tracked correctly\\n     * @param podOwner is the pod owner whose balance is being updated.\\n     * @param sharesDelta is the change in podOwner's beaconChainETHStrategy shares\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     * @dev Reverts if `sharesDelta` is not a whole Gwei amount\\n     */\\n    function recordBeaconChainETHBalanceUpdate(\\n        address podOwner,\\n        int256 sharesDelta\\n    ) external;\\n\\n    /**\\n     * @notice Updates the oracle contract that provides the beacon chain state root\\n     * @param newBeaconChainOracle is the new oracle contract being pointed to\\n     * @dev Callable only by the owner of this contract (i.e. governance)\\n     */\\n    function updateBeaconChainOracle(\\n        IBeaconChainOracle newBeaconChainOracle\\n    ) external;\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\\n    function ownerToPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\\n    function getPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice The ETH2 Deposit Contract\\n    function ethPOS() external view returns (IETHPOSDeposit);\\n\\n    /// @notice Beacon proxy to which the EigenPods point\\n    function eigenPodBeacon() external view returns (IBeacon);\\n\\n    /// @notice Oracle contract that provides updates to the beacon chain's state\\n    function beaconChainOracle() external view returns (IBeaconChainOracle);\\n\\n    /// @notice Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized.\\n    function getBlockRootAtTimestamp(\\n        uint64 timestamp\\n    ) external view returns (bytes32);\\n\\n    /// @notice EigenLayer's StrategyManager contract\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice EigenLayer's Slasher contract\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\\n    function hasPod(address podOwner) external view returns (bool);\\n\\n    /// @notice Returns the number of EigenPods that have been created\\n    function numPods() external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\\n     * decrease between the pod owner queuing and completing a withdrawal.\\n     * When the pod owner's shares would otherwise increase, this \\\"deficit\\\" is decreased first _instead_.\\n     * Likewise, when a withdrawal is completed, this \\\"deficit\\\" is decreased and the withdrawal amount is decreased; We can think of this\\n     * as the withdrawal \\\"paying off the deficit\\\".\\n     */\\n    function podOwnerShares(address podOwner) external view returns (int256);\\n\\n    /// @notice returns canonical, virtual beaconChainETH strategy\\n    function beaconChainETHStrategy() external view returns (IStrategy);\\n\\n    /**\\n     * @notice Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue.\\n     * Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero.\\n     * @dev This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to\\n     * result in the `podOwner` incurring a \\\"share deficit\\\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive\\n     * shares from the operator to whom the staker is delegated.\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function removeShares(address podOwner, uint256 shares) external;\\n\\n    /**\\n     * @notice Increases the `podOwner`'s shares by `shares`, paying off deficit if possible.\\n     * Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue\\n     * @dev Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input\\n     * in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function addShares(\\n        address podOwner,\\n        uint256 shares\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address\\n     * @dev Prioritizes decreasing the podOwner's share deficit, if they have one\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function withdrawSharesAsTokens(\\n        address podOwner,\\n        address destination,\\n        uint256 shares\\n    ) external;\\n\\n    /**\\n     * @notice the deneb hard fork timestamp used to determine which proof path to use for proving a withdrawal\\n     */\\n    function denebForkTimestamp() external view returns (uint64);\\n\\n    /**\\n     * setting the deneb hard fork timestamp by the eigenPodManager owner\\n     * @dev this function is designed to be called twice.  Once, it is set to type(uint64).max\\n     * prior to the actual deneb fork timestamp being set, and then the second time it is set\\n     * to the actual deneb fork timestamp.\\n     */\\n    function setDenebForkTimestamp(uint64 newDenebForkTimestamp) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IETHPOSDeposit.sol\": {\r\n      \"content\": \"// ┏━━━┓━┏┓━┏┓━━┏━━━┓━━┏━━━┓━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━┏┓━━━━━┏━━━┓━━━━━━━━━┏┓━━━━━━━━━━━━━━┏┓━\\n// ┃┏━━┛┏┛┗┓┃┃━━┃┏━┓┃━━┃┏━┓┃━━━━┗┓┏┓┃━━━━━━━━━━━━━━━━━━┏┛┗┓━━━━┃┏━┓┃━━━━━━━━┏┛┗┓━━━━━━━━━━━━┏┛┗┓\\n// ┃┗━━┓┗┓┏┛┃┗━┓┗┛┏┛┃━━┃┃━┃┃━━━━━┃┃┃┃┏━━┓┏━━┓┏━━┓┏━━┓┏┓┗┓┏┛━━━━┃┃━┗┛┏━━┓┏━┓━┗┓┏┛┏━┓┏━━┓━┏━━┓┗┓┏┛\\n// ┃┏━━┛━┃┃━┃┏┓┃┏━┛┏┛━━┃┃━┃┃━━━━━┃┃┃┃┃┏┓┃┃┏┓┃┃┏┓┃┃━━┫┣┫━┃┃━━━━━┃┃━┏┓┃┏┓┃┃┏┓┓━┃┃━┃┏┛┗━┓┃━┃┏━┛━┃┃━\\n// ┃┗━━┓━┃┗┓┃┃┃┃┃┃┗━┓┏┓┃┗━┛┃━━━━┏┛┗┛┃┃┃━┫┃┗┛┃┃┗┛┃┣━━┃┃┃━┃┗┓━━━━┃┗━┛┃┃┗┛┃┃┃┃┃━┃┗┓┃┃━┃┗┛┗┓┃┗━┓━┃┗┓\\n// ┗━━━┛━┗━┛┗┛┗┛┗━━━┛┗┛┗━━━┛━━━━┗━━━┛┗━━┛┃┏━┛┗━━┛┗━━┛┗┛━┗━┛━━━━┗━━━┛┗━━┛┗┛┗┛━┗━┛┗┛━┗━━━┛┗━━┛━┗━┛\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┃┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┗┛━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity \u003e=0.5.0;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IETHPOSDeposit {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProtocolConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRatioFeed.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IRestakingPool.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"../restaker/IRestakerDeployer.sol\\\";\\n\\ninterface IProtocolConfig {\\n    /* errors */\\n\\n    error OnlyGovernanceAllowed();\\n    error ZeroAddress();\\n\\n    /* events */\\n    event OperatorChanged(address prevValue, address newValue);\\n    event GovernanceChanged(address prevValue, address newValue);\\n    event TreasuryChanged(address prevValue, address newValue);\\n    event RatioFeedChanged(IRatioFeed prevValue, IRatioFeed newValue);\\n    event CTokenChanged(ICToken prevValue, ICToken newValue);\\n    event RestakingPoolChanged(\\n        IRestakingPool prevValue,\\n        IRestakingPool newValue\\n    );\\n    event EigenManagerChanged(\\n        IEigenPodManager prevValue,\\n        IEigenPodManager newValue\\n    );\\n    event RestakerDeployerChanged(\\n        IRestakerDeployer prevValue,\\n        IRestakerDeployer newValue\\n    );\\n\\n    /* functions */\\n\\n    function getGovernance() external view returns (address governance);\\n\\n    function getTreasury() external view returns (address treasury);\\n\\n    function getOperator() external view returns (address operator);\\n\\n    function getCToken() external view returns (ICToken token);\\n\\n    function getRatioFeed() external view returns (IRatioFeed feed);\\n\\n    function getRestakingPool() external view returns (IRestakingPool pool);\\n\\n    function getRestakerDeployer()\\n        external\\n        view\\n        returns (IRestakerDeployer deployer);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRatioFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IRatioFeed {\\n    enum RatioError {\\n        NoError,\\n        TooOften, // ratio was updated less than 12 hours ago\\n        GreaterThanPrevious, // new ratio cannot be greater than old\\n        NotInThreshold, // new ratio too low, not in threshold range\\n        GreaterThanInitial // new ratio is greater than {INITIAL_RATIO}\\n    }\\n\\n    struct HistoricalRatios {\\n        uint64[9] historicalRatios;\\n        uint40 lastUpdate;\\n    }\\n\\n    /* errors */\\n\\n    error RatioNotUpdated(RatioError);\\n    error RatioThresholdNotInRange();\\n\\n    /* events */\\n\\n    event RatioThresholdChanged(uint256 oldValue, uint256 newValue);\\n    event RatioUpdated(\\n        address indexed tokenAddress,\\n        uint256 oldRatio,\\n        uint256 newRatio\\n    );\\n\\n    /* functions */\\n\\n    function updateRatio(address token, uint256 ratio) external;\\n    function getRatio(address token) external view returns (uint256 ratio);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRestakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IRestakingPool {\\n    /* structs */\\n\\n    struct Unstake {\\n        address recipient;\\n        uint256 amount;\\n    }\\n\\n    /* errors */\\n\\n    error PoolZeroAmount();\\n    error PoolZeroAddress();\\n    error PoolRestakerExists();\\n    error PoolRestakerNotExists();\\n    error PoolInsufficientBalance();\\n    error PoolWrongInputLength();\\n    error AmbiguousFee(uint256 claimed, uint256 fee);\\n    error InsufficientCapacity(uint256 capacity);\\n    error TargetCapacityNotSet();\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error PoolFailedInnerCall();\\n\\n    error PoolDistributeGasLimitNotInRange(uint64 max);\\n\\n    error PoolStakeAmLessThanMin();\\n    error PoolStakeAmGreaterThanAvailable();\\n    error PoolUnstakeAmLessThanMin();\\n\\n    error ParameterExceedsLimits(uint256 param);\\n\\n    /* events */\\n\\n    event Received(address indexed sender, uint256 amount);\\n\\n    event Staked(address indexed staker, uint256 amount, uint256 shares);\\n\\n    event Unstaked(\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    event Deposited(string indexed provider, bytes[] pubkeys);\\n\\n    event DistributeGasLimitChanged(uint32 prevValue, uint32 newValue);\\n\\n    event MinStakeChanged(uint256 prevValue, uint256 newValue);\\n\\n    event MinUntakeChanged(uint256 prevValue, uint256 newValue);\\n\\n    event MaxTVLChanged(uint256 prevValue, uint256 newValue);\\n\\n    event PendingUnstake(\\n        address indexed ownerAddress,\\n        address indexed receiverAddress,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /**\\n     *\\n     * @dev Deprecated.\\n     */\\n    event UnstakesDistributed(Unstake[] unstakes);\\n\\n    event ClaimExpected(address indexed claimer, uint256 value);\\n\\n    event UnstakeClaimed(\\n        address indexed claimer,\\n        address indexed caller,\\n        uint256 value\\n    );\\n\\n    event FlashUnstaked(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 amount,\\n        uint256 shares,\\n        uint256 fee\\n    );\\n\\n    event FeeClaimed(\\n        address indexed restaker,\\n        address indexed treasury,\\n        uint256 fee,\\n        uint256 totalClaimed\\n    );\\n\\n    event RestakerAdded(string indexed provider, address restaker);\\n\\n    event ReferralStake(bytes32 indexed code);\\n\\n    event StakeBonus(uint256 amount);\\n\\n    event StakeBonusParamsChanged(\\n        uint256 newMaxBonusRate,\\n        uint256 newOptimalBonusRate,\\n        uint256 newDepositUtilizationKink\\n    );\\n\\n    event UnstakeFeeParamsChanged(\\n        uint256 newMaxFlashFeeRate,\\n        uint256 newOptimalWithdrawalRate,\\n        uint256 newWithdrawUtilizationKink\\n    );\\n\\n    event ProtocolFeeChanged(uint256 prevValue, uint256 newValue);\\n\\n    event TargetCapacityChanged(uint256 prevValue, uint256 newValue);\\n\\n    /* functions */\\n\\n    function getMinStake() external view returns (uint256);\\n\\n    function getMinUnstake() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISignatureUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\n/**\\n * @title The interface for common signature utilities.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface ISignatureUtils {\\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithSaltAndExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the salt used to generate the signature\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n    struct MiddlewareTimes {\\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n        uint32 stalestUpdateBlock;\\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\\n        uint32 latestServeUntilBlock;\\n    }\\n\\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n    struct MiddlewareDetails {\\n        // the block at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n        uint32 registrationMayBeginAtBlock;\\n        // the block before which the contract is allowed to slash the user\\n        uint32 contractCanSlashOperatorUntilBlock;\\n        // the block at which the middleware's view of the operator's stake was most recently updated\\n        uint32 latestUpdateBlock;\\n    }\\n\\n    /// @notice Emitted when a middleware times is added to `operator`'s array.\\n    event MiddlewareTimesAdded(\\n        address operator,\\n        uint256 index,\\n        uint32 stalestUpdateBlock,\\n        uint32 latestServeUntilBlock\\n    );\\n\\n    /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n    event OptedIntoSlashing(\\n        address indexed operator,\\n        address indexed contractAddress\\n    );\\n\\n    /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilBlock`.\\n    event SlashingAbilityRevoked(\\n        address indexed operator,\\n        address indexed contractAddress,\\n        uint32 contractCanSlashOperatorUntilBlock\\n    );\\n\\n    /**\\n     * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n     * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n     */\\n    event OperatorFrozen(\\n        address indexed slashedOperator,\\n        address indexed slashingContract\\n    );\\n\\n    /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within EigenLayer.\\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function optIntoSlashing(address contractAddress) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev adds the middleware's slashing contract to the operator's linked list\\n     */\\n    function recordFirstStakeUpdate(\\n        address operator,\\n        uint32 serveUntilBlock\\n    ) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param updateBlock the block for which the stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n     *      but it is anticipated to be rare and not detrimental.\\n     */\\n    function recordStakeUpdate(\\n        address operator,\\n        uint32 updateBlock,\\n        uint32 serveUntilBlock,\\n        uint256 insertAfter\\n    ) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n     * slash `operator` once `serveUntil` is reached\\n     */\\n    function recordLastStakeUpdateAndRevokeSlashingAbility(\\n        address operator,\\n        uint32 serveUntilBlock\\n    ) external;\\n\\n    /// @notice The StrategyManager contract of EigenLayer\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice The DelegationManager contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @param staker The staker of interest.\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(\\n        address toBeSlashed,\\n        address slashingContract\\n    ) external view returns (bool);\\n\\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\\n    function contractCanSlashOperatorUntilBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\\n    function latestUpdateBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n    function getCorrectValueForInsertAfter(\\n        address operator,\\n        uint32 updateBlock\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n     */\\n    function canWithdraw(\\n        address operator,\\n        uint32 withdrawalStartBlock,\\n        uint256 middlewareTimesIndex\\n    ) external returns (bool);\\n\\n    /**\\n     * operator =\u003e\\n     *  [\\n     *      (\\n     *          the least recent update block of all of the middlewares it's serving/served,\\n     *          latest time that the stake bonded at that update needed to serve until\\n     *      )\\n     *  ]\\n     */\\n    function operatorToMiddlewareTimes(\\n        address operator,\\n        uint256 arrayIndex\\n    ) external view returns (MiddlewareTimes memory);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n    function middlewareTimesLength(\\n        address operator\\n    ) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\\n    function getMiddlewareTimesIndexStalestUpdateBlock(\\n        address operator,\\n        uint32 index\\n    ) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n    function getMiddlewareTimesIndexServeUntilBlock(\\n        address operator,\\n        uint32 index\\n    ) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n    function operatorWhitelistedContractsLinkedListSize(\\n        address operator\\n    ) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n    function operatorWhitelistedContractsLinkedListEntry(\\n        address operator,\\n        address node\\n    ) external view returns (bool, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this Strategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\\n     * @param recipient is the address to receive the withdrawn funds\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * other functions, and individual share balances are recorded in the strategyManager as well.\\n     */\\n    function withdraw(\\n        address recipient,\\n        IERC20 token,\\n        uint256 amountShares\\n    ) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlying(\\n        uint256 amountShares\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToShares(\\n        uint256 amountUnderlying\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n     * querying the `strategyManager` contract\\n     */\\n    function shares(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlyingView(\\n        uint256 amountShares\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToSharesView(\\n        uint256 amountUnderlying\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underlying token for shares in this Strategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in this Strategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal \u0026 purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStrategyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity \u003e=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n    /**\\n     * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n     * @param staker Is the staker who is depositing funds into EigenLayer.\\n     * @param strategy Is the strategy that `staker` has deposited into.\\n     * @param token Is the token that `staker` deposited.\\n     * @param shares Is the number of new shares `staker` has been granted in `strategy`.\\n     */\\n    event Deposit(\\n        address staker,\\n        IERC20 token,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\\n    event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\\n\\n    /// @notice Emitted when the `strategyWhitelister` is changed\\n    event StrategyWhitelisterChanged(\\n        address previousAddress,\\n        address newAddress\\n    );\\n\\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\\n\\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     *\\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n     */\\n    function depositIntoStrategy(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n     * who must sign off on the action.\\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n     * purely to help one address deposit 'for' another.\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @param staker the staker that the deposited assets will be credited to\\n     * @param expiry the timestamp at which the signature expires\\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n     * following EIP-1271 if the `staker` is a contract\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n     * targeting stakers who may be attempting to undelegate.\\n     * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\\n     *\\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n     */\\n    function depositIntoStrategyWithSignature(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount,\\n        address staker,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external returns (uint256 shares);\\n\\n    /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\\n    function removeShares(\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    ) external;\\n\\n    /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\\n    function addShares(\\n        address staker,\\n        IERC20 token,\\n        IStrategy strategy,\\n        uint256 shares\\n    ) external;\\n\\n    /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\\n    function withdrawSharesAsTokens(\\n        address recipient,\\n        IStrategy strategy,\\n        uint256 shares,\\n        IERC20 token\\n    ) external;\\n\\n    /// @notice Returns the current shares of `user` in `strategy`\\n    function stakerStrategyShares(\\n        address user,\\n        IStrategy strategy\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the staker's deposits and corresponding shares\\n     * @return (staker's strategies, shares in these strategies)\\n     */\\n    function getDeposits(\\n        address staker\\n    ) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n    function stakerStrategyListLength(\\n        address staker\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n     * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\\n     */\\n    function addStrategiesToDepositWhitelist(\\n        IStrategy[] calldata strategiesToWhitelist,\\n        bool[] calldata thirdPartyTransfersForbiddenValues\\n    ) external;\\n\\n    /**\\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n     */\\n    function removeStrategiesFromDepositWhitelist(\\n        IStrategy[] calldata strategiesToRemoveFromWhitelist\\n    ) external;\\n\\n    /// @notice Returns the single, central Delegation contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /// @notice Returns the single, central Slasher contract of EigenLayer\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns the EigenPodManager contract of EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice Returns the address of the `strategyWhitelister`\\n    function strategyWhitelister() external view returns (address);\\n\\n    /**\\n     * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\\n     * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\\n     */\\n    function thirdPartyTransfersForbidden(\\n        IStrategy strategy\\n    ) external view returns (bool);\\n\\n    // LIMITED BACKWARDS-COMPATIBILITY FOR DEPRECATED FUNCTIONALITY\\n    // packed struct for queued withdrawals; helps deal with stack-too-deep errors\\n    struct DeprecatedStruct_WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct DeprecatedStruct_QueuedWithdrawal {\\n        IStrategy[] strategies;\\n        uint256[] shares;\\n        address staker;\\n        DeprecatedStruct_WithdrawerAndNonce withdrawerAndNonce;\\n        uint32 withdrawalStartBlock;\\n        address delegatedAddress;\\n    }\\n\\n    function migrateQueuedWithdrawal(\\n        DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal\\n    ) external returns (bool, bytes32);\\n\\n    function calculateWithdrawalRoot(\\n        DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal\\n    ) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/BeaconChainProofs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Merkle.sol\\\";\\nimport \\\"../libraries/Endian.sol\\\";\\n\\n//Utility library for parsing and PHASE0 beacon chain block headers\\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\\nlibrary BeaconChainProofs {\\n    // constants are the number of fields and the heights of the different merkle trees used in merkleizing beacon chain containers\\n    uint256 internal constant NUM_BEACON_BLOCK_HEADER_FIELDS = 5;\\n    uint256 internal constant BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_BEACON_BLOCK_BODY_FIELDS = 11;\\n    uint256 internal constant BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant NUM_BEACON_STATE_FIELDS = 21;\\n    uint256 internal constant BEACON_STATE_FIELD_TREE_HEIGHT = 5;\\n\\n    uint256 internal constant NUM_ETH1_DATA_FIELDS = 3;\\n    uint256 internal constant ETH1_DATA_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant NUM_VALIDATOR_FIELDS = 8;\\n    uint256 internal constant VALIDATOR_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_HEADER_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_FIELD_TREE_HEIGHT = 4;\\n\\n    // HISTORICAL_ROOTS_LIMIT\\t = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_ROOTS_TREE_HEIGHT = 24;\\n\\n    // HISTORICAL_BATCH is root of state_roots and block_root, so number of leaves =  2^1\\n    uint256 internal constant HISTORICAL_BATCH_TREE_HEIGHT = 1;\\n\\n    // SLOTS_PER_HISTORICAL_ROOT = 2**13, so tree height is 13\\n    uint256 internal constant STATE_ROOTS_TREE_HEIGHT = 13;\\n    uint256 internal constant BLOCK_ROOTS_TREE_HEIGHT = 13;\\n\\n    //HISTORICAL_ROOTS_LIMIT = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_SUMMARIES_TREE_HEIGHT = 24;\\n\\n    //Index of block_summary_root in historical_summary container\\n    uint256 internal constant BLOCK_SUMMARY_ROOT_INDEX = 0;\\n\\n    uint256 internal constant NUM_WITHDRAWAL_FIELDS = 4;\\n    // tree height for hash tree of an individual withdrawal container\\n    uint256 internal constant WITHDRAWAL_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\\n    //refer to the eigenlayer-cli proof library.  Despite being the same dimensions as the validator tree, the balance tree is merkleized differently\\n    uint256 internal constant BALANCE_TREE_HEIGHT = 38;\\n\\n    // MAX_WITHDRAWALS_PER_PAYLOAD = 2**4, making tree height = 4\\n    uint256 internal constant WITHDRAWALS_TREE_HEIGHT = 4;\\n\\n    //in beacon block body https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconblockbody\\n    uint256 internal constant EXECUTION_PAYLOAD_INDEX = 9;\\n\\n    // in beacon block header https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n    uint256 internal constant SLOT_INDEX = 0;\\n    uint256 internal constant PROPOSER_INDEX_INDEX = 1;\\n    uint256 internal constant STATE_ROOT_INDEX = 3;\\n    uint256 internal constant BODY_ROOT_INDEX = 4;\\n    // in beacon state https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconstate\\n    uint256 internal constant HISTORICAL_BATCH_STATE_ROOT_INDEX = 1;\\n    uint256 internal constant BEACON_STATE_SLOT_INDEX = 2;\\n    uint256 internal constant LATEST_BLOCK_HEADER_ROOT_INDEX = 4;\\n    uint256 internal constant BLOCK_ROOTS_INDEX = 5;\\n    uint256 internal constant STATE_ROOTS_INDEX = 6;\\n    uint256 internal constant HISTORICAL_ROOTS_INDEX = 7;\\n    uint256 internal constant ETH_1_ROOT_INDEX = 8;\\n    uint256 internal constant VALIDATOR_TREE_ROOT_INDEX = 11;\\n    uint256 internal constant BALANCE_INDEX = 12;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_INDEX = 24;\\n    uint256 internal constant HISTORICAL_SUMMARIES_INDEX = 27;\\n\\n    // in validator https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\\n    uint256 internal constant VALIDATOR_SLASHED_INDEX = 3;\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n\\n    // in execution payload header\\n    uint256 internal constant TIMESTAMP_INDEX = 9;\\n    uint256 internal constant WITHDRAWALS_ROOT_INDEX = 14;\\n\\n    //in execution payload\\n    uint256 internal constant WITHDRAWALS_INDEX = 14;\\n\\n    // in withdrawal\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_INDEX_INDEX = 1;\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_AMOUNT_INDEX = 3;\\n\\n    //In historicalBatch\\n    uint256 internal constant HISTORICALBATCH_STATEROOTS_INDEX = 1;\\n\\n    //Misc Constants\\n\\n    /// @notice The number of slots each epoch in the beacon chain\\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\\n\\n    /// @notice The number of seconds in a slot in the beacon chain\\n    uint64 internal constant SECONDS_PER_SLOT = 12;\\n\\n    /// @notice Number of seconds per epoch: 384 == 32 slots/epoch * 12 seconds/slot\\n    uint64 internal constant SECONDS_PER_EPOCH =\\n        SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\\n\\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\\n\\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a partial/full withdrawal\\n    struct WithdrawalProof {\\n        bytes withdrawalProof;\\n        bytes slotProof;\\n        bytes executionPayloadProof;\\n        bytes timestampProof;\\n        bytes historicalSummaryBlockRootProof;\\n        uint64 blockRootIndex;\\n        uint64 historicalSummaryIndex;\\n        uint64 withdrawalIndex;\\n        bytes32 blockRoot;\\n        bytes32 slotRoot;\\n        bytes32 timestampRoot;\\n        bytes32 executionPayloadRoot;\\n    }\\n\\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a balance update\\n    struct BalanceUpdateProof {\\n        bytes validatorBalanceProof;\\n        bytes validatorFieldsProof;\\n        bytes32 balanceRoot;\\n    }\\n\\n    /// @notice This struct contains the root and proof for verifying the state root against the oracle block root\\n    struct StateRootProof {\\n        bytes32 beaconStateRoot;\\n        bytes proof;\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the fields of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param validatorFieldsProof is the data used in proving the validator's fields\\n     * @param validatorFields the claimed fields of the validator\\n     */\\n    function verifyValidatorFields(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata validatorFields,\\n        bytes calldata validatorFieldsProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorFields.length == 2 ** VALIDATOR_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\\\"\\n        );\\n\\n        /**\\n         * Note: the length of the validator merkle proof is BeaconChainProofs.VALIDATOR_TREE_HEIGHT + 1.\\n         * There is an additional layer added by hashing the root with the length of the validator list\\n         */\\n        require(\\n            validatorFieldsProof.length ==\\n                32 *\\n                    ((VALIDATOR_TREE_HEIGHT + 1) +\\n                        BEACON_STATE_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\\\"\\n        );\\n        uint256 index = (VALIDATOR_TREE_ROOT_INDEX \u003c\u003c\\n            (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\\n        // merkleize the validatorFields to get the leaf to prove\\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\\n\\n        // verify the proof of the validatorRoot against the beaconStateRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorFieldsProof,\\n                root: beaconStateRoot,\\n                leaf: validatorRoot,\\n                index: index\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the balance of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param validatorBalanceProof is the proof of the balance against the beacon chain state root\\n     * @param balanceRoot is the serialized balance used to prove the balance of the validator (refer to `getBalanceAtIndex` for detailed explanation)\\n     */\\n    function verifyValidatorBalance(\\n        bytes32 beaconStateRoot,\\n        bytes32 balanceRoot,\\n        bytes calldata validatorBalanceProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorBalanceProof.length ==\\n                32 *\\n                    ((BALANCE_TREE_HEIGHT + 1) +\\n                        BEACON_STATE_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Proof has incorrect length\\\"\\n        );\\n\\n        /**\\n         * the beacon state's balance list is a list of uint64 values, and these are grouped together in 4s when merkleized.\\n         * Therefore, the index of the balance of a validator is validatorIndex/4\\n         */\\n        uint256 balanceIndex = uint256(validatorIndex / 4);\\n        /**\\n         * Note: Merkleization of the balance root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\\n         * the array.  Thus we shift the BALANCE_INDEX over by BALANCE_TREE_HEIGHT + 1 and not just BALANCE_TREE_HEIGHT.\\n         */\\n        balanceIndex =\\n            (BALANCE_INDEX \u003c\u003c (BALANCE_TREE_HEIGHT + 1)) |\\n            balanceIndex;\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorBalanceProof,\\n                root: beaconStateRoot,\\n                leaf: balanceRoot,\\n                index: balanceIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the latestBlockHeader against the state root. the latestBlockHeader is\\n     * a tracked in the beacon state.\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param stateRootProof is the provided merkle proof\\n     * @param latestBlockRoot is hashtree root of the latest block header in the beacon state\\n     */\\n    function verifyStateRootAgainstLatestBlockRoot(\\n        bytes32 latestBlockRoot,\\n        bytes32 beaconStateRoot,\\n        bytes calldata stateRootProof\\n    ) internal view {\\n        require(\\n            stateRootProof.length ==\\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length\\\"\\n        );\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: stateRootProof,\\n                root: latestBlockRoot,\\n                leaf: beaconStateRoot,\\n                index: STATE_ROOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the slot and the withdrawal fields for a given withdrawal\\n     * @param withdrawalProof is the provided set of merkle proofs\\n     * @param withdrawalFields is the serialized withdrawal container to be proven\\n     */\\n    function verifyWithdrawal(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata withdrawalFields,\\n        WithdrawalProof calldata withdrawalProof\\n    ) internal view {\\n        require(\\n            withdrawalFields.length == 2 ** WITHDRAWAL_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.blockRootIndex \u003c 2 ** BLOCK_ROOTS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large\\\"\\n        );\\n        require(\\n            withdrawalProof.withdrawalIndex \u003c 2 ** WITHDRAWALS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.historicalSummaryIndex \u003c\\n                2 ** HISTORICAL_SUMMARIES_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: historicalSummaryIndex is too large\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.withdrawalProof.length ==\\n                32 *\\n                    (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT +\\n                        WITHDRAWALS_TREE_HEIGHT +\\n                        1),\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.executionPayloadProof.length ==\\n                32 *\\n                    (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT +\\n                        BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: executionPayloadProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.slotProof.length ==\\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.timestampProof.length ==\\n                32 * (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.historicalSummaryBlockRootProof.length ==\\n                32 *\\n                    (BEACON_STATE_FIELD_TREE_HEIGHT +\\n                        (HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\\n                        1 +\\n                        (BLOCK_ROOTS_TREE_HEIGHT)),\\n            \\\"BeaconChainProofs.verifyWithdrawal: historicalSummaryBlockRootProof has incorrect length\\\"\\n        );\\n        /**\\n         * Note: Here, the \\\"1\\\" in \\\"1 + (BLOCK_ROOTS_TREE_HEIGHT)\\\" signifies that extra step of choosing the \\\"block_root_summary\\\" within the individual\\n         * \\\"historical_summary\\\". Everywhere else it signifies merkelize_with_mixin, where the length of an array is hashed with the root of the array,\\n         * but not here.\\n         */\\n        uint256 historicalBlockHeaderIndex = (HISTORICAL_SUMMARIES_INDEX \u003c\u003c\\n            ((HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\\n                1 +\\n                (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (uint256(withdrawalProof.historicalSummaryIndex) \u003c\u003c\\n                (1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (BLOCK_SUMMARY_ROOT_INDEX \u003c\u003c (BLOCK_ROOTS_TREE_HEIGHT)) |\\n            uint256(withdrawalProof.blockRootIndex);\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.historicalSummaryBlockRootProof,\\n                root: beaconStateRoot,\\n                leaf: withdrawalProof.blockRoot,\\n                index: historicalBlockHeaderIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof\\\"\\n        );\\n\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.slotProof,\\n                root: withdrawalProof.blockRoot,\\n                leaf: withdrawalProof.slotRoot,\\n                index: SLOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof\\\"\\n        );\\n\\n        {\\n            // Next we verify the executionPayloadRoot against the blockRoot\\n            uint256 executionPayloadIndex = (BODY_ROOT_INDEX \u003c\u003c\\n                (BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT)) |\\n                EXECUTION_PAYLOAD_INDEX;\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.executionPayloadProof,\\n                    root: withdrawalProof.blockRoot,\\n                    leaf: withdrawalProof.executionPayloadRoot,\\n                    index: executionPayloadIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof\\\"\\n            );\\n        }\\n\\n        // Next we verify the timestampRoot against the executionPayload root\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.timestampProof,\\n                root: withdrawalProof.executionPayloadRoot,\\n                leaf: withdrawalProof.timestampRoot,\\n                index: TIMESTAMP_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid blockNumber merkle proof\\\"\\n        );\\n\\n        {\\n            /**\\n             * Next we verify the withdrawal fields against the blockRoot:\\n             * First we compute the withdrawal_index relative to the blockRoot by concatenating the indexes of all the\\n             * intermediate root indexes from the bottom of the sub trees (the withdrawal container) to the top, the blockRoot.\\n             * Then we calculate merkleize the withdrawalFields container to calculate the the withdrawalRoot.\\n             * Finally we verify the withdrawalRoot against the executionPayloadRoot.\\n             *\\n             *\\n             * Note: Merkleization of the withdrawals root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\\n             * the array.  Thus we shift the WITHDRAWALS_INDEX over by WITHDRAWALS_TREE_HEIGHT + 1 and not just WITHDRAWALS_TREE_HEIGHT.\\n             */\\n            uint256 withdrawalIndex = (WITHDRAWALS_INDEX \u003c\u003c\\n                (WITHDRAWALS_TREE_HEIGHT + 1)) |\\n                uint256(withdrawalProof.withdrawalIndex);\\n            bytes32 withdrawalRoot = Merkle.merkleizeSha256(withdrawalFields);\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.withdrawalProof,\\n                    root: withdrawalProof.executionPayloadRoot,\\n                    leaf: withdrawalRoot,\\n                    index: withdrawalIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function replicates the ssz hashing of a validator's pubkey, outlined below:\\n     *  hh := ssz.NewHasher()\\n     *  hh.PutBytes(validatorPubkey[:])\\n     *  validatorPubkeyHash := hh.Hash()\\n     *  hh.Reset()\\n     */\\n    function hashValidatorBLSPubkey(\\n        bytes memory validatorPubkey\\n    ) internal pure returns (bytes32 pubkeyHash) {\\n        require(\\n            validatorPubkey.length == 48,\\n            \\\"Input should be 48 bytes in length\\\"\\n        );\\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\\n    }\\n\\n    /**\\n     * @notice Parses a balanceRoot to get the uint64 balance of a validator.\\n     * @dev During merkleization of the beacon state balance tree, four uint64 values are treated as a single\\n     * leaf in the merkle tree. We use validatorIndex % 4 to determine which of the four uint64 values to\\n     * extract from the balanceRoot.\\n     * @param balanceRoot is the combination of 4 validator balances being proven for\\n     * @param validatorIndex is the index of the validator being proven for\\n     * @return The validator's balance, in Gwei\\n     */\\n    function getBalanceAtIndex(\\n        bytes32 balanceRoot,\\n        uint40 validatorIndex\\n    ) internal pure returns (uint64) {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return\\n            Endian.fromLittleEndianUint64(\\n                bytes32((uint256(balanceRoot) \u003c\u003c bitShiftAmount))\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieve the withdrawal timestamp\\n     */\\n    function getWithdrawalTimestamp(\\n        WithdrawalProof memory withdrawalProof\\n    ) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(withdrawalProof.timestampRoot);\\n    }\\n\\n    /**\\n     * @dev Converts the withdrawal's slot to an epoch\\n     */\\n    function getWithdrawalEpoch(\\n        WithdrawalProof memory withdrawalProof\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(withdrawalProof.slotRoot) /\\n            SLOTS_PER_EPOCH;\\n    }\\n\\n    /**\\n     * Indices for validator fields (refer to consensus specs):\\n     * 0: pubkey\\n     * 1: withdrawal credentials\\n     * 2: effective balance\\n     * 3: slashed?\\n     * 4: activation elligibility epoch\\n     * 5: activation epoch\\n     * 6: exit epoch\\n     * 7: withdrawable epoch\\n     */\\n\\n    /**\\n     * @dev Retrieves a validator's pubkey hash\\n     */\\n    function getPubkeyHash(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_PUBKEY_INDEX];\\n    }\\n\\n    function getWithdrawalCredentials(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX];\\n    }\\n\\n    /**\\n     * @dev Retrieves a validator's effective balance (in gwei)\\n     */\\n    function getEffectiveBalanceGwei(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(\\n                validatorFields[VALIDATOR_BALANCE_INDEX]\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieves a validator's withdrawable epoch\\n     */\\n    function getWithdrawableEpoch(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(\\n                validatorFields[VALIDATOR_WITHDRAWABLE_EPOCH_INDEX]\\n            );\\n    }\\n\\n    /**\\n     * Indices for withdrawal fields (refer to consensus specs):\\n     * 0: withdrawal index\\n     * 1: validator index\\n     * 2: execution address\\n     * 3: withdrawal amount\\n     */\\n\\n    /**\\n     * @dev Retrieves a withdrawal's validator index\\n     */\\n    function getValidatorIndex(\\n        bytes32[] memory withdrawalFields\\n    ) internal pure returns (uint40) {\\n        return\\n            uint40(\\n                Endian.fromLittleEndianUint64(\\n                    withdrawalFields[WITHDRAWAL_VALIDATOR_INDEX_INDEX]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieves a withdrawal's withdrawal amount (in gwei)\\n     */\\n    function getWithdrawalAmountGwei(\\n        bytes32[] memory withdrawalFields\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(\\n                withdrawalFields[WITHDRAWAL_VALIDATOR_AMOUNT_INDEX]\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Endian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(\\n        bytes32 lenum\\n    ) internal pure returns (uint64 n) {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum \u003e\u003e 192));\\n        return\\n            (n \u003e\u003e 56) |\\n            ((0x00FF000000000000 \u0026 n) \u003e\u003e 40) |\\n            ((0x0000FF0000000000 \u0026 n) \u003e\u003e 24) |\\n            ((0x000000FF00000000 \u0026 n) \u003e\u003e 8) |\\n            ((0x00000000FF000000 \u0026 n) \u003c\u003c 8) |\\n            ((0x0000000000FF0000 \u0026 n) \u003c\u003c 24) |\\n            ((0x000000000000FF00 \u0026 n) \u003c\u003c 40) |\\n            ((0x00000000000000FF \u0026 n) \u003c\u003c 56);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/InceptionLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n\\n/**\\n * @dev It serves two primary functions:\\n * 1. Flash vault-related logic for the calculation of deposit bonuses and withdrawal fees.\\n * 2. Conversion between shares and assets.\\n * @author InceptionLRT V2\\n */\\nlibrary InceptionLibrary {\\n    uint256 constant MAX_PERCENT = 100 * 1e8;\\n\\n    /************************************************************\\n     ************************ Flash Vault ***********************\\n     ************************************************************/\\n\\n    function calculateDepositBonus(\\n        uint256 amount,\\n        uint256 capacity,\\n        uint256 optimalCapacity,\\n        uint256 optimalBonusRate,\\n        uint256 maxDepositBonusRate,\\n        uint256 targetCapacity\\n    ) external pure returns (uint256 bonus) {\\n        /// @dev the utilization rate is in the range [0:25] %\\n        if (amount \u003e 0 \u0026\u0026 capacity \u003c optimalCapacity) {\\n            uint256 replenished = amount;\\n            if (optimalCapacity \u003c capacity + amount)\\n                replenished = optimalCapacity - capacity;\\n\\n            uint256 bonusSlope = ((maxDepositBonusRate - optimalBonusRate) *\\n                1e18) / ((optimalCapacity * 1e18) / targetCapacity);\\n            uint256 bonusPercent = maxDepositBonusRate -\\n                (bonusSlope * (capacity + replenished / 2)) /\\n                targetCapacity;\\n\\n            capacity += replenished;\\n            bonus += (replenished * bonusPercent) / MAX_PERCENT;\\n            amount -= replenished;\\n        }\\n        /// @dev the utilization rate is in the range [25: ] %\\n        if (amount \u003e 0 \u0026\u0026 capacity \u003c= targetCapacity) {\\n            uint256 replenished = targetCapacity \u003e capacity + amount\\n                ? amount\\n                : targetCapacity - capacity;\\n\\n            bonus += (replenished * optimalBonusRate) / MAX_PERCENT;\\n        }\\n    }\\n\\n    function calculateWithdrawalFee(\\n        uint256 amount,\\n        uint256 capacity,\\n        uint256 optimalCapacity,\\n        uint256 optimalFeeRate,\\n        uint256 maxFlashWithdrawalFeeRate,\\n        uint256 targetCapacity\\n    ) external pure returns (uint256 fee) {\\n        /// @dev the utilization rate is in the range [100:25] %\\n        if (amount \u003e 0 \u0026\u0026 capacity \u003e optimalCapacity) {\\n            uint256 replenished = amount;\\n            if (capacity - amount \u003c optimalCapacity)\\n                replenished = capacity - optimalCapacity;\\n\\n            fee += (replenished * optimalFeeRate) / MAX_PERCENT;\\n            amount -= replenished;\\n            capacity -= replenished;\\n            if (fee == 0) ++fee;\\n        }\\n        /// @dev the utilization rate is in the range [25:0] %\\n        if (amount \u003e 0) {\\n            uint256 feeSlope = ((maxFlashWithdrawalFeeRate - optimalFeeRate) *\\n                1e18) / ((optimalCapacity * 1e18) / targetCapacity);\\n            uint256 bonusPercent = maxFlashWithdrawalFeeRate -\\n                (feeSlope * (capacity - amount / 2)) /\\n                targetCapacity;\\n            fee += (amount * bonusPercent) / MAX_PERCENT;\\n            if (fee == 0) ++fee;\\n        }\\n        if (fee == 0) ++fee;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function verifyInclusionKeccak(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        return processInclusionProofKeccak(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofKeccak(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bytes32) {\\n        require(\\n            proof.length != 0 \u0026\u0026 proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i \u003c= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, computedHash)\\n                    mstore(0x20, mload(add(proof, i)))\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, computedHash)\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 \u0026\u0026 proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i \u003c= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     @param leaves the leaves of the merkle tree\\n     @return The computed Merkle root of the tree.\\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\\n     */\\n    function merkleizeSha256(\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint i = 0; i \u003c numNodesInLayer; i++) {\\n            layer[i] = sha256(\\n                abi.encodePacked(leaves[2 * i], leaves[2 * i + 1])\\n            );\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint i = 0; i \u003c numNodesInLayer; i++) {\\n                layer[i] = sha256(\\n                    abi.encodePacked(layer[2 * i], layer[2 * i + 1])\\n                );\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/restaker/IRestaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRestakerFacets.sol\\\";\\n\\n/**\\n * @title Diamond-like implementation which support call with context (simple call).\\n * @author GenesisLST\\n */\\ninterface IRestaker {\\n    error RestakerCannotClaim();\\n\\n    event Claimed(address indexed recipient, uint256 amount);\\n\\n    function initialize(address owner, IRestakerFacets facets) external;\\n    function __claim() external;\\n}\\n\"\r\n    },\r\n    \"contracts/restaker/IRestakerDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRestaker.sol\\\";\\n\\ninterface IRestakerDeployer {\\n    event RestakerDeployed(\\n        address indexed creator,\\n        IRestaker indexed restaker,\\n        uint256 id\\n    );\\n\\n    function BEACON_PROXY_BYTECODE() external view returns (bytes memory);\\n\\n    function beacon() external view returns (address);\\n\\n    function nonce() external view returns (uint256);\\n\\n    function deployRestaker() external returns (IRestaker restaker);\\n\\n    function getRestaker(uint256 id) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/restaker/IRestakerFacets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interfaces/IEigenPodManager.sol\\\";\\n\\ninterface IRestakerFacets {\\n    error ZeroAddress();\\n\\n    event SignatureSet(FuncTarget indexed target, bytes4 signature);\\n\\n    enum FuncTarget {\\n        POD,\\n        POD_MANAGER,\\n        DELEGATION_MANAGER\\n    }\\n\\n    function selectorToTarget(bytes4 sig) external view returns (address);\\n\\n    function getEigenPodManager() external view returns (IEigenPodManager);\\n\\n    function getDelegationManager() external view returns (IDelegationManager);\\n}\\n\"\r\n    },\r\n    \"contracts/RestakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport { Configurable } from \\\"./Configurable.sol\\\";\\n\\nimport \\\"./interfaces/IEigenPod.sol\\\";\\nimport { ICToken } from \\\"./interfaces/ICToken.sol\\\";\\nimport { IRestaker } from \\\"./restaker/IRestaker.sol\\\";\\nimport { IDelegationManager } from \\\"./interfaces/IDelegationManager.sol\\\";\\nimport { IProtocolConfig } from \\\"./interfaces/IProtocolConfig.sol\\\";\\nimport { IRestakingPool } from \\\"./interfaces/IRestakingPool.sol\\\";\\nimport { ISignatureUtils } from \\\"./interfaces/ISignatureUtils.sol\\\";\\n\\nimport { InceptionLibrary } from \\\"./libraries/InceptionLibrary.sol\\\";\\n\\n/**\\n * @title General contract where stakes and unstakes of inETH happens.\\n * @author InceptionLRT V2\\n */\\ncontract RestakingPool is\\n    Configurable,\\n    ReentrancyGuardUpgradeable,\\n    IRestakingPool\\n{\\n    /**\\n     * @dev block gas limit\\n     */\\n    uint64 internal constant MAX_GAS_LIMIT = 30_000_000;\\n\\n    /**\\n     * @notice gas available to receive unstake\\n     * @dev max gas allocated for {_sendValue}\\n     */\\n    uint256 public constant CALL_GAS_LIMIT = 10_000;\\n\\n    uint256 internal _minStakeAmount;\\n    uint256 internal _minUnstakeAmount;\\n\\n    /**\\n     * @dev staked ETH to protocol.\\n     */\\n    uint256 internal _totalStaked;\\n    /**\\n     * @dev unstaked ETH from protocol\\n     */\\n    uint256 internal _totalUnstaked;\\n\\n    /**\\n     * @dev Current gap of {_pendingUnstakes}.\\n     */\\n    uint256 internal _pendingGap;\\n    /**\\n     * @dev Unstake queue.\\n     */\\n    Unstake[] internal _pendingUnstakes;\\n    /**\\n     * @dev Total unstake amount in {_pendingUnstakes}.\\n     */\\n    uint256 internal _totalPendingUnstakes;\\n    mapping(address =\u003e uint256) internal _totalUnstakesOf;\\n    /**\\n     * @dev max gas spendable per interation of {distributeUnstakes}\\n     */\\n    uint32 internal _distributeGasLimit;\\n\\n    uint256 internal _totalClaimable;\\n    mapping(address =\u003e uint256) internal _claimable;\\n\\n    /**\\n     * @dev keccak256(provider name) =\u003e Restaker\\n     */\\n    mapping(bytes32 =\u003e address) internal _restakers;\\n\\n    /**\\n     * @dev max accepted TVL of protocol\\n     */\\n    uint256 internal _maxTVL;\\n\\n    /// @dev 100%\\n    uint64 public constant MAX_PERCENT = 100 * 1e8;\\n\\n    uint256 public stakeBonusAmount;\\n\\n    uint64 public targetCapacity;\\n    uint64 public maxBonusRate;\\n    uint64 public optimalBonusRate;\\n    uint64 public stakeUtilizationKink;\\n\\n    uint64 public maxFlashFeeRate;\\n    uint64 public optimalUnstakeRate;\\n    uint64 public unstakeUtilizationKink;\\n    uint64 public protocolFee;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50 - 16] private __gap;\\n\\n    /*******************************************************************************\\n                        CONSTRUCTOR\\n    *******************************************************************************/\\n\\n    /// @dev https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        IProtocolConfig config,\\n        uint32 distributeGasLimit,\\n        uint256 newMaxTVL\\n    ) external initializer {\\n        __ReentrancyGuard_init();\\n        __Configurable_init(config);\\n        __RestakingPool_init(distributeGasLimit, newMaxTVL);\\n    }\\n\\n    function __RestakingPool_init(\\n        uint32 distributeGasLimit,\\n        uint256 newMaxTVL\\n    ) internal onlyInitializing {\\n        _setDistributeGasLimit(distributeGasLimit);\\n        _setMaxTVL(newMaxTVL);\\n    }\\n\\n    /*******************************************************************************\\n                        WRITE FUNCTIONS\\n    *******************************************************************************/\\n\\n    /**\\n     *\\n     * @dev need to open incoming transfers to receive ETH from EigenPods\\n     */\\n    receive() external payable {\\n        emit Received(_msgSender(), msg.value);\\n    }\\n\\n    function stake(bytes32 code) external payable {\\n        stake();\\n        emit ReferralStake(code);\\n    }\\n\\n    /**\\n     * @notice Exchange `msg.value` ETH for inETH by ratio.\\n     */\\n    function stake() public payable {\\n        uint256 amount = msg.value;\\n        if (targetCapacity == 0) revert TargetCapacityNotSet();\\n        if (amount \u003c getMinStake()) revert PoolStakeAmLessThanMin();\\n        if (amount \u003e availableToStake()) revert PoolStakeAmGreaterThanAvailable();\\n\\n        uint256 stakeBonus;\\n        if (stakeBonusAmount \u003e 0) {\\n            uint256 capacity = getFlashCapacity();\\n            if (capacity \u003c amount) {\\n                stakeBonus = _calculateStakeBonus(0, amount);\\n            } else {\\n                stakeBonus = _calculateStakeBonus(capacity - amount, amount);\\n            }\\n\\n            if (stakeBonus \u003e stakeBonusAmount) {\\n                stakeBonus = stakeBonusAmount;\\n                stakeBonusAmount = 0;\\n            } else {\\n                stakeBonusAmount -= stakeBonus;\\n            }\\n            emit StakeBonus(stakeBonus);\\n        }\\n        amount += stakeBonus;\\n\\n        ICToken token = config().getCToken();\\n        uint256 shares = token.convertToShares(amount);\\n        token.mint(_msgSender(), shares);\\n\\n        _totalStaked += amount;\\n        emit Staked(_msgSender(), amount, shares);\\n    }\\n\\n    /**\\n     * @notice Deposit pubkeys together with 32 ETH to given `provider`.\\n     * @param provider Provider to restake ETH.\\n     * @param pubkeys Array of provider's `pubkeys`.\\n     * @param signatures Array of provider's `signatures`.\\n     * @param deposit_data_roots Array of provider's `deposit_data_roots`.\\n     */\\n    function batchDeposit(\\n        string memory provider,\\n        bytes[] calldata pubkeys,\\n        bytes[] calldata signatures,\\n        bytes32[] calldata deposit_data_roots\\n    ) external onlyOperator nonReentrant {\\n        uint256 pubkeysLen = pubkeys.length;\\n\\n        if (\\n            pubkeysLen != signatures.length ||\\n            pubkeysLen != deposit_data_roots.length\\n        ) revert PoolWrongInputLength();\\n\\n        if (getFreeBalance() \u003c 32 ether * pubkeysLen) revert PoolInsufficientBalance();\\n\\n\\n        IEigenPodManager restaker = IEigenPodManager(\\n            _getRestakerOrRevert(provider)\\n        );\\n\\n        for (uint i; i \u003c pubkeysLen; i++) {\\n            restaker.stake{value: 32 ether}(\\n                pubkeys[i],\\n                signatures[i],\\n                deposit_data_roots[i]\\n            );\\n        }\\n\\n        emit Deposited(provider, pubkeys);\\n    }\\n\\n    /**\\n     * @dev Creates a withdrawal request based on the current ratio.\\n     * @param shares The number of shares to be unstaked.\\n     * @param receiver The address that will receive the withdrawn amount.\\n     */\\n    function flashUnstake(\\n        uint256 shares,\\n        address receiver\\n    ) external nonReentrant {\\n        if (targetCapacity == 0) revert TargetCapacityNotSet();\\n\\n        address claimer = msg.sender;\\n        ICToken token = config().getCToken();\\n        uint256 amount = token.convertToAmount(shares);\\n        if (amount \u003c getMinUnstake()) revert PoolUnstakeAmLessThanMin();\\n        if (amount \u003e getFlashCapacity()) revert InsufficientCapacity(getFlashCapacity());\\n\\n        uint256 fee = calculateFlashUnstakeFee(amount);\\n        if (fee == 0) revert PoolZeroAmount();\\n        uint256 protocolWithdrawalFee = (fee * protocolFee) / MAX_PERCENT;\\n\\n        token.burn(claimer, shares);\\n\\n        _totalUnstaked += amount;\\n        amount -= fee;\\n        stakeBonusAmount += (fee - protocolWithdrawalFee);\\n\\n        _sendValue(config().getTreasury(), protocolWithdrawalFee, false);\\n        _sendValue(receiver, amount, false);\\n\\n        emit FlashUnstaked(claimer, receiver, claimer, amount, shares, fee);\\n    }\\n\\n    /**\\n     * @notice Burns shares from owner and add exactly amount of ETH to unstake queue in order for `to`.\\n     * @dev Returns ETH via queue\\n     * @param to Address for receiving unstaked funds\\n     * @param shares Amount of cToken to unstake\\n     */\\n    function unstake(address to, uint256 shares) external nonReentrant {\\n        address from = _msgSender();\\n        ICToken token = config().getCToken();\\n        uint256 amount = token.convertToAmount(shares);\\n        if (amount \u003c getMinUnstake()) revert PoolUnstakeAmLessThanMin();\\n\\n        // @dev don't need to check balance, because it throws ERC20InsufficientBalance\\n        token.burn(from, shares);\\n\\n        _addIntoQueue(to, amount);\\n\\n        _totalUnstaked += amount;\\n        emit Unstaked(from, to, amount, shares);\\n    }\\n\\n    function _addIntoQueue(address recipient, uint256 amount) internal {\\n        if (recipient == address(0)) revert PoolZeroAddress();\\n        if (amount == 0) revert PoolZeroAmount();\\n\\n        // each new request is placed at the end of the queue\\n        _totalPendingUnstakes += amount;\\n        _totalUnstakesOf[recipient] += amount;\\n\\n        _pendingUnstakes.push(Unstake(recipient, amount));\\n    }\\n\\n    function claimRestaker(\\n        string calldata provider,\\n        uint256 fee\\n    ) external onlyOperator {\\n        IRestaker restaker = IRestaker(_getRestakerOrRevert(provider));\\n        uint256 balanceBefore = address(this).balance;\\n        restaker.__claim();\\n        uint256 claimed = address(this).balance - balanceBefore;\\n\\n        if (fee \u003e claimed) revert AmbiguousFee(claimed, fee);\\n        // send committed by operator fee (deducted from ratio) to multi-sig treasury\\n        address treasury = config().getTreasury();\\n        if (fee \u003e 0) _sendValue(treasury, fee, false);\\n\\n        // from {provider} fee claimed to {treasury}\\n        emit FeeClaimed(address(restaker), treasury, fee, claimed);\\n    }\\n\\n    /**\\n     * @notice Pay unstakes from {getPending} balance.\\n     * @dev Callable by operator once per 1-3 days if {getPending} enough to pay at least one unstake.\\n     */\\n    function distributeUnstakes() external onlyOperator nonReentrant {\\n        /// no need to check for {_distributeGasLimit} because it's never be 0\\n        /// TODO: claim from Restakers and spent fee from this sum\\n\\n        uint256 poolBalance = getFreeBalance();\\n\\n        uint256 unstakesLength = _pendingUnstakes.length;\\n        uint256 i = _pendingGap;\\n\\n        while (\\n            i \u003c unstakesLength \u0026\u0026\\n            poolBalance \u003e 0 \u0026\u0026\\n            gasleft() \u003e _distributeGasLimit\\n        ) {\\n            Unstake memory unstake_ = _pendingUnstakes[i];\\n\\n            if (unstake_.recipient == address(0) || unstake_.amount == 0) {\\n                ++i;\\n                continue;\\n            }\\n            if (poolBalance \u003c unstake_.amount) break;\\n\\n            _totalUnstakesOf[unstake_.recipient] -= unstake_.amount;\\n            _totalPendingUnstakes -= unstake_.amount;\\n            poolBalance -= unstake_.amount;\\n            delete _pendingUnstakes[i];\\n            ++i;\\n            _addClaimable(unstake_.recipient, unstake_.amount);\\n        }\\n        _pendingGap = i;\\n    }\\n\\n    function _sendValue(\\n        address recipient,\\n        uint256 amount,\\n        bool limit\\n    ) internal returns (bool success) {\\n        if (address(this).balance \u003c amount) revert PoolInsufficientBalance();\\n\\n        address payable wallet = payable(recipient);\\n        if (limit) {\\n            assembly {\\n                success := call(CALL_GAS_LIMIT, wallet, amount, 0, 0, 0, 0)\\n            }\\n        } else {\\n            (success, ) = wallet.call{value: amount}(\\\"\\\");\\n        }\\n\\n        return success;\\n    }\\n\\n    function _addClaimable(address account, uint256 amount) internal {\\n        _totalClaimable += amount;\\n        _claimable[account] += amount;\\n        emit ClaimExpected(account, amount);\\n    }\\n\\n    /**\\n     * @notice Claim ETH available in {claimableOf}\\n     */\\n    function claimUnstake(address claimer) external nonReentrant {\\n        if (claimer == address(0)) revert PoolZeroAddress();\\n\\n        uint256 amount = claimableOf(claimer);\\n        if (amount == 0) revert PoolZeroAmount();\\n\\n        if (address(this).balance \u003c getTotalClaimable()) revert PoolInsufficientBalance();\\n\\n        _totalClaimable -= amount;\\n        _claimable[claimer] = 0;\\n\\n        bool result = _sendValue(claimer, amount, false);\\n        if (!result) revert PoolFailedInnerCall();\\n\\n\\n        emit UnstakeClaimed(claimer, _msgSender(), amount);\\n    }\\n\\n    /*******************************************************************************\\n                        EIGEN POD OWNER WRITE FUNCTIONS\\n                        THIS FUNCTIONS MAKE POSSIBLE TO\\n                        CALL DIFFERENT CONTRACTS WITH\\n                        RESTAKER CONTEXT\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Will be called only once for each restaker, because it activates restaking.\\n     * @dev deprecated. Remove after EigenPod activation\\n     */\\n    function activateRestaking(string memory provider) external onlyOperator {\\n        address restaker = _getRestakerOrRevert(provider);\\n        // it withdraw ETH to restaker\\n        IEigenPod(restaker).activateRestaking();\\n    }\\n\\n    /**\\n     * @notice withdraw not restaked ETH\\n     * @dev deprecated. Remove after EigenPod activation\\n     */\\n    function withdrawBeforeRestaking(\\n        string memory provider\\n    ) external onlyOperator {\\n        address restaker = _getRestakerOrRevert(provider);\\n        // it withdraw ETH to restaker\\n        IEigenPod(restaker).withdrawBeforeRestaking();\\n    }\\n\\n    /**\\n     * @notice Verify that validators has withdrawal credentials pointed to EigenPod\\n     */\\n    function verifyWithdrawalCredentials(\\n        string memory provider,\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        uint40[] calldata validatorIndices,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external onlyOperator {\\n        IEigenPod restaker = IEigenPod(_getRestakerOrRevert(provider));\\n        restaker.verifyWithdrawalCredentials(\\n            oracleTimestamp,\\n            stateRootProof,\\n            validatorIndices,\\n            validatorFieldsProofs,\\n            validatorFields\\n        );\\n    }\\n\\n    function withdrawNonBeaconChainETHBalanceWei(\\n        string memory provider,\\n        uint256 amountToWithdraw\\n    ) external onlyOperator {\\n        IEigenPod restaker = IEigenPod(_getRestakerOrRevert(provider));\\n        restaker.withdrawNonBeaconChainETHBalanceWei(\\n            address(this),\\n            amountToWithdraw\\n        );\\n    }\\n\\n    function recoverTokens(\\n        string memory provider,\\n        IERC20[] memory tokenList,\\n        uint256[] memory amountsToWithdraw\\n    ) external onlyOperator {\\n        IEigenPod restaker = IEigenPod(_getRestakerOrRevert(provider));\\n        restaker.recoverTokens(\\n            tokenList,\\n            amountsToWithdraw,\\n            config().getOperator()\\n        );\\n    }\\n\\n    function delegateTo(\\n        string memory provider,\\n        address elOperator,\\n        ISignatureUtils.SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external onlyOperator {\\n        IDelegationManager restaker = IDelegationManager(\\n            _getRestakerOrRevert(provider)\\n        );\\n        restaker.delegateTo(\\n            elOperator,\\n            approverSignatureAndExpiry,\\n            approverSalt\\n        );\\n    }\\n\\n    function undelegate(string memory provider) external onlyOperator {\\n        IDelegationManager restaker = IDelegationManager(\\n            _getRestakerOrRevert(provider)\\n        );\\n        restaker.undelegate(address(restaker));\\n    }\\n\\n    /*******************************************************************************\\n                        VIEW FUNCTIONS\\n    *******************************************************************************/\\n\\n    function getFlashCapacity() public view returns (uint256 total) {\\n        uint256 balance = address(this).balance;\\n        uint256 claimable = getTotalClaimable();\\n        uint256 stakeBonus = stakeBonusAmount;\\n\\n        if (claimable + stakeBonus \u003e balance) {\\n            return 0;\\n        } else {\\n            return balance - claimable - stakeBonus;\\n        }\\n    }\\n\\n    function _getTargetCapacity() internal view returns (uint256) {\\n        return (targetCapacity * config().getCToken().totalAssets()) / MAX_PERCENT;\\n    }\\n\\n    /**\\n     * @notice Get ETH amount available to stake before protocol reach max TVL.\\n     */\\n    function availableToStake() public view virtual returns (uint256) {\\n        uint256 totalAssets = config().getCToken().totalAssets();\\n        if (totalAssets \u003e _maxTVL) {\\n            return 0;\\n        }\\n        return _maxTVL - totalAssets;\\n    }\\n\\n    /**\\n     * @notice Get minimal available amount to stake.\\n     */\\n    function getMinStake() public view virtual returns (uint256 amount) {\\n        // 1 shares = minimal respresentable amount\\n        uint256 minConvertableAmount = config().getCToken().convertToAmount(1);\\n        return\\n            _minStakeAmount \u003e minConvertableAmount\\n                ? _minStakeAmount\\n                : minConvertableAmount;\\n    }\\n\\n    /**\\n     * @notice Get minimal availabe unstake of shares.\\n     */\\n    function getMinUnstake()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256 shares)\\n    {\\n        ICToken token = config().getCToken();\\n        // 1 shares =\u003e amount =\u003e shares = minimal possible shares amount\\n        uint256 minConvertableShare = token.convertToShares(\\n            token.convertToAmount(1)\\n        );\\n        return\\n            _minUnstakeAmount \u003e minConvertableShare\\n                ? _minUnstakeAmount\\n                : minConvertableShare;\\n    }\\n\\n    /**\\n    * @notice Get pending to calculate ratio.\\n    */\\n    function getPending() public view returns (uint256) {\\n        uint256 balance = address(this).balance;\\n        uint256 claimable = getTotalClaimable();\\n        uint256 stakeBonus = stakeBonusAmount;\\n\\n        if (claimable + stakeBonus \u003e balance) {\\n            return 0;\\n        } else {\\n            return balance - claimable - stakeBonus;\\n        }\\n    }\\n\\n    /**\\n    * @notice Get free to {batchDeposit}/{distributeUnstakes} balance.\\n    */\\n    function getFreeBalance() public view returns (uint256) {\\n        uint256 pending = getPending();\\n        uint256 targetCap = _getTargetCapacity();\\n\\n        if (targetCap \u003e pending) {\\n            return 0;\\n        } else {\\n            return pending - targetCap;\\n        }\\n    }\\n\\n    /**\\n     * @notice Total amount waiting for claim by users.\\n     */\\n    function getTotalClaimable() public view returns (uint256) {\\n        return _totalClaimable;\\n    }\\n\\n    function maxTVL() public view returns (uint256) {\\n        return _maxTVL;\\n    }\\n\\n    /**\\n     * @notice Total amount of waiting unstakes.\\n     */\\n    function getTotalPendingUnstakes() public view returns (uint256) {\\n        return _totalPendingUnstakes;\\n    }\\n\\n    /**\\n     * @notice Get all waiting unstakes in queue.\\n     * @dev Avoid to use not in view methods.\\n     */\\n    function getUnstakes() external view returns (Unstake[] memory unstakes) {\\n        unstakes = new Unstake[](_pendingUnstakes.length - _pendingGap);\\n        uint256 j;\\n        for (uint256 i = _pendingGap; i \u003c _pendingUnstakes.length; i++) {\\n            unstakes[j++] = _pendingUnstakes[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get waiting unstakes.\\n     * @dev Avoid to use not in view methods.\\n     */\\n    function getUnstakesOf(\\n        address recipient\\n    ) external view returns (Unstake[] memory unstakes) {\\n        unstakes = new Unstake[](_pendingUnstakes.length - _pendingGap);\\n        uint256 j;\\n        for (uint256 i = _pendingGap; i \u003c _pendingUnstakes.length; i++) {\\n            if (_pendingUnstakes[i].recipient == recipient) {\\n                unstakes[j++] = _pendingUnstakes[i];\\n            }\\n        }\\n        uint256 removeCells = unstakes.length - j;\\n        if (removeCells \u003e 0) {\\n            assembly {\\n                mstore(unstakes, j)\\n            }\\n        }\\n    }\\n\\n    /**\\n     *\\n     * @notice Get total amount of waiting unstakes of user.\\n     */\\n    function getTotalUnstakesOf(\\n        address recipient\\n    ) public view returns (uint256) {\\n        return _totalUnstakesOf[recipient];\\n    }\\n\\n    /**\\n     * @notice Is {claimableOf} \u003e 0.\\n     */\\n    function hasClaimable(address claimer) public view returns (bool) {\\n        return _claimable[claimer] != uint256(0);\\n    }\\n\\n    /**\\n     * @notice Claimable amount of non executed unstakes.\\n     * @dev Value increased when {_sendValue} failed during {distributeUnstakes} due to {CALL_GAS_LIMIT}.\\n     */\\n    function claimableOf(address claimer) public view returns (uint256) {\\n        return _claimable[claimer];\\n    }\\n\\n    function getRestaker(\\n        string calldata provider\\n    ) public view returns (address) {\\n        return _restakers[_getProviderHash(provider)];\\n    }\\n\\n    function _getRestakerOrRevert(\\n        string memory provider\\n    ) internal view returns (address restaker) {\\n        restaker = _restakers[_getProviderHash(provider)];\\n        if (restaker == address(0)) {\\n            revert PoolRestakerNotExists();\\n        }\\n    }\\n\\n    function _getProviderHash(\\n        string memory providerName\\n    ) internal pure returns (bytes32) {\\n        return keccak256(bytes(providerName));\\n    }\\n\\n    /**\\n     * @dev Function to calculate stake bonus based on the current utilization rate (interest rate model).\\n     * @param amount The amount for which the stake bonus is to be calculated.\\n     * @return The calculated stake bonus.\\n     */\\n    function calculateStakeBonus(\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        return _calculateStakeBonus(getFlashCapacity(), amount);\\n    }\\n\\n    function _calculateStakeBonus(\\n        uint256 capacity,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        uint256 targetCap = _getTargetCapacity();\\n        return\\n            InceptionLibrary.calculateDepositBonus(\\n                amount,\\n                capacity,\\n                (targetCap * stakeUtilizationKink) / MAX_PERCENT,\\n                optimalBonusRate,\\n                maxBonusRate,\\n                targetCap\\n            );\\n    }\\n\\n    /**\\n     * @dev Function to calculate flash unstake fee based on the utilization rate.\\n     * @param amount The amount for which the flash unstake fee is to be calculated.\\n     * @return The calculated flash unstake fee.\\n     */\\n    function calculateFlashUnstakeFee(\\n        uint256 amount\\n    ) public view returns (uint256) {\\n        uint256 capacity = getFlashCapacity();\\n        if (amount \u003e capacity) revert InsufficientCapacity(capacity);\\n        uint256 targetCap = _getTargetCapacity();\\n        return\\n            InceptionLibrary.calculateWithdrawalFee(\\n                amount,\\n                capacity,\\n                (targetCap * unstakeUtilizationKink) / MAX_PERCENT,\\n                optimalUnstakeRate,\\n                maxFlashFeeRate,\\n                targetCap\\n            );\\n    }\\n\\n    /*******************************************************************************\\n                        GOVERNANCE FUNCTIONS\\n    *******************************************************************************/\\n\\n    /**\\n     * @notice Deploy Restaker contract for the given provider.\\n     */\\n    function addRestaker(string memory provider) external onlyGovernance {\\n        bytes32 providerHash = _getProviderHash(provider);\\n        address restaker = _restakers[providerHash];\\n        if (restaker != address(0)) {\\n            revert PoolRestakerExists();\\n        }\\n        restaker = address(config().getRestakerDeployer().deployRestaker());\\n        _restakers[providerHash] = restaker;\\n        emit RestakerAdded(provider, restaker);\\n    }\\n\\n    /**\\n     * @dev Governance can set gas limit allocated for unstake payout\\n     */\\n    function setDistributeGasLimit(uint32 newValue) external onlyGovernance {\\n        _setDistributeGasLimit(newValue);\\n    }\\n\\n    function _setDistributeGasLimit(uint32 newValue) internal {\\n        if (newValue \u003e MAX_GAS_LIMIT || newValue == 0) {\\n            revert PoolDistributeGasLimitNotInRange(MAX_GAS_LIMIT);\\n        }\\n        emit DistributeGasLimitChanged(_distributeGasLimit, newValue);\\n        _distributeGasLimit = newValue;\\n    }\\n\\n    function setMinStake(uint256 newValue) external onlyGovernance {\\n        emit MinStakeChanged(_minStakeAmount, newValue);\\n        _minStakeAmount = newValue;\\n    }\\n\\n    function setMinUnstake(uint256 newValue) external onlyGovernance {\\n        emit MinUntakeChanged(_minUnstakeAmount, newValue);\\n        _minUnstakeAmount = newValue;\\n    }\\n\\n    function setMaxTVL(uint256 newValue) external onlyGovernance {\\n        _setMaxTVL(newValue);\\n    }\\n\\n    function setStakeBonusParams(\\n        uint64 newMaxBonusRate,\\n        uint64 newOptimalBonusRate,\\n        uint64 newStakeUtilizationKink\\n    ) external onlyGovernance {\\n        if (newMaxBonusRate \u003e MAX_PERCENT)\\n            revert ParameterExceedsLimits(newMaxBonusRate);\\n        if (newOptimalBonusRate \u003e MAX_PERCENT)\\n            revert ParameterExceedsLimits(newOptimalBonusRate);\\n        if (newStakeUtilizationKink \u003e MAX_PERCENT)\\n            revert ParameterExceedsLimits(newStakeUtilizationKink);\\n\\n        maxBonusRate = newMaxBonusRate;\\n        optimalBonusRate = newOptimalBonusRate;\\n        stakeUtilizationKink = newStakeUtilizationKink;\\n\\n        emit StakeBonusParamsChanged(\\n            newMaxBonusRate,\\n            newOptimalBonusRate,\\n            newStakeUtilizationKink\\n        );\\n    }\\n\\n    function setFlashUnstakeFeeParams(\\n        uint64 newMaxFlashFeeRate,\\n        uint64 newOptimalUnstakeRate,\\n        uint64 newUnstakeUtilizationKink\\n    ) external onlyGovernance {\\n        if (newMaxFlashFeeRate \u003e MAX_PERCENT)\\n            revert ParameterExceedsLimits(newMaxFlashFeeRate);\\n        if (newOptimalUnstakeRate \u003e MAX_PERCENT)\\n            revert ParameterExceedsLimits(newOptimalUnstakeRate);\\n        if (newUnstakeUtilizationKink \u003e MAX_PERCENT)\\n            revert ParameterExceedsLimits(newUnstakeUtilizationKink);\\n\\n        maxFlashFeeRate = newMaxFlashFeeRate;\\n        optimalUnstakeRate = newOptimalUnstakeRate;\\n        unstakeUtilizationKink = newUnstakeUtilizationKink;\\n\\n        emit UnstakeFeeParamsChanged(\\n            newMaxFlashFeeRate,\\n            newOptimalUnstakeRate,\\n            newUnstakeUtilizationKink\\n        );\\n    }\\n\\n    function setProtocolFee(uint64 newProtocolFee) external onlyGovernance {\\n        if (newProtocolFee \u003e MAX_PERCENT)\\n            revert ParameterExceedsLimits(newProtocolFee);\\n\\n        emit ProtocolFeeChanged(protocolFee, newProtocolFee);\\n        protocolFee = newProtocolFee;\\n    }\\n\\n    function setTargetFlashCapacity(\\n        uint64 newTargetCapacity\\n    ) external onlyGovernance {\\n        emit TargetCapacityChanged(targetCapacity, newTargetCapacity);\\n        targetCapacity = newTargetCapacity;\\n    }\\n\\n    function _setMaxTVL(uint256 newValue) internal {\\n        if (newValue == 0) {\\n            revert PoolZeroAmount();\\n        }\\n        emit MaxTVLChanged(_maxTVL, newValue);\\n        _maxTVL = newValue;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/libraries/InceptionLibrary.sol\": {\r\n        \"InceptionLibrary\": \"0x8a6a8a7233b16d0ecaa7510bfd110464a0d69f66\"\r\n      }\r\n    }\r\n  }\r\n}}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"AmbiguousFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"name\":\"InsufficientCapacity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernanceAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOperatorAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRestakingPoolAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"param\",\"type\":\"uint256\"}],\"name\":\"ParameterExceedsLimits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"PoolDistributeGasLimitNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRestakerExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRestakerNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolStakeAmGreaterThanAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolStakeAmLessThanMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolUnstakeAmLessThanMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWrongInputLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetCapacityNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ClaimExpected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"DistributeGasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"restaker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"name\":\"FeeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"FlashUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MaxTVLChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinUntakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PendingUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"ReferralStake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"restaker\",\"type\":\"address\"}],\"name\":\"RestakerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeBonus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBonusRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOptimalBonusRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDepositUtilizationKink\",\"type\":\"uint256\"}],\"name\":\"StakeBonusParamsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TargetCapacityChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnstakeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxFlashFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOptimalWithdrawalRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newWithdrawUtilizationKink\",\"type\":\"uint256\"}],\"name\":\"UnstakeFeeParamsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IRestakingPool.Unstake[]\",\"name\":\"unstakes\",\"type\":\"tuple[]\"}],\"name\":\"UnstakesDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENT\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"activateRestaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"addRestaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"deposit_data_roots\",\"type\":\"bytes32[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateFlashUnstakeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateStakeBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"claimRestaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"config\",\"outputs\":[{\"internalType\":\"contract IProtocolConfig\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"elOperator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"internalType\":\"struct ISignatureUtils.SignatureWithExpiry\",\"name\":\"approverSignatureAndExpiry\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"approverSalt\",\"type\":\"bytes32\"}],\"name\":\"delegateTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeUnstakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"flashUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlashCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"getRestaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingUnstakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getTotalUnstakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnstakes\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRestakingPool.Unstake[]\",\"name\":\"unstakes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getUnstakesOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IRestakingPool.Unstake[]\",\"name\":\"unstakes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"hasClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IProtocolConfig\",\"name\":\"config\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"distributeGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"newMaxTVL\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBonusRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFlashFeeRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimalBonusRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"optimalUnstakeRate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToWithdraw\",\"type\":\"uint256[]\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"setDistributeGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newMaxFlashFeeRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newOptimalUnstakeRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newUnstakeUtilizationKink\",\"type\":\"uint64\"}],\"name\":\"setFlashUnstakeFeeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMaxTVL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newProtocolFee\",\"type\":\"uint64\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newMaxBonusRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newOptimalBonusRate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newStakeUtilizationKink\",\"type\":\"uint64\"}],\"name\":\"setStakeBonusParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newTargetCapacity\",\"type\":\"uint64\"}],\"name\":\"setTargetFlashCapacity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"code\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeBonusAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeUtilizationKink\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetCapacity\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"undelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeUtilizationKink\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"oracleTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"beaconStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct BeaconChainProofs.StateRootProof\",\"name\":\"stateRootProof\",\"type\":\"tuple\"},{\"internalType\":\"uint40[]\",\"name\":\"validatorIndices\",\"type\":\"uint40[]\"},{\"internalType\":\"bytes[]\",\"name\":\"validatorFieldsProofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"validatorFields\",\"type\":\"bytes32[][]\"}],\"name\":\"verifyWithdrawalCredentials\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"withdrawBeforeRestaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawNonBeaconChainETHBalanceWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "RestakingPool",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "paris",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://e9122049ca3c6dd71e98f516bd853f90d1a19c190498d41245dfc3902dddaffe"
    }
  ]
}
