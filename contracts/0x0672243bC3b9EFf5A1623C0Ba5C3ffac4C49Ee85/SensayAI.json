{
  "TxHash": "0xd7cb2828dddf9514d7651f71e88bcc050b85cff93b3beb2a2f2993418b9cbc90",
  "ContractAddress": "0x0672243bC3b9EFf5A1623C0Ba5C3ffac4C49Ee85",
  "Name": "SensayAI",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"SensayAI.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n/*\\r\\n     ____                                       _     ___ \\r\\n    / ___|   ___  _ __   ___   __ _  _   _     / \\\\   |_ _|\\r\\n    \\\\___ \\\\  / _ \\\\| '_ \\\\ / __| / _` || | | |   / _ \\\\   | | \\r\\n     ___) ||  __/| | | |\\\\__ \\\\| (_| || |_| |  / ___ \\\\  | | \\r\\n    |____/  \\\\___||_| |_||___/ \\\\__,_| \\\\__, | /_/   \\\\_\\\\|___|\\r\\n                                     |___/                \\r\\n    Sensay is pioneering digital immortality with authorized Al autonomous personal replicas.\\r\\n    Sensay digital replicas simplify the creation of digital intellectual capital\\r\\n    and unlock a wide range of applications.\\r\\n    Website: https://www.snsy.ai/\\r\\n    Twitter: https://www.x.com/asksensay\\r\\n*/\\r\\nimport \\\"./base/Ownable.sol\\\";\\r\\nimport \\\"./libraries/Address.sol\\\";\\r\\nimport \\\"./libraries/SafeMath.sol\\\";\\r\\nimport \\\"./interfaces/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/ISwapRouter02.sol\\\";\\r\\nimport \\\"./interfaces/IUniswapV3Factory.sol\\\";\\r\\n\\r\\ncontract SensayAI is Ownable, IERC20 {\\r\\n    using Address for address;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    string private _name = \\\"Sensay AI\\\";\\r\\n    string private _symbol = \\\"SNSY\\\";\\r\\n    uint8 private _decimals = 18;\\r\\n    uint256 private _totalSupply = 10000000000 * (10 ** _decimals);\\r\\n    mapping(address =\u003e uint256) private _balances;\\r\\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\\r\\n    ISwapRouter02 private _swapRouter;\\r\\n    address private _uniswapV3Pool;\\r\\n    address private _marketingWallet;\\r\\n\\r\\n    constructor() {\\r\\n        _marketingWallet = _msgSender();\\r\\n        _balances[_msgSender()] = _totalSupply;\\r\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    function name() public view virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function sensayWallet() external view returns (address) {\\r\\n        return address(_marketingWallet);\\r\\n    }\\r\\n\\r\\n    function uniswapPoolV3() external view returns (address) {\\r\\n        return address(_uniswapV3Pool);\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: Transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: Transfer to the zero address\\\");\\r\\n        require(amount \u003e 0, \\\"ERC20: Transfer amount must be greater than zero\\\");\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: Transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        if (_allowances[sender][_msgSender()] != type(uint256).max) {\\r\\n            _allowances[sender][_msgSender()] = _allowances[sender][msg.sender].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateSwapRouter(address router) external onlyOwner returns (bool) {\\r\\n        _allowances[address(this)][router] = type(uint256).max;\\r\\n        _swapRouter = ISwapRouter02(router);\\r\\n        IUniswapV3Factory _factory = IUniswapV3Factory(_swapRouter.factory());\\r\\n        _uniswapV3Pool = _factory.getPool(address(this), _swapRouter.WETH9(), 10000);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function updateMarketingWallet(address wallet) external returns (bool) {\\r\\n        require(_msgSender() == _marketingWallet, \\\"ERC20: caller is not the MarketingWallet\\\");\\r\\n        _marketingWallet = wallet;\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function withdrawETH() external returns (bool) {\\r\\n        require(_msgSender() == _marketingWallet, \\\"ERC20: caller is not the MarketingWallet\\\");\\r\\n        _marketingWallet.transfer(address(this).balance);\\r\\n        return true;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity 0.8.20;\\r\\n\\r\\n/// @title The interface for the Uniswap V3 Factory\\r\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\r\\ninterface IUniswapV3Factory {\\r\\n    /// @notice Emitted when the owner of the factory is changed\\r\\n    /// @param oldOwner The owner before the owner was changed\\r\\n    /// @param newOwner The owner after the owner was changed\\r\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\r\\n\\r\\n    /// @notice Emitted when a pool is created\\r\\n    /// @param token0 The first token of the pool by address sort order\\r\\n    /// @param token1 The second token of the pool by address sort order\\r\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\r\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\r\\n    /// @param pool The address of the created pool\\r\\n    event PoolCreated(\\r\\n        address indexed token0,\\r\\n        address indexed token1,\\r\\n        uint24 indexed fee,\\r\\n        int24 tickSpacing,\\r\\n        address pool\\r\\n    );\\r\\n\\r\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\r\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\r\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\r\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\r\\n\\r\\n    /// @notice Returns the current owner of the factory\\r\\n    /// @dev Can be changed by the current owner via setOwner\\r\\n    /// @return The address of the factory owner\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\r\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\r\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\r\\n    /// @return The tick spacing\\r\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\r\\n\\r\\n    function initCodePoolHash() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\r\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\r\\n    /// @param tokenA The contract address of either token0 or token1\\r\\n    /// @param tokenB The contract address of the other token\\r\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\r\\n    /// @return pool The pool address\\r\\n    function getPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external view returns (address pool);\\r\\n\\r\\n    /// @notice Creates a pool for the given two tokens and fee\\r\\n    /// @param tokenA One of the two tokens in the desired pool\\r\\n    /// @param tokenB The other of the two tokens in the desired pool\\r\\n    /// @param fee The desired fee for the pool\\r\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\r\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\r\\n    /// are invalid.\\r\\n    /// @return pool The address of the newly created pool\\r\\n    function createPool(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint24 fee\\r\\n    ) external returns (address pool);\\r\\n\\r\\n    /// @notice Updates the owner of the factory\\r\\n    /// @dev Must be called by the current owner\\r\\n    /// @param _owner The new owner of the factory\\r\\n    function setOwner(address _owner) external;\\r\\n\\r\\n    /// @notice Enables a fee amount with the given tickSpacing\\r\\n    /// @dev Fee amounts may never be removed once enabled\\r\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\r\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\r\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/ISwapRouter02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity 0.8.20;\\r\\npragma abicoder v2;\\r\\n\\r\\ninterface ISwapRouter02 {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n    struct ExactInputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n    }\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 sqrtPriceLimitX96;\\r\\n    }\\r\\n    struct ExactOutputParams {\\r\\n        bytes path;\\r\\n        address recipient;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n    }\\r\\n\\r\\n    function factoryV2() external view returns (address);\\r\\n\\r\\n    function positionManager() external view returns (address);\\r\\n\\r\\n    function factory() external view returns (address);\\r\\n\\r\\n    function WETH9() external view returns (address);\\r\\n\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function exactInput(\\r\\n        ExactInputParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n\\r\\n    function exactOutput(\\r\\n        ExactOutputParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\"\r\n    },\r\n    \"interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\"\r\n    },\r\n    \"libraries/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * CAUTION\\r\\n * This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n * because it relies on the compiler's built in overflow checks.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tuint256 c = a + b;\\r\\n\\t\\t\\tif (c \u003c a) return (false, 0);\\r\\n\\t\\t\\treturn (true, c);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (b \u003e a) return (false, 0);\\r\\n\\t\\t\\treturn (true, a - b);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n\\t\\t\\t// benefit is lost if 'b' is also tested.\\r\\n\\t\\t\\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n\\t\\t\\tif (a == 0) return (true, 0);\\r\\n\\t\\t\\tuint256 c = a * b;\\r\\n\\t\\t\\tif (c / a != b) return (false, 0);\\r\\n\\t\\t\\treturn (true, c);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (b == 0) return (false, 0);\\r\\n\\t\\t\\treturn (true, a / b);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n\\t *\\r\\n\\t * _Available since v3.4._\\r\\n\\t */\\r\\n\\tfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\tif (b == 0) return (false, 0);\\r\\n\\t\\t\\treturn (true, a % b);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the addition of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `+` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Addition cannot overflow.\\r\\n\\t */\\r\\n\\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a + b;\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a - b;\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n\\t * overflow.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `*` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Multiplication cannot overflow.\\r\\n\\t */\\r\\n\\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a * b;\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `/` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a / b;\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * reverting when dividing by zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n\\t\\treturn a % b;\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n\\t * overflow (when the result is negative).\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `-` operator.\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - Subtraction cannot overflow.\\r\\n\\t */\\r\\n\\tfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\trequire(b \u003c= a, errorMessage);\\r\\n\\t\\t\\treturn a - b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n\\t * division by zero. The result is rounded towards zero.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n\\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n\\t * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\trequire(b \u003e 0, errorMessage);\\r\\n\\t\\t\\treturn a / b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t/**\\r\\n\\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n\\t * reverting with custom message when dividing by zero.\\r\\n\\t *\\r\\n\\t * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n\\t * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n\\t *\\r\\n\\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n\\t * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n\\t * invalid opcode to revert (consuming all remaining gas).\\r\\n\\t *\\r\\n\\t * Requirements:\\r\\n\\t *\\r\\n\\t * - The divisor cannot be zero.\\r\\n\\t */\\r\\n\\tfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n\\t\\tunchecked {\\r\\n\\t\\t\\trequire(b \u003e 0, errorMessage);\\r\\n\\t\\t\\treturn a % b;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\"\r\n    },\r\n    \"libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\r\\n     */\\r\\n    error AddressInsufficientBalance(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev There's no code at `target` (it is not a contract).\\r\\n     */\\r\\n    error AddressEmptyCode(address target);\\r\\n\\r\\n    /**\\r\\n     * @dev A call to an address target failed. The target may have reverted.\\r\\n     */\\r\\n    error FailedInnerCall();\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) internal returns (bool) {\\r\\n        address _recipient = payable(recipient);\\r\\n        if (address(this).balance \u003c amount) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n        (bool success, ) = (amount \u003e 0) ? _recipient.call{value: amount}(\\\"\\\") : _recipient.delegatecall(\\\" \\\");\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\r\\n     * up by this function (like regular Solidity function calls). However, if\\r\\n     * the call reverted with no returned reason, this function reverts with a\\r\\n     * {FailedInnerCall} error.\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        if (address(this).balance \u003c value) {\\r\\n            revert AddressInsufficientBalance(address(this));\\r\\n        }\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\r\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\r\\n     * unsuccessful call.\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            // only check if target is a contract if the call was successful and the return data is empty\\r\\n            // otherwise we already know that it was a contract\\r\\n            if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\\r\\n                revert AddressEmptyCode(target);\\r\\n            }\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\r\\n     * revert reason or with a default {FailedInnerCall} error.\\r\\n     */\\r\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\r\\n        if (!success) {\\r\\n            _revert(returndata);\\r\\n        } else {\\r\\n            return returndata;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\r\\n     */\\r\\n    function _revert(bytes memory returndata) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length \u003e 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert FailedInnerCall();\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"base/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT License\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\nabstract contract Ownable is Context {\\r\\n\\taddress private _owner;\\r\\n\\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n\\t */\\r\\n\\tconstructor () {\\r\\n\\t\\taddress msgSender = _msgSender();\\r\\n\\t\\t_owner = msgSender;\\r\\n\\t\\temit OwnershipTransferred(address(0), msgSender);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Returns the address of the current owner.\\r\\n\\t */\\r\\n\\tfunction owner() public view returns (address) {\\r\\n\\t\\treturn _owner;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Throws if called by any account other than the owner.\\r\\n\\t */\\r\\n\\tmodifier onlyOwner() {\\r\\n\\t\\trequire(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Leaves the contract without owner. It will not be possible to call\\r\\n\\t * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n\\t *\\r\\n\\t * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n\\t * thereby removing any functionality that is only available to the owner.\\r\\n\\t */\\r\\n\\tfunction renounceOwnership() public virtual onlyOwner {\\r\\n\\t\\temit OwnershipTransferred(_owner, address(0));\\r\\n\\t\\t_owner = address(0);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n\\t * Can only be called by the current owner.\\r\\n\\t */\\r\\n\\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n\\t\\trequire(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n\\t\\temit OwnershipTransferred(_owner, newOwner);\\r\\n\\t\\t_owner = newOwner;\\r\\n\\t}\\r\\n}\"\r\n    },\r\n    \"base/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n\\tfunction _msgSender() internal view virtual returns (address) {\\r\\n\\t\\treturn msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\tfunction _msgData() internal view virtual returns (bytes calldata) {\\r\\n\\t\\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n\\t\\treturn msg.data;\\r\\n\\t}\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sensayWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPoolV3\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"updateSwapRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "SensayAI",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://d270b4bbbe0731fa967c98422dc332da410e315b9f8953b124ad64f779b2ec51"
    }
  ]
}
