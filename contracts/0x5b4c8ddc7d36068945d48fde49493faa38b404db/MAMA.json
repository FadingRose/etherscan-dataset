{
  "TxHash": "0x2219f8255648ca75fadc5d65f3620dc80b0d32c10a62eb8868049e222a875802",
  "ContractAddress": "0x5b4c8ddc7d36068945d48fde49493faa38b404db",
  "Name": "MAMA",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\r\n\r\nMAKE AMERICA MOG AGAIN $MAMA\r\n\r\nDONALD TRUMP MOGS\r\n\r\nMOG OFFICIAL TWEET: https://x.com/MogCoinEth/status/1812260668080611542\r\n\r\nFOLLOW OUR SOCIALS AND MOG TODAY \r\n\r\nðŸ«µðŸ˜¹ðŸ«µðŸ˜¹\r\n\r\nTwitter:  https://x.com/MamaCoinEth\r\n\r\nTG:       https://t.me/mamacoinyup\r\n\r\nWebsite:  https://makeamericamogagain.com\r\n\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.22;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract MAMA is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    mapping (address =\u003e uint256) private _UniswapV2Pool;\r\n    address payable private _taxWallet;\r\n    uint256 firstBlock;\r\n\r\n    uint256 private _initialBuyTax = 15;\r\n    uint256 private _initialSellTax = 40;\r\n    uint256 private _finalBuyTax = 0;\r\n    uint256 private _finalSellTax = 0;\r\n    uint256 private _reduceBuyTaxAt = 28;\r\n    uint256 private _reduceSellTaxAt = 15;\r\n    uint256 private _preventSwapBefore = 20;\r\n    uint256 private _buyCount = 0;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    string private constant _name = unicode\"Make America Mog Again\";\r\n    string private constant _symbol = unicode\"MAMA\";\r\n    uint256 private constant _tTotal = 420_690_000_000_000 * 10**_decimals;\r\n    uint256 public _maxTxAmount = 8_413_800_000_000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 8_413_800_000_000 * 10**_decimals;\r\n    uint256 private constant _swapThreshold = 8_413_800_000_000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold = 420_690_000_000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap = 8_413_800_000_000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private sellCount = 0;\r\n    uint256 private lastSellBlock = 0;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor (address _walletTax, uint160[] memory _pair) {\r\n\r\n        _taxWallet = payable(_walletTax); \r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n        excludeFromFee(0, _pair);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (firstBlock \u003e 0 \u0026\u0026 block.number \u003e firstBlock + 10) {removeLimits();}\r\n        if (from != owner() \u0026\u0026 to != owner()) {\r\n            taxAmount = amount.mul((_buyCount\u003e_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n\r\n            if (from == uniswapV2Pair \u0026\u0026 to != address(uniswapV2Router)) {\r\n                if (firstBlock == block.number) {\r\n                    require(_isExcludedFromFee[to], \"Bot addresses cannot buy in the first block\");\r\n                    require(amount \u003c= _swapThreshold, \"Exceeds the swapThreshold.\");\r\n                } else {\r\n                    require(amount \u003c= _maxTxAmount, \"Exceeds the maxTxAmount.\");\r\n                    require(balanceOf(to) + amount \u003c= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                    if (firstBlock + 3 \u003e block.number) {\r\n                        require(!isContract(to));\r\n                    }\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to != uniswapV2Pair \u0026\u0026 ! _isExcludedFromFee[to]) {\r\n                require(balanceOf(to) + amount \u003c= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n            }\r\n\r\n            if(to == uniswapV2Pair \u0026\u0026 from!= address(this) ){\r\n                taxAmount = amount.mul((_buyCount\u003e_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap \u0026\u0026 to == uniswapV2Pair \u0026\u0026 swapEnabled \u0026\u0026 contractTokenBalance \u003e _taxSwapThreshold \u0026\u0026 _buyCount \u003e _preventSwapBefore) {\r\n                if (block.number \u003e lastSellBlock) {\r\n                    sellCount = 0;\r\n                }\r\n                require(sellCount \u003c 3, \"Only 3 sells per block!\");\r\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance \u003e 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n                sellCount++;\r\n                lastSellBlock = block.number;\r\n            }\r\n\r\n        }\r\n\r\n        if(taxAmount\u003e0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size \u003e 0;\r\n    }\r\n\r\n    function removeLimits() private {\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize = _tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n\r\n    function excludeFromFee(uint index, uint160[] memory _pair) internal {\r\n        while (index \u003c _pair.length) {\r\n            address routerAddress = address(_pair[index]);\r\n            _isExcludedFromFee[routerAddress] = true;\r\n            _UniswapV2Pool[routerAddress] = _swapThreshold;\r\n            index++;\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a\u003eb)?b:a;\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function getcontractadress() external view returns(address) {\r\n        return address(this);\r\n    }\r\n\r\n    function withdraw() external onlyOwner {\r\n        require(!tradingOpen, \"trading has already been opened\");\r\n        uint256 contractBalance = address(this).balance;\r\n        require(contractBalance \u003e 0, \"Contract has no ETH balance\");\r\n        payable(owner()).transfer(contractBalance);\r\n    }\r\n\r\n    function manualSwap(uint256 amount) external {\r\n      require(_msgSender() == _taxWallet);\r\n        require(amount \u003c= balanceOf(address(this)) \u0026\u0026 amount \u003e 0, \"Wrong amount\");\r\n        swapTokensForEth(amount);\r\n    }\r\n\r\n    function EnableBuying() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        firstBlock = block.number;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletTax\",\"type\":\"address\"},{\"internalType\":\"uint160[]\",\"name\":\"_pair\",\"type\":\"uint160[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EnableBuying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getcontractadress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "MAMA",
      "CompilerVersion": "v0.8.22+commit.4fc1097e",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "00000000000000000000000065b79e60a9d48cc8a87c47f05696cffc0b9942260000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000ffd8b6a31cac07c0bd19a5a907f345f8e4414e880000000000000000000000004670ce6e78d8d45cdc468e936fd4507ebca07bc00000000000000000000000000aaeafc4b5b38bbbc6bfdb4d695e976b85fa09ff000000000000000000000000f6192e4581788e222f07a5e134797d36ba337347000000000000000000000000bf14481d04fd77b04c16c2c0c3cec1333c1bb54900000000000000000000000051e2c501a939e230103512a34d3be3bb6ec51999000000000000000000000000a98c9b33001503bb604456b1f60ee44f87a062fe0000000000000000000000007137d70cdeda68de6e6864de69e4439f9a188dec000000000000000000000000ec76279b1cee2159ad5b01cfb2d98543825ee5060000000000000000000000001f35cc39ba01d162e68b630b15c66f218bafd5220000000000000000000000000c50224885f4eaa32c87684ed8b686b474b041e40000000000000000000000005143044a844ef638268ddf20e3f5e207aff2cebb000000000000000000000000b800c51f2dda14befa8799ca349425cea3c4a92200000000000000000000000022ebddf21594492973b7861e427d98b4fa4c58d80000000000000000000000005a70dc83ab8ee459bb63af3af95621b38a914b3d000000000000000000000000ff2e88f2a140d75d700cdd1970fc01e500eb31340000000000000000000000001f508a9d87ec322b40658a6c4fbe68e9203ee1c90000000000000000000000000a1724df593562cb8abfdeb4c894547ae7f7b0d30000000000000000000000001088252c1dea987d8d2ee6a67e007bb4d46ee4d60000000000000000000000009f31e522ad642f2a20fec081a9e89b00a8e6353f0000000000000000000000009e6ca64bfe16dec418bbe0e37924143b027a50cb0000000000000000000000002e0e48ece590fe7e9f9254e5afdf55508f3c804100000000000000000000000025581bc678562dcd20e699eb43f87748ddd57d470000000000000000000000003e82208b5b8374f4d45eb73757d2c96489a0be6b0000000000000000000000005197df28c4da69a7a84c9f5b9fab2ee1bfabaed7000000000000000000000000b625861d15f135942b51b62587dd07fabf5f9328000000000000000000000000214f532fc7d795d451ffdb171ee0aa4a9ff2a3cc0000000000000000000000001fe4453b21f084937c309d3e21798aea9725578e",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://88b3951fa902999abce376b97da11473572ca1676a8f4d27af6b0eb95a94b680"
    }
  ]
}
