{
  "TxHash": "0x99ce96eafd554f4a0e5cceff1d2fd8dac75f02a417208a285bc475c7559752d0",
  "ContractAddress": "0x067a0209c6e03f9a077d967e48b410b7bf811ec9",
  "Name": "ArbTHUSDBTC",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.6.11;\r\npragma experimental ABIEncoderV2;\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\n\r\ninterface UniswapReserve {\r\n    function swap(\r\n        address recipient,\r\n        bool zeroForOne,\r\n        int256 amountSpecified,\r\n        uint160 sqrtPriceLimitX96,\r\n        bytes calldata data\r\n    ) external returns (int256 amount0, int256 amount1);\r\n}\r\n\r\ninterface ERC20Like {\r\n    function approve(address spender, uint value) external returns(bool);\r\n    function transfer(address to, uint value) external returns(bool);\r\n    function balanceOf(address a) external view returns(uint);\r\n}\r\n\r\ninterface WethLike is ERC20Like {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface CurveLike {\r\n    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns(uint);\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns(uint);\r\n    function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy, address receiver) external returns(uint);    \r\n}\r\n\r\n\r\ninterface BAMMLike {\r\n    function swap(uint lusdAmount, uint minEthReturn, address payable dest) external returns(uint);\r\n}\r\n\r\ncontract ArbTHUSDBTC {\r\n    address constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n    address constant crvUSD = 0xf939E0A03FB07F59A73314E73794Be0E57ac1b4E;    \r\n    address constant LUSD = 0xCFC5bD99915aAa815401C5a41A927aB7a38d29cf;    \r\n    address constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address constant TBTC = 0x18084fbA666a33d37592fA2633fD49a74DD93a88;\r\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;    \r\n\r\n    UniswapReserve constant USDCBTC = UniswapReserve(0x4585FE77225b41b697C938B018E2Ac67Ac5a20c0);\r\n    UniswapReserve constant USDCETH = UniswapReserve(0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640);\r\n\r\n    uint160 constant MIN_SQRT_RATIO = 4295128739;\r\n    uint160 constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;    \r\n    CurveLike constant CURV_crvUSD_thUSD = CurveLike(0x9E641187391B7a5fE9ee193359408CA3894f68a2);\r\n    CurveLike constant CURV_crvUSD_USDC = CurveLike(0x4DEcE678ceceb27446b35C672dC7d61F30bAD69E);\r\n    CurveLike constant CURV_WBTC_TBTC = CurveLike(0xB7ECB2AA52AA64a717180E030241bC75Cd946726);\r\n\r\n    constructor() public {\r\n        ERC20Like(USDC).approve(address(CURV_crvUSD_USDC), uint(-1));\r\n        ERC20Like(crvUSD).approve(address(CURV_crvUSD_thUSD), uint(-1));\r\n        ERC20Like(TBTC).approve(address(CURV_WBTC_TBTC), uint(-1));             \r\n    }\r\n\r\n    function approve(address bamm) external {\r\n        ERC20Like(LUSD).approve(address(bamm), uint(-1));\r\n    }\r\n\r\n    function swap(uint btcQty, address bamm, address profitReceiver) external payable returns(uint) {\r\n        //console.log(\"doing swap\");\r\n        bytes memory data = abi.encode(bamm);\r\n        // swap btc to eth\r\n        USDCBTC.swap(address(this), true, int256(btcQty), MIN_SQRT_RATIO + 1, data);\r\n\r\n        uint profit = ERC20Like(WBTC).balanceOf(address(this));\r\n        if(profit \u003e 0) ERC20Like(WBTC).transfer(profitReceiver, profit);\r\n\r\n        return profit;\r\n     }\r\n\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external {\r\n        if(msg.sender == address(USDCETH)) {\r\n            //console.log(\"eth swap\");\r\n            //console.log(uint(-1 * amount0Delta));\r\n            //console.log(uint(amount1Delta));\r\n            // send weth\r\n            //console.log(ERC20Like(WETH).balanceOf(address(this)));\r\n            ERC20Like(WETH).transfer(msg.sender, uint(amount1Delta));\r\n            //console.log(\"eth was sent\");\r\n            return;\r\n        }\r\n        else {\r\n            //console.log(\"wbtc swap\");\r\n            //console.log(uint(amount0Delta));\r\n            //console.log(uint(-1 * amount1Delta));            \r\n            require(msg.sender == address(USDCBTC), \"must be uniswap WBTC reserve\");\r\n        }\r\n\r\n        (address bamm) = abi.decode(data, (address));\r\n\r\n        // swap ETH to USDC\r\n        uint msgValue = address(this).balance;\r\n        uint ethAmount = uint(-1 * amount1Delta) + msgValue;\r\n        if(msgValue \u003e 0) {\r\n            //console.log(\"deposit auxilary eth\");\r\n            WethLike(WETH).deposit{value: uint(ethAmount)}();\r\n        }\r\n\r\n        // do simple swap without callbacks\r\n        //console.log(\"swap eth\");\r\n        (int returnedUSDC, ) = USDCETH.swap(address(this), false, int256(ethAmount), MAX_SQRT_RATIO - 1, bytes(\"\"));\r\n\r\n\r\n        uint USDCAmount = uint(-1 * returnedUSDC);\r\n        //console.log(\"usdc amount\", USDCAmount);\r\n        //console.log(\"swap usdc to lusd\");\r\n        uint LUSDReturn = swapUSDCToLUSD(USDCAmount);\r\n        //console.log(\"LUSDReturn amount\", LUSDReturn);\r\n\r\n        //console.log(\"swap with bamm\");\r\n        uint tbtcRetAmount = BAMMLike(bamm).swap(LUSDReturn, 1, address(this));\r\n\r\n        //console.log(\"bamm return\", tbtcRetAmount);\r\n\r\n        //console.log(\"swap tbtc to wbtc\");\r\n        uint wbtcRetVal = CURV_WBTC_TBTC.exchange(1, 0, tbtcRetAmount, 1);\r\n        //console.log(\"wbtc returned from curve\", wbtcRetVal, ERC20Like(WBTC).balanceOf(address(this)));\r\n        //console.log(uint(amount0Delta), uint(-1 * amount0Delta));\r\n\r\n        //console.log(\"transfer btc back to uniswap\");\r\n\r\n        ERC20Like(WBTC).transfer(msg.sender, uint(amount0Delta));\r\n    }\r\n\r\n    function swapUSDCToLUSD(uint USDCAmount) internal returns(uint) {\r\n        // dump usdc to crvUSD\r\n        uint crvUSDAmount = CURV_crvUSD_USDC.exchange(0, 1, USDCAmount, 1);\r\n        uint thUSDAmount = CURV_crvUSD_thUSD.exchange(1, 0, crvUSDAmount, 1, address(this));\r\n        return thUSDAmount;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bamm\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"btcQty\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bamm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"profitReceiver\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "ArbTHUSDBTC",
      "CompilerVersion": "v0.6.11+commit.5ef660b1",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://2f7f788054a2190a93b883b55863321f7bfa2a677f25fde32254ca31f8ff1199"
    }
  ]
}
