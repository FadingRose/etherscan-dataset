{"16b.sol":{"content":"// SPDX-License-Identifier: MIT  \r\npragma solidity ^0.8.25;\r\n\r\nimport \u0027./SafeMath.sol\u0027;\r\ncontract SeizeBits{\r\nmapping (address =\u003e uint) public balances;\r\nmapping (address =\u003e mapping (address=\u003euint)) public allowance;\r\n uint public totalSupply = 100000000 * 10 ** 18;\r\n string public name = \"Seize Bits\";\r\n string public symbol = \"16B\";\r\n uint public decimals = 18;\r\n constructor(){\r\n     balances[msg.sender] = totalSupply;\r\n }\r\n \r\n function balanceOf(address owner) public view returns (uint){\r\n     return balances[owner];\r\n }\r\n \r\n event Transfer(address indexed from, address indexed to, uint value);\r\n event Approval(address indexed owner, address indexed spender, uint value);\r\n \r\n function transfer(address to, uint value) public returns(bool){\r\n     require (balanceOf(msg.sender) \u003e= value, \u0027balance too low\u0027);\r\n  balances[to] = balances[to]+ value;\r\n  balances[msg.sender] =  balances[msg.sender]-value;\r\n  emit Transfer(msg.sender, to, value);\r\n  return true;\r\n }\r\n function transferFrom(address from, address to, uint value) public returns(bool){  \r\n     require(balanceOf(from)\u003e=value, \u0027balance too low\u0027);\r\n     require(allowance[from][msg.sender] \u003e= value, \u0027allowance to low\u0027);\r\n     balances[to] += value;\r\n     balances[from] -= value;\r\n     emit Transfer(from, to, value);\r\n     return true;\r\n }\r\n function approve(address spender, uint value) public returns(bool){\r\n     allowance[msg.sender][spender] = value;\r\n     emit Approval(msg.sender, spender, value);\r\n     return true;\r\n }\r\n}"},"SafeMath.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.25;\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"SafeMath: subtraction overflow\");\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003e 0, \"SafeMath: division by zero\");\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n"}}
