{
  "TxHash": "0xbcfea4070327d788b820064e525a04b773e9d3c9e0bfad5179698fb17721c1c2",
  "ContractAddress": "0xC8617B3D449cc0d511Ad980c6D06fC30e80764D8",
  "Name": "BatchTransfer",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// File: contracts/3/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n// File: contracts/3/BatchTransfer.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\n\r\ninterface IERC20 {\r\n    function transfer(address recipient, uint256 amount) external;\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ncontract BatchTransfer is Ownable {\r\n    uint256 public fee = 20000000;\r\n\r\n    modifier collectFee() {\r\n        require(msg.value \u003e= fee, \"Insufficient fee provided\");\r\n        _;\r\n    }\r\n\r\n    // 设置手续费方法\r\n    function setFee(uint256 _fee) external onlyOwner {\r\n        fee = _fee;\r\n    }\r\n\r\n    // Batch transfer Ether\r\n    function batchTransferEther(\r\n        address payable[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external payable collectFee {\r\n        uint256 length = recipients.length;\r\n        require(\r\n            length == amounts.length,\r\n            \"Recipients and amounts arrays must have the same length\"\r\n        );\r\n\r\n        uint256 totalTokens = 0;\r\n        for (uint256 i = 0; i \u003c length; i++) {\r\n            totalTokens += amounts[i];\r\n            recipients[i].transfer(amounts[i]);\r\n        }\r\n        require(totalTokens \u003e= msg.value - fee, \"msg.value - fee != amounts\");\r\n\r\n    }\r\n\r\n    // Batch transfer ERC20 tokens\r\n    function batchTransferToken(\r\n        IERC20 token,\r\n        address[] calldata recipients,\r\n        uint256[] calldata amounts\r\n    ) external payable collectFee {\r\n        uint256 length = recipients.length;\r\n        require(\r\n            length == amounts.length,\r\n            \"Recipients and amounts arrays must have the same length\"\r\n        );\r\n\r\n        for (uint256 i = 0; i \u003c length; i++) {\r\n            token.transferFrom(msg.sender, recipients[i], amounts[i]);\r\n        }\r\n\r\n    }\r\n\r\n    // 提取合约中存储的原生代币\r\n    function withdrawNativeToken() external onlyOwner {\r\n        uint256 balance = address(this).balance;\r\n        require(balance \u003e 0, \"No native tokens to withdraw\");\r\n        payable(msg.sender).transfer(balance);\r\n    }\r\n\r\n    // 提取合约中存储的ERC20代币\r\n    function withdrawERC20Token(IERC20 token) external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance \u003e 0, \"No ERC20 tokens to withdraw\");\r\n        token.transfer(msg.sender, balance);\r\n    }\r\n}",
      "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawERC20Token\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "BatchTransfer",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://f8aceda8583d40e6f05509b31eb41fd1d09782f50bcd815968b64f9a003d1424"
    }
  ]
}
