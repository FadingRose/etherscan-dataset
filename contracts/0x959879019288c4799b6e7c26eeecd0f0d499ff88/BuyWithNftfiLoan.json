{
  "TxHash": "0xb80d8a50aac1bced6335048bd8e45d5547e5c18451c8a93b0ee41f38c7fe6e67",
  "ContractAddress": "0x959879019288c4799b6e7c26eeecd0f0d499ff88",
  "Name": "BuyWithNftfiLoan",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Context.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/introspection/ERC165.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n *\r\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Address.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n// pragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/math/Math.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003e b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a \u0026 b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator \u003e prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \u003e= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator \u0026 (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up \u0026\u0026 mulmod(x, y, denominator) \u003e 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) \u003c= a \u003c 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) \u003c= a \u003c 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) \u003c= sqrt(a) \u003c sqrt(2**(k+1))`\r\n        // → `2**(k/2) \u003c= sqrt(a) \u003c 2**((k+1)/2) \u003c= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 \u003c\u003c (log2(a) \u003e\u003e 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) \u003e\u003e 1;\r\n            result = (result + a / result) \u003e\u003e 1;\r\n            result = (result + a / result) \u003e\u003e 1;\r\n            result = (result + a / result) \u003e\u003e 1;\r\n            result = (result + a / result) \u003e\u003e 1;\r\n            result = (result + a / result) \u003e\u003e 1;\r\n            result = (result + a / result) \u003e\u003e 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up \u0026\u0026 result * result \u003c a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value \u003e\u003e 128 \u003e 0) {\r\n                value \u003e\u003e= 128;\r\n                result += 128;\r\n            }\r\n            if (value \u003e\u003e 64 \u003e 0) {\r\n                value \u003e\u003e= 64;\r\n                result += 64;\r\n            }\r\n            if (value \u003e\u003e 32 \u003e 0) {\r\n                value \u003e\u003e= 32;\r\n                result += 32;\r\n            }\r\n            if (value \u003e\u003e 16 \u003e 0) {\r\n                value \u003e\u003e= 16;\r\n                result += 16;\r\n            }\r\n            if (value \u003e\u003e 8 \u003e 0) {\r\n                value \u003e\u003e= 8;\r\n                result += 8;\r\n            }\r\n            if (value \u003e\u003e 4 \u003e 0) {\r\n                value \u003e\u003e= 4;\r\n                result += 4;\r\n            }\r\n            if (value \u003e\u003e 2 \u003e 0) {\r\n                value \u003e\u003e= 2;\r\n                result += 2;\r\n            }\r\n            if (value \u003e\u003e 1 \u003e 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up \u0026\u0026 1 \u003c\u003c result \u003c value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value \u003e= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value \u003e= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value \u003e= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value \u003e= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value \u003e= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value \u003e= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value \u003e= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up \u0026\u0026 10 ** result \u003c value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value \u003e\u003e 128 \u003e 0) {\r\n                value \u003e\u003e= 128;\r\n                result += 16;\r\n            }\r\n            if (value \u003e\u003e 64 \u003e 0) {\r\n                value \u003e\u003e= 64;\r\n                result += 8;\r\n            }\r\n            if (value \u003e\u003e 32 \u003e 0) {\r\n                value \u003e\u003e= 32;\r\n                result += 4;\r\n            }\r\n            if (value \u003e\u003e 16 \u003e 0) {\r\n                value \u003e\u003e= 16;\r\n                result += 2;\r\n            }\r\n            if (value \u003e\u003e 8 \u003e 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up \u0026\u0026 1 \u003c\u003c (result \u003c\u003c 3) \u003c value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/math/SignedMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a \u003e b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a \u003c b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a \u0026 b) + ((a ^ b) \u003e\u003e 1);\r\n        return x + (int256(uint256(x) \u003e\u003e 255) \u0026 (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n \u003e= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/Strings.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/math/Math.sol\";\r\n// import \"@openzeppelin/contracts/utils/math/SignedMath.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\r\n    uint8 private constant _ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(int256 value) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(value \u003c 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\r\n            buffer[i] = _SYMBOLS[value \u0026 0xf];\r\n            value \u003e\u003e= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC721/ERC721.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n// import \"@openzeppelin/contracts/utils/Strings.sol\";\r\n// import \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\r\n    using Address for address;\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to owner address\r\n    mapping(uint256 =\u003e address) private _owners;\r\n\r\n    // Mapping owner address to token count\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    // Mapping from token ID to approved address\r\n    mapping(uint256 =\u003e address) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        address owner = _ownerOf(tokenId);\r\n        require(owner != address(0), \"ERC721: invalid token ID\");\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        _requireMinted(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length \u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        require(to != owner, \"ERC721: approval to current owner\");\r\n\r\n        require(\r\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\r\n            \"ERC721: approve caller is not token owner or approved for all\"\r\n        );\r\n\r\n        _approve(to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        _requireMinted(tokenId);\r\n\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        //solhint-disable-next-line max-line-length\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n\r\n        _transfer(from, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\r\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\r\n        _safeTransfer(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\r\n     */\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted (`_mint`),\r\n     * and stop existing when they are burned (`_burn`).\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return _ownerOf(tokenId) != address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal virtual {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _mint(to, tokenId);\r\n        require(\r\n            _checkOnERC721Received(address(0), to, tokenId, data),\r\n            \"ERC721: transfer to non ERC721Receiver implementer\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal virtual {\r\n        require(to != address(0), \"ERC721: mint to the zero address\");\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\r\n\r\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\r\n        require(!_exists(tokenId), \"ERC721: token already minted\");\r\n\r\n        unchecked {\r\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\r\n            // Given that tokens are minted one by one, it is impossible in practice that\r\n            // this ever happens. Might change if we allow batch minting.\r\n            // The ERC fails to describe this case.\r\n            _balances[to] += 1;\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(address(0), to, tokenId);\r\n\r\n        _afterTokenTransfer(address(0), to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        address owner = ERC721.ownerOf(tokenId);\r\n\r\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\r\n\r\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\r\n        owner = ERC721.ownerOf(tokenId);\r\n\r\n        // Clear approvals\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // Cannot overflow, as that would require more tokens to be burned/transferred\r\n            // out than the owner initially received through minting and transferring in.\r\n            _balances[owner] -= 1;\r\n        }\r\n        delete _owners[tokenId];\r\n\r\n        emit Transfer(owner, address(0), tokenId);\r\n\r\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n        require(to != address(0), \"ERC721: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, tokenId, 1);\r\n\r\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\r\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\r\n\r\n        // Clear approvals from the previous owner\r\n        delete _tokenApprovals[tokenId];\r\n\r\n        unchecked {\r\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\r\n            // `from`'s balance is the number of token held, which is at least one before the current\r\n            // transfer.\r\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\r\n            // all 2**256 token ids to be minted, which in practice is impossible.\r\n            _balances[from] -= 1;\r\n            _balances[to] += 1;\r\n        }\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        _afterTokenTransfer(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function _approve(address to, uint256 tokenId) internal virtual {\r\n        _tokenApprovals[tokenId] = to;\r\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        require(owner != operator, \"ERC721: approve to caller\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` has not been minted yet.\r\n     */\r\n    function _requireMinted(uint256 tokenId) internal view virtual {\r\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\r\n     * The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     * @return bool whether the call correctly returned the expected magic value\r\n     */\r\n    function _checkOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory data\r\n    ) private returns (bool) {\r\n        if (to.isContract()) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                return retval == IERC721Receiver.onERC721Received.selector;\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\r\n     * - When `from` is zero, the tokens will be minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\r\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\r\n     * - When `from` is zero, the tokens were minted for `to`.\r\n     * - When `to` is zero, ``from``'s tokens were burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `batchSize` is non-zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\r\n\r\n    /**\r\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\r\n     *\r\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\r\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\r\n     * that `ownerOf(tokenId)` is `a`.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\r\n        _balances[account] += amount;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\ninterface IERC1155Receiver is IERC165 {\r\n    /**\r\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\r\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *\r\n     * NOTE: To accept the transfer, this must return\r\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\r\n     * (i.e. 0xf23a6e61, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param id The ID of the token being transferred\r\n     * @param value The amount of tokens being transferred\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\r\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\r\n     * been updated.\r\n     *\r\n     * NOTE: To accept the transfer(s), this must return\r\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\r\n     * (i.e. 0xbc197c81, or its own function selector).\r\n     *\r\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\r\n     * @param from The address which previously owned the token\r\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\r\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\r\n     * @param data Additional data with no specified format\r\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n\r\n/**\r\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\r\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155MetadataURI is IERC1155 {\r\n    /**\r\n     * @dev Returns the URI for token type `id`.\r\n     *\r\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\r\n     * clients with the actual token type ID.\r\n     */\r\n    function uri(uint256 id) external view returns (string memory);\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\n// import \"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\";\r\n// import \"@openzeppelin/contracts/utils/Address.sol\";\r\n// import \"@openzeppelin/contracts/utils/Context.sol\";\r\n// import \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the basic standard multi-token.\r\n * See https://eips.ethereum.org/EIPS/eip-1155\r\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\r\n *\r\n * _Available since v3.1._\r\n */\r\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\r\n    using Address for address;\r\n\r\n    // Mapping from token ID to account balances\r\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) private _balances;\r\n\r\n    // Mapping from account to operator approvals\r\n    mapping(address =\u003e mapping(address =\u003e bool)) private _operatorApprovals;\r\n\r\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\r\n    string private _uri;\r\n\r\n    /**\r\n     * @dev See {_setURI}.\r\n     */\r\n    constructor(string memory uri_) {\r\n        _setURI(uri_);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC1155).interfaceId ||\r\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155MetadataURI-uri}.\r\n     *\r\n     * This implementation returns the same URI for *all* token types. It relies\r\n     * on the token type ID substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * Clients calling this function must replace the `\\{id\\}` substring with the\r\n     * actual token type ID.\r\n     */\r\n    function uri(uint256) public view virtual override returns (string memory) {\r\n        return _uri;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\r\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\r\n        return _balances[id][account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-balanceOfBatch}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] memory accounts,\r\n        uint256[] memory ids\r\n    ) public view virtual override returns (uint256[] memory) {\r\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\r\n\r\n        uint256[] memory batchBalances = new uint256[](accounts.length);\r\n\r\n        for (uint256 i = 0; i \u003c accounts.length; ++i) {\r\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\r\n        }\r\n\r\n        return batchBalances;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[account][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeTransferFrom(from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC1155-safeBatchTransferFrom}.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) public virtual override {\r\n        require(\r\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\r\n            \"ERC1155: caller is not token owner or approved\"\r\n        );\r\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance \u003e= amount, \"ERC1155: insufficient balance for transfer\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n        _balances[id][to] += amount;\r\n\r\n        emit TransferSingle(operator, from, to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i \u003c ids.length; ++i) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance \u003e= amount, \"ERC1155: insufficient balance for transfer\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n            _balances[id][to] += amount;\r\n        }\r\n\r\n        emit TransferBatch(operator, from, to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets a new URI for all token types, by relying on the token type ID\r\n     * substitution mechanism\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\r\n     *\r\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\r\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\r\n     * clients with the token type ID.\r\n     *\r\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\r\n     * interpreted by clients as\r\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\r\n     * for token type ID 0x4cce0.\r\n     *\r\n     * See {uri}.\r\n     *\r\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\r\n     * this function emits no events.\r\n     */\r\n    function _setURI(string memory newuri) internal virtual {\r\n        _uri = newuri;\r\n    }\r\n\r\n    /**\r\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _balances[id][to] += amount;\r\n        emit TransferSingle(operator, address(0), to, id, amount);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function _mintBatch(\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        for (uint256 i = 0; i \u003c ids.length; i++) {\r\n            _balances[ids[i]][to] += amounts[i];\r\n        }\r\n\r\n        emit TransferBatch(operator, address(0), to, ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\r\n\r\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens of token type `id` from `from`\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `from` must have at least `amount` tokens of token type `id`.\r\n     */\r\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n\r\n        address operator = _msgSender();\r\n        uint256[] memory ids = _asSingletonArray(id);\r\n        uint256[] memory amounts = _asSingletonArray(amount);\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        uint256 fromBalance = _balances[id][from];\r\n        require(fromBalance \u003e= amount, \"ERC1155: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[id][from] = fromBalance - amount;\r\n        }\r\n\r\n        emit TransferSingle(operator, from, address(0), id, amount);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     */\r\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\r\n        require(from != address(0), \"ERC1155: burn from the zero address\");\r\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\r\n\r\n        address operator = _msgSender();\r\n\r\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n\r\n        for (uint256 i = 0; i \u003c ids.length; i++) {\r\n            uint256 id = ids[i];\r\n            uint256 amount = amounts[i];\r\n\r\n            uint256 fromBalance = _balances[id][from];\r\n            require(fromBalance \u003e= amount, \"ERC1155: burn amount exceeds balance\");\r\n            unchecked {\r\n                _balances[id][from] = fromBalance - amount;\r\n            }\r\n        }\r\n\r\n        emit TransferBatch(operator, from, address(0), ids, amounts);\r\n\r\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        require(owner != operator, \"ERC1155: setting approval status for self\");\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any token transfer. This includes minting\r\n     * and burning, as well as batched variants.\r\n     *\r\n     * The same hook is called on both single and batched variants. For single\r\n     * transfers, the length of the `id` and `amount` arrays will be 1.\r\n     *\r\n     * Calling conditions (for each `id` and `amount` pair):\r\n     *\r\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * of token type `id` will be  transferred to `to`.\r\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\r\n     * for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\r\n     * will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     * - `ids` and `amounts` have the same, non-zero length.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) internal virtual {}\r\n\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 amount,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\r\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _doSafeBatchTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256[] memory ids,\r\n        uint256[] memory amounts,\r\n        bytes memory data\r\n    ) private {\r\n        if (to.isContract()) {\r\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\r\n                bytes4 response\r\n            ) {\r\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\r\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\r\n                }\r\n            } catch Error(string memory reason) {\r\n                revert(reason);\r\n            } catch {\r\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\r\n            }\r\n        }\r\n    }\r\n\r\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\r\n        uint256[] memory array = new uint256[](1);\r\n        array[0] = element;\r\n\r\n        return array;\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: @openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\n// import \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n\r\n/**\r\n * @dev _Available since v3.1._\r\n */\r\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: src/dydx/ISoloMargin.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n\r\nlibrary Account {\r\n    enum Status {Normal, Liquid, Vapor}\r\n    struct Info {\r\n        address owner; // The address that owns the account\r\n        uint256 number; // A nonce that allows a single address to control many accounts\r\n    }\r\n    struct Storage {\r\n        mapping(uint256 =\u003e Types.Par) balances; // Mapping from marketId to principal\r\n        Status status;\r\n    }\r\n}\r\n\r\n\r\nlibrary Actions {\r\n    enum ActionType {\r\n        Deposit, // supply tokens\r\n        Withdraw, // borrow tokens\r\n        Transfer, // transfer balance between accounts\r\n        Buy, // buy an amount of some token (publicly)\r\n        Sell, // sell an amount of some token (publicly)\r\n        Trade, // trade tokens against another account\r\n        Liquidate, // liquidate an undercollateralized or expiring account\r\n        Vaporize, // use excess tokens to zero-out a completely negative account\r\n        Call // send arbitrary data to an address\r\n    }\r\n\r\n    enum AccountLayout {OnePrimary, TwoPrimary, PrimaryAndSecondary}\r\n\r\n    enum MarketLayout {ZeroMarkets, OneMarket, TwoMarkets}\r\n\r\n    struct ActionArgs {\r\n        ActionType actionType;\r\n        uint256 accountId;\r\n        Types.AssetAmount amount;\r\n        uint256 primaryMarketId;\r\n        uint256 secondaryMarketId;\r\n        address otherAddress;\r\n        uint256 otherAccountId;\r\n        bytes data;\r\n    }\r\n\r\n    struct DepositArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address from;\r\n    }\r\n\r\n    struct WithdrawArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 market;\r\n        address to;\r\n    }\r\n\r\n    struct TransferArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info accountOne;\r\n        Account.Info accountTwo;\r\n        uint256 market;\r\n    }\r\n\r\n    struct BuyArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 makerMarket;\r\n        uint256 takerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct SellArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info account;\r\n        uint256 takerMarket;\r\n        uint256 makerMarket;\r\n        address exchangeWrapper;\r\n        bytes orderData;\r\n    }\r\n\r\n    struct TradeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info takerAccount;\r\n        Account.Info makerAccount;\r\n        uint256 inputMarket;\r\n        uint256 outputMarket;\r\n        address autoTrader;\r\n        bytes tradeData;\r\n    }\r\n\r\n    struct LiquidateArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info liquidAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct VaporizeArgs {\r\n        Types.AssetAmount amount;\r\n        Account.Info solidAccount;\r\n        Account.Info vaporAccount;\r\n        uint256 owedMarket;\r\n        uint256 heldMarket;\r\n    }\r\n\r\n    struct CallArgs {\r\n        Account.Info account;\r\n        address callee;\r\n        bytes data;\r\n    }\r\n}\r\n\r\n\r\nlibrary Decimal {\r\n    struct D256 {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Interest {\r\n    struct Rate {\r\n        uint256 value;\r\n    }\r\n\r\n    struct Index {\r\n        uint96 borrow;\r\n        uint96 supply;\r\n        uint32 lastUpdate;\r\n    }\r\n}\r\n\r\n\r\nlibrary Monetary {\r\n    struct Price {\r\n        uint256 value;\r\n    }\r\n    struct Value {\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\nlibrary Storage {\r\n    // All information necessary for tracking a market\r\n    struct Market {\r\n        // Contract address of the associated ERC20 token\r\n        address token;\r\n        // Total aggregated supply and borrow amount of the entire market\r\n        Types.TotalPar totalPar;\r\n        // Interest index of the market\r\n        Interest.Index index;\r\n        // Contract address of the price oracle for this market\r\n        address priceOracle;\r\n        // Contract address of the interest setter for this market\r\n        address interestSetter;\r\n        // Multiplier on the marginRatio for this market\r\n        Decimal.D256 marginPremium;\r\n        // Multiplier on the liquidationSpread for this market\r\n        Decimal.D256 spreadPremium;\r\n        // Whether additional borrows are allowed for this market\r\n        bool isClosing;\r\n    }\r\n\r\n    // The global risk parameters that govern the health and security of the system\r\n    struct RiskParams {\r\n        // Required ratio of over-collateralization\r\n        Decimal.D256 marginRatio;\r\n        // Percentage penalty incurred by liquidated accounts\r\n        Decimal.D256 liquidationSpread;\r\n        // Percentage of the borrower's interest fee that gets passed to the suppliers\r\n        Decimal.D256 earningsRate;\r\n        // The minimum absolute borrow value of an account\r\n        // There must be sufficient incentivize to liquidate undercollateralized accounts\r\n        Monetary.Value minBorrowedValue;\r\n    }\r\n\r\n    // The maximum RiskParam values that can be set\r\n    struct RiskLimits {\r\n        uint64 marginRatioMax;\r\n        uint64 liquidationSpreadMax;\r\n        uint64 earningsRateMax;\r\n        uint64 marginPremiumMax;\r\n        uint64 spreadPremiumMax;\r\n        uint128 minBorrowedValueMax;\r\n    }\r\n\r\n    // The entire storage state of Solo\r\n    struct State {\r\n        // number of markets\r\n        uint256 numMarkets;\r\n        // marketId =\u003e Market\r\n        mapping(uint256 =\u003e Market) markets;\r\n        // owner =\u003e account number =\u003e Account\r\n        mapping(address =\u003e mapping(uint256 =\u003e Account.Storage)) accounts;\r\n        // Addresses that can control other users accounts\r\n        mapping(address =\u003e mapping(address =\u003e bool)) operators;\r\n        // Addresses that can control all users accounts\r\n        mapping(address =\u003e bool) globalOperators;\r\n        // mutable risk parameters of the system\r\n        RiskParams riskParams;\r\n        // immutable risk limits of the system\r\n        RiskLimits riskLimits;\r\n    }\r\n}\r\n\r\n\r\nlibrary Types {\r\n    enum AssetDenomination {\r\n        Wei, // the amount is denominated in wei\r\n        Par // the amount is denominated in par\r\n    }\r\n\r\n    enum AssetReference {\r\n        Delta, // the amount is given as a delta from the current value\r\n        Target // the amount is given as an exact number to end up at\r\n    }\r\n\r\n    struct AssetAmount {\r\n        bool sign; // true if positive\r\n        AssetDenomination denomination;\r\n        AssetReference ref;\r\n        uint256 value;\r\n    }\r\n\r\n    struct TotalPar {\r\n        uint128 borrow;\r\n        uint128 supply;\r\n    }\r\n\r\n    struct Par {\r\n        bool sign; // true if positive\r\n        uint128 value;\r\n    }\r\n\r\n    struct Wei {\r\n        bool sign; // true if positive\r\n        uint256 value;\r\n    }\r\n}\r\n\r\n\r\ninterface ISoloMargin {\r\n    struct OperatorArg {\r\n        address operator;\r\n        bool trusted;\r\n    }\r\n\r\n    function ownerSetSpreadPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function getIsGlobalOperator(address operator) external view returns (bool);\r\n\r\n    function getMarketTokenAddress(uint256 marketId)\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    function ownerSetInterestSetter(uint256 marketId, address interestSetter)\r\n    external;\r\n\r\n    function getAccountValues(Account.Info memory account)\r\n    external\r\n    view\r\n    returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketPriceOracle(uint256 marketId)\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    function getMarketInterestSetter(uint256 marketId)\r\n    external\r\n    view\r\n    returns (address);\r\n\r\n    function getMarketSpreadPremium(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Decimal.D256 memory);\r\n\r\n    function getNumMarkets() external view returns (uint256);\r\n\r\n    function ownerWithdrawUnsupportedTokens(address token, address recipient)\r\n    external\r\n    returns (uint256);\r\n\r\n    function ownerSetMinBorrowedValue(Monetary.Value memory minBorrowedValue)\r\n    external;\r\n\r\n    function ownerSetLiquidationSpread(Decimal.D256 memory spread) external;\r\n\r\n    function ownerSetEarningsRate(Decimal.D256 memory earningsRate) external;\r\n\r\n    function getIsLocalOperator(address owner, address operator)\r\n    external\r\n    view\r\n    returns (bool);\r\n\r\n    function getAccountPar(Account.Info memory account, uint256 marketId)\r\n    external\r\n    view\r\n    returns (Types.Par memory);\r\n\r\n    function ownerSetMarginPremium(\r\n        uint256 marketId,\r\n        Decimal.D256 memory marginPremium\r\n    ) external;\r\n\r\n    function getMarginRatio() external view returns (Decimal.D256 memory);\r\n\r\n    function getMarketCurrentIndex(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Interest.Index memory);\r\n\r\n    function getMarketIsClosing(uint256 marketId) external view returns (bool);\r\n\r\n    function getRiskParams() external view returns (Storage.RiskParams memory);\r\n\r\n    function getAccountBalances(Account.Info memory account)\r\n    external\r\n    view\r\n    returns (address[] memory, Types.Par[] memory, Types.Wei[] memory);\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function getMinBorrowedValue() external view returns (Monetary.Value memory);\r\n\r\n    function setOperators(OperatorArg[] memory args) external;\r\n\r\n    function getMarketPrice(uint256 marketId) external view returns (address);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function isOwner() external view returns (bool);\r\n\r\n    function ownerWithdrawExcessTokens(uint256 marketId, address recipient)\r\n    external\r\n    returns (uint256);\r\n\r\n    function ownerAddMarket(\r\n        address token,\r\n        address priceOracle,\r\n        address interestSetter,\r\n        Decimal.D256 memory marginPremium,\r\n        Decimal.D256 memory spreadPremium\r\n    ) external;\r\n\r\n    function operate(\r\n        Account.Info[] memory accounts,\r\n        Actions.ActionArgs[] memory actions\r\n    ) external;\r\n\r\n    function getMarketWithInfo(uint256 marketId)\r\n    external\r\n    view\r\n    returns (\r\n        Storage.Market memory,\r\n        Interest.Index memory,\r\n        Monetary.Price memory,\r\n        Interest.Rate memory\r\n    );\r\n\r\n    function ownerSetMarginRatio(Decimal.D256 memory ratio) external;\r\n\r\n    function getLiquidationSpread() external view returns (Decimal.D256 memory);\r\n\r\n    function getAccountWei(Account.Info memory account, uint256 marketId)\r\n    external\r\n    view\r\n    returns (Types.Wei memory);\r\n\r\n    function getMarketTotalPar(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Types.TotalPar memory);\r\n\r\n    function getLiquidationSpreadForPair(\r\n        uint256 heldMarketId,\r\n        uint256 owedMarketId\r\n    ) external view returns (Decimal.D256 memory);\r\n\r\n    function getNumExcessTokens(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Types.Wei memory);\r\n\r\n    function getMarketCachedIndex(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Interest.Index memory);\r\n\r\n    function getAccountStatus(Account.Info memory account)\r\n    external\r\n    view\r\n    returns (uint8);\r\n\r\n    function getEarningsRate() external view returns (Decimal.D256 memory);\r\n\r\n    function ownerSetPriceOracle(uint256 marketId, address priceOracle) external;\r\n\r\n    function getRiskLimits() external view returns (Storage.RiskLimits memory);\r\n\r\n    function getMarket(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Storage.Market memory);\r\n\r\n    function ownerSetIsClosing(uint256 marketId, bool isClosing) external;\r\n\r\n    function ownerSetGlobalOperator(address operator, bool approved) external;\r\n\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    function getAdjustedAccountValues(Account.Info memory account)\r\n    external\r\n    view\r\n    returns (Monetary.Value memory, Monetary.Value memory);\r\n\r\n    function getMarketMarginPremium(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Decimal.D256 memory);\r\n\r\n    function getMarketInterestRate(uint256 marketId)\r\n    external\r\n    view\r\n    returns (Interest.Rate memory);\r\n}\r\n\r\n// Dependency file: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\n// pragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c \u003c a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b \u003e a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003c= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b \u003e 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// Dependency file: src/dydx/DydxFlashloanBase.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n// import {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\n// import \"src/dydx/ISoloMargin.sol\";\r\n\r\ncontract DydxFlashloanBase {\r\n    using SafeMath for uint256;\r\n\r\n    // -- Internal Helper functions -- //\r\n\r\n    function _getMarketIdFromTokenAddress(address _solo, address token)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        ISoloMargin solo = ISoloMargin(_solo);\r\n\r\n        uint256 numMarkets = solo.getNumMarkets();\r\n\r\n        address curToken;\r\n        for (uint256 i = 0; i \u003c numMarkets; i++) {\r\n            curToken = solo.getMarketTokenAddress(i);\r\n\r\n            if (curToken == token) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        revert(\"No marketId found for provided token\");\r\n    }\r\n\r\n    function _getRepaymentAmountInternal(uint256 amount)\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        // Needs to be overcollateralize\r\n        // Needs to provide +2 wei to be safe\r\n        return amount.add(2);\r\n    }\r\n\r\n    function _getAccountInfo() internal view returns (Account.Info memory) {\r\n        return Account.Info({owner: address(this), number: 1});\r\n    }\r\n\r\n    function _getWithdrawAction(uint marketId, uint256 amount)\r\n    internal\r\n    view\r\n    returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Withdraw,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n            sign: false,\r\n            denomination: Types.AssetDenomination.Wei,\r\n            ref: Types.AssetReference.Delta,\r\n            value: amount\r\n        }),\r\n            primaryMarketId: marketId,\r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n    }\r\n\r\n    function _getCallAction(bytes memory data)\r\n    internal\r\n    view\r\n    returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Call,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n            sign: false,\r\n            denomination: Types.AssetDenomination.Wei,\r\n            ref: Types.AssetReference.Delta,\r\n            value: 0\r\n        }),\r\n            primaryMarketId: 0,\r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: data\r\n        });\r\n    }\r\n\r\n    function _getDepositAction(uint marketId, uint256 amount)\r\n    internal\r\n    view\r\n    returns (Actions.ActionArgs memory)\r\n    {\r\n        return\r\n            Actions.ActionArgs({\r\n            actionType: Actions.ActionType.Deposit,\r\n            accountId: 0,\r\n            amount: Types.AssetAmount({\r\n            sign: true,\r\n            denomination: Types.AssetDenomination.Wei,\r\n            ref: Types.AssetReference.Delta,\r\n            value: amount\r\n        }),\r\n            primaryMarketId: marketId,\r\n            secondaryMarketId: 0,\r\n            otherAddress: address(this),\r\n            otherAccountId: 0,\r\n            data: \"\"\r\n        });\r\n    }\r\n}\r\n\r\n// Dependency file: src/dydx/ICallee.sol\r\n\r\n/*\r\n\r\n    Copyright 2019 dYdX Trading Inc.\r\n\r\n    Licensed under the Apache License, Version 2.0 (the \"License\");\r\n    you may not use this file except in compliance with the License.\r\n    You may obtain a copy of the License at\r\n\r\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    Unless required by applicable law or agreed to in writing, software\r\n    distributed under the License is distributed on an \"AS IS\" BASIS,\r\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n    See the License for the specific language governing permissions and\r\n    limitations under the License.\r\n\r\n*/\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n// import { Account } from \"src/dydx/ISoloMargin.sol\";\r\n\r\n\r\n/**\r\n * @title ICallee\r\n * @author dYdX\r\n *\r\n * Interface that Callees for Solo must implement in order to ingest data.\r\n */\r\ninterface ICallee {\r\n\r\n    // ============ Public Functions ============\r\n\r\n    /**\r\n     * Allows users to send this contract arbitrary data.\r\n     *\r\n     * @param  sender       The msg.sender to Solo\r\n     * @param  accountInfo  The account from which the data is being sent\r\n     * @param  data         Arbitrary data given by the sender\r\n     */\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info calldata accountInfo,\r\n        bytes calldata data\r\n    )\r\n    external;\r\n}\r\n\r\n// Dependency file: src/seaport/ConsiderationEnums.sol\r\n\r\n// pragma solidity ^0.8.13;\r\n\r\n    enum OrderType {\r\n        // 0: no partial fills, anyone can execute\r\n        FULL_OPEN,\r\n\r\n        // 1: partial fills supported, anyone can execute\r\n        PARTIAL_OPEN,\r\n\r\n        // 2: no partial fills, only offerer or zone can execute\r\n        FULL_RESTRICTED,\r\n\r\n        // 3: partial fills supported, only offerer or zone can execute\r\n        PARTIAL_RESTRICTED,\r\n\r\n        // 4: contract order type\r\n        CONTRACT\r\n    }\r\n\r\n    enum BasicOrderType {\r\n        // 0: no partial fills, anyone can execute\r\n        ETH_TO_ERC721_FULL_OPEN,\r\n\r\n        // 1: partial fills supported, anyone can execute\r\n        ETH_TO_ERC721_PARTIAL_OPEN,\r\n\r\n        // 2: no partial fills, only offerer or zone can execute\r\n        ETH_TO_ERC721_FULL_RESTRICTED,\r\n\r\n        // 3: partial fills supported, only offerer or zone can execute\r\n        ETH_TO_ERC721_PARTIAL_RESTRICTED,\r\n\r\n        // 4: no partial fills, anyone can execute\r\n        ETH_TO_ERC1155_FULL_OPEN,\r\n\r\n        // 5: partial fills supported, anyone can execute\r\n        ETH_TO_ERC1155_PARTIAL_OPEN,\r\n\r\n        // 6: no partial fills, only offerer or zone can execute\r\n        ETH_TO_ERC1155_FULL_RESTRICTED,\r\n\r\n        // 7: partial fills supported, only offerer or zone can execute\r\n        ETH_TO_ERC1155_PARTIAL_RESTRICTED,\r\n\r\n        // 8: no partial fills, anyone can execute\r\n        ERC20_TO_ERC721_FULL_OPEN,\r\n\r\n        // 9: partial fills supported, anyone can execute\r\n        ERC20_TO_ERC721_PARTIAL_OPEN,\r\n\r\n        // 10: no partial fills, only offerer or zone can execute\r\n        ERC20_TO_ERC721_FULL_RESTRICTED,\r\n\r\n        // 11: partial fills supported, only offerer or zone can execute\r\n        ERC20_TO_ERC721_PARTIAL_RESTRICTED,\r\n\r\n        // 12: no partial fills, anyone can execute\r\n        ERC20_TO_ERC1155_FULL_OPEN,\r\n\r\n        // 13: partial fills supported, anyone can execute\r\n        ERC20_TO_ERC1155_PARTIAL_OPEN,\r\n\r\n        // 14: no partial fills, only offerer or zone can execute\r\n        ERC20_TO_ERC1155_FULL_RESTRICTED,\r\n\r\n        // 15: partial fills supported, only offerer or zone can execute\r\n        ERC20_TO_ERC1155_PARTIAL_RESTRICTED,\r\n\r\n        // 16: no partial fills, anyone can execute\r\n        ERC721_TO_ERC20_FULL_OPEN,\r\n\r\n        // 17: partial fills supported, anyone can execute\r\n        ERC721_TO_ERC20_PARTIAL_OPEN,\r\n\r\n        // 18: no partial fills, only offerer or zone can execute\r\n        ERC721_TO_ERC20_FULL_RESTRICTED,\r\n\r\n        // 19: partial fills supported, only offerer or zone can execute\r\n        ERC721_TO_ERC20_PARTIAL_RESTRICTED,\r\n\r\n        // 20: no partial fills, anyone can execute\r\n        ERC1155_TO_ERC20_FULL_OPEN,\r\n\r\n        // 21: partial fills supported, anyone can execute\r\n        ERC1155_TO_ERC20_PARTIAL_OPEN,\r\n\r\n        // 22: no partial fills, only offerer or zone can execute\r\n        ERC1155_TO_ERC20_FULL_RESTRICTED,\r\n\r\n        // 23: partial fills supported, only offerer or zone can execute\r\n        ERC1155_TO_ERC20_PARTIAL_RESTRICTED\r\n    }\r\n\r\n    enum BasicOrderRouteType {\r\n        // 0: provide Ether (or other native token) to receive offered ERC721 item.\r\n        ETH_TO_ERC721,\r\n\r\n        // 1: provide Ether (or other native token) to receive offered ERC1155 item.\r\n        ETH_TO_ERC1155,\r\n\r\n        // 2: provide ERC20 item to receive offered ERC721 item.\r\n        ERC20_TO_ERC721,\r\n\r\n        // 3: provide ERC20 item to receive offered ERC1155 item.\r\n        ERC20_TO_ERC1155,\r\n\r\n        // 4: provide ERC721 item to receive offered ERC20 item.\r\n        ERC721_TO_ERC20,\r\n\r\n        // 5: provide ERC1155 item to receive offered ERC20 item.\r\n        ERC1155_TO_ERC20\r\n    }\r\n\r\n    enum ItemType {\r\n        // 0: ETH on mainnet, MATIC on polygon, etc.\r\n        NATIVE,\r\n\r\n        // 1: ERC20 items (ERC777 and ERC20 analogues could also technically work)\r\n        ERC20,\r\n\r\n        // 2: ERC721 items\r\n        ERC721,\r\n\r\n        // 3: ERC1155 items\r\n        ERC1155,\r\n\r\n        // 4: ERC721 items where a number of tokenIds are supported\r\n        ERC721_WITH_CRITERIA,\r\n\r\n        // 5: ERC1155 items where a number of ids are supported\r\n        ERC1155_WITH_CRITERIA\r\n    }\r\n\r\n    enum Side {\r\n        // 0: Items that can be spent\r\n        OFFER,\r\n\r\n        // 1: Items that must be received\r\n        CONSIDERATION\r\n    }\r\n\r\n// Dependency file: src/seaport/PointerLibraries.sol\r\n\r\n// pragma solidity ^0.8.13;\r\n\r\n    type CalldataPointer is uint256;\r\n\r\n    type ReturndataPointer is uint256;\r\n\r\n    type MemoryPointer is uint256;\r\n\r\n    using CalldataPointerLib for CalldataPointer global;\r\n    using MemoryPointerLib for MemoryPointer global;\r\n    using ReturndataPointerLib for ReturndataPointer global;\r\n\r\n    using CalldataReaders for CalldataPointer global;\r\n    using ReturndataReaders for ReturndataPointer global;\r\n    using MemoryReaders for MemoryPointer global;\r\n    using MemoryWriters for MemoryPointer global;\r\n\r\nCalldataPointer constant CalldataStart = CalldataPointer.wrap(0x04);\r\nMemoryPointer constant FreeMemoryPPtr = MemoryPointer.wrap(0x40);\r\nuint256 constant IdentityPrecompileAddress = 0x4;\r\nuint256 constant OffsetOrLengthMask = 0xffffffff;\r\nuint256 constant _OneWord = 0x20;\r\nuint256 constant _FreeMemoryPointerSlot = 0x40;\r\n\r\n/// @dev Allocates `size` bytes in memory by increasing the free memory pointer\r\n///    and returns the memory pointer to the first byte of the allocated region.\r\n// (Free functions cannot have visibility.)\r\n// solhint-disable-next-line func-visibility\r\n    function malloc(uint256 size) pure returns (MemoryPointer mPtr) {\r\n        assembly {\r\n            mPtr := mload(_FreeMemoryPointerSlot)\r\n            mstore(_FreeMemoryPointerSlot, add(mPtr, size))\r\n        }\r\n    }\r\n\r\n// (Free functions cannot have visibility.)\r\n// solhint-disable-next-line func-visibility\r\n    function getFreeMemoryPointer() pure returns (MemoryPointer mPtr) {\r\n        mPtr = FreeMemoryPPtr.readMemoryPointer();\r\n    }\r\n\r\n// (Free functions cannot have visibility.)\r\n// solhint-disable-next-line func-visibility\r\n    function setFreeMemoryPointer(MemoryPointer mPtr) pure {\r\n        FreeMemoryPPtr.write(mPtr);\r\n    }\r\n\r\nlibrary CalldataPointerLib {\r\n    function lt(\r\n        CalldataPointer a,\r\n        CalldataPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := lt(a, b)\r\n        }\r\n    }\r\n\r\n    function gt(\r\n        CalldataPointer a,\r\n        CalldataPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := gt(a, b)\r\n        }\r\n    }\r\n\r\n    function eq(\r\n        CalldataPointer a,\r\n        CalldataPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := eq(a, b)\r\n        }\r\n    }\r\n\r\n    function isNull(CalldataPointer a) internal pure returns (bool b) {\r\n        assembly {\r\n            b := iszero(a)\r\n        }\r\n    }\r\n\r\n    /// @dev Resolves an offset stored at `cdPtr + headOffset` to a calldata.\r\n    ///      pointer `cdPtr` must point to some parent object with a dynamic\r\n    ///      type's head stored at `cdPtr + headOffset`.\r\n    function pptr(\r\n        CalldataPointer cdPtr,\r\n        uint256 headOffset\r\n    ) internal pure returns (CalldataPointer cdPtrChild) {\r\n        cdPtrChild = cdPtr.offset(\r\n            cdPtr.offset(headOffset).readUint256() \u0026 OffsetOrLengthMask\r\n        );\r\n    }\r\n\r\n    /// @dev Resolves an offset stored at `cdPtr` to a calldata pointer.\r\n    ///      `cdPtr` must point to some parent object with a dynamic type as its\r\n    ///      first member, e.g. `struct { bytes data; }`\r\n    function pptr(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (CalldataPointer cdPtrChild) {\r\n        cdPtrChild = cdPtr.offset(cdPtr.readUint256() \u0026 OffsetOrLengthMask);\r\n    }\r\n\r\n    /// @dev Returns the calldata pointer one word after `cdPtr`.\r\n    function next(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (CalldataPointer cdPtrNext) {\r\n        assembly {\r\n            cdPtrNext := add(cdPtr, _OneWord)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the calldata pointer `_offset` bytes after `cdPtr`.\r\n    function offset(\r\n        CalldataPointer cdPtr,\r\n        uint256 _offset\r\n    ) internal pure returns (CalldataPointer cdPtrNext) {\r\n        assembly {\r\n            cdPtrNext := add(cdPtr, _offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Copies `size` bytes from calldata starting at `src` to memory at\r\n    ///      `dst`.\r\n    function copy(\r\n        CalldataPointer src,\r\n        MemoryPointer dst,\r\n        uint256 size\r\n    ) internal pure {\r\n        assembly {\r\n            calldatacopy(dst, src, size)\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ReturndataPointerLib {\r\n    function lt(\r\n        ReturndataPointer a,\r\n        ReturndataPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := lt(a, b)\r\n        }\r\n    }\r\n\r\n    function gt(\r\n        ReturndataPointer a,\r\n        ReturndataPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := gt(a, b)\r\n        }\r\n    }\r\n\r\n    function eq(\r\n        ReturndataPointer a,\r\n        ReturndataPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := eq(a, b)\r\n        }\r\n    }\r\n\r\n    function isNull(ReturndataPointer a) internal pure returns (bool b) {\r\n        assembly {\r\n            b := iszero(a)\r\n        }\r\n    }\r\n\r\n    /// @dev Resolves an offset stored at `rdPtr + headOffset` to a returndata\r\n    ///      pointer. `rdPtr` must point to some parent object with a dynamic\r\n    ///      type's head stored at `rdPtr + headOffset`.\r\n    function pptr(\r\n        ReturndataPointer rdPtr,\r\n        uint256 headOffset\r\n    ) internal pure returns (ReturndataPointer rdPtrChild) {\r\n        rdPtrChild = rdPtr.offset(\r\n            rdPtr.offset(headOffset).readUint256() \u0026 OffsetOrLengthMask\r\n        );\r\n    }\r\n\r\n    /// @dev Resolves an offset stored at `rdPtr` to a returndata pointer.\r\n    ///    `rdPtr` must point to some parent object with a dynamic type as its\r\n    ///    first member, e.g. `struct { bytes data; }`\r\n    function pptr(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (ReturndataPointer rdPtrChild) {\r\n        rdPtrChild = rdPtr.offset(rdPtr.readUint256() \u0026 OffsetOrLengthMask);\r\n    }\r\n\r\n    /// @dev Returns the returndata pointer one word after `cdPtr`.\r\n    function next(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (ReturndataPointer rdPtrNext) {\r\n        assembly {\r\n            rdPtrNext := add(rdPtr, _OneWord)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the returndata pointer `_offset` bytes after `cdPtr`.\r\n    function offset(\r\n        ReturndataPointer rdPtr,\r\n        uint256 _offset\r\n    ) internal pure returns (ReturndataPointer rdPtrNext) {\r\n        assembly {\r\n            rdPtrNext := add(rdPtr, _offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Copies `size` bytes from returndata starting at `src` to memory at\r\n    /// `dst`.\r\n    function copy(\r\n        ReturndataPointer src,\r\n        MemoryPointer dst,\r\n        uint256 size\r\n    ) internal pure {\r\n        assembly {\r\n            returndatacopy(dst, src, size)\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MemoryPointerLib {\r\n    function copy(\r\n        MemoryPointer src,\r\n        MemoryPointer dst,\r\n        uint256 size\r\n    ) internal view {\r\n        assembly {\r\n            let success := staticcall(\r\n                gas(),\r\n                IdentityPrecompileAddress,\r\n                src,\r\n                size,\r\n                dst,\r\n                size\r\n            )\r\n            if or(iszero(returndatasize()), iszero(success)) {\r\n                revert(0, 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    function lt(\r\n        MemoryPointer a,\r\n        MemoryPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := lt(a, b)\r\n        }\r\n    }\r\n\r\n    function gt(\r\n        MemoryPointer a,\r\n        MemoryPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := gt(a, b)\r\n        }\r\n    }\r\n\r\n    function eq(\r\n        MemoryPointer a,\r\n        MemoryPointer b\r\n    ) internal pure returns (bool c) {\r\n        assembly {\r\n            c := eq(a, b)\r\n        }\r\n    }\r\n\r\n    function isNull(MemoryPointer a) internal pure returns (bool b) {\r\n        assembly {\r\n            b := iszero(a)\r\n        }\r\n    }\r\n\r\n    function hash(\r\n        MemoryPointer ptr,\r\n        uint256 length\r\n    ) internal pure returns (bytes32 _hash) {\r\n        assembly {\r\n            _hash := keccak256(ptr, length)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the memory pointer one word after `mPtr`.\r\n    function next(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (MemoryPointer mPtrNext) {\r\n        assembly {\r\n            mPtrNext := add(mPtr, _OneWord)\r\n        }\r\n    }\r\n\r\n    /// @dev Returns the memory pointer `_offset` bytes after `mPtr`.\r\n    function offset(\r\n        MemoryPointer mPtr,\r\n        uint256 _offset\r\n    ) internal pure returns (MemoryPointer mPtrNext) {\r\n        assembly {\r\n            mPtrNext := add(mPtr, _offset)\r\n        }\r\n    }\r\n\r\n    /// @dev Resolves a pointer at `mPtr + headOffset` to a memory\r\n    ///    pointer. `mPtr` must point to some parent object with a dynamic\r\n    ///    type's pointer stored at `mPtr + headOffset`.\r\n    function pptr(\r\n        MemoryPointer mPtr,\r\n        uint256 headOffset\r\n    ) internal pure returns (MemoryPointer mPtrChild) {\r\n        mPtrChild = mPtr.offset(headOffset).readMemoryPointer();\r\n    }\r\n\r\n    /// @dev Resolves a pointer stored at `mPtr` to a memory pointer.\r\n    ///    `mPtr` must point to some parent object with a dynamic type as its\r\n    ///    first member, e.g. `struct { bytes data; }`\r\n    function pptr(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (MemoryPointer mPtrChild) {\r\n        mPtrChild = mPtr.readMemoryPointer();\r\n    }\r\n}\r\n\r\nlibrary CalldataReaders {\r\n    /// @dev Reads the value at `cdPtr` and applies a mask to return only the\r\n    ///    last 4 bytes.\r\n    function readMaskedUint256(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint256 value) {\r\n        value = cdPtr.readUint256() \u0026 OffsetOrLengthMask;\r\n    }\r\n\r\n    /// @dev Reads the bool at `cdPtr` in calldata.\r\n    function readBool(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bool value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the address at `cdPtr` in calldata.\r\n    function readAddress(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (address value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes1 at `cdPtr` in calldata.\r\n    function readBytes1(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes1 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes2 at `cdPtr` in calldata.\r\n    function readBytes2(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes2 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes3 at `cdPtr` in calldata.\r\n    function readBytes3(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes3 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes4 at `cdPtr` in calldata.\r\n    function readBytes4(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes4 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes5 at `cdPtr` in calldata.\r\n    function readBytes5(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes5 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes6 at `cdPtr` in calldata.\r\n    function readBytes6(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes6 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes7 at `cdPtr` in calldata.\r\n    function readBytes7(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes7 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes8 at `cdPtr` in calldata.\r\n    function readBytes8(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes8 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes9 at `cdPtr` in calldata.\r\n    function readBytes9(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes9 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes10 at `cdPtr` in calldata.\r\n    function readBytes10(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes10 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes11 at `cdPtr` in calldata.\r\n    function readBytes11(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes11 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes12 at `cdPtr` in calldata.\r\n    function readBytes12(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes12 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes13 at `cdPtr` in calldata.\r\n    function readBytes13(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes13 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes14 at `cdPtr` in calldata.\r\n    function readBytes14(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes14 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes15 at `cdPtr` in calldata.\r\n    function readBytes15(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes15 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes16 at `cdPtr` in calldata.\r\n    function readBytes16(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes16 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes17 at `cdPtr` in calldata.\r\n    function readBytes17(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes17 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes18 at `cdPtr` in calldata.\r\n    function readBytes18(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes18 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes19 at `cdPtr` in calldata.\r\n    function readBytes19(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes19 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes20 at `cdPtr` in calldata.\r\n    function readBytes20(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes20 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes21 at `cdPtr` in calldata.\r\n    function readBytes21(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes21 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes22 at `cdPtr` in calldata.\r\n    function readBytes22(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes22 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes23 at `cdPtr` in calldata.\r\n    function readBytes23(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes23 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes24 at `cdPtr` in calldata.\r\n    function readBytes24(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes24 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes25 at `cdPtr` in calldata.\r\n    function readBytes25(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes25 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes26 at `cdPtr` in calldata.\r\n    function readBytes26(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes26 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes27 at `cdPtr` in calldata.\r\n    function readBytes27(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes27 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes28 at `cdPtr` in calldata.\r\n    function readBytes28(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes28 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes29 at `cdPtr` in calldata.\r\n    function readBytes29(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes29 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes30 at `cdPtr` in calldata.\r\n    function readBytes30(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes30 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes31 at `cdPtr` in calldata.\r\n    function readBytes31(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes31 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes32 at `cdPtr` in calldata.\r\n    function readBytes32(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (bytes32 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint8 at `cdPtr` in calldata.\r\n    function readUint8(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint8 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint16 at `cdPtr` in calldata.\r\n    function readUint16(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint16 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint24 at `cdPtr` in calldata.\r\n    function readUint24(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint24 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint32 at `cdPtr` in calldata.\r\n    function readUint32(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint32 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint40 at `cdPtr` in calldata.\r\n    function readUint40(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint40 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint48 at `cdPtr` in calldata.\r\n    function readUint48(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint48 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint56 at `cdPtr` in calldata.\r\n    function readUint56(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint56 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint64 at `cdPtr` in calldata.\r\n    function readUint64(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint64 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint72 at `cdPtr` in calldata.\r\n    function readUint72(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint72 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint80 at `cdPtr` in calldata.\r\n    function readUint80(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint80 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint88 at `cdPtr` in calldata.\r\n    function readUint88(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint88 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint96 at `cdPtr` in calldata.\r\n    function readUint96(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint96 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint104 at `cdPtr` in calldata.\r\n    function readUint104(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint104 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint112 at `cdPtr` in calldata.\r\n    function readUint112(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint112 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint120 at `cdPtr` in calldata.\r\n    function readUint120(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint120 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint128 at `cdPtr` in calldata.\r\n    function readUint128(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint128 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint136 at `cdPtr` in calldata.\r\n    function readUint136(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint136 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint144 at `cdPtr` in calldata.\r\n    function readUint144(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint144 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint152 at `cdPtr` in calldata.\r\n    function readUint152(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint152 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint160 at `cdPtr` in calldata.\r\n    function readUint160(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint160 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint168 at `cdPtr` in calldata.\r\n    function readUint168(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint168 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint176 at `cdPtr` in calldata.\r\n    function readUint176(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint176 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint184 at `cdPtr` in calldata.\r\n    function readUint184(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint184 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint192 at `cdPtr` in calldata.\r\n    function readUint192(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint192 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint200 at `cdPtr` in calldata.\r\n    function readUint200(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint200 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint208 at `cdPtr` in calldata.\r\n    function readUint208(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint208 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint216 at `cdPtr` in calldata.\r\n    function readUint216(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint216 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint224 at `cdPtr` in calldata.\r\n    function readUint224(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint224 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint232 at `cdPtr` in calldata.\r\n    function readUint232(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint232 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint240 at `cdPtr` in calldata.\r\n    function readUint240(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint240 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint248 at `cdPtr` in calldata.\r\n    function readUint248(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint248 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint256 at `cdPtr` in calldata.\r\n    function readUint256(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (uint256 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int8 at `cdPtr` in calldata.\r\n    function readInt8(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int8 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int16 at `cdPtr` in calldata.\r\n    function readInt16(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int16 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int24 at `cdPtr` in calldata.\r\n    function readInt24(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int24 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int32 at `cdPtr` in calldata.\r\n    function readInt32(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int32 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int40 at `cdPtr` in calldata.\r\n    function readInt40(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int40 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int48 at `cdPtr` in calldata.\r\n    function readInt48(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int48 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int56 at `cdPtr` in calldata.\r\n    function readInt56(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int56 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int64 at `cdPtr` in calldata.\r\n    function readInt64(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int64 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int72 at `cdPtr` in calldata.\r\n    function readInt72(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int72 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int80 at `cdPtr` in calldata.\r\n    function readInt80(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int80 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int88 at `cdPtr` in calldata.\r\n    function readInt88(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int88 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int96 at `cdPtr` in calldata.\r\n    function readInt96(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int96 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int104 at `cdPtr` in calldata.\r\n    function readInt104(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int104 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int112 at `cdPtr` in calldata.\r\n    function readInt112(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int112 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int120 at `cdPtr` in calldata.\r\n    function readInt120(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int120 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int128 at `cdPtr` in calldata.\r\n    function readInt128(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int128 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int136 at `cdPtr` in calldata.\r\n    function readInt136(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int136 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int144 at `cdPtr` in calldata.\r\n    function readInt144(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int144 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int152 at `cdPtr` in calldata.\r\n    function readInt152(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int152 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int160 at `cdPtr` in calldata.\r\n    function readInt160(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int160 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int168 at `cdPtr` in calldata.\r\n    function readInt168(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int168 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int176 at `cdPtr` in calldata.\r\n    function readInt176(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int176 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int184 at `cdPtr` in calldata.\r\n    function readInt184(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int184 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int192 at `cdPtr` in calldata.\r\n    function readInt192(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int192 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int200 at `cdPtr` in calldata.\r\n    function readInt200(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int200 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int208 at `cdPtr` in calldata.\r\n    function readInt208(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int208 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int216 at `cdPtr` in calldata.\r\n    function readInt216(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int216 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int224 at `cdPtr` in calldata.\r\n    function readInt224(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int224 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int232 at `cdPtr` in calldata.\r\n    function readInt232(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int232 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int240 at `cdPtr` in calldata.\r\n    function readInt240(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int240 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int248 at `cdPtr` in calldata.\r\n    function readInt248(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int248 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int256 at `cdPtr` in calldata.\r\n    function readInt256(\r\n        CalldataPointer cdPtr\r\n    ) internal pure returns (int256 value) {\r\n        assembly {\r\n            value := calldataload(cdPtr)\r\n        }\r\n    }\r\n}\r\n\r\nlibrary ReturndataReaders {\r\n    /// @dev Reads value at `rdPtr` \u0026 applies a mask to return only last 4 bytes\r\n    function readMaskedUint256(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint256 value) {\r\n        value = rdPtr.readUint256() \u0026 OffsetOrLengthMask;\r\n    }\r\n\r\n    /// @dev Reads the bool at `rdPtr` in returndata.\r\n    function readBool(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bool value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the address at `rdPtr` in returndata.\r\n    function readAddress(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (address value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes1 at `rdPtr` in returndata.\r\n    function readBytes1(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes1 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes2 at `rdPtr` in returndata.\r\n    function readBytes2(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes2 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes3 at `rdPtr` in returndata.\r\n    function readBytes3(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes3 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes4 at `rdPtr` in returndata.\r\n    function readBytes4(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes4 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes5 at `rdPtr` in returndata.\r\n    function readBytes5(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes5 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes6 at `rdPtr` in returndata.\r\n    function readBytes6(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes6 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes7 at `rdPtr` in returndata.\r\n    function readBytes7(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes7 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes8 at `rdPtr` in returndata.\r\n    function readBytes8(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes8 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes9 at `rdPtr` in returndata.\r\n    function readBytes9(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes9 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes10 at `rdPtr` in returndata.\r\n    function readBytes10(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes10 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes11 at `rdPtr` in returndata.\r\n    function readBytes11(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes11 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes12 at `rdPtr` in returndata.\r\n    function readBytes12(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes12 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes13 at `rdPtr` in returndata.\r\n    function readBytes13(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes13 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes14 at `rdPtr` in returndata.\r\n    function readBytes14(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes14 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes15 at `rdPtr` in returndata.\r\n    function readBytes15(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes15 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes16 at `rdPtr` in returndata.\r\n    function readBytes16(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes16 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes17 at `rdPtr` in returndata.\r\n    function readBytes17(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes17 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes18 at `rdPtr` in returndata.\r\n    function readBytes18(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes18 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes19 at `rdPtr` in returndata.\r\n    function readBytes19(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes19 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes20 at `rdPtr` in returndata.\r\n    function readBytes20(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes20 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes21 at `rdPtr` in returndata.\r\n    function readBytes21(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes21 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes22 at `rdPtr` in returndata.\r\n    function readBytes22(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes22 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes23 at `rdPtr` in returndata.\r\n    function readBytes23(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes23 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes24 at `rdPtr` in returndata.\r\n    function readBytes24(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes24 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes25 at `rdPtr` in returndata.\r\n    function readBytes25(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes25 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes26 at `rdPtr` in returndata.\r\n    function readBytes26(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes26 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes27 at `rdPtr` in returndata.\r\n    function readBytes27(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes27 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes28 at `rdPtr` in returndata.\r\n    function readBytes28(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes28 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes29 at `rdPtr` in returndata.\r\n    function readBytes29(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes29 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes30 at `rdPtr` in returndata.\r\n    function readBytes30(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes30 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes31 at `rdPtr` in returndata.\r\n    function readBytes31(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes31 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes32 at `rdPtr` in returndata.\r\n    function readBytes32(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (bytes32 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint8 at `rdPtr` in returndata.\r\n    function readUint8(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint8 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint16 at `rdPtr` in returndata.\r\n    function readUint16(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint16 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint24 at `rdPtr` in returndata.\r\n    function readUint24(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint24 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint32 at `rdPtr` in returndata.\r\n    function readUint32(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint32 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint40 at `rdPtr` in returndata.\r\n    function readUint40(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint40 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint48 at `rdPtr` in returndata.\r\n    function readUint48(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint48 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint56 at `rdPtr` in returndata.\r\n    function readUint56(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint56 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint64 at `rdPtr` in returndata.\r\n    function readUint64(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint64 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint72 at `rdPtr` in returndata.\r\n    function readUint72(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint72 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint80 at `rdPtr` in returndata.\r\n    function readUint80(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint80 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint88 at `rdPtr` in returndata.\r\n    function readUint88(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint88 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint96 at `rdPtr` in returndata.\r\n    function readUint96(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint96 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint104 at `rdPtr` in returndata.\r\n    function readUint104(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint104 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint112 at `rdPtr` in returndata.\r\n    function readUint112(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint112 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint120 at `rdPtr` in returndata.\r\n    function readUint120(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint120 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint128 at `rdPtr` in returndata.\r\n    function readUint128(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint128 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint136 at `rdPtr` in returndata.\r\n    function readUint136(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint136 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint144 at `rdPtr` in returndata.\r\n    function readUint144(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint144 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint152 at `rdPtr` in returndata.\r\n    function readUint152(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint152 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint160 at `rdPtr` in returndata.\r\n    function readUint160(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint160 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint168 at `rdPtr` in returndata.\r\n    function readUint168(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint168 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint176 at `rdPtr` in returndata.\r\n    function readUint176(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint176 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint184 at `rdPtr` in returndata.\r\n    function readUint184(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint184 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint192 at `rdPtr` in returndata.\r\n    function readUint192(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint192 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint200 at `rdPtr` in returndata.\r\n    function readUint200(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint200 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint208 at `rdPtr` in returndata.\r\n    function readUint208(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint208 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint216 at `rdPtr` in returndata.\r\n    function readUint216(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint216 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint224 at `rdPtr` in returndata.\r\n    function readUint224(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint224 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint232 at `rdPtr` in returndata.\r\n    function readUint232(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint232 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint240 at `rdPtr` in returndata.\r\n    function readUint240(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint240 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint248 at `rdPtr` in returndata.\r\n    function readUint248(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint248 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint256 at `rdPtr` in returndata.\r\n    function readUint256(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (uint256 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int8 at `rdPtr` in returndata.\r\n    function readInt8(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int8 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int16 at `rdPtr` in returndata.\r\n    function readInt16(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int16 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int24 at `rdPtr` in returndata.\r\n    function readInt24(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int24 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int32 at `rdPtr` in returndata.\r\n    function readInt32(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int32 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int40 at `rdPtr` in returndata.\r\n    function readInt40(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int40 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int48 at `rdPtr` in returndata.\r\n    function readInt48(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int48 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int56 at `rdPtr` in returndata.\r\n    function readInt56(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int56 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int64 at `rdPtr` in returndata.\r\n    function readInt64(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int64 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int72 at `rdPtr` in returndata.\r\n    function readInt72(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int72 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int80 at `rdPtr` in returndata.\r\n    function readInt80(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int80 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int88 at `rdPtr` in returndata.\r\n    function readInt88(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int88 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int96 at `rdPtr` in returndata.\r\n    function readInt96(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int96 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int104 at `rdPtr` in returndata.\r\n    function readInt104(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int104 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int112 at `rdPtr` in returndata.\r\n    function readInt112(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int112 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int120 at `rdPtr` in returndata.\r\n    function readInt120(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int120 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int128 at `rdPtr` in returndata.\r\n    function readInt128(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int128 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int136 at `rdPtr` in returndata.\r\n    function readInt136(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int136 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int144 at `rdPtr` in returndata.\r\n    function readInt144(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int144 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int152 at `rdPtr` in returndata.\r\n    function readInt152(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int152 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int160 at `rdPtr` in returndata.\r\n    function readInt160(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int160 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int168 at `rdPtr` in returndata.\r\n    function readInt168(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int168 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int176 at `rdPtr` in returndata.\r\n    function readInt176(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int176 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int184 at `rdPtr` in returndata.\r\n    function readInt184(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int184 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int192 at `rdPtr` in returndata.\r\n    function readInt192(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int192 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int200 at `rdPtr` in returndata.\r\n    function readInt200(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int200 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int208 at `rdPtr` in returndata.\r\n    function readInt208(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int208 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int216 at `rdPtr` in returndata.\r\n    function readInt216(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int216 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int224 at `rdPtr` in returndata.\r\n    function readInt224(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int224 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int232 at `rdPtr` in returndata.\r\n    function readInt232(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int232 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int240 at `rdPtr` in returndata.\r\n    function readInt240(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int240 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int248 at `rdPtr` in returndata.\r\n    function readInt248(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int248 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int256 at `rdPtr` in returndata.\r\n    function readInt256(\r\n        ReturndataPointer rdPtr\r\n    ) internal pure returns (int256 value) {\r\n        assembly {\r\n            returndatacopy(0, rdPtr, _OneWord)\r\n            value := mload(0)\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MemoryReaders {\r\n    /// @dev Reads the memory pointer at `mPtr` in memory.\r\n    function readMemoryPointer(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (MemoryPointer value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads value at `mPtr` \u0026 applies a mask to return only last 4 bytes\r\n    function readMaskedUint256(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint256 value) {\r\n        value = mPtr.readUint256() \u0026 OffsetOrLengthMask;\r\n    }\r\n\r\n    /// @dev Reads the bool at `mPtr` in memory.\r\n    function readBool(MemoryPointer mPtr) internal pure returns (bool value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the address at `mPtr` in memory.\r\n    function readAddress(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (address value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes1 at `mPtr` in memory.\r\n    function readBytes1(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes1 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes2 at `mPtr` in memory.\r\n    function readBytes2(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes2 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes3 at `mPtr` in memory.\r\n    function readBytes3(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes3 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes4 at `mPtr` in memory.\r\n    function readBytes4(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes4 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes5 at `mPtr` in memory.\r\n    function readBytes5(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes5 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes6 at `mPtr` in memory.\r\n    function readBytes6(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes6 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes7 at `mPtr` in memory.\r\n    function readBytes7(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes7 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes8 at `mPtr` in memory.\r\n    function readBytes8(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes8 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes9 at `mPtr` in memory.\r\n    function readBytes9(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes9 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes10 at `mPtr` in memory.\r\n    function readBytes10(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes10 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes11 at `mPtr` in memory.\r\n    function readBytes11(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes11 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes12 at `mPtr` in memory.\r\n    function readBytes12(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes12 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes13 at `mPtr` in memory.\r\n    function readBytes13(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes13 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes14 at `mPtr` in memory.\r\n    function readBytes14(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes14 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes15 at `mPtr` in memory.\r\n    function readBytes15(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes15 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes16 at `mPtr` in memory.\r\n    function readBytes16(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes16 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes17 at `mPtr` in memory.\r\n    function readBytes17(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes17 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes18 at `mPtr` in memory.\r\n    function readBytes18(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes18 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes19 at `mPtr` in memory.\r\n    function readBytes19(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes19 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes20 at `mPtr` in memory.\r\n    function readBytes20(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes20 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes21 at `mPtr` in memory.\r\n    function readBytes21(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes21 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes22 at `mPtr` in memory.\r\n    function readBytes22(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes22 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes23 at `mPtr` in memory.\r\n    function readBytes23(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes23 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes24 at `mPtr` in memory.\r\n    function readBytes24(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes24 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes25 at `mPtr` in memory.\r\n    function readBytes25(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes25 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes26 at `mPtr` in memory.\r\n    function readBytes26(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes26 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes27 at `mPtr` in memory.\r\n    function readBytes27(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes27 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes28 at `mPtr` in memory.\r\n    function readBytes28(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes28 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes29 at `mPtr` in memory.\r\n    function readBytes29(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes29 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes30 at `mPtr` in memory.\r\n    function readBytes30(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes30 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes31 at `mPtr` in memory.\r\n    function readBytes31(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes31 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the bytes32 at `mPtr` in memory.\r\n    function readBytes32(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (bytes32 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint8 at `mPtr` in memory.\r\n    function readUint8(MemoryPointer mPtr) internal pure returns (uint8 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint16 at `mPtr` in memory.\r\n    function readUint16(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint16 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint24 at `mPtr` in memory.\r\n    function readUint24(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint24 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint32 at `mPtr` in memory.\r\n    function readUint32(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint32 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint40 at `mPtr` in memory.\r\n    function readUint40(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint40 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint48 at `mPtr` in memory.\r\n    function readUint48(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint48 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint56 at `mPtr` in memory.\r\n    function readUint56(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint56 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint64 at `mPtr` in memory.\r\n    function readUint64(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint64 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint72 at `mPtr` in memory.\r\n    function readUint72(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint72 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint80 at `mPtr` in memory.\r\n    function readUint80(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint80 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint88 at `mPtr` in memory.\r\n    function readUint88(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint88 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint96 at `mPtr` in memory.\r\n    function readUint96(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint96 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint104 at `mPtr` in memory.\r\n    function readUint104(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint104 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint112 at `mPtr` in memory.\r\n    function readUint112(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint112 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint120 at `mPtr` in memory.\r\n    function readUint120(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint120 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint128 at `mPtr` in memory.\r\n    function readUint128(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint128 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint136 at `mPtr` in memory.\r\n    function readUint136(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint136 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint144 at `mPtr` in memory.\r\n    function readUint144(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint144 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint152 at `mPtr` in memory.\r\n    function readUint152(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint152 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint160 at `mPtr` in memory.\r\n    function readUint160(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint160 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint168 at `mPtr` in memory.\r\n    function readUint168(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint168 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint176 at `mPtr` in memory.\r\n    function readUint176(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint176 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint184 at `mPtr` in memory.\r\n    function readUint184(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint184 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint192 at `mPtr` in memory.\r\n    function readUint192(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint192 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint200 at `mPtr` in memory.\r\n    function readUint200(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint200 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint208 at `mPtr` in memory.\r\n    function readUint208(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint208 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint216 at `mPtr` in memory.\r\n    function readUint216(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint216 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint224 at `mPtr` in memory.\r\n    function readUint224(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint224 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint232 at `mPtr` in memory.\r\n    function readUint232(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint232 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint240 at `mPtr` in memory.\r\n    function readUint240(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint240 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint248 at `mPtr` in memory.\r\n    function readUint248(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint248 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the uint256 at `mPtr` in memory.\r\n    function readUint256(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (uint256 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int8 at `mPtr` in memory.\r\n    function readInt8(MemoryPointer mPtr) internal pure returns (int8 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int16 at `mPtr` in memory.\r\n    function readInt16(MemoryPointer mPtr) internal pure returns (int16 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int24 at `mPtr` in memory.\r\n    function readInt24(MemoryPointer mPtr) internal pure returns (int24 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int32 at `mPtr` in memory.\r\n    function readInt32(MemoryPointer mPtr) internal pure returns (int32 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int40 at `mPtr` in memory.\r\n    function readInt40(MemoryPointer mPtr) internal pure returns (int40 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int48 at `mPtr` in memory.\r\n    function readInt48(MemoryPointer mPtr) internal pure returns (int48 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int56 at `mPtr` in memory.\r\n    function readInt56(MemoryPointer mPtr) internal pure returns (int56 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int64 at `mPtr` in memory.\r\n    function readInt64(MemoryPointer mPtr) internal pure returns (int64 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int72 at `mPtr` in memory.\r\n    function readInt72(MemoryPointer mPtr) internal pure returns (int72 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int80 at `mPtr` in memory.\r\n    function readInt80(MemoryPointer mPtr) internal pure returns (int80 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int88 at `mPtr` in memory.\r\n    function readInt88(MemoryPointer mPtr) internal pure returns (int88 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int96 at `mPtr` in memory.\r\n    function readInt96(MemoryPointer mPtr) internal pure returns (int96 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int104 at `mPtr` in memory.\r\n    function readInt104(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int104 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int112 at `mPtr` in memory.\r\n    function readInt112(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int112 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int120 at `mPtr` in memory.\r\n    function readInt120(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int120 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int128 at `mPtr` in memory.\r\n    function readInt128(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int128 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int136 at `mPtr` in memory.\r\n    function readInt136(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int136 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int144 at `mPtr` in memory.\r\n    function readInt144(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int144 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int152 at `mPtr` in memory.\r\n    function readInt152(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int152 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int160 at `mPtr` in memory.\r\n    function readInt160(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int160 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int168 at `mPtr` in memory.\r\n    function readInt168(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int168 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int176 at `mPtr` in memory.\r\n    function readInt176(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int176 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int184 at `mPtr` in memory.\r\n    function readInt184(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int184 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int192 at `mPtr` in memory.\r\n    function readInt192(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int192 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int200 at `mPtr` in memory.\r\n    function readInt200(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int200 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int208 at `mPtr` in memory.\r\n    function readInt208(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int208 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int216 at `mPtr` in memory.\r\n    function readInt216(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int216 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int224 at `mPtr` in memory.\r\n    function readInt224(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int224 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int232 at `mPtr` in memory.\r\n    function readInt232(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int232 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int240 at `mPtr` in memory.\r\n    function readInt240(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int240 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int248 at `mPtr` in memory.\r\n    function readInt248(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int248 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Reads the int256 at `mPtr` in memory.\r\n    function readInt256(\r\n        MemoryPointer mPtr\r\n    ) internal pure returns (int256 value) {\r\n        assembly {\r\n            value := mload(mPtr)\r\n        }\r\n    }\r\n}\r\n\r\nlibrary MemoryWriters {\r\n    /// @dev Writes `valuePtr` to memory at `mPtr`.\r\n    function write(MemoryPointer mPtr, MemoryPointer valuePtr) internal pure {\r\n        assembly {\r\n            mstore(mPtr, valuePtr)\r\n        }\r\n    }\r\n\r\n    /// @dev Writes a boolean `value` to `mPtr` in memory.\r\n    function write(MemoryPointer mPtr, bool value) internal pure {\r\n        assembly {\r\n            mstore(mPtr, value)\r\n        }\r\n    }\r\n\r\n    /// @dev Writes an address `value` to `mPtr` in memory.\r\n    function write(MemoryPointer mPtr, address value) internal pure {\r\n        assembly {\r\n            mstore(mPtr, value)\r\n        }\r\n    }\r\n\r\n    /// @dev Writes a bytes32 `value` to `mPtr` in memory.\r\n    /// Separate name to disambiguate literal write parameters.\r\n    function writeBytes32(MemoryPointer mPtr, bytes32 value) internal pure {\r\n        assembly {\r\n            mstore(mPtr, value)\r\n        }\r\n    }\r\n\r\n    /// @dev Writes a uint256 `value` to `mPtr` in memory.\r\n    function write(MemoryPointer mPtr, uint256 value) internal pure {\r\n        assembly {\r\n            mstore(mPtr, value)\r\n        }\r\n    }\r\n\r\n    /// @dev Writes an int256 `value` to `mPtr` in memory.\r\n    /// Separate name to disambiguate literal write parameters.\r\n    function writeInt(MemoryPointer mPtr, int256 value) internal pure {\r\n        assembly {\r\n            mstore(mPtr, value)\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: src/seaport/ConsiderationStructs.sol\r\n\r\n// pragma solidity ^0.8.13;\r\n\r\n// import {BasicOrderType, ItemType, OrderType, Side} from \"src/seaport/ConsiderationEnums.sol\";\r\n// import {CalldataPointer, MemoryPointer} from \"src/seaport/PointerLibraries.sol\";\r\n\r\n/**\r\n * @dev An order contains eleven components: an offerer, a zone (or account that\r\n *      can cancel the order or restrict who can fulfill the order depending on\r\n *      the type), the order type (specifying partial fill support as well as\r\n *      restricted order status), the start and end time, a hash that will be\r\n *      provided to the zone when validating restricted orders, a salt, a key\r\n *      corresponding to a given conduit, a counter, and an arbitrary number of\r\n *      offer items that can be spent along with consideration items that must\r\n *      be received by their respective recipient.\r\n */\r\n    struct OrderComponents {\r\n        address offerer;\r\n        address zone;\r\n        OfferItem[] offer;\r\n        ConsiderationItem[] consideration;\r\n        OrderType orderType;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bytes32 zoneHash;\r\n        uint256 salt;\r\n        bytes32 conduitKey;\r\n        uint256 counter;\r\n    }\r\n\r\n/**\r\n * @dev An offer item has five components: an item type (ETH or other native\r\n *      tokens, ERC20, ERC721, and ERC1155, as well as criteria-based ERC721 and\r\n *      ERC1155), a token address, a dual-purpose \"identifierOrCriteria\"\r\n *      component that will either represent a tokenId or a merkle root\r\n *      depending on the item type, and a start and end amount that support\r\n *      increasing or decreasing amounts over the duration of the respective\r\n *      order.\r\n */\r\n    struct OfferItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifierOrCriteria;\r\n        uint256 startAmount;\r\n        uint256 endAmount;\r\n    }\r\n\r\n/**\r\n * @dev A consideration item has the same five components as an offer item and\r\n *      an additional sixth component designating the required recipient of the\r\n *      item.\r\n */\r\n    struct ConsiderationItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifierOrCriteria;\r\n        uint256 startAmount;\r\n        uint256 endAmount;\r\n        address payable recipient;\r\n    }\r\n\r\n/**\r\n * @dev A spent item is translated from a utilized offer item and has four\r\n *      components: an item type (ETH or other native tokens, ERC20, ERC721, and\r\n *      ERC1155), a token address, a tokenId, and an amount.\r\n */\r\n    struct SpentItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifier;\r\n        uint256 amount;\r\n    }\r\n\r\n/**\r\n * @dev A received item is translated from a utilized consideration item and has\r\n *      the same four components as a spent item, as well as an additional fifth\r\n *      component designating the required recipient of the item.\r\n */\r\n    struct ReceivedItem {\r\n        ItemType itemType;\r\n        address token;\r\n        uint256 identifier;\r\n        uint256 amount;\r\n        address payable recipient;\r\n    }\r\n\r\n/**\r\n * @dev For basic orders involving ETH / native / ERC20 \u003c=\u003e ERC721 / ERC1155\r\n *      matching, a group of six functions may be called that only requires a\r\n *      subset of the usual order arguments. Note the use of a \"basicOrderType\"\r\n *      enum; this represents both the usual order type as well as the \"route\"\r\n *      of the basic order (a simple derivation function for the basic order\r\n *      type is `basicOrderType = orderType + (4 * basicOrderRoute)`.)\r\n */\r\n    struct BasicOrderParameters {\r\n        // calldata offset\r\n        address considerationToken; // 0x24\r\n        uint256 considerationIdentifier; // 0x44\r\n        uint256 considerationAmount; // 0x64\r\n        address payable offerer; // 0x84\r\n        address zone; // 0xa4\r\n        address offerToken; // 0xc4\r\n        uint256 offerIdentifier; // 0xe4\r\n        uint256 offerAmount; // 0x104\r\n        BasicOrderType basicOrderType; // 0x124\r\n        uint256 startTime; // 0x144\r\n        uint256 endTime; // 0x164\r\n        bytes32 zoneHash; // 0x184\r\n        uint256 salt; // 0x1a4\r\n        bytes32 offererConduitKey; // 0x1c4\r\n        bytes32 fulfillerConduitKey; // 0x1e4\r\n        uint256 totalOriginalAdditionalRecipients; // 0x204\r\n        AdditionalRecipient[] additionalRecipients; // 0x224\r\n        bytes signature; // 0x244\r\n        // Total length, excluding dynamic array data: 0x264 (580)\r\n    }\r\n\r\n/**\r\n * @dev Basic orders can supply any number of additional recipients, with the\r\n *      implied assumption that they are supplied from the offered ETH (or other\r\n *      native token) or ERC20 token for the order.\r\n */\r\n    struct AdditionalRecipient {\r\n        uint256 amount;\r\n        address payable recipient;\r\n    }\r\n\r\n/**\r\n * @dev The full set of order components, with the exception of the counter,\r\n *      must be supplied when fulfilling more sophisticated orders or groups of\r\n *      orders. The total number of original consideration items must also be\r\n *      supplied, as the caller may specify additional consideration items.\r\n */\r\n    struct OrderParameters {\r\n        address offerer; // 0x00\r\n        address zone; // 0x20\r\n        OfferItem[] offer; // 0x40\r\n        ConsiderationItem[] consideration; // 0x60\r\n        OrderType orderType; // 0x80\r\n        uint256 startTime; // 0xa0\r\n        uint256 endTime; // 0xc0\r\n        bytes32 zoneHash; // 0xe0\r\n        uint256 salt; // 0x100\r\n        bytes32 conduitKey; // 0x120\r\n        uint256 totalOriginalConsiderationItems; // 0x140\r\n        // offer.length                          // 0x160\r\n    }\r\n\r\n/**\r\n * @dev Orders require a signature in addition to the other order parameters.\r\n */\r\n    struct Order {\r\n        OrderParameters parameters;\r\n        bytes signature;\r\n    }\r\n\r\n/**\r\n * @dev Advanced orders include a numerator (i.e. a fraction to attempt to fill)\r\n *      and a denominator (the total size of the order) in addition to the\r\n *      signature and other order parameters. It also supports an optional field\r\n *      for supplying extra data; this data will be provided to the zone if the\r\n *      order type is restricted and the zone is not the caller, or will be\r\n *      provided to the offerer as context for contract order types.\r\n */\r\n    struct AdvancedOrder {\r\n        OrderParameters parameters;\r\n        uint120 numerator;\r\n        uint120 denominator;\r\n        bytes signature;\r\n        bytes extraData;\r\n    }\r\n\r\n/**\r\n * @dev Orders can be validated (either explicitly via `validate`, or as a\r\n *      consequence of a full or partial fill), specifically cancelled (they can\r\n *      also be cancelled in bulk via incrementing a per-zone counter), and\r\n *      partially or fully filled (with the fraction filled represented by a\r\n *      numerator and denominator).\r\n */\r\n    struct OrderStatus {\r\n        bool isValidated;\r\n        bool isCancelled;\r\n        uint120 numerator;\r\n        uint120 denominator;\r\n    }\r\n\r\n/**\r\n * @dev A criteria resolver specifies an order, side (offer vs. consideration),\r\n *      and item index. It then provides a chosen identifier (i.e. tokenId)\r\n *      alongside a merkle proof demonstrating the identifier meets the required\r\n *      criteria.\r\n */\r\n    struct CriteriaResolver {\r\n        uint256 orderIndex;\r\n        Side side;\r\n        uint256 index;\r\n        uint256 identifier;\r\n        bytes32[] criteriaProof;\r\n    }\r\n\r\n/**\r\n * @dev A fulfillment is applied to a group of orders. It decrements a series of\r\n *      offer and consideration items, then generates a single execution\r\n *      element. A given fulfillment can be applied to as many offer and\r\n *      consideration items as desired, but must contain at least one offer and\r\n *      at least one consideration that match. The fulfillment must also remain\r\n *      consistent on all key parameters across all offer items (same offerer,\r\n *      token, type, tokenId, and conduit preference) as well as across all\r\n *      consideration items (token, type, tokenId, and recipient).\r\n */\r\n    struct Fulfillment {\r\n        FulfillmentComponent[] offerComponents;\r\n        FulfillmentComponent[] considerationComponents;\r\n    }\r\n\r\n/**\r\n * @dev Each fulfillment component contains one index referencing a specific\r\n *      order and another referencing a specific offer or consideration item.\r\n */\r\n    struct FulfillmentComponent {\r\n        uint256 orderIndex;\r\n        uint256 itemIndex;\r\n    }\r\n\r\n/**\r\n * @dev An execution is triggered once all consideration items have been zeroed\r\n *      out. It sends the item in question from the offerer to the item's\r\n *      recipient, optionally sourcing approvals from either this contract\r\n *      directly or from the offerer's chosen conduit if one is specified. An\r\n *      execution is not provided as an argument, but rather is derived via\r\n *      orders, criteria resolvers, and fulfillments (where the total number of\r\n *      executions will be less than or equal to the total number of indicated\r\n *      fulfillments) and returned as part of `matchOrders`.\r\n */\r\n    struct Execution {\r\n        ReceivedItem item;\r\n        address offerer;\r\n        bytes32 conduitKey;\r\n    }\r\n\r\n/**\r\n * @dev Restricted orders are validated post-execution by calling validateOrder\r\n *      on the zone. This struct provides context about the order fulfillment\r\n *      and any supplied extraData, as well as all order hashes fulfilled in a\r\n *      call to a match or fulfillAvailable method.\r\n */\r\n    struct ZoneParameters {\r\n        bytes32 orderHash;\r\n        address fulfiller;\r\n        address offerer;\r\n        SpentItem[] offer;\r\n        ReceivedItem[] consideration;\r\n        bytes extraData;\r\n        bytes32[] orderHashes;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        bytes32 zoneHash;\r\n    }\r\n\r\n/**\r\n * @dev Zones and contract offerers can communicate which schemas they implement\r\n *      along with any associated metadata related to each schema.\r\n */\r\n    struct Schema {\r\n        uint256 id;\r\n        bytes metadata;\r\n    }\r\n\r\n    using StructPointers for OrderComponents global;\r\n    using StructPointers for OfferItem global;\r\n    using StructPointers for ConsiderationItem global;\r\n    using StructPointers for SpentItem global;\r\n    using StructPointers for ReceivedItem global;\r\n    using StructPointers for BasicOrderParameters global;\r\n    using StructPointers for AdditionalRecipient global;\r\n    using StructPointers for OrderParameters global;\r\n    using StructPointers for Order global;\r\n    using StructPointers for AdvancedOrder global;\r\n    using StructPointers for OrderStatus global;\r\n    using StructPointers for CriteriaResolver global;\r\n    using StructPointers for Fulfillment global;\r\n    using StructPointers for FulfillmentComponent global;\r\n    using StructPointers for Execution global;\r\n    using StructPointers for ZoneParameters global;\r\n\r\n/**\r\n * @dev This library provides a set of functions for converting structs to\r\n *      pointers.\r\n */\r\nlibrary StructPointers {\r\n    /**\r\n     * @dev Get a MemoryPointer from OrderComponents.\r\n     *\r\n     * @param obj The OrderComponents object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        OrderComponents memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from OrderComponents.\r\n     *\r\n     * @param obj The OrderComponents object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        OrderComponents calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from OfferItem.\r\n     *\r\n     * @param obj The OfferItem object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        OfferItem memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from OfferItem.\r\n     *\r\n     * @param obj The OfferItem object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        OfferItem calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from ConsiderationItem.\r\n     *\r\n     * @param obj The ConsiderationItem object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        ConsiderationItem memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from ConsiderationItem.\r\n     *\r\n     * @param obj The ConsiderationItem object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        ConsiderationItem calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from SpentItem.\r\n     *\r\n     * @param obj The SpentItem object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        SpentItem memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from SpentItem.\r\n     *\r\n     * @param obj The SpentItem object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        SpentItem calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from ReceivedItem.\r\n     *\r\n     * @param obj The ReceivedItem object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        ReceivedItem memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from ReceivedItem.\r\n     *\r\n     * @param obj The ReceivedItem object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        ReceivedItem calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from BasicOrderParameters.\r\n     *\r\n     * @param obj The BasicOrderParameters object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        BasicOrderParameters memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from BasicOrderParameters.\r\n     *\r\n     * @param obj The BasicOrderParameters object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        BasicOrderParameters calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from AdditionalRecipient.\r\n     *\r\n     * @param obj The AdditionalRecipient object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        AdditionalRecipient memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from AdditionalRecipient.\r\n     *\r\n     * @param obj The AdditionalRecipient object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        AdditionalRecipient calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from OrderParameters.\r\n     *\r\n     * @param obj The OrderParameters object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        OrderParameters memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from OrderParameters.\r\n     *\r\n     * @param obj The OrderParameters object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        OrderParameters calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from Order.\r\n     *\r\n     * @param obj The Order object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        Order memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from Order.\r\n     *\r\n     * @param obj The Order object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        Order calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from AdvancedOrder.\r\n     *\r\n     * @param obj The AdvancedOrder object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        AdvancedOrder memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from AdvancedOrder.\r\n     *\r\n     * @param obj The AdvancedOrder object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        AdvancedOrder calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from OrderStatus.\r\n     *\r\n     * @param obj The OrderStatus object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        OrderStatus memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from OrderStatus.\r\n     *\r\n     * @param obj The OrderStatus object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        OrderStatus calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from CriteriaResolver.\r\n     *\r\n     * @param obj The CriteriaResolver object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        CriteriaResolver memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from CriteriaResolver.\r\n     *\r\n     * @param obj The CriteriaResolver object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        CriteriaResolver calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from Fulfillment.\r\n     *\r\n     * @param obj The Fulfillment object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        Fulfillment memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from Fulfillment.\r\n     *\r\n     * @param obj The Fulfillment object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        Fulfillment calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from FulfillmentComponent.\r\n     *\r\n     * @param obj The FulfillmentComponent object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        FulfillmentComponent memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from FulfillmentComponent.\r\n     *\r\n     * @param obj The FulfillmentComponent object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        FulfillmentComponent calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from Execution.\r\n     *\r\n     * @param obj The Execution object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        Execution memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from Execution.\r\n     *\r\n     * @param obj The Execution object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        Execution calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a MemoryPointer from ZoneParameters.\r\n     *\r\n     * @param obj The ZoneParameters object.\r\n     *\r\n     * @return ptr The MemoryPointer.\r\n     */\r\n    function toMemoryPointer(\r\n        ZoneParameters memory obj\r\n    ) internal pure returns (MemoryPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Get a CalldataPointer from ZoneParameters.\r\n     *\r\n     * @param obj The ZoneParameters object.\r\n     *\r\n     * @return ptr The CalldataPointer.\r\n     */\r\n    function toCalldataPointer(\r\n        ZoneParameters calldata obj\r\n    ) internal pure returns (CalldataPointer ptr) {\r\n        assembly {\r\n            ptr := obj\r\n        }\r\n    }\r\n}\r\n\r\n// Dependency file: src/seaport/ConsiderationInterface.sol\r\n\r\n// pragma solidity ^0.8.13;\r\n\r\n// import {AdvancedOrder, BasicOrderParameters, CriteriaResolver, Execution, Fulfillment, FulfillmentComponent, Order, OrderComponents} from \"src/seaport/ConsiderationStructs.sol\";\r\n\r\n/**\r\n * @title ConsiderationInterface\r\n * @author 0age\r\n * @custom:version 1.5\r\n * @notice Consideration is a generalized native token/ERC20/ERC721/ERC1155\r\n *         marketplace. It minimizes external calls to the greatest extent\r\n *         possible and provides lightweight methods for common routes as well\r\n *         as more flexible methods for composing advanced orders.\r\n *\r\n * @dev ConsiderationInterface contains all external function interfaces for\r\n *      Consideration.\r\n */\r\ninterface ConsiderationInterface {\r\n    /**\r\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\r\n     *         the native token for the given chain) as consideration for the\r\n     *         order. An arbitrary number of \"additional recipients\" may also be\r\n     *         supplied which will each receive native tokens from the fulfiller\r\n     *         as consideration.\r\n     *\r\n     * @param parameters Additional information on the fulfilled order. Note\r\n     *                   that the offerer must first approve this contract (or\r\n     *                   their preferred conduit if indicated by the order) for\r\n     *                   their offered ERC721 token to be transferred.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillBasicOrder(\r\n        BasicOrderParameters calldata parameters\r\n    ) external payable returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Fulfill an order with an arbitrary number of items for offer and\r\n     *         consideration. Note that this function does not support\r\n     *         criteria-based orders or partial filling of orders (though\r\n     *         filling the remainder of a partially-filled order is supported).\r\n     *\r\n     * @param order               The order to fulfill. Note that both the\r\n     *                            offerer and the fulfiller must first approve\r\n     *                            this contract (or the corresponding conduit if\r\n     *                            indicated) to transfer any relevant tokens on\r\n     *                            their behalf and that contracts must implement\r\n     *                            `onERC1155Received` to receive ERC1155 tokens\r\n     *                            as consideration.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Consideration.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillOrder(\r\n        Order calldata order,\r\n        bytes32 fulfillerConduitKey\r\n    ) external payable returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Fill an order, fully or partially, with an arbitrary number of\r\n     *         items for offer and consideration alongside criteria resolvers\r\n     *         containing specific token identifiers and associated proofs.\r\n     *\r\n     * @param advancedOrder       The order to fulfill along with the fraction\r\n     *                            of the order to attempt to fill. Note that\r\n     *                            both the offerer and the fulfiller must first\r\n     *                            approve this contract (or their preferred\r\n     *                            conduit if indicated by the order) to transfer\r\n     *                            any relevant tokens on their behalf and that\r\n     *                            contracts must implement `onERC1155Received`\r\n     *                            to receive ERC1155 tokens as consideration.\r\n     *                            Also note that all offer and consideration\r\n     *                            components must have no remainder after\r\n     *                            multiplication of the respective amount with\r\n     *                            the supplied fraction for the partial fill to\r\n     *                            be considered valid.\r\n     * @param criteriaResolvers   An array where each element contains a\r\n     *                            reference to a specific offer or\r\n     *                            consideration, a token identifier, and a proof\r\n     *                            that the supplied token identifier is\r\n     *                            contained in the merkle root held by the item\r\n     *                            in question's criteria element. Note that an\r\n     *                            empty criteria indicates that any\r\n     *                            (transferable) token identifier on the token\r\n     *                            in question is valid and that no associated\r\n     *                            proof needs to be supplied.\r\n     * @param fulfillerConduitKey A bytes32 value indicating what conduit, if\r\n     *                            any, to source the fulfiller's token approvals\r\n     *                            from. The zero hash signifies that no conduit\r\n     *                            should be used, with direct approvals set on\r\n     *                            Consideration.\r\n     * @param recipient           The intended recipient for all received items,\r\n     *                            with `address(0)` indicating that the caller\r\n     *                            should receive the items.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillAdvancedOrder(\r\n        AdvancedOrder calldata advancedOrder,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient\r\n    ) external payable returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, each with an arbitrary number\r\n     *         of items for offer and consideration. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *         Note that this function does not support criteria-based orders or\r\n     *         partial filling of orders (though filling the remainder of a\r\n     *         partially-filled order is supported).\r\n     *\r\n     * @param orders                    The orders to fulfill. Note that both\r\n     *                                  the offerer and the fulfiller must first\r\n     *                                  approve this contract (or the\r\n     *                                  corresponding conduit if indicated) to\r\n     *                                  transfer any relevant tokens on their\r\n     *                                  behalf and that contracts must implement\r\n     *                                  `onERC1155Received` to receive ERC1155\r\n     *                                  tokens as consideration.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used, with\r\n     *                                  direct approvals set on this contract.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders. Note that unspent offer item amounts or\r\n     *                         native tokens will not be reflected as part of\r\n     *                         this array.\r\n     */\r\n    function fulfillAvailableOrders(\r\n        Order[] calldata orders,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        uint256 maximumFulfilled\r\n    )\r\n    external\r\n    payable\r\n    returns (bool[] memory availableOrders, Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Attempt to fill a group of orders, fully or partially, with an\r\n     *         arbitrary number of items for offer and consideration per order\r\n     *         alongside criteria resolvers containing specific token\r\n     *         identifiers and associated proofs. Any order that is not\r\n     *         currently active, has already been fully filled, or has been\r\n     *         cancelled will be omitted. Remaining offer and consideration\r\n     *         items will then be aggregated where possible as indicated by the\r\n     *         supplied offer and consideration component arrays and aggregated\r\n     *         items will be transferred to the fulfiller or to each intended\r\n     *         recipient, respectively. Note that a failing item transfer or an\r\n     *         issue with order formatting will cause the entire batch to fail.\r\n     *\r\n     * @param advancedOrders            The orders to fulfill along with the\r\n     *                                  fraction of those orders to attempt to\r\n     *                                  fill. Note that both the offerer and the\r\n     *                                  fulfiller must first approve this\r\n     *                                  contract (or their preferred conduit if\r\n     *                                  indicated by the order) to transfer any\r\n     *                                  relevant tokens on their behalf and that\r\n     *                                  contracts must implement\r\n     *                                  `onERC1155Received` to enable receipt of\r\n     *                                  ERC1155 tokens as consideration. Also\r\n     *                                  note that all offer and consideration\r\n     *                                  components must have no remainder after\r\n     *                                  multiplication of the respective amount\r\n     *                                  with the supplied fraction for an\r\n     *                                  order's partial fill amount to be\r\n     *                                  considered valid.\r\n     * @param criteriaResolvers         An array where each element contains a\r\n     *                                  reference to a specific offer or\r\n     *                                  consideration, a token identifier, and a\r\n     *                                  proof that the supplied token identifier\r\n     *                                  is contained in the merkle root held by\r\n     *                                  the item in question's criteria element.\r\n     *                                  Note that an empty criteria indicates\r\n     *                                  that any (transferable) token\r\n     *                                  identifier on the token in question is\r\n     *                                  valid and that no associated proof needs\r\n     *                                  to be supplied.\r\n     * @param offerFulfillments         An array of FulfillmentComponent arrays\r\n     *                                  indicating which offer items to attempt\r\n     *                                  to aggregate when preparing executions.\r\n     * @param considerationFulfillments An array of FulfillmentComponent arrays\r\n     *                                  indicating which consideration items to\r\n     *                                  attempt to aggregate when preparing\r\n     *                                  executions.\r\n     * @param fulfillerConduitKey       A bytes32 value indicating what conduit,\r\n     *                                  if any, to source the fulfiller's token\r\n     *                                  approvals from. The zero hash signifies\r\n     *                                  that no conduit should be used, with\r\n     *                                  direct approvals set on this contract.\r\n     * @param recipient                 The intended recipient for all received\r\n     *                                  items, with `address(0)` indicating that\r\n     *                                  the caller should receive the items.\r\n     * @param maximumFulfilled          The maximum number of orders to fulfill.\r\n     *\r\n     * @return availableOrders An array of booleans indicating if each order\r\n     *                         with an index corresponding to the index of the\r\n     *                         returned boolean was fulfillable or not.\r\n     * @return executions      An array of elements indicating the sequence of\r\n     *                         transfers performed as part of matching the given\r\n     *                         orders. Note that unspent offer item amounts or\r\n     *                         native tokens will not be reflected as part of\r\n     *                         this array.\r\n     */\r\n    function fulfillAvailableAdvancedOrders(\r\n        AdvancedOrder[] calldata advancedOrders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        FulfillmentComponent[][] calldata offerFulfillments,\r\n        FulfillmentComponent[][] calldata considerationFulfillments,\r\n        bytes32 fulfillerConduitKey,\r\n        address recipient,\r\n        uint256 maximumFulfilled\r\n    )\r\n    external\r\n    payable\r\n    returns (bool[] memory availableOrders, Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of orders, each with an arbitrary\r\n     *         number of items for offer and consideration along with a set of\r\n     *         fulfillments allocating offer components to consideration\r\n     *         components. Note that this function does not support\r\n     *         criteria-based or partial filling of orders (though filling the\r\n     *         remainder of a partially-filled order is supported). Any unspent\r\n     *         offer item amounts or native tokens will be transferred to the\r\n     *         caller.\r\n     *\r\n     * @param orders       The orders to match. Note that both the offerer and\r\n     *                     fulfiller on each order must first approve this\r\n     *                     contract (or their conduit if indicated by the order)\r\n     *                     to transfer any relevant tokens on their behalf and\r\n     *                     each consideration recipient must implement\r\n     *                     `onERC1155Received` to enable ERC1155 token receipt.\r\n     * @param fulfillments An array of elements allocating offer components to\r\n     *                     consideration components. Note that each\r\n     *                     consideration component must be fully met for the\r\n     *                     match operation to be valid.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders. Note that unspent offer item amounts or\r\n     *                    native tokens will not be reflected as part of this\r\n     *                    array.\r\n     */\r\n    function matchOrders(\r\n        Order[] calldata orders,\r\n        Fulfillment[] calldata fulfillments\r\n    ) external payable returns (Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Match an arbitrary number of full or partial orders, each with an\r\n     *         arbitrary number of items for offer and consideration, supplying\r\n     *         criteria resolvers containing specific token identifiers and\r\n     *         associated proofs as well as fulfillments allocating offer\r\n     *         components to consideration components. Any unspent offer item\r\n     *         amounts will be transferred to the designated recipient (with the\r\n     *         null address signifying to use the caller) and any unspent native\r\n     *         tokens will be returned to the caller.\r\n     *\r\n     * @param orders            The advanced orders to match. Note that both the\r\n     *                          offerer and fulfiller on each order must first\r\n     *                          approve this contract (or a preferred conduit if\r\n     *                          indicated by the order) to transfer any relevant\r\n     *                          tokens on their behalf and each consideration\r\n     *                          recipient must implement `onERC1155Received` in\r\n     *                          order to receive ERC1155 tokens. Also note that\r\n     *                          the offer and consideration components for each\r\n     *                          order must have no remainder after multiplying\r\n     *                          the respective amount with the supplied fraction\r\n     *                          in order for the group of partial fills to be\r\n     *                          considered valid.\r\n     * @param criteriaResolvers An array where each element contains a reference\r\n     *                          to a specific order as well as that order's\r\n     *                          offer or consideration, a token identifier, and\r\n     *                          a proof that the supplied token identifier is\r\n     *                          contained in the order's merkle root. Note that\r\n     *                          an empty root indicates that any (transferable)\r\n     *                          token identifier is valid and that no associated\r\n     *                          proof needs to be supplied.\r\n     * @param fulfillments      An array of elements allocating offer components\r\n     *                          to consideration components. Note that each\r\n     *                          consideration component must be fully met in\r\n     *                          order for the match operation to be valid.\r\n     * @param recipient         The intended recipient for all unspent offer\r\n     *                          item amounts, or the caller if the null address\r\n     *                          is supplied.\r\n     *\r\n     * @return executions An array of elements indicating the sequence of\r\n     *                    transfers performed as part of matching the given\r\n     *                    orders. Note that unspent offer item amounts or native\r\n     *                    tokens will not be reflected as part of this array.\r\n     */\r\n    function matchAdvancedOrders(\r\n        AdvancedOrder[] calldata orders,\r\n        CriteriaResolver[] calldata criteriaResolvers,\r\n        Fulfillment[] calldata fulfillments,\r\n        address recipient\r\n    ) external payable returns (Execution[] memory executions);\r\n\r\n    /**\r\n     * @notice Cancel an arbitrary number of orders. Note that only the offerer\r\n     *         or the zone of a given order may cancel it. Callers should ensure\r\n     *         that the intended order was cancelled by calling `getOrderStatus`\r\n     *         and confirming that `isCancelled` returns `true`.\r\n     *\r\n     * @param orders The orders to cancel.\r\n     *\r\n     * @return cancelled A boolean indicating whether the supplied orders have\r\n     *                   been successfully cancelled.\r\n     */\r\n    function cancel(\r\n        OrderComponents[] calldata orders\r\n    ) external returns (bool cancelled);\r\n\r\n    /**\r\n     * @notice Validate an arbitrary number of orders, thereby registering their\r\n     *         signatures as valid and allowing the fulfiller to skip signature\r\n     *         verification on fulfillment. Note that validated orders may still\r\n     *         be unfulfillable due to invalid item amounts or other factors;\r\n     *         callers should determine whether validated orders are fulfillable\r\n     *         by simulating the fulfillment call prior to execution. Also note\r\n     *         that anyone can validate a signed order, but only the offerer can\r\n     *         validate an order without supplying a signature.\r\n     *\r\n     * @param orders The orders to validate.\r\n     *\r\n     * @return validated A boolean indicating whether the supplied orders have\r\n     *                   been successfully validated.\r\n     */\r\n    function validate(\r\n        Order[] calldata orders\r\n    ) external returns (bool validated);\r\n\r\n    /**\r\n     * @notice Cancel all orders from a given offerer with a given zone in bulk\r\n     *         by incrementing a counter. Note that only the offerer may\r\n     *         increment the counter.\r\n     *\r\n     * @return newCounter The new counter.\r\n     */\r\n    function incrementCounter() external returns (uint256 newCounter);\r\n\r\n    /**\r\n     * @notice Fulfill an order offering an ERC721 token by supplying Ether (or\r\n     *         the native token for the given chain) as consideration for the\r\n     *         order. An arbitrary number of \"additional recipients\" may also be\r\n     *         supplied which will each receive native tokens from the fulfiller\r\n     *         as consideration. Note that this function costs less gas than\r\n     *         `fulfillBasicOrder` due to the zero bytes in the function\r\n     *         selector (0x00000000) which also results in earlier function\r\n     *         dispatch.\r\n     *\r\n     * @param parameters Additional information on the fulfilled order. Note\r\n     *                   that the offerer must first approve this contract (or\r\n     *                   their preferred conduit if indicated by the order) for\r\n     *                   their offered ERC721 token to be transferred.\r\n     *\r\n     * @return fulfilled A boolean indicating whether the order has been\r\n     *                   successfully fulfilled.\r\n     */\r\n    function fulfillBasicOrder_efficient_6GL6yc(\r\n        BasicOrderParameters calldata parameters\r\n    ) external payable returns (bool fulfilled);\r\n\r\n    /**\r\n     * @notice Retrieve the order hash for a given order.\r\n     *\r\n     * @param order The components of the order.\r\n     *\r\n     * @return orderHash The order hash.\r\n     */\r\n    function getOrderHash(\r\n        OrderComponents calldata order\r\n    ) external view returns (bytes32 orderHash);\r\n\r\n    /**\r\n     * @notice Retrieve the status of a given order by hash, including whether\r\n     *         the order has been cancelled or validated and the fraction of the\r\n     *         order that has been filled.\r\n     *\r\n     * @param orderHash The order hash in question.\r\n     *\r\n     * @return isValidated A boolean indicating whether the order in question\r\n     *                     has been validated (i.e. previously approved or\r\n     *                     partially filled).\r\n     * @return isCancelled A boolean indicating whether the order in question\r\n     *                     has been cancelled.\r\n     * @return totalFilled The total portion of the order that has been filled\r\n     *                     (i.e. the \"numerator\").\r\n     * @return totalSize   The total size of the order that is either filled or\r\n     *                     unfilled (i.e. the \"denominator\").\r\n     */\r\n    function getOrderStatus(\r\n        bytes32 orderHash\r\n    )\r\n    external\r\n    view\r\n    returns (\r\n        bool isValidated,\r\n        bool isCancelled,\r\n        uint256 totalFilled,\r\n        uint256 totalSize\r\n    );\r\n\r\n    /**\r\n     * @notice Retrieve the current counter for a given offerer.\r\n     *\r\n     * @param offerer The offerer in question.\r\n     *\r\n     * @return counter The current counter.\r\n     */\r\n    function getCounter(\r\n        address offerer\r\n    ) external view returns (uint256 counter);\r\n\r\n    /**\r\n     * @notice Retrieve configuration information for this contract.\r\n     *\r\n     * @return version           The contract version.\r\n     * @return domainSeparator   The domain separator for this contract.\r\n     * @return conduitController The conduit Controller set for this contract.\r\n     */\r\n    function information()\r\n    external\r\n    view\r\n    returns (\r\n        string memory version,\r\n        bytes32 domainSeparator,\r\n        address conduitController\r\n    );\r\n\r\n    function getContractOffererNonce(\r\n        address contractOfferer\r\n    ) external view returns (uint256 nonce);\r\n\r\n    /**\r\n     * @notice Retrieve the name of this contract.\r\n     *\r\n     * @return contractName The name of this contract.\r\n     */\r\n    function name() external view returns (string memory contractName);\r\n}\r\n\r\n// Dependency file: src/nftfi/LoanData.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n/**\r\n * @title  LoanData\r\n * @author NFTfi\r\n * @notice An interface containing the main Loan struct shared by Direct Loans types.\r\n */\r\ninterface LoanData {\r\n    /* ********** */\r\n    /* DATA TYPES */\r\n    /* ********** */\r\n\r\n    /**\r\n     * @notice The main Loan Terms struct. This data is saved upon loan creation.\r\n     *\r\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\r\n     * for this loan.\r\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\r\n     * the loan, measured in loanERC20Denomination's smallest units.\r\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\r\n     * collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always have\r\n     * to pay this amount to retrieve their collateral, regardless of whether they repay early.\r\n     * @param nftCollateralContract - The address of the the NFT collateral contract.\r\n     * @param nftCollateralWrapper - The NFTfi wrapper of the NFT collateral contract.\r\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\r\n     * loan. The NFT is stored within this contract during the duration of the loan.\r\n     * @param loanStartTime - The block.timestamp when the loan first began (measured in seconds).\r\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\r\n     * the loan and seize the underlying collateral NFT.\r\n     * @param loanInterestRateForDurationInBasisPoints - This is the interest rate (measured in basis points, e.g.\r\n     * hundredths of a percent) for the loan, that must be repaid pro-rata by the borrower at the conclusion of the loan\r\n     * or risk seizure of their nft collateral. Note if the type of the loan is fixed then this value  is not used and\r\n     * is irrelevant so it should be set to 0.\r\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\r\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\r\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\r\n     * earned.\r\n     * @param borrower\r\n     */\r\n    struct LoanTerms {\r\n        uint256 loanPrincipalAmount;\r\n        uint256 maximumRepaymentAmount;\r\n        uint256 nftCollateralId;\r\n        address loanERC20Denomination;\r\n        uint32 loanDuration;\r\n        uint16 loanInterestRateForDurationInBasisPoints;\r\n        uint16 loanAdminFeeInBasisPoints;\r\n        address nftCollateralWrapper;\r\n        uint64 loanStartTime;\r\n        address nftCollateralContract;\r\n        address borrower;\r\n    }\r\n\r\n    /**\r\n     * @notice Some extra Loan's settings struct. This data is saved upon loan creation.\r\n     * We need this to avoid stack too deep errors.\r\n     *\r\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\r\n     * @param revenueShareInBasisPoints - The percent (measured in basis points) of the admin fee amount that will be\r\n     * taken as a revenue share for a t\r\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\r\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.he partner, at the moment\r\n     * the loan is begun.\r\n     */\r\n    struct LoanExtras {\r\n        address revenueSharePartner;\r\n        uint16 revenueShareInBasisPoints;\r\n        uint16 referralFeeInBasisPoints;\r\n    }\r\n\r\n    /**\r\n     * @notice The offer made by the lender. Used as parameter on both acceptOffer (initiated by the borrower)\r\n     *\r\n     * @param loanERC20Denomination - The address of the ERC20 contract of the currency being used as principal/interest\r\n     * for this loan.\r\n     * @param loanPrincipalAmount - The original sum of money transferred from lender to borrower at the beginning of\r\n     * the loan, measured in loanERC20Denomination's smallest units.\r\n     * @param maximumRepaymentAmount - The maximum amount of money that the borrower would be required to retrieve their\r\n     *  collateral, measured in the smallest units of the ERC20 currency used for the loan. The borrower will always\r\n     * have to pay this amount to retrieve their collateral, regardless of whether they repay early.\r\n     * @param nftCollateralContract - The address of the ERC721 contract of the NFT collateral.\r\n     * @param nftCollateralId - The ID within the NFTCollateralContract for the NFT being used as collateral for this\r\n     * loan. The NFT is stored within this contract during the duration of the loan.\r\n     * @param referrer - The address of the referrer who found the lender matching the listing, Zero address to signal\r\n     * this there is no referrer.\r\n     * @param loanDuration - The amount of time (measured in seconds) that can elapse before the lender can liquidate\r\n     * the loan and seize the underlying collateral NFT.\r\n     * @param loanAdminFeeInBasisPoints - The percent (measured in basis points) of the interest earned that will be\r\n     * taken as a fee by the contract admins when the loan is repaid. The fee is stored in the loan struct to prevent an\r\n     * attack where the contract admins could adjust the fee right before a loan is repaid, and take all of the interest\r\n     * earned.\r\n     */\r\n    struct Offer {\r\n        uint256 loanPrincipalAmount;\r\n        uint256 maximumRepaymentAmount;\r\n        uint256 nftCollateralId;\r\n        address nftCollateralContract;\r\n        uint32 loanDuration;\r\n        uint16 loanAdminFeeInBasisPoints;\r\n        address loanERC20Denomination;\r\n        address referrer;\r\n    }\r\n\r\n    /**\r\n     * @notice Signature related params. Used as parameter on both acceptOffer (containing borrower signature)\r\n     *\r\n     * @param signer - The address of the signer. The borrower for `acceptOffer`\r\n     * @param nonce - The nonce referred here is not the same as an Ethereum account's nonce.\r\n     * We are referring instead to a nonce that is used by the lender or the borrower when they are first signing\r\n     * off-chain NFTfi orders. These nonce can be any uint256 value that the user has not previously used to sign an\r\n     * off-chain order. Each nonce can be used at most once per user within NFTfi, regardless of whether they are the\r\n     * lender or the borrower in that situation. This serves two purposes:\r\n     * - First, it prevents replay attacks where an attacker would submit a user's off-chain order more than once.\r\n     * - Second, it allows a user to cancel an off-chain order by calling NFTfi.cancelLoanCommitmentBeforeLoanHasBegun()\r\n     * , which marks the nonce as used and prevents any future loan from using the user's off-chain order that contains\r\n     * that nonce.\r\n     * @param expiry - Date when the signature expires\r\n     * @param signature - The ECDSA signature of the borrower or the lender, obtained off-chain ahead of time, signing\r\n     * the following combination of parameters:\r\n     * - Lender:\r\n     *   - Offer.loanERC20Denomination\r\n     *   - Offer.loanPrincipalAmount\r\n     *   - Offer.maximumRepaymentAmount\r\n     *   - Offer.nftCollateralContract\r\n     *   - Offer.nftCollateralId\r\n     *   - Offer.referrer\r\n     *   - Offer.loanDuration\r\n     *   - Offer.loanAdminFeeInBasisPoints\r\n     *   - Signature.signer,\r\n     *   - Signature.nonce,\r\n     *   - Signature.expiry,\r\n     *   - address of the loan type contract\r\n     *   - chainId\r\n     */\r\n    struct Signature {\r\n        uint256 nonce;\r\n        uint256 expiry;\r\n        address signer;\r\n        bytes signature;\r\n    }\r\n\r\n    /**\r\n     * inclusive min and max Id ranges for collection offers on collections,\r\n     * like ArtBlocks, where multiple collections are defined on one contract differentiated by id-ranges\r\n     */\r\n    struct CollectionIdRange {\r\n        uint256 minId;\r\n        uint256 maxId;\r\n    }\r\n\r\n    /**\r\n     * @notice Some extra parameters that the borrower needs to set when accepting an offer.\r\n     *\r\n     * @param revenueSharePartner - The address of the partner that will receive the revenue share.\r\n     * @param referralFeeInBasisPoints - The percent (measured in basis points) of the loan principal amount that will\r\n     * be taken as a fee to pay to the referrer, 0 if the lender is not paying referral fee.\r\n     */\r\n    struct BorrowerSettings {\r\n        address revenueSharePartner;\r\n        uint16 referralFeeInBasisPoints;\r\n    }\r\n}\r\n\r\n// Dependency file: src/nftfi/IDirectLoanBase.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n// import \"src/nftfi/LoanData.sol\";\r\n\r\ninterface IDirectLoanBase {\r\n    function hub() external view returns (address);\r\n\r\n    function maximumLoanDuration() external view returns (uint256);\r\n\r\n    function adminFeeInBasisPoints() external view returns (uint16);\r\n\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function LOAN_COORDINATOR() external view returns (bytes32);\r\n\r\n    function loanIdToLoan(uint32)\r\n    external\r\n    view\r\n    returns (\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        address,\r\n        uint32,\r\n        uint16,\r\n        uint16,\r\n        address,\r\n        uint64,\r\n        address,\r\n        address\r\n    );\r\n\r\n    function loanRepaidOrLiquidated(uint32) external view returns (bool);\r\n\r\n    function getWhetherNonceHasBeenUsedForUser(address _user, uint256 _nonce) external view returns (bool);\r\n\r\n    function mintObligationReceipt(uint32 _loanId) external;\r\n}\r\n\r\n// Dependency file: src/nftfi/INftfiDirectLoanFixedOffer.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n// import {IDirectLoanBase} from \"src/nftfi/IDirectLoanBase.sol\";\r\n\r\ninterface INftfiDirectLoanFixedOffer is IDirectLoanBase {\r\n\r\n    struct Offer {\r\n        uint256 loanPrincipalAmount;\r\n        uint256 maximumRepaymentAmount;\r\n        uint256 nftCollateralId;\r\n        address nftCollateralContract;\r\n        uint32 loanDuration;\r\n        uint16 loanAdminFeeInBasisPoints;\r\n        address loanERC20Denomination;\r\n        address referrer;\r\n    }\r\n\r\n    struct Signature {\r\n        uint256 nonce;\r\n        uint256 expiry;\r\n        address signer;\r\n        bytes signature;\r\n    }\r\n\r\n    struct BorrowerSettings {\r\n        address revenueSharePartner;\r\n        uint16 referralFeeInBasisPoints;\r\n    }\r\n\r\n    function acceptOffer(\r\n        Offer memory _offer,\r\n        Signature memory _signature,\r\n        BorrowerSettings memory _borrowerSettings\r\n    ) external returns (uint32);\r\n}\r\n\r\n\r\n// Dependency file: src/nftfi/IBuyWithNftfiLoan.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n// import {Order} from \"src/seaport/ConsiderationStructs.sol\";\r\n\r\n// import {INftfiDirectLoanFixedOffer} from \"src/nftfi/INftfiDirectLoanFixedOffer.sol\";\r\n\r\ninterface IBuyWithNftfiLoan {\r\n\r\n    function calculateFlashLoanInterest(\r\n        uint256 loanPrincipalAmount\r\n    ) external view returns (uint256);\r\n\r\n    function buyWithLoan(\r\n        address receiver,\r\n        Order calldata order,\r\n        INftfiDirectLoanFixedOffer.Offer calldata offer,\r\n        INftfiDirectLoanFixedOffer.Signature calldata signature,\r\n        INftfiDirectLoanFixedOffer.BorrowerSettings calldata borrowerSettings\r\n    ) external;\r\n}\r\n\r\n\r\n// Dependency file: src/nftfi/IDirectLoanCoordinator.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n/**\r\n * @title IDirectLoanCoordinator\r\n * @author NFTfi\r\n * @dev DirectLoanCoordinator interface.\r\n */\r\ninterface IDirectLoanCoordinator {\r\n    enum StatusType {\r\n        NOT_EXISTS,\r\n        NEW,\r\n        REPAID,\r\n        LIQUIDATED\r\n    }\r\n\r\n    /**\r\n     * @notice This struct contains data related to a loan\r\n     *\r\n     * @param smartNftId - The id of both the promissory note and obligation receipt.\r\n     * @param status - The status in which the loan currently is.\r\n     * @param loanContract - Address of the LoanType contract that created the loan.\r\n     */\r\n    struct Loan {\r\n        address loanContract;\r\n        uint64 smartNftId;\r\n        StatusType status;\r\n    }\r\n\r\n    function registerLoan(address _lender, bytes32 _loanType) external returns (uint32);\r\n\r\n    function resetSmartNfts(uint32 _loanId, address _borrower) external;\r\n\r\n    function mintObligationReceipt(uint32 _loanId, address _borrower) external;\r\n\r\n    function resolveLoan(uint32 _loanId, bool liquidated) external;\r\n\r\n    function promissoryNoteToken() external view returns (address);\r\n\r\n    function obligationReceiptToken() external view returns (address);\r\n\r\n    function getLoanData(uint32 _loanId) external view returns (Loan memory);\r\n\r\n    function isValidLoanId(uint32 _loanId, address _loanContract) external view returns (bool);\r\n}\r\n\r\n\r\n// Dependency file: src/nftfi/INftfiHub.sol\r\n\r\n// pragma solidity ^0.8.26;\r\n\r\n/**\r\n * @title INftfiHub\r\n * @author NFTfi\r\n * @dev NftfiHub interface\r\n */\r\ninterface INftfiHub {\r\n    function setContract(string calldata _contractKey, address _contractAddress) external;\r\n\r\n    function getContract(bytes32 _contractKey) external view returns (address);\r\n}\r\n\r\n// Root file: src/nftfi/BuyWithNftfiLoan.sol\r\n\r\npragma solidity ^0.8.26;\r\n\r\n// import {IERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\n// import {ERC165, IERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\r\n// import {IERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\r\n// import {IERC721Receiver} from \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\n// import {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\r\n// import {IERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\";\r\n// import {ERC1155Receiver} from \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\";\r\n// import {Strings} from  \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\n// import {Account, Actions, ISoloMargin} from \"src/dydx/ISoloMargin.sol\";\r\n// import {DydxFlashloanBase} from \"src/dydx/DydxFlashloanBase.sol\";\r\n// import {ICallee} from \"src/dydx/ICallee.sol\";\r\n// import {ConsiderationInterface} from \"src/seaport/ConsiderationInterface.sol\";\r\n// import {Order} from \"src/seaport/ConsiderationStructs.sol\";\r\n\r\n// import {IBuyWithNftfiLoan} from \"src/nftfi/IBuyWithNftfiLoan.sol\";\r\n// import {IDirectLoanCoordinator} from \"src/nftfi/IDirectLoanCoordinator.sol\";\r\n// import {INftfiDirectLoanFixedOffer} from \"src/nftfi/INftfiDirectLoanFixedOffer.sol\";\r\n// import {INftfiHub} from \"src/nftfi/INftfiHub.sol\";\r\n\r\ncontract BuyWithNftfiLoan is IBuyWithNftfiLoan, IERC165, ERC165, IERC721Receiver, ERC1155Receiver, ICallee, DydxFlashloanBase {\r\n\r\n    ISoloMargin public immutable DYDX_SOLO_MARGIN;\r\n    INftfiDirectLoanFixedOffer public immutable NFTFI_DIRECT_LOAN;\r\n    IDirectLoanCoordinator public immutable NFTFI_DIRECT_LOAN_COORDINATOR;\r\n    ConsiderationInterface public immutable SEAPORT;\r\n\r\n    mapping(address =\u003e bool) public tokenFlashloanable;\r\n    mapping(address =\u003e uint256) public marketIds;\r\n\r\n    struct CallParams {\r\n        address operator;\r\n        address receiver;\r\n        Order order;\r\n        INftfiDirectLoanFixedOffer.Offer offer;\r\n        INftfiDirectLoanFixedOffer.Signature signature;\r\n        INftfiDirectLoanFixedOffer.BorrowerSettings borrowerSettings;\r\n    }\r\n\r\n    constructor(\r\n        address dydxSoloMarginAddress,\r\n        address nftfiLoanAddress,\r\n        address seaportAddress\r\n    ) {\r\n        DYDX_SOLO_MARGIN = ISoloMargin(dydxSoloMarginAddress);\r\n        NFTFI_DIRECT_LOAN = INftfiDirectLoanFixedOffer(nftfiLoanAddress);\r\n        INftfiHub nftfiHub = INftfiHub(NFTFI_DIRECT_LOAN.hub());\r\n        NFTFI_DIRECT_LOAN_COORDINATOR = IDirectLoanCoordinator(nftfiHub.getContract(NFTFI_DIRECT_LOAN.LOAN_COORDINATOR()));\r\n        SEAPORT = ConsiderationInterface(seaportAddress);\r\n        for (uint256 i; i \u003c= 3; ++i) {\r\n            address tokenAddress = DYDX_SOLO_MARGIN.getMarketTokenAddress(i);\r\n            tokenFlashloanable[tokenAddress] = true;\r\n            marketIds[tokenAddress] = i;\r\n        }\r\n    }\r\n\r\n    function calculateFlashLoanInterest(\r\n        uint256 loanPrincipalAmount\r\n    ) public override pure returns (uint256) {\r\n        uint256 repaymentAmount = _getRepaymentAmountInternal(loanPrincipalAmount);\r\n        return repaymentAmount - loanPrincipalAmount;\r\n    }\r\n\r\n    function buyWithLoan(\r\n        address receiver,\r\n        Order calldata order,\r\n        INftfiDirectLoanFixedOffer.Offer calldata offer,\r\n        INftfiDirectLoanFixedOffer.Signature calldata signature,\r\n        INftfiDirectLoanFixedOffer.BorrowerSettings calldata borrowerSettings\r\n    ) external override {\r\n        require(order.parameters.offer.length == 1, \"Only single-token orders are supported by this contract\");\r\n        require(tokenFlashloanable[order.parameters.consideration[0].token], \"Consideration token not supported by flash-loan provider\");\r\n        uint256 totalConsideration = 0;\r\n        require(order.parameters.consideration.length \u003e= 1, \"At least one consideration must be present in the order\");\r\n        for (uint256 i = 0; i \u003c order.parameters.consideration.length; i++) {\r\n            require(offer.loanERC20Denomination == order.parameters.consideration[i].token, \"All order consideration token must match loan-offer denomination\");\r\n            require(order.parameters.consideration[i].startAmount == order.parameters.consideration[i].endAmount, \"ERC20 auctions are not supported by this contract\");\r\n            totalConsideration = totalConsideration + order.parameters.consideration[i].startAmount;\r\n        }\r\n        require(offer.nftCollateralContract == order.parameters.offer[0].token, \"Order offer token does not match loan-offer collateral token\");\r\n        uint256 flashLoanInterest = calculateFlashLoanInterest(offer.loanPrincipalAmount);\r\n        uint256 flashLoanRepayment = offer.loanPrincipalAmount + flashLoanInterest;\r\n        uint256 totalRequiredFromOperator = totalConsideration - offer.loanPrincipalAmount + flashLoanInterest;\r\n        IERC20 considerationToken = IERC20(order.parameters.consideration[0].token);\r\n        require(considerationToken.balanceOf(msg.sender) \u003e= totalRequiredFromOperator, \"Operator does not have sufficient consideration to make the down payment plus flash-loan fees\");\r\n        uint256 allowance = considerationToken.allowance(msg.sender, address(this));\r\n        require(\r\n            allowance \u003e= totalRequiredFromOperator,\r\n            string.concat(\"Operator has not approved sufficient ERC20 transfer to this contract to complete the purchase; allowance:\", Strings.toString(allowance))\r\n        );\r\n        // 1) Take out DyDx Flash Loan\r\n        uint256 marketId = marketIds[order.parameters.consideration[0].token];\r\n        Actions.ActionArgs[] memory actions = new Actions.ActionArgs[](3);\r\n        actions[0] = _getWithdrawAction(marketId, offer.loanPrincipalAmount);\r\n        actions[1] = _getCallAction(abi.encode(CallParams({\r\n            operator: msg.sender,\r\n            receiver: receiver,\r\n            order: order,\r\n            offer: offer,\r\n            signature: signature,\r\n            borrowerSettings: borrowerSettings\r\n        })));\r\n        actions[2] = _getDepositAction(marketId, flashLoanRepayment);\r\n        Account.Info[] memory accountInfos = new Account.Info[](1);\r\n        accountInfos[0] = _getAccountInfo();\r\n        DYDX_SOLO_MARGIN.operate(accountInfos, actions);\r\n        // Next steps are in callFunction()\r\n    }\r\n\r\n    function callFunction(\r\n        address sender,\r\n        Account.Info calldata accountInfo,\r\n        bytes calldata data\r\n    ) external override {\r\n        require(msg.sender == address(DYDX_SOLO_MARGIN), \"Only the dYdX SoloMargin contract can call this function\");\r\n        require(sender == address(this), \"Flash-loan initiator must be this contract\");\r\n        CallParams memory params = abi.decode(data, (CallParams));\r\n        require(params.offer.nftCollateralContract == params.order.parameters.offer[0].token, \"Order offer token does not match loan-offer collateral token\");\r\n        uint256 flashLoanInterest = calculateFlashLoanInterest(params.offer.loanPrincipalAmount);\r\n        uint256 totalConsideration = 0;\r\n        require(params.order.parameters.consideration.length \u003e= 1, \"At least one consideration must be present in the order\");\r\n        for (uint256 i = 0; i \u003c params.order.parameters.consideration.length; i++) {\r\n            totalConsideration = totalConsideration + params.order.parameters.consideration[i].startAmount;\r\n        }\r\n        uint256 totalRequiredFromOperator = totalConsideration - params.offer.loanPrincipalAmount + flashLoanInterest;\r\n        IERC20 considerationToken = IERC20(params.order.parameters.consideration[0].token);\r\n        require(considerationToken.balanceOf(params.operator) \u003e= totalRequiredFromOperator, \"Operator does not have sufficient consideration to make the down payment plus flash-loan fees\");\r\n        require(considerationToken.allowance(params.operator, address(this)) \u003e= totalRequiredFromOperator, \"Operator has not approved sufficient ERC20 transfer to this contract to complete the purchase\");\r\n        // 2) Take the down-payment plus flash-loan fee from the operator\r\n        if (!considerationToken.transferFrom(params.operator, address(this), totalRequiredFromOperator)) {\r\n            revert(\"Failed to transfer required funds from operator\");\r\n        }\r\n        // 3) Allow Seaport to transfer the required funds from this contract to complete the purchase\r\n        if (!considerationToken.approve(address(SEAPORT), totalConsideration)) {\r\n            revert(\"Failed to approve ERC20 transfer from this contract to Seaport\");\r\n        }\r\n        // 4) Buy the Fabrica token\r\n        if (!SEAPORT.fulfillOrder(params.order, 0)) {\r\n            revert(\"Seaport order failed to be fulfilled.\");\r\n        }\r\n        // 5) Take out the NFTfi loan\r\n        IERC1155(params.offer.nftCollateralContract).setApprovalForAll(address(NFTFI_DIRECT_LOAN), true);\r\n        uint32 loanId = NFTFI_DIRECT_LOAN.acceptOffer(\r\n            params.offer,\r\n            params.signature,\r\n            params.borrowerSettings\r\n        );\r\n        // 7) Mint the obligation receipt\r\n        NFTFI_DIRECT_LOAN.mintObligationReceipt(loanId);\r\n        // 8) Transfer the obligation receipt to the receiver\r\n        IDirectLoanCoordinator.Loan memory loan = NFTFI_DIRECT_LOAN_COORDINATOR.getLoanData(loanId);\r\n        IERC721(NFTFI_DIRECT_LOAN_COORDINATOR.obligationReceiptToken()).transferFrom(\r\n            address(this),\r\n            params.receiver,\r\n            loan.smartNftId\r\n        );\r\n        // 8) Approve repayment of the flash loan\r\n        uint256 flashLoanRepayment = params.offer.loanPrincipalAmount + flashLoanInterest;\r\n        considerationToken.approve(address(DYDX_SOLO_MARGIN), flashLoanRepayment);\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165, ERC1155Receiver) returns (bool) {\r\n        return\r\n            interfaceId == type(ICallee).interfaceId\r\n            || interfaceId == type(IERC721Receiver).interfaceId\r\n            || ERC1155Receiver.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) override external pure returns (bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n\r\n    function onERC1155Received(\r\n        address operator,\r\n        address from,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes calldata data\r\n    ) override(IERC1155Receiver) external pure returns (bytes4) {\r\n        return IERC1155Receiver.onERC1155Received.selector;\r\n    }\r\n\r\n    function onERC1155BatchReceived(\r\n        address operator,\r\n        address from,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata values,\r\n        bytes calldata data\r\n    ) override(IERC1155Receiver) external pure returns (bytes4) {\r\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dydxSoloMarginAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"nftfiLoanAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"seaportAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DYDX_SOLO_MARGIN\",\"outputs\":[{\"internalType\":\"contract ISoloMargin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTFI_DIRECT_LOAN\",\"outputs\":[{\"internalType\":\"contract INftfiDirectLoanFixedOffer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NFTFI_DIRECT_LOAN_COORDINATOR\",\"outputs\":[{\"internalType\":\"contract IDirectLoanCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SEAPORT\",\"outputs\":[{\"internalType\":\"contract ConsiderationInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zone\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct OfferItem[]\",\"name\":\"offer\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"enum ItemType\",\"name\":\"itemType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identifierOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ConsiderationItem[]\",\"name\":\"consideration\",\"type\":\"tuple[]\"},{\"internalType\":\"enum OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"zoneHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"conduitKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"totalOriginalConsiderationItems\",\"type\":\"uint256\"}],\"internalType\":\"struct OrderParameters\",\"name\":\"parameters\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Order\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maximumRepaymentAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftCollateralId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftCollateralContract\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"loanDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"loanAdminFeeInBasisPoints\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"loanERC20Denomination\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"internalType\":\"struct INftfiDirectLoanFixedOffer.Offer\",\"name\":\"offer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct INftfiDirectLoanFixedOffer.Signature\",\"name\":\"signature\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"revenueSharePartner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralFeeInBasisPoints\",\"type\":\"uint16\"}],\"internalType\":\"struct INftfiDirectLoanFixedOffer.BorrowerSettings\",\"name\":\"borrowerSettings\",\"type\":\"tuple\"}],\"name\":\"buyWithLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanPrincipalAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFlashLoanInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFlashloanable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "ContractName": "BuyWithNftfiLoan",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "1",
      "ConstructorArguments": "0000000000000000000000001e0447b19bb6ecfdae1e4ae1694b0c3659614e4e000000000000000000000000d0a40eb7fd94ee97102ba8e9342243a2b2e2220700000000000000000000000000000000000000adc04c56bf30ac9d3c0aaf14dc",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://52066ba53963ec3082165eedcff3117b413b9d1cd849184648a7055000f58f3c"
    }
  ]
}
