{
  "TxHash": "0xe5c1326778f50cc9a4235f2851ce81ade9d1d987c32af92b2f49d41042a196ef",
  "ContractAddress": "0x1a32492d43CABc9E90cBb3Bf062F87C42c540534",
  "Name": "Rebaser",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IPair {\r\n    function sync() external;\r\n}\r\n\r\ninterface ILuca {\r\n    function updateMilliThreshold(address _milliThreshold) external;\r\n    function updateExecutor(address _executor) external;\r\n    function rebaseByMilli(uint256 epoch, uint256 milli, bool positive) external returns (uint256);\r\n    function rebase(uint256 epoch, uint256 indexDelta, bool positive) external returns (uint256);\r\n}\r\n\r\nabstract contract Initializable {\r\n    /*\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /*\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /*\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Initializable{\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /*\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n     /*\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /*\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /*\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * onlyOwner functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /*\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n  /*\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract Rebaser is Initializable,Ownable{\r\n    ILuca public luca;\r\n    address[] pairs;\r\n    address public exector;\r\n    uint256 public milliThreshold;\r\n    mapping(uint256 =\u003e uint256) public epochSta;\r\n\r\n    event UpdateExecutor(address _executor);\r\n\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == exector, \"caller is not the executor\");\r\n        _;\r\n    }\r\n\r\n    function __Rebaser_init(address _luca, address[] memory _pairs) external initializer() {\r\n        __Ownable_init_unchained();\r\n        __Rebaser_init_unchained(_luca, _pairs);\r\n    }\r\n\r\n    function __Rebaser_init_unchained(address _luca, address[] memory _pairs) internal initializer() {\r\n        luca = ILuca(_luca);\r\n        pairs = _pairs;\r\n    }\r\n\r\n    function updateExecutor(address _executor) external onlyOwner{\r\n        exector = _executor;\r\n        emit UpdateExecutor(_executor);\r\n    }\r\n    function updateMilliThreshold(uint256 _milliThreshold) external onlyOwner{\r\n        milliThreshold = _milliThreshold;\r\n    }\r\n\r\n    function addPair(address _pair) external onlyOwner() {\r\n        pairs.push(_pair);\r\n    }\r\n\r\n    function rebaseByMilli(uint256 milli) external onlyExecutor() {\r\n        uint256 epoch = block.timestamp / 86400;\r\n        require(epochSta[epoch] == 0, \"rebaseByMilli error\");\r\n        if(milli \u003e milliThreshold){\r\n            milli = milliThreshold;\r\n        }\r\n        epochSta[epoch] = milli;\r\n        require(luca.rebaseByMilli(epoch, milli, false) \u003e 0, \"rebaseByMilli error\");\r\n        _sync();\r\n    }\r\n\r\n    function _sync() internal {\r\n        for(uint i=0; i\u003cpairs.length; i++ ){\r\n            IPair(pairs[i]).sync();\r\n        }\r\n    }\r\n\r\n    function getPairs() external view  returns (address[] memory)  {\r\n        address[] memory _pairs = new address[](pairs.length);\r\n        for(uint i=0; i\u003cpairs.length; i++ ){\r\n            _pairs[i] = pairs[i];\r\n        }\r\n        return _pairs;\r\n    }\r\n\r\n}",
      "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"UpdateExecutor\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luca\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pairs\",\"type\":\"address[]\"}],\"name\":\"__Rebaser_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochSta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luca\",\"outputs\":[{\"internalType\":\"contract ILuca\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"milliThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"milli\",\"type\":\"uint256\"}],\"name\":\"rebaseByMilli\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"updateExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_milliThreshold\",\"type\":\"uint256\"}],\"name\":\"updateMilliThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "Rebaser",
      "CompilerVersion": "v0.8.0+commit.c7dfd78e",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://9b9f6fb7003b955a3961a061d4bdd6d098b645c8a27c664c2ebdb5eea1413391"
    }
  ]
}
