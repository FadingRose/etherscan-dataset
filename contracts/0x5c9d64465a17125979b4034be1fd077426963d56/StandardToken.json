{
  "TxHash": "0x10a5c4f7f913b8a1c1c12778a25878ed9639a3dc5810eab8d148be4fd2a92695",
  "ContractAddress": "0x5c9d64465a17125979b4034be1fd077426963d56",
  "Name": "StandardToken",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "{\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n\\r\\n    //合约交互者，比如用户\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    //用户交互产生的data\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n    \\r\\n    //可能在子合约中被重写以提供不同的上下文后缀长度\\r\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    \\r\\n    //event 事件，告诉用户和开发者在合约交互中产生的日志\\r\\n\\r\\n    // 转账日志\\r\\n    // 当代币从一个地址转移到另一个地址时，会触发这个事件。\\r\\n    // 这允许外部应用（如钱包、交易所等）监听这些事件，\\r\\n    // 以便在代币转移时更新它们的用户界面或进行其他操作。\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    //授权或取消授权日志\\r\\n    //当某个地址授权另一个地址可以花费它的代币时，会触发这个事件。\\r\\n    //这允许应用跟踪授权情况，确保用户不会意外地授权过多的代币给不受信任的地址。\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    //总代币的发行量\\r\\n    //这个函数返回代币的总发行量。\\r\\n    //它是一个只读函数（由于view关键字），因此不会修改合约的状态\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    //用户的余额函数\\r\\n    //这个函数返回指定地址在代币合约中的余额。同样，它也是一个只读函数。\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    //用户的转账函数\\r\\n    //这个函数允许地址A将指定数量的代币转移到地址B。如果转移成功，它返回true；否则返回false。\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    //授权金额\\r\\n    //这个函数返回地址A授权地址B可以花费的代币数量。它也是一个只读函数。\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    //这个函数允许地址A授权地址B花费不超过指定数量的代币。如果授权成功，它返回true；否则返回false\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    //授权转账的函数\\r\\n    //这个函数允许地址A（通过调用此函数）使用地址B的授权，将指定数量的代币从地址B转移到地址C。\\r\\n    //这通常用于实现如交易所这样的第三方服务，这些服务需要能够代表用户转移代币。如果转移成功，它返回true；否则返回false。\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    \\r\\n    \\r\\n    //代币的名称（全称）\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    //代币的简称\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    //代币的小数点\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"StandardToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n//指定solidy编译器版本，版本标识符\\r\\npragma solidity ^0.8.20;\\r\\n \\r\\n\\r\\n import \\\"./IERC20.sol\\\";\\r\\n import \\\"./IERC20Metadata.sol\\\";\\r\\n import \\\"./Context.sol\\\";\\r\\n\\r\\n\\r\\n//关键字 contract 跟java的class一样  智能合约名称是standardToken\\r\\ncontract StandardToken is Context,IERC20,IERC20Metadata {\\r\\n\\r\\n    //代币的余额、授权金额、代币的总发行量\\r\\n    mapping (address =\\u003e uint256) private _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) private _allowances;\\r\\n    uint256 private _totalSupply;\\r\\n    \\r\\n    //元数据，代币的名称、简称、小数点\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8  private _decimals;\\r\\n\\r\\n    //构造函数\\r\\n    constructor(string memory name_,string memory symbol_){\\r\\n        _name=name_;\\r\\n        _symbol=symbol_;\\r\\n    }\\r\\n\\r\\n    //返回代币的名称\\r\\n    function name() public view virtual override returns (string memory){\\r\\n        return _name;\\r\\n    }\\r\\n    \\r\\n    //返回代币的简称\\r\\n    function symbol() public view virtual override returns (string memory){\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    //返回代币的小数点，这里是写死的18位\\r\\n    function decimals() public view virtual override returns (uint8){\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    //返回代币的总发行量\\r\\n    function totalSupply() public view virtual override returns (uint256){\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    //输入账户地址，查询代币的余额\\r\\n    function balanceOf(address account) public view virtual override returns (uint256){\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    //转账给指定账户地址指定金额，转账成功返回true\\r\\n    function transfer(address to,uint256 amount) public  virtual override returns (bool){\\r\\n        address owner=_msgSender();\\r\\n        _transfer(owner,to,amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    //查询用户（或合约）A授权了多少token给b用户（或合约）\\r\\n    function allowance(address owner,address spender) public view virtual override returns (uint256){\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    //授权 用户（或合约）A授权给b用户（或合约）多少token，最大值nint(-1)\\r\\n    function approve(address spender,uint256 amount) public  virtual override returns (bool){\\r\\n        address owner=_msgSender();\\r\\n        _approve(owner,spender,amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //授权使用的转账（一般用于第三方，例如dex流动池）\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    )public virtual override returns (bool){\\r\\n        address spender=_msgSender();\\r\\n        _spendAllowance(from,spender,amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //增加授权\\r\\n    function increaseAllowance(address spender,uint256 addedValue)public virtual  returns (bool){\\r\\n        address owner=_msgSender();\\r\\n        uint256 currentAllowance=allowance(owner, spender);\\r\\n        uint256 newAllowance=currentAllowance+addedValue;\\r\\n        _approve(owner,spender,newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    //减少授权de\\r\\n    function decreaseAllowance(address spender,uint256 subtractedValue)public virtual  returns (bool){\\r\\n        address owner=_msgSender();\\r\\n        uint256 currentAllowance=allowance(owner, spender);\\r\\n        require(currentAllowance\\u003e=subtractedValue,\\\"ERC20:decreased allowance below zero\\\");\\r\\n        _approve(owner,spender,currentAllowance-subtractedValue);\\r\\n        \\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    //内部转账函数，包含了必要的检查\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    )internal virtual {\\r\\n        // 检查发送方和接收方地址是否为0地址\\r\\n        require(from != address(0),\\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0),\\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from,to,amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n\\r\\n        //检查发送方余额是否足够\\r\\n        require(fromBalance \\u003e= amount,\\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked{\\r\\n            _balances[from]=fromBalance-amount;\\r\\n            _balances[to]+=amount;\\r\\n        }\\r\\n        emit Transfer(from,to,amount);\\r\\n        _afterTokenTransfer(from,to,amount);\\r\\n\\r\\n    }\\r\\n\\r\\n    //mint 基本只操作一次（发币时），铸造多少token，并将token转入某个account\\r\\n    function _mint(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )internal virtual {\\r\\n        require(account !=address(0),\\\"ERC20: mint to the zero address\\\");\\r\\n        _beforeTokenTransfer(address(0),account,amount);\\r\\n        _totalSupply +=amount;\\r\\n        unchecked{\\r\\n            _balances[account]+=amount;\\r\\n        }\\r\\n        emit Transfer(address(0),account,amount);\\r\\n        _afterTokenTransfer(address(0),account,amount);\\r\\n    }\\r\\n\\r\\n\\r\\n    //销毁 某个账户多少余额清零，总代币量也相应减少\\r\\n    function _burn(\\r\\n        address account,\\r\\n        uint256 amount\\r\\n    )internal virtual {\\r\\n        require(account !=address(0),\\\"ERC20: burn from the zero address\\\");\\r\\n        _beforeTokenTransfer(account,address(0),amount);\\r\\n        uint256 accountBalance=_balances[account];\\r\\n        require(accountBalance\\u003e=amount,\\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked{\\r\\n            _balances[account]=accountBalance-amount;\\r\\n            _totalSupply-=amount;\\r\\n        }\\r\\n        emit Transfer(account,address(0),amount);\\r\\n        _afterTokenTransfer(account,address(0),amount);\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    //私有函数，执行批准操作并更新允许额度\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    )internal virtual {\\r\\n        require(owner != address(0),\\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0),\\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender]=amount;\\r\\n        emit Approval(owner,spender,amount);\\r\\n    }\\r\\n\\r\\n    //检查当前授权额度是否足够用于给定的转账金额\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    )internal virtual {\\r\\n        uint256 currentAllowance=allowance(owner,spender);\\r\\n        if (currentAllowance != type(uint256).max \\u0026\\u0026 currentAllowance \\u003c amount) {\\r\\n        revert(\\\"ERC20: insufficient allowance\\\");\\r\\n    }\\r\\n    }\\r\\n\\r\\n    //\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    )internal virtual {}\\r\\n\\r\\n    //\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    )internal virtual {}\\r\\n}\\r\\n\"}}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "StandardToken",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a5955414e20546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045955414e00000000000000000000000000000000000000000000000000000000",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://7e543d5c1de2342a46b51bfe46fd0fd729cc16800cdae32ad522b133c3e56f8b"
    }
  ]
}
