{
  "TxHash": "0x6c8e61865a19c2ea97835f4f4e015917991800cca199a52928d193f9d2ea6dca",
  "ContractAddress": "0x224531f8130A7F639444E17e1D43966dB1dEa431",
  "Name": "DividendTokenWithAntibot",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.1;\r\n\r\nlibrary Address {\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20Permit {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n    function nonces(address owner) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success \u0026\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026 Address.isContract(address(token));\r\n    }\r\n}\r\n\r\nlibrary Clones {\r\n    function clone(address implementation) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create(0, 0x09, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create2(0, 0x09, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt,\r\n        address deployer\r\n    ) internal pure returns (address predicted) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(add(ptr, 0x38), deployer)\r\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\r\n            mstore(add(ptr, 0x14), implementation)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\r\n            mstore(add(ptr, 0x58), salt)\r\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\r\n            predicted := keccak256(add(ptr, 0x43), 0x55)\r\n        }\r\n    }\r\n    function predictDeterministicAddress(\r\n        address implementation,\r\n        bytes32 salt\r\n    ) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\npragma solidity \u003e=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n}\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\npragma solidity \u003e=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountETH);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactETH(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForETH(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapETHForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\npragma solidity 0.8.19;\r\n\r\ninterface IUniswapV2Caller {\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        address router,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\ninterface IFee {\r\n    function payFee(\r\n        uint256 _tokenType,\r\n        address creator,\r\n        bool isAntibot,\r\n        address referrer\r\n    ) external payable;\r\n}\r\ninterface IGemAntiBot {\r\n    function setTokenOwner(address owner) external;\r\n\r\n    function onPreTransferCheck(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\ninterface DividendTokenDividendTrackerInterface {\r\n    function initialize(\r\n        address rewardToken_,\r\n        uint256 minimumTokenBalanceForDividends_\r\n    ) external;\r\n    function excludeFromDividends(address account) external;\r\n    function isExcludedFromDividends(address account)\r\n        external\r\n        view\r\n        returns (bool);\r\n    function owner() external view returns (address);\r\n    function updateClaimWait(uint256 newClaimWait) external;\r\n    function claimWait() external view returns (uint256);\r\n    function updateMinimumTokenBalanceForDividends(uint256 amount)\r\n        external;\r\n    function minimumTokenBalanceForDividends() external view returns (uint256);\r\n    function totalDividendsDistributed() external view returns (uint256);\r\n    function withdrawableDividendOf(address _owner)\r\n        external\r\n        view\r\n        returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function getAccount(address _account)\r\n        external\r\n        view\r\n        returns (\r\n            address account,\r\n            int256 index,\r\n            int256 iterationsUntilProcessed,\r\n            uint256 withdrawableDividends,\r\n            uint256 totalDividends,\r\n            uint256 lastClaimTime,\r\n            uint256 nextClaimTime,\r\n            uint256 secondsUntilAutoClaimAvailable\r\n        );\r\n    function getAccountAtIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n    function process(uint256 gas)\r\n        external\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        );\r\n    function processAccount(address payable account, bool automatic)\r\n        external\r\n        returns (bool);\r\n    function getLastProcessedIndex() external view returns (uint256);\r\n    function getNumberOfTokenHolders() external view returns (uint256);\r\n    function setBalance(address payable account, uint256 newBalance)\r\n        external;\r\n    function distributeCAKEDividends(uint256 amount) external;\r\n}\r\ncontract DividendTokenWithAntibot is ERC20, Ownable {\r\n    using SafeERC20 for IERC20;\r\n    struct Args {\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;\r\n        uint256 totalSupply;\r\n        uint256 maxWallet;\r\n        uint256 maxTransactionAmount;\r\n        address rewardToken;\r\n        address mainRouter;\r\n        address marketingWallet;\r\n        address dividendTracker;\r\n        address baseTokenForMarket;        \r\n        uint24 sellLiquidityFee;\r\n        uint24 buyLiquidityFee;\r\n        uint24 sellMarketingFee;\r\n        uint24 buyMarketingFee;\r\n        uint24 sellRewardFee;\r\n        uint24 buyRewardFee;\r\n        uint256 minimumTokenBalanceForDividends;\r\n        address tokenForMarketingFee;\r\n        address feeContract;\r\n        address uniswapV2Caller;\r\n    }\r\n    uint256 private constant MAX = ~uint256(0);\r\n    IUniswapV2Caller public uniswapV2Caller;\r\n\r\n    address public tokenForMarketingFee;\r\n    uint8 private _decimals;\r\n    address public baseTokenForMarket;\r\n    address public mainRouter;\r\n    address public mainPair;\r\n\r\n    bool private swapping;\r\n\r\n    address public dividendTracker;\r\n\r\n    address public rewardToken;\r\n\r\n    uint256 public swapTokensAtAmount;\r\n\r\n    uint24 public sellRewardFee;\r\n    uint24 public buyRewardFee;\r\n\r\n    uint24 public sellLiquidityFee;\r\n    uint24 public buyLiquidityFee;\r\n\r\n    uint24 public sellMarketingFee;\r\n    uint24 public buyMarketingFee;\r\n\r\n    address public marketingWallet;\r\n    uint256 public gasForProcessing;\r\n    uint256 public maxWallet;\r\n    uint256 public maxTransactionAmount;\r\n    mapping(address =\u003e bool) private _isExcludedFromFees;\r\n    mapping(address =\u003e bool) public isExcludedFromMaxTransactionAmount;\r\n    uint256 private _liquidityFeeTokens;\r\n    uint256 private _marketingFeeTokens;\r\n    address public gemAntiBot;\r\n    bool public antiBotEnabled;\r\n    mapping(address =\u003e bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateDividendTracker(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event UpdateSwapTokensAtAmount(uint256 newSwapTokensAtAmount, uint256 oldSwapTokensAtAmount);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool value);\r\n    event UpdateMaxWallet(uint256 newMaxWallet, uint256 oldMaxWallet);\r\n    event UpdateMaxTransactionAmount(uint256 newMaxTransactionAmount, uint256 oldMaxTransactionAmount);\r\n\r\n    event MarketingWalletUpdated(\r\n        address indexed newMarketingWallet,\r\n        address indexed oldMarketingWallet\r\n    );\r\n    event TokenForMarketingFeeUpdated(\r\n        address indexed newTokenForMarketingFee,\r\n        address indexed oldTokenForMarketingFee);\r\n    event ExcludedFromMaxTransactionAmount(address indexed account, bool isExcluded);\r\n\r\n    event MainRouterUpdated(address mainRouter, address mainPair, address baseTokenForMarket);\r\n    event GasForProcessingUpdated(\r\n        uint256 indexed newValue,\r\n        uint256 indexed oldValue\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    event SendDividends(uint256 tokensSwapped, uint256 amount);\r\n\r\n    event ProcessedDividendTracker(\r\n        uint256 iterations,\r\n        uint256 claims,\r\n        uint256 lastProcessedIndex,\r\n        bool indexed automatic,\r\n        uint256 gas,\r\n        address indexed processor\r\n    );\r\n\r\n    event UpdateLiquidityFee(\r\n        uint24 newSellLiquidityFee,\r\n        uint24 newBuyLiquidityFee,\r\n        uint24 oldSellLiquidityFee,\r\n        uint24 oldBuyLiquidityFee\r\n    );\r\n    event UpdateMarketingFee(\r\n        uint24 newSellMarketingFee,\r\n        uint24 newBuyMarketingFee,\r\n        uint24 oldSellMarketingFee,\r\n        uint24 oldBuyMarketingFee\r\n    );\r\n    event UpdateRewardFee(\r\n        uint24 newSellRewardFee,\r\n        uint24 newBuyRewardFee,\r\n        uint24 oldSellRewardFee,\r\n        uint24 oldBuyRewardFee\r\n    );  \r\n\r\n    constructor(\r\n        Args memory args,\r\n        address[] memory autoApproveAddressList,\r\n        address _gemAntiBot,\r\n        address referrer\r\n    ) payable ERC20(args.name, args.symbol) {\r\n        IFee(args.feeContract).payFee{value: msg.value}(3, _msgSender(), true, referrer);   \r\n        uniswapV2Caller = IUniswapV2Caller(args.uniswapV2Caller);\r\n        gemAntiBot = _gemAntiBot;\r\n        IGemAntiBot(gemAntiBot).setTokenOwner(_msgSender());\r\n        antiBotEnabled = true;\r\n        _decimals = args.decimals;\r\n        rewardToken = args.rewardToken;\r\n        marketingWallet = args.marketingWallet;\r\n        emit MarketingWalletUpdated(marketingWallet, address(0));\r\n        baseTokenForMarket=args.baseTokenForMarket;\r\n        sellLiquidityFee = args.sellLiquidityFee;\r\n        buyLiquidityFee = args.buyLiquidityFee;\r\n        emit UpdateLiquidityFee(\r\n            sellLiquidityFee,\r\n            buyLiquidityFee,\r\n            0,\r\n            0\r\n        );\r\n        sellMarketingFee = args.sellMarketingFee;\r\n        buyMarketingFee = args.buyMarketingFee;\r\n        emit UpdateMarketingFee(\r\n            sellMarketingFee,\r\n            buyMarketingFee,\r\n            0,\r\n            0\r\n        );\r\n        sellRewardFee = args.sellRewardFee;\r\n        buyRewardFee = args.buyRewardFee;\r\n        emit UpdateRewardFee(\r\n            sellRewardFee,\r\n            buyRewardFee,\r\n            0,\r\n            0\r\n        );  \r\n        require(sellLiquidityFee+sellMarketingFee+sellRewardFee \u003c= 200000, \"sell fee \u003c= 20%\");\r\n        require(buyLiquidityFee+buyMarketingFee+buyRewardFee \u003c= 200000, \"buy fee \u003c= 20%\");\r\n        if(args.tokenForMarketingFee!=args.rewardToken \u0026\u0026 args.tokenForMarketingFee!=args.baseTokenForMarket){\r\n            tokenForMarketingFee=address(this);\r\n        }else {\r\n            tokenForMarketingFee=args.tokenForMarketingFee;\r\n        }\r\n        emit TokenForMarketingFeeUpdated(tokenForMarketingFee, address(0));\r\n        swapTokensAtAmount = args.totalSupply/10000;\r\n        emit UpdateSwapTokensAtAmount(swapTokensAtAmount, 0);\r\n        gasForProcessing = 300000;\r\n        emit GasForProcessingUpdated(gasForProcessing, 0);\r\n\r\n        dividendTracker = payable(Clones.clone(args.dividendTracker));\r\n        emit UpdateDividendTracker(\r\n            dividendTracker,\r\n            address(0)\r\n        );\r\n        DividendTokenDividendTrackerInterface(dividendTracker).initialize(\r\n            rewardToken,\r\n            args.minimumTokenBalanceForDividends\r\n        );\r\n        require(args.maxTransactionAmount\u003e=args.totalSupply / 10000, \"maxTransactionAmount \u003e= totalSupply / 10000\");\r\n        require(args.maxWallet\u003e=args.totalSupply / 10000, \"maxWallet \u003e= totalSupply / 10000\");\r\n        maxWallet=args.maxWallet;\r\n        emit UpdateMaxWallet(maxWallet, 0);\r\n        maxTransactionAmount=args.maxTransactionAmount;\r\n        emit UpdateMaxTransactionAmount(maxTransactionAmount, 0);\r\n        mainRouter = args.mainRouter;\r\n        if(baseTokenForMarket != IUniswapV2Router02(mainRouter).WETH()){            \r\n            IERC20(baseTokenForMarket).safeApprove(mainRouter, MAX);            \r\n        }\r\n        _approve(address(this), address(uniswapV2Caller), MAX);\r\n        _approve(address(this), mainRouter, MAX);\r\n        for(uint256 i=0;i\u003cautoApproveAddressList.length;i++){\r\n            _approve(_msgSender(), autoApproveAddressList[i], MAX);\r\n            _isExcludedFromFees[autoApproveAddressList[i]] = true; \r\n            isExcludedFromMaxTransactionAmount[autoApproveAddressList[i]]=true;\r\n        }\r\n        mainPair = IUniswapV2Factory(IUniswapV2Router02(mainRouter).factory())\r\n            .createPair(address(this), baseTokenForMarket);\r\n        _setAutomatedMarketMakerPair(mainPair, true);\r\n        emit MainRouterUpdated(mainRouter, mainPair, baseTokenForMarket);\r\n        DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(dividendTracker);\r\n        DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(address(this));\r\n        DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(owner());\r\n        DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(address(0xdead));\r\n        DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(mainRouter);\r\n\r\n        _isExcludedFromFees[owner()] = true;\r\n        _isExcludedFromFees[marketingWallet] = true;\r\n        _isExcludedFromFees[address(this)] = true;\r\n        _isExcludedFromFees[address(0xdead)] = true; \r\n        isExcludedFromMaxTransactionAmount[address(0xdead)]=true;\r\n        isExcludedFromMaxTransactionAmount[address(this)]=true;\r\n        isExcludedFromMaxTransactionAmount[marketingWallet]=true;\r\n        isExcludedFromMaxTransactionAmount[owner()]=true;     \r\n        _mint(owner(), args.totalSupply);\r\n    }\r\n\r\n    function enableAntibot(bool enabled_) external onlyOwner {\r\n        antiBotEnabled = enabled_;\r\n    }\r\n    receive() external payable {}\r\n\r\n    function updateMainPair(\r\n        address _mainRouter,\r\n        address _baseTokenForMarket\r\n    ) external onlyOwner\r\n    {\r\n        baseTokenForMarket = _baseTokenForMarket;\r\n        if(mainRouter != _mainRouter){\r\n            _approve(address(this), _mainRouter, MAX);\r\n            if (!DividendTokenDividendTrackerInterface(dividendTracker).isExcludedFromDividends(_mainRouter))\r\n                DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(_mainRouter);\r\n            mainRouter = _mainRouter;\r\n        } \r\n        mainPair = IUniswapV2Factory(IUniswapV2Router02(mainRouter).factory()).createPair(\r\n            address(this),\r\n            baseTokenForMarket\r\n        );\r\n        if(baseTokenForMarket != IUniswapV2Router02(mainRouter).WETH()){            \r\n            IERC20(baseTokenForMarket).safeApprove(mainRouter, MAX);\r\n        }\r\n        \r\n        emit MainRouterUpdated(mainRouter, mainPair, baseTokenForMarket);\r\n        _setAutomatedMarketMakerPair(mainPair, true);\r\n\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 amount) external onlyOwner {\r\n        require(amount \u003e 0, \"swapTokensAtAmount \u003e 0\");\r\n        emit UpdateSwapTokensAtAmount(amount, swapTokensAtAmount);\r\n        swapTokensAtAmount = amount;        \r\n    }\r\n\r\n    function updateDividendTracker(address newAddress) public onlyOwner {\r\n        require(\r\n            newAddress != dividendTracker,\r\n            \"The dividend tracker already has that address\"\r\n        );\r\n\r\n        address newDividendTracker =payable(newAddress);\r\n\r\n        require(\r\n            DividendTokenDividendTrackerInterface(newDividendTracker).owner() == address(this),\r\n            \"The new dividend tracker must be owned by the DIVIDENEDTOKEN token contract\"\r\n        );\r\n\r\n        DividendTokenDividendTrackerInterface(newDividendTracker).excludeFromDividends(newDividendTracker);\r\n        DividendTokenDividendTrackerInterface(newDividendTracker).excludeFromDividends(address(this));\r\n        DividendTokenDividendTrackerInterface(newDividendTracker).excludeFromDividends(owner());\r\n        DividendTokenDividendTrackerInterface(newDividendTracker).excludeFromDividends(mainRouter);\r\n        DividendTokenDividendTrackerInterface(newDividendTracker).excludeFromDividends(mainPair);\r\n\r\n        emit UpdateDividendTracker(newAddress, dividendTracker);\r\n\r\n        dividendTracker = newDividendTracker;\r\n    }\r\n\r\n    function updateMaxWallet(uint256 _maxWallet) external onlyOwner {\r\n        require(_maxWallet\u003e=totalSupply() / 10000, \"maxWallet \u003e= total supply / 10000\");\r\n        emit UpdateMaxWallet(_maxWallet, maxWallet);\r\n        maxWallet = _maxWallet;        \r\n    }\r\n\r\n    function updateMaxTransactionAmount(uint256 _maxTransactionAmount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(_maxTransactionAmount\u003e=totalSupply() / 10000, \"maxTransactionAmount \u003e= total supply / 10000\");\r\n        emit UpdateMaxTransactionAmount(_maxTransactionAmount, maxTransactionAmount);\r\n        maxTransactionAmount = _maxTransactionAmount;        \r\n    }   \r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        require(_isExcludedFromFees[account] != excluded, \"already\");\r\n        _isExcludedFromFees[account] = excluded;\r\n\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function setMarketingWallet(address payable wallet) external onlyOwner {\r\n        require(marketingWallet!=wallet, \"already\");\r\n        emit MarketingWalletUpdated(marketingWallet, wallet);\r\n        marketingWallet = wallet;        \r\n    }\r\n\r\n    function updateTokenForMarketingFee(address _tokenForMarketingFee) external onlyOwner {        \r\n        if(_tokenForMarketingFee!=rewardToken \u0026\u0026 _tokenForMarketingFee!=baseTokenForMarket){\r\n            _tokenForMarketingFee=address(this);\r\n        }\r\n        require(tokenForMarketingFee!=_tokenForMarketingFee, \"already\");\r\n        emit TokenForMarketingFeeUpdated(_tokenForMarketingFee, tokenForMarketingFee);\r\n        tokenForMarketingFee = _tokenForMarketingFee; \r\n    }\r\n\r\n    function updateLiquidityFee(\r\n        uint24 _sellLiquidityFee,\r\n        uint24 _buyLiquidityFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellLiquidityFee+sellMarketingFee+sellRewardFee \u003c= 200000,\r\n            \"sell fee \u003c= 20%\"\r\n        );\r\n        require(\r\n            _buyLiquidityFee+buyMarketingFee+buyRewardFee \u003c= 200000,\r\n            \"buy fee \u003c= 20%\"\r\n        );\r\n        emit UpdateLiquidityFee(\r\n            _sellLiquidityFee,\r\n            _buyLiquidityFee,\r\n            sellLiquidityFee,\r\n            buyLiquidityFee\r\n        );\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        buyLiquidityFee = _buyLiquidityFee;   \r\n    }\r\n\r\n    function updateMarketingFee(\r\n        uint24 _sellMarketingFee,\r\n        uint24 _buyMarketingFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellMarketingFee+sellLiquidityFee+sellRewardFee \u003c= 200000,\r\n            \"sell fee \u003c= 20%\"\r\n        );\r\n        require(\r\n            _buyMarketingFee+buyLiquidityFee+buyRewardFee \u003c= 200000,\r\n            \"buy fee \u003c= 20%\"\r\n        );       \r\n        emit UpdateMarketingFee(\r\n            _sellMarketingFee,\r\n            _buyMarketingFee,\r\n            sellMarketingFee,\r\n            buyMarketingFee\r\n        );  \r\n        sellMarketingFee = _sellMarketingFee;\r\n        buyMarketingFee = _buyMarketingFee;        \r\n    }\r\n\r\n    function updateRewardFee(\r\n        uint24 _sellRewardFee,\r\n        uint24 _buyRewardFee\r\n    ) external onlyOwner {\r\n        require(\r\n            _sellRewardFee+sellLiquidityFee+sellMarketingFee \u003c= 200000,\r\n            \"sell fee \u003c= 20%\"\r\n        );\r\n        require(\r\n            _buyRewardFee+buyLiquidityFee+buyMarketingFee \u003c= 200000,\r\n            \"buy fee \u003c= 20%\"\r\n        );\r\n        emit UpdateRewardFee(\r\n            _sellRewardFee, \r\n            _buyRewardFee,\r\n            sellRewardFee, \r\n            buyRewardFee);\r\n        sellRewardFee = _sellRewardFee;\r\n        buyRewardFee = _buyRewardFee;        \r\n    }\r\n\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            pair != mainPair,\r\n            \"The main pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {        \r\n        automatedMarketMakerPairs[pair] = value;\r\n        isExcludedFromMaxTransactionAmount[pair] = value;\r\n        if (value \u0026\u0026 !DividendTokenDividendTrackerInterface(dividendTracker).isExcludedFromDividends(pair)) {\r\n            DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(pair);\r\n        }\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function excludeFromMaxTransactionAmount(address account, bool isEx)\r\n        external\r\n        onlyOwner\r\n    {\r\n        require(isExcludedFromMaxTransactionAmount[account]!=isEx, \"already\");\r\n        isExcludedFromMaxTransactionAmount[account] = isEx;\r\n        emit ExcludedFromMaxTransactionAmount(account, isEx);\r\n    }\r\n    function updateGasForProcessing(uint256 newValue) public onlyOwner {\r\n        require(\r\n            newValue \u003e= 200000 \u0026\u0026 newValue \u003c= 500000,\r\n            \"gasForProcessing must be between 200,000 and 500,000\"\r\n        );\r\n        require(\r\n            newValue != gasForProcessing,\r\n            \"Cannot update gasForProcessing to same value\"\r\n        );\r\n        emit GasForProcessingUpdated(newValue, gasForProcessing);\r\n        gasForProcessing = newValue;\r\n    }\r\n\r\n    function updateClaimWait(uint256 claimWait) external onlyOwner {\r\n        DividendTokenDividendTrackerInterface(dividendTracker).updateClaimWait(claimWait);\r\n    }\r\n\r\n    function getClaimWait() external view returns (uint256) {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).claimWait();\r\n    }\r\n\r\n    function updateMinimumTokenBalanceForDividends(uint256 amount)\r\n        external\r\n        onlyOwner\r\n    {\r\n        DividendTokenDividendTrackerInterface(dividendTracker).updateMinimumTokenBalanceForDividends(amount);\r\n    }\r\n\r\n    function getMinimumTokenBalanceForDividends()\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).minimumTokenBalanceForDividends();\r\n    }\r\n\r\n    function getTotalDividendsDistributed() external view returns (uint256) {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).totalDividendsDistributed();\r\n    }\r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) {\r\n        return _isExcludedFromFees[account];\r\n    }\r\n\r\n    function withdrawableDividendOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).withdrawableDividendOf(account);\r\n    }\r\n\r\n    function dividendTokenBalanceOf(address account)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).balanceOf(account);\r\n    }\r\n\r\n    function excludeFromDividends(address account) external onlyOwner {\r\n        DividendTokenDividendTrackerInterface(dividendTracker).excludeFromDividends(account);\r\n    }\r\n\r\n    function isExcludedFromDividends(address account)\r\n        public\r\n        view\r\n        returns (bool)\r\n    {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).isExcludedFromDividends(account);\r\n    }\r\n\r\n    function getAccountDividendsInfo(address account)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).getAccount(account);\r\n    }\r\n\r\n    function getAccountDividendsInfoAtIndex(uint256 index)\r\n        external\r\n        view\r\n        returns (\r\n            address,\r\n            int256,\r\n            int256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).getAccountAtIndex(index);\r\n    }\r\n\r\n    function processDividendTracker(uint256 gas) external {\r\n        (\r\n            uint256 iterations,\r\n            uint256 claims,\r\n            uint256 lastProcessedIndex\r\n        ) = DividendTokenDividendTrackerInterface(dividendTracker).process(gas);\r\n        emit ProcessedDividendTracker(\r\n            iterations,\r\n            claims,\r\n            lastProcessedIndex,\r\n            false,\r\n            gas,\r\n            msg.sender\r\n        );\r\n    }\r\n\r\n    function claim() external {\r\n        DividendTokenDividendTrackerInterface(dividendTracker).processAccount(payable(msg.sender), false);\r\n    }\r\n\r\n    function getLastProcessedIndex() external view returns (uint256) {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).getLastProcessedIndex();\r\n    }\r\n\r\n    function getNumberOfDividendTokenHolders() external view returns (uint256) {\r\n        return DividendTokenDividendTrackerInterface(dividendTracker).getNumberOfTokenHolders();\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount\u003e0, \"ERC20: transfer zero amount\");\r\n        if (antiBotEnabled) {\r\n            IGemAntiBot(gemAntiBot).onPreTransferCheck(from, to, amount);\r\n        }\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap \u0026\u0026\r\n            !swapping \u0026\u0026\r\n            !automatedMarketMakerPairs[from] \u0026\u0026\r\n            from != owner() \u0026\u0026\r\n            to != owner()\r\n        ) {\r\n            swapping = true;\r\n            if(_marketingFeeTokens\u003e0)\r\n                swapAndSendToFee(_marketingFeeTokens);\r\n            if(_liquidityFeeTokens\u003e0)\r\n                swapAndLiquify(_liquidityFeeTokens);\r\n\r\n            uint256 sellTokens = balanceOf(address(this));\r\n            if(sellTokens\u003e0)\r\n                swapAndSendDividends(sellTokens);\r\n            _marketingFeeTokens=0;\r\n            _liquidityFeeTokens=0;\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\r\n            takeFee = false;\r\n        }\r\n        uint256 _liquidityFee;\r\n        uint256 _marketingFee;\r\n        uint256 _rewardFee;\r\n        if (takeFee) {\r\n            if (automatedMarketMakerPairs[from]) {\r\n                _rewardFee = amount*buyRewardFee/1000000;\r\n                _liquidityFee = amount*buyLiquidityFee/1000000;\r\n                _marketingFee = amount*buyMarketingFee/1000000;\r\n            }\r\n            else if (automatedMarketMakerPairs[to]) {\r\n                _rewardFee = amount*sellRewardFee/1000000;\r\n                _liquidityFee = amount*sellLiquidityFee/1000000;\r\n                _marketingFee = amount*sellMarketingFee/1000000;\r\n            }\r\n            _liquidityFeeTokens = _liquidityFeeTokens+_liquidityFee;\r\n            _marketingFeeTokens = _marketingFeeTokens+_marketingFee;\r\n            uint256 _feeTotal=_rewardFee+_liquidityFee+_marketingFee;\r\n            amount=amount-_feeTotal;\r\n            if(_feeTotal\u003e0)\r\n                super._transfer(from, address(this), _feeTotal);\r\n        }\r\n        \r\n        super._transfer(from, to, amount);\r\n\r\n        try\r\n            DividendTokenDividendTrackerInterface(dividendTracker).setBalance(payable(from), balanceOf(from))\r\n        {} catch {}\r\n        try DividendTokenDividendTrackerInterface(dividendTracker).setBalance(payable(to), balanceOf(to)) {} catch {}\r\n\r\n        if (!swapping) {\r\n            if (!isExcludedFromMaxTransactionAmount[from]) {\r\n                require(\r\n                    amount \u003c= maxTransactionAmount,\r\n                    \"ERC20: exceeds transfer limit\"\r\n                );\r\n            }\r\n            if (!isExcludedFromMaxTransactionAmount[to]) {\r\n                require(\r\n                    balanceOf(to) \u003c= maxWallet,\r\n                    \"ERC20: exceeds max wallet limit\"\r\n                );\r\n            }\r\n            uint256 gas = gasForProcessing;\r\n\r\n            try DividendTokenDividendTrackerInterface(dividendTracker).process(gas) returns (\r\n                uint256 iterations,\r\n                uint256 claims,\r\n                uint256 lastProcessedIndex\r\n            ) {\r\n                emit ProcessedDividendTracker(\r\n                    iterations,\r\n                    claims,\r\n                    lastProcessedIndex,\r\n                    true,\r\n                    gas,\r\n                    msg.sender\r\n                );\r\n            } catch {}\r\n        }\r\n    }\r\n\r\n    function swapAndSendToFee(uint256 tokens) private {\r\n        if(tokenForMarketingFee==rewardToken){\r\n            uint256 initialCAKEBalance = IERC20(rewardToken).balanceOf(\r\n                address(this)\r\n            );\r\n            swapTokensForCake(tokens);\r\n            uint256 newBalance = (IERC20(rewardToken).balanceOf(address(this)))-(\r\n                initialCAKEBalance\r\n            );\r\n            IERC20(rewardToken).safeTransfer(marketingWallet, newBalance);\r\n        }else if(tokenForMarketingFee==baseTokenForMarket){\r\n            uint256 initialBalance = baseTokenForMarket==IUniswapV2Router02(mainRouter).WETH() ? address(this).balance \r\n                : IERC20(baseTokenForMarket).balanceOf(address(this));\r\n            swapTokensForBaseToken(tokens);\r\n            uint256 newBalance = baseTokenForMarket==IUniswapV2Router02(mainRouter).WETH() ? address(this).balance-initialBalance\r\n                : IERC20(baseTokenForMarket).balanceOf(address(this))-initialBalance;\r\n            if(baseTokenForMarket==IUniswapV2Router02(mainRouter).WETH()){\r\n                (bool success, )=address(marketingWallet).call{value: newBalance}(\"\");              \r\n            }else{\r\n                IERC20(baseTokenForMarket).safeTransfer(marketingWallet, newBalance);\r\n            } \r\n        }else{\r\n            _transfer(address(this), marketingWallet, tokens);\r\n        }\r\n        \r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens/(2);\r\n        uint256 otherHalf = tokens-(half);\r\n\r\n        uint256 initialBalance = baseTokenForMarket==IUniswapV2Router02(mainRouter).WETH() ? address(this).balance \r\n            : IERC20(baseTokenForMarket).balanceOf(address(this));\r\n\r\n        swapTokensForBaseToken(half); \r\n        uint256 newBalance = baseTokenForMarket==IUniswapV2Router02(mainRouter).WETH() ? address(this).balance-initialBalance\r\n            : IERC20(baseTokenForMarket).balanceOf(address(this))-initialBalance;\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForBaseToken(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = baseTokenForMarket;\r\n\r\n        if (path[1] == IUniswapV2Router02(mainRouter).WETH()){\r\n            IUniswapV2Router02(mainRouter).swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0, // accept any amount of BaseToken\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }else{\r\n            uniswapV2Caller.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                    mainRouter,\r\n                    tokenAmount,\r\n                    0, // accept any amount of BaseToken\r\n                    path,\r\n                    block.timestamp\r\n                );\r\n        }\r\n    }\r\n\r\n    function swapTokensForCake(uint256 tokenAmount) private {\r\n        if(baseTokenForMarket!=rewardToken){\r\n            address[] memory path = new address[](3);\r\n            path[0] = address(this);\r\n            path[1] = baseTokenForMarket;\r\n            path[2] = rewardToken;\r\n            IUniswapV2Router02(mainRouter).swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }else{\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = rewardToken;\r\n            uniswapV2Caller.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n                mainRouter,\r\n                tokenAmount,\r\n                0, // accept any amount of BaseToken\r\n                path,\r\n                block.timestamp\r\n            );            \r\n        }\r\n        \r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 baseTokenAmount) private {\r\n        if (baseTokenForMarket == IUniswapV2Router02(mainRouter).WETH()) \r\n            IUniswapV2Router02(mainRouter).addLiquidityETH{value: baseTokenAmount}(\r\n                address(this),\r\n                tokenAmount,\r\n                0, // slippage is unavoidable\r\n                0, // slippage is unavoidable\r\n                address(0xdead),\r\n                block.timestamp\r\n            );\r\n        else{\r\n            IUniswapV2Router02(mainRouter).addLiquidity(\r\n                address(this),\r\n                baseTokenForMarket,\r\n                tokenAmount,\r\n                baseTokenAmount,\r\n                0,\r\n                0,\r\n                address(0xdead),\r\n                block.timestamp\r\n            );    \r\n        }\r\n                \r\n    }\r\n\r\n    function swapAndSendDividends(uint256 tokens) private {\r\n        swapTokensForCake(tokens);\r\n        uint256 dividends = IERC20(rewardToken).balanceOf(address(this));\r\n        IERC20(rewardToken).safeTransfer(\r\n            dividendTracker,\r\n            dividends\r\n        );\r\n        DividendTokenDividendTrackerInterface(dividendTracker).distributeCAKEDividends(dividends);\r\n        emit SendDividends(tokens, dividends);\r\n    }\r\n    function withdrawETH() external onlyOwner {\r\n        (bool success, )=address(owner()).call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed in withdrawal\");\r\n    }\r\n    function withdrawToken(address token) external onlyOwner{\r\n        require(address(this) != token, \"Not allowed\");\r\n        IERC20(token).safeTransfer(owner(), IERC20(token).balanceOf(address(this)));\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTransactionAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dividendTracker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseTokenForMarket\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"sellLiquidityFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"buyLiquidityFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"sellMarketingFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"buyMarketingFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"sellRewardFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"buyRewardFee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"minimumTokenBalanceForDividends\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenForMarketingFee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniswapV2Caller\",\"type\":\"address\"}],\"internalType\":\"struct DividendTokenWithAntibot.Args\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"autoApproveAddressList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_gemAntiBot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludedFromMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"}],\"name\":\"GasForProcessingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"mainPair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseTokenForMarket\",\"type\":\"address\"}],\"name\":\"MainRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMarketingWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMarketingWallet\",\"type\":\"address\"}],\"name\":\"MarketingWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iterations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claims\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastProcessedIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"automatic\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"processor\",\"type\":\"address\"}],\"name\":\"ProcessedDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SendDividends\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenForMarketingFee\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTokenForMarketingFee\",\"type\":\"address\"}],\"name\":\"TokenForMarketingFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateDividendTracker\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"newSellLiquidityFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"newBuyLiquidityFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"oldSellLiquidityFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"oldBuyLiquidityFee\",\"type\":\"uint24\"}],\"name\":\"UpdateLiquidityFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"newSellMarketingFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"newBuyMarketingFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"oldSellMarketingFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"oldBuyMarketingFee\",\"type\":\"uint24\"}],\"name\":\"UpdateMarketingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxTransactionAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTransactionAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxWallet\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxWallet\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"newSellRewardFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"newBuyRewardFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"oldSellRewardFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"oldBuyRewardFee\",\"type\":\"uint24\"}],\"name\":\"UpdateRewardFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSwapTokensAtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSwapTokensAtAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapTokensAtAmount\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"automatedMarketMakerPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenForMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendTokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dividendTracker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled_\",\"type\":\"bool\"}],\"name\":\"enableAntibot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasForProcessing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gemAntiBot\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountDividendsInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAccountDividendsInfoAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimWait\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastProcessedIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinimumTokenBalanceForDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfDividendTokenHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividendsDistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromDividends\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromMaxTransactionAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTransactionAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"}],\"name\":\"processDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenForMarketingFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Caller\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Caller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimWait\",\"type\":\"uint256\"}],\"name\":\"updateClaimWait\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateDividendTracker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateGasForProcessing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_sellLiquidityFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_buyLiquidityFee\",\"type\":\"uint24\"}],\"name\":\"updateLiquidityFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mainRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseTokenForMarket\",\"type\":\"address\"}],\"name\":\"updateMainPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_sellMarketingFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_buyMarketingFee\",\"type\":\"uint24\"}],\"name\":\"updateMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTransactionAmount\",\"type\":\"uint256\"}],\"name\":\"updateMaxTransactionAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"}],\"name\":\"updateMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumTokenBalanceForDividends\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_sellRewardFee\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"_buyRewardFee\",\"type\":\"uint24\"}],\"name\":\"updateRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenForMarketingFee\",\"type\":\"address\"}],\"name\":\"updateTokenForMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"withdrawableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "DividendTokenWithAntibot",
      "CompilerVersion": "v0.8.19+commit.7dd6d404",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000065438378b3793c1184041cdfe42ee4efc7419361000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000000900000000000000000000000000000000000000000000000000071afd498d00000000000000000000000000000000000000000000000000000000246139ca8000000000000000000000000000000000000000000000000000000006d23ad5f800000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000958504a702840eea022cc59b02ddea9edfb855070000000000000000000000009cc421962fc72f11c5c2ddf79fe6b5fe5e7cd94e000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000027100000000000000000000000000000000000000000000000000000000000004e20000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000000000186a0000000000000000000000000000000000000000000000000000000000002bf200000000000000000000000000000000000000000000000000000000000000fa0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000c0dcc752af9be6a07a67934471d7cd901a6094e60000000000000000000000001ccfe8c40ef259566433716002e379dfffbf5a3e00000000000000000000000000000000000000000000000000000000000000074c616479626f74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005244c6164790000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000f041690d9cbe398d3d51f25c87902c1403affe66",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://1809c771636edbf78a140981dd48d0afe04c55f7fa6c1831117d053de1e670f7"
    }
  ]
}
