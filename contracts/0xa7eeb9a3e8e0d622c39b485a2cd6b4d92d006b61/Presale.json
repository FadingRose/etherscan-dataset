{
  "TxHash": "0xe2b00b67c9cd86c0eddabba029b8fdbc5147f1158ab531e1135218726bd1aca6",
  "ContractAddress": "0xa7eeb9a3e8e0d622c39b485a2cd6b4d92d006b61",
  "Name": "Presale",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface ERC20 {\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n}\r\n\r\ncontract Presale {\r\n    address public owner;\r\n    address public tokenAddress;\r\n    uint256 public tokenSalePrice;\r\n    uint256 public soldTokens;\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only contract owner can perform this action\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n    \r\n    function updateToken(address _tokenAddress) public onlyOwner {\r\n        tokenAddress = _tokenAddress;\r\n    }\r\n    \r\n    function updateTokenSalePrice(uint256 _tokenSalePrice) public onlyOwner {\r\n        tokenSalePrice = _tokenSalePrice;\r\n    }\r\n    \r\n    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        require(y == 0 || (z = x * y) / y == x);\r\n    }\r\n\r\n    function buyToken(uint256 _tokenAmount) public payable {\r\n        require(msg.value == multiply(_tokenAmount, tokenSalePrice), \"Insufficient Ether provided for the token purchase\");\r\n        \r\n        ERC20 token = ERC20(tokenAddress);\r\n        require(_tokenAmount \u003c= token.balanceOf(address(this)), \"Not enough tokens left for sale\");\r\n        \r\n        // Transfer tokens to buyer\r\n        require(token.transfer(msg.sender, _tokenAmount * 1e18));\r\n        \r\n        // Transfer Ether to owner\r\n        payable(owner).transfer(msg.value);\r\n        \r\n        soldTokens += _tokenAmount;\r\n    }\r\n    \r\n    function getTokenDetails() public view returns (string memory name, string memory symbol, uint256 balance, uint256 supply, uint256 tokenPrice, address tokenAddr) {\r\n        ERC20 token = ERC20(tokenAddress);\r\n        return (\r\n            token.name(),\r\n            token.symbol(),\r\n            token.balanceOf(address(this)),\r\n            token.totalSupply(),\r\n            tokenSalePrice,\r\n            tokenAddress\r\n        );\r\n    }\r\n\r\n    function transferToOwner(uint256 _amount) external payable {\r\n        require(msg.value \u003e= _amount, \"Insufficient funds sent\");\r\n        \r\n        (bool success, ) = owner.call{value: _amount}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    function transferEther(address payable _receiver, uint256 _amount) external payable {\r\n        require(msg.value \u003e= _amount, \"Insufficient funds sent\");\r\n        \r\n        (bool success, ) = _receiver.call{value: _amount}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    \r\n    function withdrawAllTokens() public onlyOwner {\r\n        ERC20 token = ERC20(tokenAddress);\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance \u003e 0, \"No tokens to withdraw\");\r\n\r\n        require(token.transfer(owner, balance), \"Transfer failed\");\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferEther\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToOwner\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSalePrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "Presale",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://e403892210d94debe616c7ff53ea7e8fdeee30599319731f9c36e4592e13be15"
    }
  ]
}
