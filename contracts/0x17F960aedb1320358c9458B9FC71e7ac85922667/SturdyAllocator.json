{
  "TxHash": "0xb96b5a98287919e8a37c02f15da68175da312d1dcb954eea4b3537df20132df3",
  "ContractAddress": "0x17F960aedb1320358c9458B9FC71e7ac85922667",
  "Name": "SturdyAllocator",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "//SPDX-License-Identifier: AGPL-v3.0\r\npragma solidity ^0.8.0;\r\n\r\n\r\nlibrary AllocationLogger {\r\n\r\n    /**\r\n     * @param allocationUid: a uid generated by the sturdy subnet in response to your allocation request\r\n     * @param minerUid: the uid of the miner whose allocation you use\r\n     * @param userAddress: the address of the eoa account/contract which holds the assets that need to be allocated\r\n     * @param allocatedPools: the addresses of the underlying \"pools\" in which the assets will be distributed across\r\n     * @param allocationAmounts: the amounts allocated across the aforementioned pools (in the same order)\r\n     */\r\n    event AllocationEvent(\r\n        bytes32 indexed allocationUid,\r\n        uint256 indexed minerUid,\r\n        address indexed userAddress,\r\n        address[] allocatedPools,\r\n        uint256[] allocationAmounts\r\n    );\r\n    error MismatchedArrays();\r\n\r\n    function logAllocation(\r\n        bytes32 allocationUid, \r\n        uint256 minerUid,\r\n        address userAddress,\r\n        address[] memory allocatedPools,\r\n        uint256[] memory allocationAmounts\r\n    ) internal {\r\n        if(!(allocatedPools.length == allocationAmounts.length)) {\r\n            revert MismatchedArrays();\r\n        }\r\n\r\n        // Emit the event\r\n        emit AllocationEvent(allocationUid, minerUid, userAddress, allocatedPools, allocationAmounts);\r\n    }\r\n}\r\n\r\ninterface IDebtManager {\r\n    struct StrategyAllocation {\r\n        address strategy;\r\n        uint256 debt;\r\n    }\r\n    function manualAllocation( StrategyAllocation[] memory _newPositions) external payable;\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract SturdyAllocator is Ownable {\r\n    mapping(address =\u003e bool) allocators;\r\n\r\n    constructor() {\r\n        allocators[msg.sender] = true;\r\n    }\r\n\r\n    function setAllocator(address allocator, bool value) public onlyOwner {\r\n        allocators[allocator] = value;\r\n    }\r\n\r\n    function _isAllocator(address toCheck) public view returns (bool) {\r\n        return allocators[toCheck];\r\n    }\r\n\r\n    modifier onlyAllocator() {\r\n        require(_isAllocator(msg.sender));\r\n        _;\r\n    }\r\n\r\n    function allocate(\r\n        bytes32 allocationUid,\r\n        uint256 minerUid,\r\n        address userAddress,\r\n        address debtManager,\r\n        address[] memory silos, // NOTE: the silos must be available to the addresses pointed to by  DebtManager(debtManager).vault()\r\n        uint256[] memory allocationAmounts\r\n    ) public onlyAllocator {\r\n        if (!(silos.length == allocationAmounts.length)) {\r\n            revert AllocationLogger.MismatchedArrays();\r\n        }\r\n        // rebalance pools\r\n        IDebtManager.StrategyAllocation[]\r\n            memory allocs = new IDebtManager.StrategyAllocation[](silos.length);\r\n\r\n        for (uint256 i = 0; i \u003c silos.length; i++) {\r\n            allocs[i] = IDebtManager.StrategyAllocation(\r\n                silos[i],\r\n                allocationAmounts[i]\r\n            );\r\n        }\r\n\r\n        IDebtManager(debtManager).manualAllocation(allocs);\r\n\r\n        // Emit the event\r\n        // AllocationLogger.logAllocation(allocationUid, minerUid, userAddress, silos, allocationAmounts);\r\n        emit AllocationLogger.AllocationEvent(\r\n            allocationUid,\r\n            minerUid,\r\n            userAddress,\r\n            silos,\r\n            allocationAmounts\r\n        );\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MismatchedArrays\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"allocationUid\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"minerUid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"allocatedPools\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"allocationAmounts\",\"type\":\"uint256[]\"}],\"name\":\"AllocationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toCheck\",\"type\":\"address\"}],\"name\":\"_isAllocator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"allocationUid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minerUid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtManager\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"silos\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"allocationAmounts\",\"type\":\"uint256[]\"}],\"name\":\"allocate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"allocator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAllocator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "SturdyAllocator",
      "CompilerVersion": "v0.8.21+commit.d9974bed",
      "OptimizationUsed": "1",
      "Runs": "1660",
      "ConstructorArguments": "",
      "EVMVersion": "paris",
      "Library": "",
      "LicenseType": "GNU AGPLv3",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://5b701d04a6b143bd23cf4b90f61f1bb4185026417b2469df7b0ac5967bab1739"
    }
  ]
}
