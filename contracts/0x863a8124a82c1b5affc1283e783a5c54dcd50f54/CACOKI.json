{
  "TxHash": "0x945f2957c49ce083674e5bac08f786b6ed4ae920fc4f3a2735ef8e3128c14db7",
  "ContractAddress": "0x863a8124a82c1b5affc1283e783a5c54dcd50f54",
  "Name": "CACOKI",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity 0.8.23;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n// Adjust token name here \u003c\u003c\r\ncontract CACOKI is Context, IERC20, Ownable {\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _buyCount=0;\r\n    uint256 private _tradingStartTimestamp;\r\n    uint256 private _preventSwapBefore=25;\r\n    uint256 private _finalBuyTax=30;\r\n    uint256 private _finalSellTax=50;\r\n    uint256 private _targetTax=5;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _tTotal = 100_000_000 * 10**_decimals;\r\n    string private constant _name = unicode\"CASHCOWKING\"; //Name of the project \u003c\u003c\r\n    string private constant _symbol = unicode\"CACOKI\"; //Ticker symbol \u003c\u003c\r\n\r\n    \r\n    uint256 public _maxTxAmount = 1_000_000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 1_000_000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold= 1_000_000 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 1_000_000 * 10**_decimals;\r\n    \r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n    uint256 private sellCount = 0;\r\n    uint256 private lastSellBlock = 0;\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    event TransferTaxUpdated(uint _tax);\r\n\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    /// Modifier to check if 15 minutes passed to remove MaxWalletsize and adjust fees by seconds\r\n    modifier _checkTime() {\r\n        if(!tradingOpen) {\r\n            _;\r\n            return;\r\n        }\r\n        \r\n        if(((_tradingStartTimestamp + (15*60)) \u003c= block.timestamp) \u0026\u0026 (_maxWalletSize \u003c totalSupply())) {\r\n            _maxTxAmount = _tTotal;\r\n            _maxWalletSize=_tTotal;\r\n            emit MaxTxAmountUpdated(_tTotal);\r\n        }\r\n\r\n        uint256 actualTimeDiff = block.timestamp - (_tradingStartTimestamp + (15*60));\r\n\r\n            if(_finalBuyTax \u003e 5 \u0026\u0026 _finalSellTax \u003e 5 \u0026\u0026 (_tradingStartTimestamp + (15*60)) \u003e= block.timestamp) {\r\n                _finalBuyTax = (_targetTax + ((30 - _targetTax) / 900) * actualTimeDiff);\r\n                _finalSellTax = (_targetTax + ((50 - _targetTax) / 900) * actualTimeDiff);\r\n            } else {\r\n                _finalBuyTax = 5;\r\n                _finalSellTax = 5;\r\n            }\r\n\r\n        _;\r\n    }\r\n\r\n    /// Constructor\r\n    /// @param _pancakeRouter address       Address of the PancakeV2Router\r\n    /// @param _taxAddres address           Address of the taxCollecting wallet\r\n    constructor (address _pancakeRouter, address _taxAddres) {\r\n        _taxWallet = payable(_taxAddres);\r\n\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(_pancakeRouter);\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    /// Returs name of the token\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /// Returns Symbol of the token\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /// Returns Decimals of the token\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /// Returns total token supply\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    /// Returns balance of the given address\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /// Transfers token from msg.sender to specified address\r\n    /// @param recipient address    receiver of the tokens\r\n    /// @param amount uint256       amount to transfer in wei\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /// Returns the allowance for the \r\n    /// @param owner address        Owner of the token\r\n    /// @param spender addres       Contract/User allowed to spend Owners token\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /// Raises the allowance to spend token from spender address\r\n    /// @param spender address      Contract/User allowed to spend msg.senders token\r\n    /// @param amount uint256       Maximum amount of tokens allowd to spent in wei\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /// Like transfer() function but could be run by others to transfer tokens from my wallet\r\n    /// needs allowance \u003e= amount to transfer\r\n    /// @param sender address       Owner of the tokens to send\r\n    /// @param recipient address    Receiver of the owners token\r\n    /// @param amount uint256       amount to transfer in wei\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\r\n        return true;\r\n    }\r\n\r\n    /// Implementation of the approve function\r\n    /// @param owner address        Owner of the tokens\r\n    /// @param spender address      Allowed to spend owners token\r\n    /// @param amount uint256       Maximum allowed amount to spend in wei\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /// Implementation of the transfer function\r\n    /// @param from address         Sender of the token\r\n    /// @param to address           Receiver of the token\r\n    /// @param amount uint256       Amount to send in wei\r\n    function _transfer(address from, address to, uint256 amount) private _checkTime {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() \u0026\u0026 to != owner()) {\r\n\r\n            if (from == uniswapV2Pair \u0026\u0026 to != address(uniswapV2Router) \u0026\u0026 ! _isExcludedFromFee[to] ) {\r\n                require(amount \u003c= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount \u003c= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                taxAmount = (amount * _finalBuyTax) /100;\r\n                _buyCount++;\r\n            }\r\n\r\n            if(to == uniswapV2Pair \u0026\u0026 from != address(this) ){\r\n                taxAmount = (amount * _finalSellTax) / 100;\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap \u0026\u0026 to == uniswapV2Pair \u0026\u0026 swapEnabled \u0026\u0026 contractTokenBalance \u003e _taxSwapThreshold \u0026\u0026 _buyCount \u003e _preventSwapBefore) {\r\n                if (block.number \u003e lastSellBlock) {\r\n                    sellCount = 0;\r\n                }\r\n                require(sellCount \u003c 3, \"Only 3 sells per block!\");\r\n                swapTokensAndAdd(min(amount, min(contractTokenBalance, _maxTaxSwap)));\r\n\r\n                sellCount++;\r\n                lastSellBlock = block.number;\r\n            }\r\n        }\r\n\r\n        if(taxAmount\u003e0){\r\n          swapTaxToETH(taxAmount);\r\n        }\r\n\r\n        _balances[from]=_balances[from] - amount;\r\n        _balances[to]=_balances[to] + amount - taxAmount;\r\n        emit Transfer(from, to, amount - taxAmount);\r\n    }\r\n\r\n    /// Determines which number is lower and returns it\r\n    /// @param a uint256            First number\r\n    /// @param b uint256            Second number\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a\u003eb)?b:a;\r\n    }\r\n\r\n    /// swaps tax to eth and added it to liquidty\r\n    /// @param tokenAmount uint256 amount of tokens to swap and add\r\n    function swapTokensAndAdd(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uint256 halfAmount = tokenAmount / 2;\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            halfAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),halfAmount,0,0,address(this),block.timestamp);\r\n    }\r\n\r\n    function swapTaxToETH(uint256 taxAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), taxAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            taxAmount,\r\n            0,\r\n            path,\r\n            _taxWallet,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// remove all limits from the contract\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    /// opens the trading\r\n    /// @notice tokens and eth need to be sent here before running the function. This function could only be ran once\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n\r\n        _tradingStartTimestamp = block.timestamp;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,address(this),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    /// Reduces the taxes\r\n    function reduceFee(uint256 _newFee) external onlyOwner {\r\n      require(_newFee\u003c=_finalBuyTax \u0026\u0026 _newFee\u003c=_finalSellTax);\r\n      _finalBuyTax=_newFee;\r\n      _finalSellTax=_newFee;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pancakeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxAddres\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tax\",\"type\":\"uint256\"}],\"name\":\"TransferTaxUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newFee\",\"type\":\"uint256\"}],\"name\":\"reduceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "CACOKI",
      "CompilerVersion": "v0.8.23+commit.f704f362",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d0000000000000000000000007529373bdb3da7353f0e60df725d79f6c733049e",
      "EVMVersion": "shanghai",
      "Library": "",
      "LicenseType": "Unlicense",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://57411ee99666f8cd865020d98dd7152caffb65cb2a61e618dc8f49e9a7a39b3a"
    }
  ]
}
