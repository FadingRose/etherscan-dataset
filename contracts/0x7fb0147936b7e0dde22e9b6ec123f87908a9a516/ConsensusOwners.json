{
  "TxHash": "0x63d5f20acd852e4122e89d3b83e4bd215525d96ceea2ede98141e61296b0cc16",
  "ContractAddress": "0x7fb0147936b7e0dde22e9b6ec123f87908a9a516",
  "Name": "ConsensusOwners",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract ConsensusOwners {\r\n\r\n    uint confirmationsRequired = 3;\r\n    uint constant GRACE_PERIOD = 48 hours;\r\n    address[] public owners;\r\n    \r\n    struct ExecProposal{\r\n        bytes32 uid;\r\n        address to;\r\n        string  func;\r\n        bytes  data;\r\n        uint timestamp;\r\n        uint confirmations;\r\n    }\r\n\r\n    \r\n    mapping(bytes32 =\u003e ExecProposal) public eps;\r\n    mapping(bytes32 =\u003e bool) queue;\r\n    mapping(bytes32 =\u003emapping(address =\u003ebool)) public confirmations;\r\n    mapping(address =\u003e bool) isOwner;\r\n\r\n    modifier onlyOwner(){\r\n        require(isOwner[msg.sender],\"You are not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyConsensus(){\r\n        require(msg.sender == address(this),\"Call the consensus function\");\r\n        _;\r\n    }\r\n\r\n    constructor(address[] memory _owners){\r\n        require(_owners.length \u003e= confirmationsRequired,\"Minimum 3 owners\");\r\n        for (uint i; i \u003c _owners.length; i++){\r\n            address nextOwner = _owners[i];\r\n\r\n            require(!isOwner[nextOwner],\"duplicated owner\");\r\n\r\n            isOwner[nextOwner] = true;\r\n            owners.push(nextOwner);\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    event queueTx(\r\n        address sender,\r\n        address to,\r\n        string  func,\r\n        bytes  data,\r\n        uint timestamp,\r\n        bytes32 txId\r\n    );\r\n\r\n    event discard(bytes32 txId);\r\n\r\n    event assignRequired(\r\n        uint256 blockNumber,\r\n        uint8 minConfirm\r\n        );\r\n\r\n    event executTx(\r\n        address sender,\r\n        bytes32 txId,\r\n        uint timestamp,\r\n        address to,\r\n        string func\r\n    );\r\n    //@dev Creating a transaction and adding to the queue for consideration\r\n    function addExecProposal(\r\n        string calldata _func,\r\n        address _to,\r\n        bytes calldata _data\r\n    ) external  onlyOwner returns(bytes32 _txId){\r\n        \r\n        bytes32 txId = txToByte(_func,_to,_data,block.timestamp);\r\n        require(!queue[txId],\"allready queue\");\r\n\r\n        queue[txId] = true;\r\n        confirmations[txId][msg.sender] = true;\r\n        eps[txId] = ExecProposal({\r\n                uid : txId,\r\n                to : _to,\r\n                func : _func,\r\n                data : _data,\r\n                timestamp : block.timestamp,\r\n                confirmations:1\r\n                });\r\n\r\n        emit queueTx(\r\n            msg.sender,\r\n            _to,\r\n            _func,\r\n            _data,\r\n            block.timestamp,\r\n            txId\r\n        );\r\n        \r\n        return txId;\r\n    }\r\n    //@dev consent to send a transaction\r\n    function confirm(bytes32 _txId) external onlyOwner {\r\n        require(queue[_txId], \"not queued!\");\r\n        require(!confirmations[_txId][msg.sender], \"already confirmed!\");\r\n\r\n        ExecProposal storage execProposal = eps[_txId];\r\n\r\n        execProposal.confirmations++;\r\n        confirmations[_txId][msg.sender] = true;\r\n\r\n        if (execProposal.confirmations \u003e= confirmationsRequired){\r\n            execute(_txId);\r\n        }\r\n    }\r\n\r\n    //@dev Cancellation of voting on a specific deal\r\n    function cancelConfirmation(bytes32 _txId) external onlyOwner {\r\n        require(confirmations[_txId][msg.sender], \"not confirmed!\");\r\n\r\n        ExecProposal storage execProposal = eps[_txId];\r\n        execProposal.confirmations--;\r\n        confirmations[_txId][msg.sender] = false;\r\n\r\n        if(execProposal.confirmations == 0){\r\n            discardExecProposal(_txId);\r\n        }\r\n    }\r\n    //@dev deleted a transaction\r\n    function discardExecProposal(bytes32 _txId) private {\r\n        require(queue[_txId], \"not queued\");\r\n        \r\n        delete queue[_txId];\r\n        delete eps[_txId];\r\n        for (uint i; i \u003c owners.length;i++){\r\n            confirmations[_txId][owners[i]] = false;\r\n        }\r\n\r\n        emit discard(_txId);\r\n    }\r\n\r\n    //@dev sending a transaction\r\n    function execute(bytes32 txId) private {\r\n        ExecProposal storage execProposal = eps[txId];\r\n\r\n        require(queue[txId], \"not queued\");\r\n        require(execProposal.timestamp + GRACE_PERIOD \u003e block.timestamp, \"Grace period failed\");\r\n        require(block.timestamp \u003e execProposal.timestamp, \"Error timestamp\");\r\n        \r\n        require(\r\n            execProposal.confirmations \u003e= confirmationsRequired,\r\n            \"not enough confirmations \"\r\n            );\r\n\r\n        delete queue[txId];\r\n        \r\n\r\n        bytes memory data;\r\n        data = abi.encodePacked(\r\n                    bytes4(keccak256(bytes(execProposal.func))),\r\n                    execProposal.data\r\n        );\r\n\r\n        (bool success, ) = execProposal.to.call{value:0}(data);\r\n        \r\n        require(success,\"tx error\");\r\n        \r\n        emit executTx(msg.sender,txId,execProposal.timestamp, execProposal.to, execProposal.func);\r\n\r\n        delete eps[txId];\r\n\r\n    }\r\n\r\n    function txToByte(\r\n        string calldata _func,\r\n        address _to,\r\n        bytes calldata _data,\r\n        uint _timestamp\r\n    ) internal pure returns (bytes32 _txId){\r\n\r\n        bytes32 txId = keccak256(abi.encode(\r\n            _func,\r\n            _to,\r\n            _data,\r\n            _timestamp\r\n        ));\r\n        return txId;\r\n    }\r\n\r\n    function addOwner(address newOwner) public onlyConsensus{\r\n        require(newOwner != address(0), \"Error zero address\");\r\n        isOwner[newOwner] = true;\r\n        owners.push(newOwner);\r\n    }\r\n\r\n    function delOwner(uint indexOwner) public onlyConsensus {\r\n        uint ownerLength = owners.length;\r\n        require(indexOwner \u003c= ownerLength, \"Node index cannot be higher than their number\"); // index must be less than or equal to array length\r\n        require(ownerLength -1  \u003e= confirmationsRequired, \"error minimal count owner\");\r\n\r\n        isOwner[owners[indexOwner]] = false;\r\n\r\n        for (uint i = indexOwner; i \u003c ownerLength -1; i++){\r\n            owners[i] = owners[i+1];\r\n        }\r\n        \r\n        delete owners[ownerLength-1];\r\n        owners.pop();\r\n    }\r\n\r\n    function assignRequiredConf(uint8 _confReq) public onlyConsensus{\r\n        require(owners.length \u003e= _confReq, \"error owners.length \u003c _confReq\");\r\n        require(_confReq \u003e= 2, \"Minimal confRequire 2\");\r\n        \r\n        confirmationsRequired = _confReq;\r\n        emit assignRequired(block.number,_confReq);\r\n    }\r\n\r\n    function seeOwners() external view returns(address[] memory){\r\n        return owners;\r\n    }\r\n\r\n    function seeMinCofReq() public view returns(uint){\r\n        return confirmationsRequired;\r\n    }\r\n\r\n\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"minConfirm\",\"type\":\"uint8\"}],\"name\":\"assignRequired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"discard\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func\",\"type\":\"string\"}],\"name\":\"executTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"func\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"queueTx\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_func\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"addExecProposal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_confReq\",\"type\":\"uint8\"}],\"name\":\"assignRequiredConf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"}],\"name\":\"cancelConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txId\",\"type\":\"bytes32\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexOwner\",\"type\":\"uint256\"}],\"name\":\"delOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"eps\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"func\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmations\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeMinCofReq\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "ContractName": "ConsensusOwners",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000065def3ea531fd80354ec11c611ae4faa06068f270000000000000000000000002c87d8f4ebcd05be72efbbd2fc6c6a000c8af854000000000000000000000000122a2121a99a0cfc7104cd5eeabe7fffed7f4da1",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://28d1ba491f65a7ef6b2df2344e0d09f8ac379b3c061002d2657c5354ba4c2087"
    }
  ]
}
