{
  "TxHash": "0xb6d45f4d50bbae7929eb238be4b851cbd73991944a81dc02c12e6f6b0898f2a5",
  "ContractAddress": "0x0f955047C6BcEC0e557310Dfc88A0377ba9929d2",
  "Name": "MinterContract",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function mint(uint256 amount) external;\r\n\r\n    function mint(address to, uint256 amount) external;\r\n\r\n    function burn(uint256 amount) external;\r\n}\r\n\r\nabstract contract Initializable {\r\n    /*\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /*\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /*\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(\r\n            _initializing || !_initialized,\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Ownable is Initializable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /*\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = msg.sender;\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /*\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /*\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /*\r\n     * @dev Returns true if the caller is the current owner.\r\n     */\r\n    function isOwner() public view returns (bool) {\r\n        return msg.sender == _owner;\r\n    }\r\n\r\n    /*\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * onlyOwner functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /*\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /*\r\n     * @dev Transfers ownership of the contract to a new account (newOwner).\r\n     */\r\n    function _transferOwnership(address newOwner) internal {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract MinterContract is Initializable, Ownable {\r\n    address public luca;\r\n\r\n    uint256 public limitAmount;\r\n    address public executor;\r\n    mapping(uint256 =\u003e uint256) public mintedAmount;\r\n    event UpdateExecutor(address _executor);\r\n    event UpdateLimit(uint256 _limitAmount);\r\n    // changes\r\n    address public wLuca;\r\n    mapping(address =\u003e bool) public wrraperExecutor;\r\n    mapping(address =\u003e uint256) public lucaConverted;\r\n    address public receiver;\r\n    address public trader;\r\n    uint256 public mintPercentage;\r\n    bool public paused;\r\n    address public crosschain;\r\n\r\n    constructor() {}\r\n\r\n    function __Minter_init(\r\n        address _luca,\r\n        uint256 _limitAmount,\r\n        address _executor,\r\n        address _wLuca,\r\n        address _receiver,\r\n        address _trader,\r\n        address _crosschain\r\n    ) external initializer {\r\n        __Ownable_init_unchained();\r\n        __Minter_init_unchained(\r\n            _luca,\r\n            _limitAmount,\r\n            _executor,\r\n            _wLuca,\r\n            _receiver,\r\n            _trader,\r\n            _crosschain\r\n        );\r\n    }\r\n\r\n    function __Minter_init_unchained(\r\n        address _luca,\r\n        uint256 _limitAmount,\r\n        address _executor,\r\n        address _wLuca,\r\n        address _receiver,\r\n        address _trader,\r\n        address _crosschain\r\n    ) internal initializer {\r\n        luca = _luca;\r\n        limitAmount = _limitAmount;\r\n        executor = _executor;\r\n        wLuca = _wLuca;\r\n        receiver = _receiver;\r\n        trader = _trader;\r\n        crosschain = _crosschain;\r\n        paused = false;\r\n        wrraperExecutor[address(this)] = true;\r\n    }\r\n\r\n    modifier onlyExecutor() {\r\n        require(msg.sender == executor, \"caller is not the executor\");\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyWhiteListExecutor() {\r\n        require(wrraperExecutor[msg.sender], \"caller is not the executor\");\r\n        require(!paused, \"Contract is paused\");\r\n        _;\r\n    }\r\n\r\n    function updateExecutor(address _executor) external onlyOwner {\r\n        executor = _executor;\r\n        emit UpdateExecutor(_executor);\r\n    }\r\n\r\n    function updateLimit(uint256 _limitAmount) external onlyOwner {\r\n        limitAmount = _limitAmount;\r\n        emit UpdateLimit(_limitAmount);\r\n    }\r\n\r\n    function updateMintPercentage(uint256 _mintPercentage) external onlyOwner {\r\n        mintPercentage = _mintPercentage;\r\n    }\r\n\r\n    function mint(address to, uint256 amount) external {\r\n        require(msg.sender == crosschain, \"only crosschain can call\");\r\n        IERC20(luca).mint(to, amount);\r\n    }\r\n\r\n    function mint(uint256 amount) external onlyExecutor {\r\n        uint256 day = block.timestamp / 86400;\r\n        mintedAmount[day] += amount;\r\n        require(limitAmount \u003e= mintedAmount[day], \"Extraction limit exceeded\");\r\n        IERC20(luca).mint(address(this), amount);\r\n        lucaConverted[receiver] += amount;\r\n        _wrap(receiver, amount);\r\n    }\r\n\r\n    function mint() external onlyExecutor {\r\n        require(lucaConverted[trader] != 0, \"Trader has no luca\");\r\n        uint256 amountToMint = (lucaConverted[trader] * mintPercentage) / 100;\r\n        uint256 day = block.timestamp / 86400;\r\n        mintedAmount[day] += amountToMint;\r\n        IERC20(luca).mint(address(this), amountToMint);\r\n        lucaConverted[receiver] += amountToMint;\r\n        _wrap(receiver, amountToMint);\r\n    }\r\n\r\n    function addWhitelistExecutor(address _executor, bool _allow)\r\n        external\r\n        onlyOwner\r\n    {\r\n        wrraperExecutor[_executor] = _allow;\r\n    }\r\n\r\n    function convertLucaToWLuca(address _to, uint256 _amount)\r\n        external\r\n        onlyWhiteListExecutor\r\n    {\r\n        lucaConverted[msg.sender] += _amount;\r\n        _wrap(_to, _amount);\r\n    }\r\n\r\n    function convertWLucaToLuca(address _to, uint256 _amount)\r\n        external\r\n        onlyWhiteListExecutor\r\n    {\r\n        require(\r\n            lucaConverted[msg.sender] \u003e= _amount,\r\n            \"Not enough wLuca to convert\"\r\n        );\r\n        lucaConverted[msg.sender] -= _amount;\r\n        _unWrap(_to, _amount);\r\n    }\r\n\r\n    function burnTraderLuca(uint256 _amount) external onlyWhiteListExecutor {\r\n        lucaConverted[msg.sender] += _amount;\r\n        IERC20(luca).burn(_amount);\r\n    }\r\n\r\n    function _wrap(address _to, uint256 _amount) internal {\r\n        IERC20(luca).burn(_amount);\r\n        IERC20(wLuca).mint(_to, _amount);\r\n    }\r\n\r\n    function _unWrap(address _to, uint256 _amount) internal {\r\n        IERC20(wLuca).burn(_amount);\r\n        IERC20(luca).mint(_to, _amount);\r\n    }\r\n\r\n    function pause(bool _pause) external onlyOwner {\r\n        paused = _pause;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"UpdateExecutor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"}],\"name\":\"UpdateLimit\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_luca\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wLuca\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crosschain\",\"type\":\"address\"}],\"name\":\"__Minter_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"addWhitelistExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnTraderLuca\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertLucaToWLuca\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertWLucaToLuca\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crosschain\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"luca\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lucaConverted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"updateExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limitAmount\",\"type\":\"uint256\"}],\"name\":\"updateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPercentage\",\"type\":\"uint256\"}],\"name\":\"updateMintPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wLuca\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wrraperExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "ContractName": "MinterContract",
      "CompilerVersion": "v0.8.0+commit.c7dfd78e",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://f447562b3793a25db97b2eb0b2cb4a836ecbfd251644ab622b703f9f2e221bfc"
    }
  ]
}
