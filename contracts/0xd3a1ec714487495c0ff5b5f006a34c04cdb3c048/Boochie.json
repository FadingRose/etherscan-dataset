{
  "TxHash": "0xf6ad96a802d591f90d80ba79ad6b17e29a93eceec64fed3cbb0ee0a4218af572",
  "ContractAddress": "0xd3a1ec714487495c0ff5b5f006a34c04cdb3c048",
  "Name": "Boochie",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nDescription: Boochie, created by artist Matt Furie, is a character known for his expressiveness and emotional range.\r\n\r\nWebsite: https://boochie.me/\r\nTwitter: https://x.com/BoochieETH/\r\nTelegram: https://t.me/+tVS-Wn-7qcNjZTUy/\r\n*/\r\n\r\n/*\r\n                ,----..        ,----..                        ,--,\r\n    ,---,.     /   /   \\      /   /   \\     ,----..         ,--.'|    ,---,     ,---,.\r\n  ,'  .'  \\   /   .     :    /   .     :   /   /   \\     ,--,  | : ,`--.' |   ,'  .' |\r\n,---.' .' |  .   /   ;.  \\  .   /   ;.  \\ |   :     : ,---.'|  : ' |   :  : ,---.'   |\r\n|   |  |: | .   ;   /  ` ; .   ;   /  ` ; .   |  ;. / |   | : _' | :   |  ' |   |   .'\r\n:   :  :  / ;   |  ; \\ ; | ;   |  ; \\ ; | .   ; /--`  :   : |.'  | |   :  | :   :  |-,\r\n:   |    ;  |   :  | ; | ' |   :  | ; | ' ;   | ;     |   ' '  ; : '   '  ; :   |  ;/|\r\n|   :     \\ .   |  ' ' ' : .   |  ' ' ' : |   : |     '   |  .'. | |   |  | |   :   .'\r\n|   |   . | '   ;  \\; /  | '   ;  \\; /  | .   | '___  |   | :  | ' '   :  ; |   |  |-,\r\n'   :  '; |  \\   \\  ',  /   \\   \\  ',  /  '   ; : .'| '   : |  : ; |   |  ' '   :  ;/|\r\n|   |  | ;    ;   :    /     ;   :    /   '   | '/  : |   | '  ,/  '   :  | |   |    \\\r\n|   :   /      \\   \\ .'       \\   \\ .'    |   :    /  ;   : ;--'   ;   |.'  |   :   .'\r\n|   | ,'        `---`          `---`       \\   \\ .'   |   ,/       '---'    |   | ,'\r\n`----'                                      `---`     '---'                 `----'\r\n*/\r\n\r\n// solidity version declaration\r\npragma solidity 0.8.20;\r\n\r\n/** Default functions **/\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/** Uniswap pair creation **/\r\ninterface IUniswapV2Factory {\r\n    /* Creates a new liquidity pool (pair) for the two specified ERC-20 tokens `tokenA` and `tokenB`.\r\n    Returns the address of the newly created pair contract */\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n/** Uniswap pair swap **/\r\ninterface IUniswapV2Router02 {\r\n    /* Swaps an exact amount of input tokens for as much ETH as possible, supporting tokens that take fees on transfers */\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    /* Returns the address of the Uniswap factory contract.\r\n    The factory contract is responsible for creating and managing the liquidity pools (pairs) */\r\n    function factory() external pure returns (address);\r\n    /* Returns the address of the Wrapped Ether (WETH) contract.\r\n    WETH is used within Uniswap to represent Ether in ERC-20 form */\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n/** Math operations with checks **/\r\nlibrary SafeMath {\r\n    /* Addition */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    /* Subtraction */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    /* Multiplication */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    /* Division */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\n/** Processes data received from the block **/\r\nabstract contract Context {\r\n    /* Returns the address of the sender of the transaction */\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/** Processes logic related to contract ownership **/\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /* When creating a contract, makes the sender's address the owner */\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /* When added to function, allows only the owner of the contract to call the function */\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /* Returns the address of the contract owner (deployer) */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /* Renounce of ownership of the contract.\r\n    Calling functions available only to the owner is no longer possible. Note: only owner can call this function */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n/** Processes main contract logic **/\r\ncontract Boochie is Context, IERC20, Ownable {\r\n    using SafeMath for uint256; // math lib connection\r\n    mapping (address =\u003e uint256) private _balances; // list of addresses and their balances | _balances[address] = addressBalance\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances; // nested list of allowances and their balances | _allowances[owner][spender] = spenderAllowance\r\n    mapping (address =\u003e bool) private _isExcludedFromFee; // list of excluded from fee addresses | _isExcludedFromFee[address] = whitelistedAddress\r\n    address payable private _taxWallet; // address for taxes\r\n\r\n    uint256 private _transferTax = 0; // tax for transfers\r\n    uint256 private _initialBuyTax = 30; // buy tax when '_buyCount' variable is Less than '_reduceBuyTaxAt' constant\r\n    uint256 private _initialSellTax = 30; // sell tax when '_buyCount' variable is Less than '_reduceSellTaxAt' constant\r\n    uint256 private _finalBuyTax = 0; // buy tax when '_buyCount' variable is Greater than '_reduceBuyTaxAt' constant\r\n    uint256 private _finalSellTax = 0; // sell tax when '_buyCount' variable is Greater than '_reduceSellTaxAt' constant\r\n    uint256 private _reduceBuyTaxAt = 300; // number of purchases required to reduce buy tax\r\n    uint256 private _reduceSellTaxAt = 300; // number of purchases required to reduce sell tax\r\n    uint256 private _preventSwapBefore = 20; // prevents tax swap up to a specified number of purchases\r\n    uint256 private _buyCount = 0; // buy transactions count\r\n\r\n    string private constant _name = unicode\"Boochie\";\r\n    string private constant _symbol = unicode\"BOOCHIE\"; // ticker\r\n    uint8 private constant _decimals = 18; // number of decimal places for the token\r\n    uint256 private constant _totalSupply = 100_000_000 * 10**_decimals; // 100m (all)\r\n    uint256 public _maxTxAmount = 1_000_000 * 10**_decimals; // 1m (1%) | maximum buy transaction amount\r\n    uint256 public _maxWalletSize = 2_000_000 * 10**_decimals; // 2m (2%)\r\n    uint256 public _taxSwapThreshold = 500_000 * 10**_decimals; // 500k (0.5%) | tax swap will be triggered after tax amount is larger than it\r\n    uint256 public _maxTaxSwap = 1_000_000 * 10**_decimals; // 1m (1%) | max tokens amount to swap in one transaction\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n\r\n    IUniswapV2Router02 private uniswapV2Router; // declares a variable `uniswapV2Router` of type `IUniswapV2Router02` (has all the methods listed in the interface)\r\n    address private uniswapV2Pair; // a variable in which, when a pair is created, its address is written\r\n    bool private inSwap = false; // 'true' during taxes swap transaction processing, otherwise 'false'\r\n    bool private swapEnabled = false; // allows tax swap when 'true'\r\n\r\n    /* Called when creating a contract */\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender()); // taxes go to the address of the contract deployer\r\n        _balances[_msgSender()] = _totalSupply; // contract deployer receives all tokens on his balance\r\n        _isExcludedFromFee[owner()] = true; // contract address is added to the whitelist\r\n        _isExcludedFromFee[_taxWallet] = true; // contract address is added to the whitelist\r\n        _isExcludedFromFee[address(this)] = true; // contract deployer address is added to the whitelist\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    /* When added to function, prevents two simultaneous taxes swap */\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    /* Changes transfer tax. Note: only owner can call this function */\r\n    function setTransferTax(uint256 newTransferTax) public onlyOwner returns (bool) {\r\n        _transferTax = newTransferTax;\r\n        return true;\r\n    }\r\n\r\n    /* Changes initial buy tax. Note: only owner can call this function */\r\n    function setInitialBuyTax(uint256 newInitialBuyTax) public onlyOwner returns (bool) {\r\n        _initialBuyTax = newInitialBuyTax;\r\n        return true;\r\n    }\r\n\r\n    /* Changes initial sell tax. Note: only owner can call this function */\r\n    function setInitialSellTax(uint256 newInitialSellTax) public onlyOwner returns (bool) {\r\n        _initialSellTax = newInitialSellTax;\r\n        return true;\r\n    }\r\n\r\n    /* Adds the specified address to the whitelist. Note: only owner can call this function */\r\n    function addToWhitelist(address newAddress) public onlyOwner returns (bool) {\r\n        _isExcludedFromFee[newAddress] = true;\r\n        return true;\r\n    }\r\n\r\n    /* Returns the transfer tax value */\r\n    function transferTax() public view  returns (uint256) {\r\n        return _transferTax;\r\n    }\r\n\r\n    /* Returns the initial buy tax value */\r\n    function initialBuyTax() public view returns (uint256) {\r\n        return _initialBuyTax;\r\n    }\r\n\r\n    /* Returns the initial sell tax value */\r\n    function initialSellTax() public view  returns (uint256) {\r\n        return _initialSellTax;\r\n    }\r\n\r\n    /* Returns the name of the contract */\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /* Returns the ticker */\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /* Returns the '_decimals' variable value */\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /* Returns the total supply value */\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /* Returns the balance value of the specified address */\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /* Returns the amount of tokens that 'spender' is currently allowed to withdraw from 'owner'\r\n    account using the 'transferFrom' function. */\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /* Transfers 'amount' tokens from the sender to 'recipient'. Calls the '_transfer' function containing the main logic */\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /* Allows 'spender' to spend 'amount' tokens on behalf of the sender. Calls the '_approve' function containing the main logic */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /* Allows 'recipient' to spend 'amount' tokens on behalf of 'sender'\r\n    and transfers 'amount' tokens from the 'sender' to 'recipient'.\r\n    Calls the '_transfer' and '_approve' functions containing the main logic */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /* Allows 'spender' to spend 'amount' tokens on behalf of the sender */\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /* Sends ETH tax to '_taxWallet' */\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    /* Compares two numbers and returns the smallest */\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a \u003e b) ? b : a;\r\n    }\r\n\r\n    /* Transfers 'amount' tokens from the sender to 'recipient' */\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount = 0;\r\n\r\n        // from == uniswapV2Pair: Buy\r\n        // to == uniswapV2Pair: Sell\r\n        if (from != owner() \u0026\u0026 to != owner()) {\r\n            if (_buyCount == 0) {\r\n                taxAmount = amount.mul((_buyCount \u003e _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax).div(100); // buy tax\r\n            }\r\n            if (_buyCount \u003e 0) {\r\n                taxAmount = amount.mul(_transferTax).div(100); // transfer tax\r\n            }\r\n\r\n            // any buy with tax will increase '_buyCount' by 1\r\n            if (from == uniswapV2Pair \u0026\u0026 to != address(uniswapV2Router) \u0026\u0026 !_isExcludedFromFee[to]) {\r\n                require(amount \u003c= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount \u003c= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                taxAmount = amount.mul((_buyCount \u003e _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax).div(100); // buy tax\r\n                _buyCount++;\r\n            }\r\n\r\n            if (to == uniswapV2Pair \u0026\u0026 from != address(this)) {\r\n                taxAmount = amount.mul((_buyCount \u003e _reduceSellTaxAt) ? _finalSellTax : _initialSellTax).div(100); // sell tax\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !inSwap \u0026\u0026\r\n                to == uniswapV2Pair \u0026\u0026\r\n                swapEnabled \u0026\u0026\r\n                contractTokenBalance \u003e _taxSwapThreshold \u0026\u0026\r\n                _buyCount \u003e _preventSwapBefore\r\n            ) {\r\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap))); // swap token-tax for ETH (max: '_maxTaxSwap')\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance \u003e 0) {\r\n                    sendETHToFee(address(this).balance); // send tax ETH to '_taxWallet'\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount \u003e 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount); // add token-tax to contract balance\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount); // remove 'amount' from sender balance\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount)); // add 'amount' minus 'tax' to recipient balance\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    /* Changes tokens for ETH. Note: 'lockTheSwap' prevents two simultaneous taxes swap */\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2); // array with length = 2\r\n        path[0] = address(this); // first pair element: token address\r\n        path[1] = uniswapV2Router.WETH(); // second pair element: WETH address\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount); // allows uniswap to spend (exchange) 'tokenAmount' on behalf of contract\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ); // swap tokens for ETH\r\n    }\r\n\r\n    /* Removes limitations to maximum buy transaction amount and to maximum wallet size.\r\n    Note: only owner can call this function */\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _totalSupply;\r\n        _maxWalletSize = _totalSupply;\r\n        emit MaxTxAmountUpdated(_totalSupply);\r\n    }\r\n\r\n    /* Creates a pair and enables trading. Note: only owner can call this function */\r\n    function openTrading() external onlyOwner() {\r\n        // mainNet address: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // creates uniswap router instance\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply); // allows uniswap to manage total supply on behalf of contract\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH()); // creates pair 'token/WETH'\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max); // #\r\n        swapEnabled = true; // allow tax swap\r\n    }\r\n\r\n    /* Manual swap tokens-tax to ETH. Note: in this case, tax swap limits do not apply */\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet); // only '_taxWallet' address (owner) can call this function; note: will still work after renounce\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance \u003e 0) {\r\n            swapTokensForEth(tokenBalance); // swap token-tax for ETH\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance \u003e 0) {\r\n            sendETHToFee(ethBalance); // send ETH to '_taxWallet'\r\n        }\r\n    }\r\n\r\n    // contract can receive ETH\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInitialBuyTax\",\"type\":\"uint256\"}],\"name\":\"setInitialBuyTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInitialSellTax\",\"type\":\"uint256\"}],\"name\":\"setInitialSellTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransferTax\",\"type\":\"uint256\"}],\"name\":\"setTransferTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Boochie",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://528af3067d48476635dc656547b295444fb7717bfa38920374f663d0a68946d5"
    }
  ]
}
