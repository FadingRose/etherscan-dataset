{
  "TxHash": "0x7298772746853bff0376a50fbb1ac80c9503442b594ad4ac56da10ae9ab18c7e",
  "ContractAddress": "0xd30AbAb71d5a44347ADd1Fcff990bcD2482Bc376",
  "Name": "DMDR_buy",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// File: @chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\r\n}\r\n\r\n// File: DMDR.sol\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.20;\r\n\r\ninterface TOKEN\r\n{\r\n    function transfer(address to, uint tokens) external returns (bool success);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) ;\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n}\r\n\r\n\r\n\r\ncontract DMDR_buy\r\n    {\r\n\r\n\r\n        address payable public  owner;\r\n\r\n        uint public min_amount=10000000;\r\n\r\n        address public USDT_token=0xdAC17F958D2ee523a2206206994597C13D831ec7;\r\n        address public DMDR_address=0xC427f19DeA9e7C967fb3c49bFb4f3D8A8CDcd2Ea;\r\n\r\n        uint public DMDR_price = 770 ether;\r\n        AggregatorV3Interface internal priceFeed;\r\n\r\n        constructor()\r\n        {\r\n            owner=payable(msg.sender);\r\n            priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419); //Mainnet\r\n\r\n            \r\n            \r\n        }\r\n        \r\n\r\n\r\n        function getLatestPrice() public view returns (int) {\r\n            // prettier-ignore\r\n            (\r\n                /* uint80 roundID */,\r\n                int price,\r\n                /*uint startedAt*/,\r\n                /*uint timeStamp*/,\r\n                /*uint80 answeredInRound*/\r\n            ) = priceFeed.latestRoundData();\r\n            return price*10**10;\r\n            }\r\n\r\n\r\n\r\n        function getConversionRate(int dollar_amount) public view returns (int) {\r\n\r\n            int MaticPrice = getLatestPrice();\r\n            int UsdToMatic = (( dollar_amount *10**18 ) / (MaticPrice));\r\n\r\n            return UsdToMatic;\r\n\r\n        }\r\n\r\n        function get_ethPrice()  public view returns(uint ){\r\n            uint price;\r\n            price = uint256(getConversionRate( int256(DMDR_price)));\r\n\r\n            return price;\r\n\r\n        }\r\n\r\n\r\n\r\n        function buy_token(uint amount , uint choosed_token)  public payable returns(bool){\r\n            \r\n            require(choosed_token \u003e=0 \u0026\u0026 choosed_token \u003c2);\r\n                uint bought_amount;\r\n\r\n\r\n            if(choosed_token==0)             // ETHER\r\n            {\r\n                 bought_amount= ((amount* 10**9) / get_ethPrice()) ;\r\n                require(bought_amount \u003e= min_amount);\r\n                require(TOKEN(DMDR_address).balanceOf(address(this)) \u003e= (bought_amount));\r\n\r\n                owner.transfer(msg.value);  \r\n                   \r\n                TOKEN(DMDR_address).transfer(msg.sender,bought_amount);\r\n               \r\n\r\n\r\n\r\n            }\r\n            else if(choosed_token==1)        // USDT\r\n            {\r\n                bought_amount=((( amount * (10**9)) / DMDR_price)) ;\r\n\r\n                require(bought_amount \u003e= min_amount);\r\n\r\n                require(TOKEN(USDT_token).balanceOf(msg.sender) \u003e=  amount/10**12 ,\"not enough usdt\");\r\n                require(TOKEN(USDT_token).allowance(msg.sender,address(this))\u003e=amount/10**12,\"less allowance\");    //uncomment\r\n\r\n                require(TOKEN(DMDR_address).balanceOf(address(this))\u003e=bought_amount,\"contract have less tokens\");\r\n                \r\n                TOKEN(USDT_token).transferFrom(msg.sender,owner,amount/10**12);\r\n\r\n                TOKEN(DMDR_address).transfer(msg.sender,bought_amount);\r\n                \r\n\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        function set_DMDR_Price(uint _val)  public\r\n        {\r\n            require(msg.sender==owner);\r\n            DMDR_price = _val;\r\n        }\r\n\r\n\r\n        function set_minAmount(uint _val)  public\r\n        {\r\n            require(msg.sender==owner);\r\n            min_amount = _val;\r\n        }\r\n\r\n        function transferOwnership(address _owner)  public\r\n        {\r\n            require(msg.sender==owner);\r\n            owner = payable(_owner);\r\n        }\r\n\r\n       function withdraw_DMDRV1(uint _amount)  public\r\n        {\r\n            require(msg.sender==owner);\r\n            uint bal = TOKEN(DMDR_address).balanceOf(address(this));\r\n            require(bal\u003e=_amount);\r\n            TOKEN(DMDR_address).transfer(owner,_amount); \r\n        }\r\n\r\n\r\n    }",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DMDR_address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DMDR_price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"choosed_token\",\"type\":\"uint256\"}],\"name\":\"buy_token\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"dollar_amount\",\"type\":\"int256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_ethPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"set_DMDR_Price\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"set_minAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw_DMDRV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "DMDR_buy",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://82fdfdc2cebdaedad43dd3479bdc3e9ca17f6b393bdd80f3ba6fe2d20369c094"
    }
  ]
}
