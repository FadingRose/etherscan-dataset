{
  "TxHash": "0xf5c9aa452abd34b80b8806d9e01fbd47e6ac9da44ce07839860a571123f4825c",
  "ContractAddress": "0x4b3223e0155a00061fa64f98e824aef94d88be9d",
  "Name": "Codeup",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.23;\r\n\r\n///░█████╗░░█████╗░██████╗░███████╗██╗░░░██╗██████╗░░░░███████╗████████╗██╗░░██╗\r\n///██╔══██╗██╔══██╗██╔══██╗██╔════╝██║░░░██║██╔══██╗░░░██╔════╝╚══██╔══╝██║░░██║\r\n///██║░░╚═╝██║░░██║██║░░██║█████╗░░██║░░░██║██████╔╝░░░█████╗░░░░░██║░░░███████║\r\n///██║░░██╗██║░░██║██║░░██║██╔══╝░░██║░░░██║██╔═══╝░░░░██╔══╝░░░░░██║░░░██╔══██║\r\n///╚█████╔╝╚█████╔╝██████╔╝███████╗╚██████╔╝██║░░░░░██╗███████╗░░░██║░░░██║░░██║\r\n///░╚════╝░░╚════╝░╚═════╝░╚══════╝░╚═════╝░╚═╝░░░░░╚═╝╚══════╝░░░╚═╝░░░╚═╝░░╚═╝\r\n\r\n/// @title Codeup contract\r\n/// @notice This contract is used for the Codeup game\r\ncontract Codeup {\r\n    struct Tower {\r\n        uint256 coins; /// @notice User's coins balance\r\n        uint256 money; /// @notice User's money balance\r\n        uint256 money2; /// @notice User's earned money balance\r\n        uint256 yields; /// @notice User's yields\r\n        uint256 timestamp; /// @notice User's registration timestamp\r\n        uint256 hrs; /// @notice User's hours in the tower\r\n        address ref; /// @notice User's referrer\r\n        uint256[3] refs; /// @notice User's refs count\r\n        uint256[3] refDeps; /// @notice User's refs earnings\r\n        uint8[8] builders; /// @notice User's builders count on each floor\r\n        uint256 totalCoinsSpend; /// @notice User's total coins spend\r\n        uint256 totalMoneyReceived; /// @notice User's total money received\r\n    }\r\n    /// @notice User's tower info\r\n    mapping(address =\u003e Tower) public towers;\r\n    /// @notice Total builders count\r\n    uint256 public totalBuilders;\r\n    /// @notice Total towers count\r\n    uint256 public totalTowers;\r\n    /// @notice Total invested amount\r\n    uint256 public totalInvested;\r\n    /// @notice Coins price\r\n    uint256 public coinsPrice;\r\n    /// @notice Money rate\r\n    uint256 public moneyRate;\r\n    /// @notice Manager address\r\n    address public immutable manager;\r\n    /// @notice Start date\r\n    uint256 public startUNIX;\r\n    /// @notice Referral percents\r\n    uint256[] refPercent = [8, 5, 2];\r\n\r\n    /// @notice Emmited when user created tower\r\n    /// @param user User's address\r\n    /// @param ref User's referrer address\r\n    event TowerCreated(address indexed user, address indexed ref);\r\n    /// @notice Emmited when user paid project fee\r\n    /// @param user User's address\r\n    /// @param amount Fee amount\r\n    event ProjectFeePaid(address indexed user, uint256 amount);\r\n    /// @notice Emmited when user added coins\r\n    /// @param user User's address\r\n    /// @param coinsAmount Coins amount\r\n    /// @param moneyAmount Money amount\r\n    event AddCoins(\r\n        address indexed user,\r\n        uint256 coinsAmount,\r\n        uint256 moneyAmount\r\n    );\r\n    /// @notice Emmited when user earned referral\r\n    /// @param user User's address\r\n    /// @param coinsAmount Coins amount\r\n    event RefEarning(\r\n        address indexed user,\r\n        uint256 coinsAmount,\r\n        uint256 moneyAmount,\r\n        uint256 iteration\r\n    );\r\n    /// @notice Emmited when user has new refferal\r\n    event NewRefferal(address indexed user);\r\n    /// @notice Emmited when user withdraw money\r\n    /// @param user User's address\r\n    /// @param amount Money amount\r\n    event Withdraw(address user, uint256 amount);\r\n    /// @notice Emmited when user collect earned money\r\n    /// @param user User's address\r\n    /// @param amount Money amount\r\n    event CollectMoney(address user, uint256 amount);\r\n    /// @notice Emmited when user upgrade tower\r\n    /// @param user User's address\r\n    /// @param floorId Floor id\r\n    /// @param coins Coins amount\r\n    /// @param yields Yield amount\r\n    event UpgradeTower(\r\n        address user,\r\n        uint256 floorId,\r\n        uint256 coins,\r\n        uint256 yields\r\n    );\r\n    /// @notice Emmited when user sync tower\r\n    /// @param user User's address\r\n    /// @param yields Yield amount\r\n    /// @param hrs Hours amount\r\n    /// @param date Date\r\n    event SyncTower(address user, uint256 yields, uint256 hrs, uint256 date);\r\n\r\n    /// @notice Contract constructor\r\n    /// @param _startDate Start date\r\n    /// @param _manager Manager address\r\n    constructor(uint256 _startDate, address _manager, uint256 _coinsPrice) {\r\n        require(_coinsPrice \u003e 0);\r\n        require(_startDate \u003e 0);\r\n        require(_manager != address(0));\r\n        startUNIX = _startDate;\r\n        manager = _manager;\r\n        coinsPrice = _coinsPrice;\r\n        moneyRate = _coinsPrice / 1000;\r\n    }\r\n\r\n    /// @notice Add coins to the tower\r\n    /// @param ref Referrer address\r\n    function addCoins(address ref) external payable {\r\n        uint256 tokenAmount = msg.value;\r\n        require(block.timestamp \u003e startUNIX, \"We are not live yet!\");\r\n        uint256 coins = tokenAmount / coinsPrice;\r\n        require(coins \u003e 0, \"Zero coins\");\r\n        address user = msg.sender;\r\n        address managerCache = manager;\r\n        totalInvested += tokenAmount;\r\n        bool isNew;\r\n        if (towers[user].timestamp == 0) {\r\n            require(ref != user, \"Self ref\");\r\n            totalTowers++;\r\n            isNew = true;\r\n            towers[user].ref = ref;\r\n            towers[user].timestamp = block.timestamp;\r\n            emit TowerCreated(user, ref);\r\n        }\r\n        refEarning(user, coins, isNew);\r\n        towers[user].coins += coins;\r\n        emit AddCoins(user, coins, tokenAmount);\r\n        sendNative(managerCache, (tokenAmount * 10) / 100);\r\n\r\n        emit ProjectFeePaid(managerCache, (tokenAmount * 10) / 100);\r\n    }\r\n\r\n    /// @notice Internal function for ref earning calculation\r\n    /// @param user User's address\r\n    /// @param coins Coins amount\r\n    /// @param isNew Is new user\r\n    function refEarning(address user, uint256 coins, bool isNew) internal {\r\n        uint8 i = 0;\r\n        address ref = towers[user].ref;\r\n        while (i \u003c 3) {\r\n            if (ref == address(0)) {\r\n                break;\r\n            }\r\n            if (isNew) {\r\n                towers[ref].refs[i]++;\r\n                emit NewRefferal(ref);\r\n            }\r\n            uint256 refTemp = (coins * refPercent[i]) / 100;\r\n            uint256 coinsAmount = (refTemp * 70) / 100;\r\n            uint256 money = (refTemp * 1000 * 30) / 100;\r\n            towers[ref].coins += coinsAmount;\r\n            towers[ref].money += money;\r\n            towers[ref].refDeps[i] += refTemp;\r\n            i++;\r\n            emit RefEarning(ref, coinsAmount, money, i);\r\n            ref = towers[ref].ref;\r\n        }\r\n    }\r\n\r\n    /// @notice Withdraw earned money from the tower\r\n    function withdrawMoney() external {\r\n        address user = msg.sender;\r\n        uint256 money = towers[user].money * moneyRate;\r\n        uint256 amount = address(this).balance \u003c money\r\n            ? address(this).balance\r\n            : money;\r\n        towers[user].money = 0;\r\n        sendNative(user, amount);\r\n        emit Withdraw(user, amount);\r\n    }\r\n\r\n    /// @notice Collect earned money from the tower to game balance\r\n    function collectMoney() external {\r\n        address user = msg.sender;\r\n        syncTower(user);\r\n        towers[user].hrs = 0;\r\n        uint256 collect = towers[user].money2;\r\n        towers[user].money += collect;\r\n        towers[user].money2 = 0;\r\n        emit CollectMoney(user, collect);\r\n    }\r\n\r\n    /// @notice Upgrade tower\r\n    /// @param floorId Floor id\r\n    function upgradeTower(uint256 floorId) external {\r\n        require(floorId \u003c 8, \"Max 8 floors\");\r\n        address user = msg.sender;\r\n        if (floorId \u003e 0) {\r\n            require(\r\n                towers[user].builders[floorId - 1] \u003e= 5,\r\n                \"Need to buy previous tower\"\r\n            );\r\n        }\r\n        syncTower(user);\r\n        towers[user].builders[floorId]++;\r\n        totalBuilders++;\r\n        uint256 builders = towers[user].builders[floorId];\r\n        uint256 coinsSpend = getUpgradePrice(floorId, builders);\r\n        towers[user].coins -= coinsSpend;\r\n        towers[user].totalCoinsSpend += coinsSpend;\r\n        uint256 yield = getYield(floorId, builders);\r\n        towers[user].yields += yield;\r\n        emit UpgradeTower(msg.sender, floorId, coinsSpend, yield);\r\n    }\r\n\r\n    /// @notice Get user tower builders info\r\n    /// @param addr User's address\r\n    function getBuilders(address addr) public view returns (uint8[8] memory) {\r\n        return towers[addr].builders;\r\n    }\r\n\r\n    /// @notice Get user ref earning info\r\n    /// @param addr User's address\r\n    function getRefEarning(\r\n        address addr\r\n    )\r\n        public\r\n        view\r\n        returns (uint256[3] memory _refEarning, uint256[3] memory _refCount)\r\n    {\r\n        return (towers[addr].refDeps, towers[addr].refs);\r\n    }\r\n\r\n    /// @notice Sync user tower info\r\n    /// @param user User's address\r\n    function syncTower(address user) internal {\r\n        require(towers[user].timestamp \u003e 0, \"User is not registered\");\r\n        if (towers[user].yields \u003e 0) {\r\n            uint256 hrs = block.timestamp /\r\n                3600 -\r\n                towers[user].timestamp /\r\n                3600;\r\n            if (hrs + towers[user].hrs \u003e 24) {\r\n                hrs = 24 - towers[user].hrs;\r\n            }\r\n            uint256 yield = hrs * towers[user].yields;\r\n\r\n            towers[user].money2 += yield;\r\n            towers[user].totalMoneyReceived += yield;\r\n            towers[user].hrs += hrs;\r\n            emit SyncTower(user, yield, hrs, block.timestamp);\r\n        }\r\n        towers[user].timestamp = block.timestamp;\r\n    }\r\n\r\n    /// @notice This function sends native chain token.\r\n    /// @param to_ - address of receiver\r\n    /// @param amount_ - amount of native chain token\r\n    /// @dev If the transfer fails, the function reverts.\r\n    function sendNative(address to_, uint256 amount_) internal {\r\n        (bool success, ) = to_.call{value: amount_}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    /// @notice Helper function for getting upgrade price for the floor and builder\r\n    /// @param floorId Floor id\r\n    /// @param builderId Builder id\r\n    function getUpgradePrice(\r\n        uint256 floorId,\r\n        uint256 builderId\r\n    ) internal pure returns (uint256) {\r\n        if (builderId == 1)\r\n            return [14, 21, 42, 77, 168, 280, 504, 630][floorId];\r\n        if (builderId == 2) return [7, 11, 21, 35, 63, 112, 280, 350][floorId];\r\n        if (builderId == 3) return [9, 14, 28, 49, 84, 168, 336, 560][floorId];\r\n        if (builderId == 4)\r\n            return [11, 21, 35, 63, 112, 210, 364, 630][floorId];\r\n        if (builderId == 5)\r\n            return [15, 28, 49, 84, 140, 252, 448, 1120][floorId];\r\n        revert(\"Incorrect builderId\");\r\n    }\r\n\r\n    /// @notice Helper function for getting yield for the floor and builder\r\n    /// @param floorId Floor id\r\n    /// @param builderId Builder id\r\n    function getYield(\r\n        uint256 floorId,\r\n        uint256 builderId\r\n    ) internal pure returns (uint256) {\r\n        if (builderId == 1)\r\n            return [467, 226, 294, 606, 1163, 1617, 2267, 1760][floorId];\r\n        if (builderId == 2)\r\n            return [41, 37, 121, 215, 305, 415, 890, 389][floorId];\r\n        if (builderId == 3)\r\n            return [170, 51, 218, 317, 432, 351, 357, 1030][floorId];\r\n        if (builderId == 4)\r\n            return [218, 92, 270, 410, 596, 858, 972, 1045][floorId];\r\n        if (builderId == 5)\r\n            return [239, 98, 381, 551, 742, 1007, 1188, 2416][floorId];\r\n        revert(\"Incorrect builderId\");\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_coinsPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moneyAmount\",\"type\":\"uint256\"}],\"name\":\"AddCoins\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectMoney\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewRefferal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProjectFeePaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinsAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"moneyAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"iteration\",\"type\":\"uint256\"}],\"name\":\"RefEarning\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"SyncTower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"TowerCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"floorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"}],\"name\":\"UpgradeTower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"}],\"name\":\"addCoins\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getBuilders\",\"outputs\":[{\"internalType\":\"uint8[8]\",\"name\":\"\",\"type\":\"uint8[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getRefEarning\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"_refEarning\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_refCount\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moneyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startUNIX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBuilders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInvested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTowers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"towers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"coins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"money2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yields\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hrs\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ref\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalCoinsSpend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMoneyReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"floorId\",\"type\":\"uint256\"}],\"name\":\"upgradeTower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawMoney\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "Codeup",
      "CompilerVersion": "v0.8.23+commit.f704f362",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000b8b94818be387b5d195d634fcea6182e2558068a000000000000000000000000000000000000000000000000000000e8d4a51000",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://b9dc02305166245f2ea82106c310408f8c659f64112ae3aa33d927f8835c7e04"
    }
  ]
}
