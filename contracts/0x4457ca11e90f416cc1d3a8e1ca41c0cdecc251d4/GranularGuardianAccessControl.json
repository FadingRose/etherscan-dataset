{
  "TxHash": "0x0d35f14c8bef53c89dd8127c91fa5c576f4581cc8d358b492eb9eb588d8e1a92",
  "ContractAddress": "0x4457ca11e90f416cc1d3a8e1ca41c0cdecc251d4",
  "Name": "GranularGuardianAccessControl",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "{{\r\n  \"sources\": {\r\n    \"lib/aave-delivery-infrastructure/lib/aave-helpers/lib/solidity-utils/src/contracts/access-control/OwnableWithGuardian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity \u003e=0.7.0;\\n\\nimport {IWithGuardian} from './interfaces/IWithGuardian.sol';\\nimport {Ownable} from '../oz-common/Ownable.sol';\\n\\nabstract contract OwnableWithGuardian is Ownable, IWithGuardian {\\n  address private _guardian;\\n\\n  constructor() {\\n    _updateGuardian(_msgSender());\\n  }\\n\\n  modifier onlyGuardian() {\\n    _checkGuardian();\\n    _;\\n  }\\n\\n  modifier onlyOwnerOrGuardian() {\\n    _checkOwnerOrGuardian();\\n    _;\\n  }\\n\\n  function guardian() public view override returns (address) {\\n    return _guardian;\\n  }\\n\\n  /// @inheritdoc IWithGuardian\\n  function updateGuardian(address newGuardian) external override onlyOwnerOrGuardian {\\n    _updateGuardian(newGuardian);\\n  }\\n\\n  /**\\n   * @dev method to update the guardian\\n   * @param newGuardian the new guardian address\\n   */\\n  function _updateGuardian(address newGuardian) internal {\\n    address oldGuardian = _guardian;\\n    _guardian = newGuardian;\\n    emit GuardianUpdated(oldGuardian, newGuardian);\\n  }\\n\\n  function _checkGuardian() internal view {\\n    require(guardian() == _msgSender(), 'ONLY_BY_GUARDIAN');\\n  }\\n\\n  function _checkOwnerOrGuardian() internal view {\\n    require(_msgSender() == owner() || _msgSender() == guardian(), 'ONLY_BY_OWNER_OR_GUARDIAN');\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/aave-helpers/lib/solidity-utils/src/contracts/access-control/interfaces/IWithGuardian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity \u003e=0.7.0;\\n\\ninterface IWithGuardian {\\n  /**\\n   * @dev Event emitted when guardian gets updated\\n   * @param oldGuardian address of previous guardian\\n   * @param newGuardian address of the new guardian\\n   */\\n  event GuardianUpdated(address oldGuardian, address newGuardian);\\n\\n  /**\\n   * @dev get guardian address;\\n   */\\n  function guardian() external view returns (address);\\n\\n  /**\\n   * @dev method to update the guardian\\n   * @param newGuardian the new guardian address\\n   */\\n  function updateGuardian(address newGuardian) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/aave-helpers/lib/solidity-utils/src/contracts/oz-common/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/aave-helpers/lib/solidity-utils/src/contracts/oz-common/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/aave-helpers/lib/solidity-utils/src/contracts/utils/interfaces/IRescuable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title IRescuable\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the Rescuable contract\\n */\\ninterface IRescuable {\\n  /**\\n   * @notice emitted when erc20 tokens get rescued\\n   * @param caller address that triggers the rescue\\n   * @param token address of the rescued token\\n   * @param to address that will receive the rescued tokens\\n   * @param amount quantity of tokens rescued\\n   */\\n  event ERC20Rescued(\\n    address indexed caller,\\n    address indexed token,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @notice emitted when native tokens get rescued\\n   * @param caller address that triggers the rescue\\n   * @param to address that will receive the rescued tokens\\n   * @param amount quantity of tokens rescued\\n   */\\n  event NativeTokensRescued(address indexed caller, address indexed to, uint256 amount);\\n\\n  /**\\n   * @notice method called to rescue tokens sent erroneously to the contract. Only callable by owner\\n   * @param erc20Token address of the token to rescue\\n   * @param to address to send the tokens\\n   * @param amount of tokens to rescue\\n   */\\n  function emergencyTokenTransfer(address erc20Token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice method called to rescue ether sent erroneously to the contract. Only callable by owner\\n   * @param to address to send the eth\\n   * @param amount of eth to rescue\\n   */\\n  function emergencyEtherTransfer(address to, uint256 amount) external;\\n\\n  /**\\n   * @notice method that defines the address that is allowed to rescue tokens\\n   * @return the allowed address\\n   */\\n  function whoCanRescue() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address =\u003e bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 =\u003e RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 =\u003e EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/access/IAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value \u003c 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\\n            buffer[i] = _SYMBOLS[value \u0026 0xf];\\n            value \u003e\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \u003e b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a \u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a \u0026 b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator \u003e prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always \u003e= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator \u0026 (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up \u0026\u0026 mulmod(x, y, denominator) \u003e 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) \u003c= a \u003c 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) \u003c= a \u003c 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) \u003c= sqrt(a) \u003c sqrt(2**(k+1))`\\n        // → `2**(k/2) \u003c= sqrt(a) \u003c 2**((k+1)/2) \u003c= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 \u003c\u003c (log2(a) \u003e\u003e 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) \u003e\u003e 1;\\n            result = (result + a / result) \u003e\u003e 1;\\n            result = (result + a / result) \u003e\u003e 1;\\n            result = (result + a / result) \u003e\u003e 1;\\n            result = (result + a / result) \u003e\u003e 1;\\n            result = (result + a / result) \u003e\u003e 1;\\n            result = (result + a / result) \u003e\u003e 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up \u0026\u0026 result * result \u003c a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \u003e\u003e 128 \u003e 0) {\\n                value \u003e\u003e= 128;\\n                result += 128;\\n            }\\n            if (value \u003e\u003e 64 \u003e 0) {\\n                value \u003e\u003e= 64;\\n                result += 64;\\n            }\\n            if (value \u003e\u003e 32 \u003e 0) {\\n                value \u003e\u003e= 32;\\n                result += 32;\\n            }\\n            if (value \u003e\u003e 16 \u003e 0) {\\n                value \u003e\u003e= 16;\\n                result += 16;\\n            }\\n            if (value \u003e\u003e 8 \u003e 0) {\\n                value \u003e\u003e= 8;\\n                result += 8;\\n            }\\n            if (value \u003e\u003e 4 \u003e 0) {\\n                value \u003e\u003e= 4;\\n                result += 4;\\n            }\\n            if (value \u003e\u003e 2 \u003e 0) {\\n                value \u003e\u003e= 2;\\n                result += 2;\\n            }\\n            if (value \u003e\u003e 1 \u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up \u0026\u0026 1 \u003c\u003c result \u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \u003e= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value \u003e= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value \u003e= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value \u003e= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value \u003e= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value \u003e= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value \u003e= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up \u0026\u0026 10 ** result \u003c value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value \u003e\u003e 128 \u003e 0) {\\n                value \u003e\u003e= 128;\\n                result += 16;\\n            }\\n            if (value \u003e\u003e 64 \u003e 0) {\\n                value \u003e\u003e= 64;\\n                result += 8;\\n            }\\n            if (value \u003e\u003e 32 \u003e 0) {\\n                value \u003e\u003e= 32;\\n                result += 4;\\n            }\\n            if (value \u003e\u003e 16 \u003e 0) {\\n                value \u003e\u003e= 16;\\n                result += 2;\\n            }\\n            if (value \u003e\u003e 8 \u003e 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up \u0026\u0026 1 \u003c\u003c (result \u003c\u003c 3) \u003c value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a \u003e b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a \u003c b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a \u0026 b) + ((a ^ b) \u003e\u003e 1);\\n        return x + (int256(uint256(x) \u003e\u003e 255) \u0026 (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n \u003e= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 =\u003e uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/access_control/GranularGuardianAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.8;\\n\\nimport {ICrossChainForwarder} from '../interfaces/ICrossChainForwarder.sol';\\nimport {ICrossChainControllerWithEmergencyMode} from '../interfaces/ICrossChainControllerWithEmergencyMode.sol';\\nimport {IGranularGuardianAccessControl, Envelope, ICrossChainReceiver} from './IGranularGuardianAccessControl.sol';\\nimport {AccessControlEnumerable} from 'openzeppelin-contracts/contracts/access/AccessControlEnumerable.sol';\\nimport {IWithGuardian} from 'solidity-utils/contracts/access-control/OwnableWithGuardian.sol';\\nimport {ICrossChainControllerWithEmergencyModeDeprecated} from '../interfaces/ICrossChainControllerWithEmergencyModeDeprecated.sol';\\n\\n/**\\n * @title GranularGuardianAccessControl\\n * @author BGD Labs\\n * @notice Contract to manage a granular access to the methods safeguarded by guardian on CrossChainController\\n */\\ncontract GranularGuardianAccessControl is AccessControlEnumerable, IGranularGuardianAccessControl {\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  address public immutable CROSS_CHAIN_CONTROLLER;\\n\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  bytes32 public constant SOLVE_EMERGENCY_ROLE = keccak256('SOLVE_EMERGENCY_ROLE');\\n\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  bytes32 public constant RETRY_ROLE = keccak256('RETRY_ROLE');\\n\\n  /**\\n   * @param initialGuardians object with the initial guardians to assign the roles to\\n   * @param crossChainController address of the CrossChainController\\n   */\\n  constructor(InitialGuardians memory initialGuardians, address crossChainController) {\\n    if (crossChainController == address(0)) {\\n      revert CrossChainControllerCantBe0();\\n    }\\n    if (initialGuardians.defaultAdmin == address(0)) {\\n      revert DefaultAdminCantBe0();\\n    }\\n\\n    CROSS_CHAIN_CONTROLLER = crossChainController;\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, initialGuardians.defaultAdmin);\\n\\n    if (initialGuardians.solveEmergencyGuardian != address(0)) {\\n      _grantRole(SOLVE_EMERGENCY_ROLE, initialGuardians.solveEmergencyGuardian);\\n    }\\n    if (initialGuardians.retryGuardian != address(0)) {\\n      _grantRole(RETRY_ROLE, initialGuardians.retryGuardian);\\n    }\\n  }\\n\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  function retryEnvelope(\\n    Envelope memory envelope,\\n    uint256 gasLimit\\n  ) external onlyRole(RETRY_ROLE) returns (bytes32) {\\n    return ICrossChainForwarder(CROSS_CHAIN_CONTROLLER).retryEnvelope(envelope, gasLimit);\\n  }\\n\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  function retryTransaction(\\n    bytes memory encodedTransaction,\\n    uint256 gasLimit,\\n    address[] memory bridgeAdaptersToRetry\\n  ) external onlyRole(RETRY_ROLE) {\\n    ICrossChainForwarder(CROSS_CHAIN_CONTROLLER).retryTransaction(\\n      encodedTransaction,\\n      gasLimit,\\n      bridgeAdaptersToRetry\\n    );\\n  }\\n\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  function solveEmergency(\\n    ICrossChainReceiver.ConfirmationInput[] memory newConfirmations,\\n    ICrossChainReceiver.ValidityTimestampInput[] memory newValidityTimestamp,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToDisallow,\\n    address[] memory sendersToApprove,\\n    address[] memory sendersToRemove,\\n    ICrossChainForwarder.ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    ICrossChainForwarder.BridgeAdapterToDisable[] memory forwarderBridgeAdaptersToDisable,\\n    ICrossChainForwarder.OptimalBandwidthByChain[] memory optimalBandwidthByChain\\n  ) external onlyRole(SOLVE_EMERGENCY_ROLE) {\\n    ICrossChainControllerWithEmergencyMode(CROSS_CHAIN_CONTROLLER).solveEmergency(\\n      newConfirmations,\\n      newValidityTimestamp,\\n      receiverBridgeAdaptersToAllow,\\n      receiverBridgeAdaptersToDisallow,\\n      sendersToApprove,\\n      sendersToRemove,\\n      forwarderBridgeAdaptersToEnable,\\n      forwarderBridgeAdaptersToDisable,\\n      optimalBandwidthByChain\\n    );\\n  }\\n\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  function solveEmergencyDeprecated(\\n    ICrossChainReceiver.ConfirmationInput[] memory newConfirmations,\\n    ICrossChainReceiver.ValidityTimestampInput[] memory newValidityTimestamp,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToDisallow,\\n    address[] memory sendersToApprove,\\n    address[] memory sendersToRemove,\\n    ICrossChainForwarder.ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    ICrossChainForwarder.BridgeAdapterToDisable[] memory forwarderBridgeAdaptersToDisable\\n  ) external onlyRole(SOLVE_EMERGENCY_ROLE) {\\n    ICrossChainControllerWithEmergencyModeDeprecated(CROSS_CHAIN_CONTROLLER).solveEmergency(\\n      newConfirmations,\\n      newValidityTimestamp,\\n      receiverBridgeAdaptersToAllow,\\n      receiverBridgeAdaptersToDisallow,\\n      sendersToApprove,\\n      sendersToRemove,\\n      forwarderBridgeAdaptersToEnable,\\n      forwarderBridgeAdaptersToDisable\\n    );\\n  }\\n\\n  /// @inheritdoc IGranularGuardianAccessControl\\n  function updateGuardian(\\n    address newCrossChainControllerGuardian\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (newCrossChainControllerGuardian == address(0)) {\\n      revert NewGuardianCantBe0();\\n    }\\n    IWithGuardian(CROSS_CHAIN_CONTROLLER).updateGuardian(newCrossChainControllerGuardian);\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/access_control/IGranularGuardianAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Envelope} from '../libs/EncodingUtils.sol';\\nimport {ICrossChainReceiver} from '../interfaces/ICrossChainReceiver.sol';\\nimport {ICrossChainForwarder} from '../interfaces/ICrossChainForwarder.sol';\\n\\n/**\\n * @title IGranularGuardianAccessControl\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the GranularGuardianAccessControl contract\\n */\\ninterface IGranularGuardianAccessControl {\\n  /// @dev default admin address can not be address 0\\n  error DefaultAdminCantBe0();\\n\\n  /// @dev CrossChainController address can not be address 0\\n  error CrossChainControllerCantBe0();\\n\\n  /// @dev new Guardian address can not be address 0\\n  error NewGuardianCantBe0();\\n\\n  /**\\n   * @param defaultAdmin address that will have control of the default admin\\n   * @param retryGuardian address to be added to the retry role\\n   * @param solveEmergencyGuardian address to be added to the solve emergency role\\n   */\\n  struct InitialGuardians {\\n    address defaultAdmin;\\n    address retryGuardian;\\n    address solveEmergencyGuardian;\\n  }\\n\\n  /**\\n   * @notice method called to re forward a previously sent envelope.\\n             This method is only callable by the accounts holding the RETRY_ROLE role\\n   * @param envelope the Envelope type data\\n   * @param gasLimit gas cost on receiving side of the message\\n   * @return the transaction id that has the retried envelope\\n   * @dev This method will send an existing Envelope using a new Transaction.\\n   * @dev This method should be used when the intention is to send the Envelope as if it was a new message. This way on\\n          the Receiver side it will start from 0 to count for the required confirmations. (usual use case would be for\\n          when an envelope has been invalidated on Receiver side, and needs to be retried as a new message)\\n   */\\n  function retryEnvelope(Envelope memory envelope, uint256 gasLimit) external returns (bytes32);\\n\\n  /**\\n   * @notice method to retry forwarding an already forwarded transaction.\\n             This method is only callable by the accounts holding the RETRY_ROLE role\\n   * @param encodedTransaction the encoded Transaction data\\n   * @param gasLimit limit of gas to spend on forwarding per bridge\\n   * @param bridgeAdaptersToRetry list of bridge adapters to be used for the transaction forwarding retry\\n   * @dev This method will send an existing Transaction with its Envelope to the specified adapters.\\n   * @dev Should be used when some of the bridges on the initial forwarding did not work (out of gas),\\n          and we want the Transaction with Envelope to still account for the required confirmations on the Receiver side\\n   */\\n  function retryTransaction(\\n    bytes memory encodedTransaction,\\n    uint256 gasLimit,\\n    address[] memory bridgeAdaptersToRetry\\n  ) external;\\n\\n  /**\\n   * @notice method to solve an emergency. This method is only callable by the accounts holding the SOLVE_EMERGENCY_ROLE role\\n   * @param newConfirmations number of confirmations necessary for a message to be routed to destination\\n   * @param newValidityTimestamp timestamp in seconds indicating the point to where not confirmed messages will be\\n   *        invalidated.\\n   * @param receiverBridgeAdaptersToAllow list of bridge adapter addresses to be allowed to receive messages\\n   * @param receiverBridgeAdaptersToDisallow list of bridge adapter addresses to be disallowed\\n   * @param sendersToApprove list of addresses to be approved as senders\\n   * @param sendersToRemove list of sender addresses to be removed\\n   * @param forwarderBridgeAdaptersToEnable list of bridge adapters to be enabled to send messages\\n   * @param forwarderBridgeAdaptersToDisable list of bridge adapters to be disabled\\n   * @param optimalBandwidthByChain array of optimal numbers of bridge adapters to use to send a message to receiver chain\\n   */\\n  function solveEmergency(\\n    ICrossChainReceiver.ConfirmationInput[] memory newConfirmations,\\n    ICrossChainReceiver.ValidityTimestampInput[] memory newValidityTimestamp,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToDisallow,\\n    address[] memory sendersToApprove,\\n    address[] memory sendersToRemove,\\n    ICrossChainForwarder.ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    ICrossChainForwarder.BridgeAdapterToDisable[] memory forwarderBridgeAdaptersToDisable,\\n    ICrossChainForwarder.OptimalBandwidthByChain[] memory optimalBandwidthByChain\\n  ) external;\\n\\n  /**\\n   * @notice method to solve an emergency on a CrossChainController with Revision 2 or older interface. This method is only callable by the accounts holding the SOLVE_EMERGENCY_ROLE role\\n   * @param newConfirmations number of confirmations necessary for a message to be routed to destination\\n   * @param newValidityTimestamp timestamp in seconds indicating the point to where not confirmed messages will be\\n   *        invalidated.\\n   * @param receiverBridgeAdaptersToAllow list of bridge adapter addresses to be allowed to receive messages\\n   * @param receiverBridgeAdaptersToDisallow list of bridge adapter addresses to be disallowed\\n   * @param sendersToApprove list of addresses to be approved as senders\\n   * @param sendersToRemove list of sender addresses to be removed\\n   * @param forwarderBridgeAdaptersToEnable list of bridge adapters to be enabled to send messages\\n   * @param forwarderBridgeAdaptersToDisable list of bridge adapters to be disabled\\n   */\\n  function solveEmergencyDeprecated(\\n    ICrossChainReceiver.ConfirmationInput[] memory newConfirmations,\\n    ICrossChainReceiver.ValidityTimestampInput[] memory newValidityTimestamp,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToDisallow,\\n    address[] memory sendersToApprove,\\n    address[] memory sendersToRemove,\\n    ICrossChainForwarder.ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    ICrossChainForwarder.BridgeAdapterToDisable[] memory forwarderBridgeAdaptersToDisable\\n  ) external;\\n\\n  /**\\n   * @notice method to update the CrossChainController guardian when this contract has been set as guardian\\n   */\\n  function updateGuardian(address newCrossChainControllerGuardian) external;\\n\\n  /**\\n   * @notice method to get the address of the CrossChainController where the contract points to\\n   * @return the address of the CrossChainController\\n   */\\n  function CROSS_CHAIN_CONTROLLER() external view returns (address);\\n\\n  /**\\n   * @notice method to get the solve emergency role\\n   * @return the solve emergency role id\\n   */\\n  function SOLVE_EMERGENCY_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the retry role\\n   * @return the retry role id\\n   */\\n  function RETRY_ROLE() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/emergency/interfaces/IEmergencyConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IEmergencyConsumer {\\n  /**\\n   * @dev emitted when chainlink emergency oracle gets updated\\n   * @param chainlinkEmergencyOracle address of the new oracle\\n   */\\n  event CLEmergencyOracleUpdated(address indexed chainlinkEmergencyOracle);\\n\\n  /**\\n   * @dev emitted when the emergency is solved\\n   * @param emergencyCount number of emergencies solved. Used to check if a new emergency is active.\\n   */\\n  event EmergencySolved(uint256 emergencyCount);\\n\\n  /**\\n   * @notice method that returns the last emergency solved\\n   * @return the current emergency count\\n   */\\n  function getEmergencyCount() external view returns (uint256);\\n\\n  /**\\n   * @notice method that returns the address of the current chainlink emergency oracle\\n   * @return the Chainlink emergency oracle address\\n   */\\n  function getChainlinkEmergencyOracle() external view returns (address);\\n\\n  /**\\n   * @dev method to update the chainlink emergency mode address.\\n   *      This method is made virtual as it is expected to have access control, but this way it is delegated to implementation.\\n   *      It should call _updateCLEmergencyOracle when implemented\\n   * @param chainlinkEmergencyOracle address of the new chainlink emergency mode oracle\\n   */\\n  function updateCLEmergencyOracle(address chainlinkEmergencyOracle) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/interfaces/IBaseCrossChainController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './ICrossChainForwarder.sol';\\nimport './ICrossChainReceiver.sol';\\nimport {IRescuable} from 'solidity-utils/contracts/utils/interfaces/IRescuable.sol';\\n\\n/**\\n * @title IBaseCrossChainController\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the CrossChainController contract\\n */\\ninterface IBaseCrossChainController is IRescuable, ICrossChainForwarder, ICrossChainReceiver {\\n\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/interfaces/ICrossChainControllerWithEmergencyMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IBaseCrossChainController.sol';\\nimport '../emergency/interfaces/IEmergencyConsumer.sol';\\n\\n/**\\n * @title ICrossChainControllerWithEmergencyMode\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the CrossChainControllerWithEmergencyMode contract\\n */\\ninterface ICrossChainControllerWithEmergencyMode is IBaseCrossChainController, IEmergencyConsumer {\\n  /**\\n   * @notice method called to initialize the proxy\\n   * @param owner address of the owner of the cross chain controller\\n   * @param guardian address of the guardian of the cross chain controller\\n   * @param clEmergencyOracle address of the chainlink emergency oracle\\n   * @param initialRequiredConfirmations number of confirmations the messages need to be accepted as valid\\n   * @param receiverBridgeAdaptersToAllow array of addresses of the bridge adapters that can receive messages\\n   * @param forwarderBridgeAdaptersToEnable array specifying for every bridgeAdapter, the destinations it can have\\n   * @param sendersToApprove array of addresses to allow as forwarders\\n   * @param optimalBandwidthByChain array of optimal numbers of bridge adapters to use to send a message to receiver chain\\n   */\\n  function initialize(\\n    address owner,\\n    address guardian,\\n    address clEmergencyOracle,\\n    ConfirmationInput[] memory initialRequiredConfirmations,\\n    ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    address[] memory sendersToApprove,\\n    OptimalBandwidthByChain[] memory optimalBandwidthByChain\\n  ) external;\\n\\n  /**\\n   * @notice method to solve an emergency. This method is only callable by the guardian\\n   * @param newConfirmations number of confirmations necessary for a message to be routed to destination\\n   * @param newValidityTimestamp timestamp in seconds indicating the point to where not confirmed messages will be\\n   *        invalidated.\\n   * @param receiverBridgeAdaptersToAllow list of bridge adapter addresses to be allowed to receive messages\\n   * @param receiverBridgeAdaptersToDisallow list of bridge adapter addresses to be disallowed\\n   * @param sendersToApprove list of addresses to be approved as senders\\n   * @param sendersToRemove list of sender addresses to be removed\\n   * @param forwarderBridgeAdaptersToEnable list of bridge adapters to be enabled to send messages\\n   * @param forwarderBridgeAdaptersToDisable list of bridge adapters to be disabled\\n   * @param optimalBandwidthByChain array of optimal numbers of bridge adapters to use to send a message to receiver chain\\n   */\\n  function solveEmergency(\\n    ConfirmationInput[] memory newConfirmations,\\n    ValidityTimestampInput[] memory newValidityTimestamp,\\n    ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToDisallow,\\n    address[] memory sendersToApprove,\\n    address[] memory sendersToRemove,\\n    ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    BridgeAdapterToDisable[] memory forwarderBridgeAdaptersToDisable,\\n    OptimalBandwidthByChain[] memory optimalBandwidthByChain\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/interfaces/ICrossChainControllerWithEmergencyModeDeprecated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IBaseCrossChainController.sol';\\nimport '../emergency/interfaces/IEmergencyConsumer.sol';\\n\\n/**\\n * @title ICrossChainControllerWithEmergencyModeRev2\\n * @author BGD Labs. Interface containing the solveEmergency interface of the CrossChainController of Revision 2 or older\\n */\\ninterface ICrossChainControllerWithEmergencyModeDeprecated is\\n  IBaseCrossChainController,\\n  IEmergencyConsumer\\n{\\n  /**\\n   * @notice method to solve an emergency. This method is only callable by the guardian\\n   * @param newConfirmations number of confirmations necessary for a message to be routed to destination\\n   * @param newValidityTimestamp timestamp in seconds indicating the point to where not confirmed messages will be\\n   *        invalidated.\\n   * @param receiverBridgeAdaptersToAllow list of bridge adapter addresses to be allowed to receive messages\\n   * @param receiverBridgeAdaptersToDisallow list of bridge adapter addresses to be disallowed\\n   * @param sendersToApprove list of addresses to be approved as senders\\n   * @param sendersToRemove list of sender addresses to be removed\\n   * @param forwarderBridgeAdaptersToEnable list of bridge adapters to be enabled to send messages\\n   * @param forwarderBridgeAdaptersToDisable list of bridge adapters to be disabled\\n   */\\n  function solveEmergency(\\n    ConfirmationInput[] memory newConfirmations,\\n    ValidityTimestampInput[] memory newValidityTimestamp,\\n    ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToAllow,\\n    ReceiverBridgeAdapterConfigInput[] memory receiverBridgeAdaptersToDisallow,\\n    address[] memory sendersToApprove,\\n    address[] memory sendersToRemove,\\n    ForwarderBridgeAdapterConfigInput[] memory forwarderBridgeAdaptersToEnable,\\n    BridgeAdapterToDisable[] memory forwarderBridgeAdaptersToDisable\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/interfaces/ICrossChainForwarder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {Transaction, Envelope} from '../libs/EncodingUtils.sol';\\n\\n/**\\n * @title ICrossChainForwarder\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the CrossChainForwarder contract\\n */\\ninterface ICrossChainForwarder {\\n  /**\\n   * @notice Object containing the optimal bandwidth for communication with a receiver chain id\\n   * @param chainId id of the receiver chain\\n   * @param optimalBandwidth optimal number of bridge adapters to use to send a message to receiver chain\\n   */\\n  struct OptimalBandwidthByChain {\\n    uint256 chainId;\\n    uint256 optimalBandwidth;\\n  }\\n\\n  /**\\n   * @notice object storing the connected pair of bridge adapters, on current and destination chain\\n   * @param destinationBridgeAdapter address of the bridge adapter on the destination chain\\n   * @param currentChainBridgeAdapter address of the bridge adapter deployed on current network\\n   */\\n  struct ChainIdBridgeConfig {\\n    address destinationBridgeAdapter;\\n    address currentChainBridgeAdapter;\\n  }\\n\\n  /**\\n   * @notice object with the necessary information to remove bridge adapters\\n   * @param bridgeAdapter address of the bridge adapter to remove\\n   * @param chainIds array of chain ids where the bridge adapter connects\\n   */\\n  struct BridgeAdapterToDisable {\\n    address bridgeAdapter;\\n    uint256[] chainIds;\\n  }\\n\\n  /**\\n   * @notice object storing the pair bridgeAdapter (current deployed chain) destination chain bridge adapter configuration\\n   * @param currentChainBridgeAdapter address of the bridge adapter deployed on current chain\\n   * @param destinationBridgeAdapter address of the bridge adapter on the destination chain\\n   * @param destinationChainId id of the destination chain using our own nomenclature\\n   */\\n  struct ForwarderBridgeAdapterConfigInput {\\n    address currentChainBridgeAdapter;\\n    address destinationBridgeAdapter;\\n    uint256 destinationChainId;\\n  }\\n\\n  /**\\n   * @notice emitted when a transaction is successfully forwarded through a bridge adapter\\n   * @param envelopeId internal id of the envelope\\n   * @param envelope the Envelope type data\\n   */\\n  event EnvelopeRegistered(bytes32 indexed envelopeId, Envelope envelope);\\n\\n  /**\\n   * @notice emitted when a transaction forwarding is attempted through a bridge adapter\\n   * @param transactionId id of the forwarded transaction\\n   * @param envelopeId internal id of the envelope\\n   * @param encodedTransaction object intended to be bridged\\n   * @param destinationChainId id of the destination chain in our notation\\n   * @param bridgeAdapter address of the bridge adapter that failed (deployed on current network)\\n   * @param destinationBridgeAdapter address of the connected bridge adapter on destination chain\\n   * @param adapterSuccessful adapter was able to forward the message\\n   * @param returnData bytes with error information\\n   */\\n  event TransactionForwardingAttempted(\\n    bytes32 transactionId,\\n    bytes32 indexed envelopeId,\\n    bytes encodedTransaction,\\n    uint256 destinationChainId,\\n    address indexed bridgeAdapter,\\n    address destinationBridgeAdapter,\\n    bool indexed adapterSuccessful,\\n    bytes returnData\\n  );\\n\\n  /**\\n   * @notice emitted when a bridge adapter has been added to the allowed list\\n   * @param destinationChainId id of the destination chain in our notation\\n   * @param bridgeAdapter address of the bridge adapter added (deployed on current network)\\n   * @param destinationBridgeAdapter address of the connected bridge adapter on destination chain\\n   * @param allowed boolean indicating if the bridge adapter is allowed or disallowed\\n   */\\n  event BridgeAdapterUpdated(\\n    uint256 indexed destinationChainId,\\n    address indexed bridgeAdapter,\\n    address destinationBridgeAdapter,\\n    bool indexed allowed\\n  );\\n  /**\\n   * @notice emitted when the optimal bandwidth is updated for a specified receiver chain\\n   * @param chainId id of the receiver chain that gets the new optimal bandwidth\\n   * @param optimalBandwidth optimal number of adapters to use for sending a message to a receiver chain\\n   */\\n  event OptimalBandwidthUpdated(uint256 indexed chainId, uint256 optimalBandwidth);\\n\\n  /**\\n   * @notice emitted when a sender has been updated\\n   * @param sender address of the updated sender\\n   * @param isApproved boolean that indicates if the sender has been approved or removed\\n   */\\n  event SenderUpdated(address indexed sender, bool indexed isApproved);\\n\\n  /**\\n   * @notice method to get the current valid envelope nonce\\n   * @return the current valid envelope nonce\\n   */\\n  function getCurrentEnvelopeNonce() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the current valid transaction nonce\\n   * @return the current valid transaction nonce\\n   */\\n  function getCurrentTransactionNonce() external view returns (uint256);\\n\\n  /**\\n   * @notice method to check if a envelope has been previously forwarded.\\n   * @param envelope the Envelope type data\\n   * @return boolean indicating if the envelope has been registered\\n   */\\n  function isEnvelopeRegistered(Envelope memory envelope) external view returns (bool);\\n\\n  /**\\n   * @notice method to check if a envelope has been previously forwarded.\\n   * @param envelopeId the hashed id of the envelope\\n   * @return boolean indicating if the envelope has been registered\\n   */\\n  function isEnvelopeRegistered(bytes32 envelopeId) external view returns (bool);\\n\\n  /**\\n   * @notice method to get if a transaction has been forwarded\\n   * @param transaction the Transaction type data\\n   * @return flag indicating if a transaction has been forwarded\\n   */\\n  function isTransactionForwarded(Transaction memory transaction) external view returns (bool);\\n\\n  /**\\n   * @notice method to get if a transaction has been forwarded\\n   * @param transactionId hashed id of the transaction\\n   * @return flag indicating if a transaction has been forwarded\\n   */\\n  function isTransactionForwarded(bytes32 transactionId) external view returns (bool);\\n\\n  /**\\n   * @notice method called to initiate message forwarding to other networks.\\n   * @param destinationChainId id of the destination chain where the message needs to be bridged\\n   * @param destination address where the message is intended for\\n   * @param gasLimit gas cost on receiving side of the message\\n   * @param message bytes that need to be bridged\\n   * @return internal id of the envelope and transaction\\n   */\\n  function forwardMessage(\\n    uint256 destinationChainId,\\n    address destination,\\n    uint256 gasLimit,\\n    bytes memory message\\n  ) external returns (bytes32, bytes32);\\n\\n  /**\\n   * @notice method called to re forward a previously sent envelope.\\n   * @param envelope the Envelope type data\\n   * @param gasLimit gas cost on receiving side of the message\\n   * @return the transaction id that has the retried envelope\\n   * @dev This method will send an existing Envelope using a new Transaction.\\n   * @dev This method should be used when the intention is to send the Envelope as if it was a new message. This way on\\n          the Receiver side it will start from 0 to count for the required confirmations. (usual use case would be for\\n          when an envelope has been invalidated on Receiver side, and needs to be retried as a new message)\\n   */\\n  function retryEnvelope(Envelope memory envelope, uint256 gasLimit) external returns (bytes32);\\n\\n  /**\\n   * @notice method to retry forwarding an already forwarded transaction\\n   * @param encodedTransaction the encoded Transaction data\\n   * @param gasLimit limit of gas to spend on forwarding per bridge\\n   * @param bridgeAdaptersToRetry list of bridge adapters to be used for the transaction forwarding retry\\n   * @dev This method will send an existing Transaction with its Envelope to the specified adapters.\\n   * @dev Should be used when some of the bridges on the initial forwarding did not work (out of gas),\\n          and we want the Transaction with Envelope to still account for the required confirmations on the Receiver side\\n   */\\n  function retryTransaction(\\n    bytes memory encodedTransaction,\\n    uint256 gasLimit,\\n    address[] memory bridgeAdaptersToRetry\\n  ) external;\\n\\n  /**\\n   * @notice method to enable bridge adapters\\n   * @param bridgeAdapters array of new bridge adapter configurations\\n   */\\n  function enableBridgeAdapters(ForwarderBridgeAdapterConfigInput[] memory bridgeAdapters) external;\\n\\n  /**\\n   * @notice method to disable bridge adapters\\n   * @param bridgeAdapters array of bridge adapter addresses to disable\\n   */\\n  function disableBridgeAdapters(BridgeAdapterToDisable[] memory bridgeAdapters) external;\\n\\n  /**\\n   * @notice method to remove sender addresses\\n   * @param senders list of addresses to remove\\n   */\\n  function removeSenders(address[] memory senders) external;\\n\\n  /**\\n   * @notice method to approve new sender addresses\\n   * @param senders list of addresses to approve\\n   */\\n  function approveSenders(address[] memory senders) external;\\n\\n  /**\\n   * @notice method to get all the forwarder bridge adapters of a chain\\n   * @param chainId id of the chain we want to get the adapters from\\n   * @return an array of chain configurations where the bridge adapter can communicate\\n   */\\n  function getForwarderBridgeAdaptersByChain(\\n    uint256 chainId\\n  ) external view returns (ChainIdBridgeConfig[] memory);\\n\\n  /**\\n   * @notice method to get if a sender is approved\\n   * @param sender address that we want to check if approved\\n   * @return boolean indicating if the address has been approved as sender\\n   */\\n  function isSenderApproved(address sender) external view returns (bool);\\n\\n  /**\\n   * @notice method to update the optimal bandwidth for communication with a receiver chain\\n   * @param optimalBandwidthByChain array of objects containing the optimal bandwidth for a specified\\n            receiver chain id\\n   */\\n  function updateOptimalBandwidthByChain(\\n    OptimalBandwidthByChain[] memory optimalBandwidthByChain\\n  ) external;\\n\\n  /**\\n   * @notice method to get the optimal bandwidth for communication with the receiver chain\\n   * @param chainId id of the receiver chain to get the optimal bandwidth from\\n   * @return optimal bandwidth of the receiver chain\\n   */\\n  function getOptimalBandwidthByChain(uint256 chainId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/interfaces/ICrossChainReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {EnumerableSet} from 'openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol';\\nimport {Transaction, Envelope} from '../libs/EncodingUtils.sol';\\n\\n/**\\n * @title ICrossChainReceiver\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the CrossChainReceiver contract\\n */\\ninterface ICrossChainReceiver {\\n  /**\\n   * @notice object with information to set new required confirmations\\n   * @param chainId id of the origin chain\\n   * @param requiredConfirmations required confirmations to set a message as confirmed\\n   */\\n  struct ConfirmationInput {\\n    uint256 chainId;\\n    uint8 requiredConfirmations;\\n  }\\n\\n  /**\\n   * @notice object with information to set new validity timestamp\\n   * @param chainId id of the origin chain\\n   * @param validityTimestamp new timestamp in seconds to set as validity point\\n   */\\n  struct ValidityTimestampInput {\\n    uint256 chainId;\\n    uint120 validityTimestamp;\\n  }\\n\\n  /**\\n   * @notice object with necessary information to configure bridge adapters\\n   * @param bridgeAdapter address of the bridge adapter to configure\\n   * @param chainIds array of ids of the chains the adapter receives messages from\\n   */\\n  struct ReceiverBridgeAdapterConfigInput {\\n    address bridgeAdapter;\\n    uint256[] chainIds;\\n  }\\n\\n  /**\\n   * @notice object containing the receiver configuration\\n   * @param requiredConfirmation number of bridges that are needed to make a bridged message valid from origin chain\\n   * @param validityTimestamp all messages originated but not finally confirmed before this timestamp per origin chain, are invalid\\n   */\\n  struct ReceiverConfiguration {\\n    uint8 requiredConfirmation;\\n    uint120 validityTimestamp;\\n  }\\n\\n  /**\\n   * @notice object with full information of the receiver configuration for a chain\\n   * @param configuration object containing the specifications of the receiver for a chain\\n   * @param allowedBridgeAdapters stores if a bridge adapter is allowed for a chain\\n   */\\n  struct ReceiverConfigurationFull {\\n    ReceiverConfiguration configuration;\\n    EnumerableSet.AddressSet allowedBridgeAdapters;\\n  }\\n\\n  /**\\n   * @notice object that stores the internal information of the transaction\\n   * @param confirmations number of times that this transaction has been bridged\\n   * @param firstBridgedAt timestamp in seconds indicating the first time a transaction was received\\n   */\\n  struct TransactionStateWithoutAdapters {\\n    uint8 confirmations;\\n    uint120 firstBridgedAt;\\n  }\\n  /**\\n   * @notice object that stores the internal information of the transaction with bridge adapters state\\n   * @param confirmations number of times that this transactions has been bridged\\n   * @param firstBridgedAt timestamp in seconds indicating the first time a transaction was received\\n   * @param bridgedByAdapter list of bridge adapters that have bridged the message\\n   */\\n  struct TransactionState {\\n    uint8 confirmations;\\n    uint120 firstBridgedAt;\\n    mapping(address =\u003e bool) bridgedByAdapter;\\n  }\\n\\n  /**\\n   * @notice object with the current state of an envelope\\n   * @param confirmed boolean indicating if the bridged message has been confirmed by the infrastructure\\n   * @param delivered boolean indicating if the bridged message has been delivered to the destination\\n   */\\n  enum EnvelopeState {\\n    None,\\n    Confirmed,\\n    Delivered\\n  }\\n\\n  /**\\n   * @notice emitted when a transaction has been received successfully\\n   * @param transactionId id of the transaction\\n   * @param envelopeId id of the envelope\\n   * @param originChainId id of the chain where the envelope originated\\n   * @param transaction the Transaction type data\\n   * @param bridgeAdapter address of the bridge adapter who received the message (deployed on current network)\\n   * @param confirmations number of current confirmations for this message\\n   */\\n  event TransactionReceived(\\n    bytes32 transactionId,\\n    bytes32 indexed envelopeId,\\n    uint256 indexed originChainId,\\n    Transaction transaction,\\n    address indexed bridgeAdapter,\\n    uint8 confirmations\\n  );\\n\\n  /**\\n   * @notice emitted when an envelope has been delivery attempted\\n   * @param envelopeId id of the envelope\\n   * @param envelope the Envelope type data\\n   * @param isDelivered flag indicating if the message has been delivered successfully\\n   */\\n  event EnvelopeDeliveryAttempted(bytes32 envelopeId, Envelope envelope, bool isDelivered);\\n\\n  /**\\n   * @notice emitted when a bridge adapter gets updated (allowed or disallowed)\\n   * @param bridgeAdapter address of the updated bridge adapter\\n   * @param allowed boolean indicating if the bridge adapter has been allowed or disallowed\\n   * @param chainId id of the chain updated\\n   */\\n  event ReceiverBridgeAdaptersUpdated(\\n    address indexed bridgeAdapter,\\n    bool indexed allowed,\\n    uint256 indexed chainId\\n  );\\n\\n  /**\\n   * @notice emitted when number of confirmations needed to validate a message changes\\n   * @param newConfirmations number of new confirmations needed for a message to be valid\\n   * @param chainId id of the chain updated\\n   */\\n  event ConfirmationsUpdated(uint8 newConfirmations, uint256 indexed chainId);\\n\\n  /**\\n   * @notice emitted when a new timestamp for invalidations gets set\\n   * @param invalidTimestamp timestamp to invalidate previous messages\\n   * @param chainId id of the chain updated\\n   */\\n  event NewInvalidation(uint256 invalidTimestamp, uint256 indexed chainId);\\n\\n  /**\\n   * @notice method to get the current allowed receiver bridge adapters for a chain\\n   * @param chainId id of the chain to get the allowed bridge adapter list\\n   * @return the list of allowed bridge adapters\\n   */\\n  function getReceiverBridgeAdaptersByChain(\\n    uint256 chainId\\n  ) external view returns (address[] memory);\\n\\n  /**\\n   * @notice method to get the current supported chains (at least one allowed bridge adapter)\\n   * @return list of supported chains\\n   */\\n  function getSupportedChains() external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice method to get the current configuration of a chain\\n   * @param chainId id of the chain to get the configuration from\\n   * @return the specified chain configuration object\\n   */\\n  function getConfigurationByChain(\\n    uint256 chainId\\n  ) external view returns (ReceiverConfiguration memory);\\n\\n  /**\\n   * @notice method to get if a bridge adapter is allowed\\n   * @param bridgeAdapter address of the bridge adapter to check\\n   * @param chainId id of the chain to check\\n   * @return boolean indicating if bridge adapter is allowed\\n   */\\n  function isReceiverBridgeAdapterAllowed(\\n    address bridgeAdapter,\\n    uint256 chainId\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice  method to get the current state of a transaction\\n   * @param transactionId the id of transaction\\n   * @return number of confirmations of internal message identified by the transactionId and the updated timestamp\\n   */\\n  function getTransactionState(\\n    bytes32 transactionId\\n  ) external view returns (TransactionStateWithoutAdapters memory);\\n\\n  /**\\n   * @notice  method to get the internal transaction information\\n   * @param transaction Transaction type data\\n   * @return number of confirmations of internal message identified by internalId and the updated timestamp\\n   */\\n  function getTransactionState(\\n    Transaction memory transaction\\n  ) external view returns (TransactionStateWithoutAdapters memory);\\n\\n  /**\\n   * @notice method to get the internal state of an envelope\\n   * @param envelope the Envelope type data\\n   * @return the envelope current state, containing if it has been confirmed and delivered\\n   */\\n  function getEnvelopeState(Envelope memory envelope) external view returns (EnvelopeState);\\n\\n  /**\\n   * @notice method to get the internal state of an envelope\\n   * @param envelopeId id of the envelope\\n   * @return the envelope current state, containing if it has been confirmed and delivered\\n   */\\n  function getEnvelopeState(bytes32 envelopeId) external view returns (EnvelopeState);\\n\\n  /**\\n   * @notice method to get if transaction has been received by bridge adapter\\n   * @param transactionId id of the transaction as stored internally\\n   * @param bridgeAdapter address of the bridge adapter to check if it has bridged the message\\n   * @return boolean indicating if the message has been received\\n   */\\n  function isTransactionReceivedByAdapter(\\n    bytes32 transactionId,\\n    address bridgeAdapter\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice method to set a new timestamp from where the messages will be valid.\\n   * @param newValidityTimestamp array of objects containing the chain and timestamp where all the previous unconfirmed\\n            messages must be invalidated.\\n   */\\n  function updateMessagesValidityTimestamp(\\n    ValidityTimestampInput[] memory newValidityTimestamp\\n  ) external;\\n\\n  /**\\n   * @notice method to update the number of confirmations necessary for the messages to be accepted as valid\\n   * @param newConfirmations array of objects with the chainId and the new number of needed confirmations\\n   */\\n  function updateConfirmations(ConfirmationInput[] memory newConfirmations) external;\\n\\n  /**\\n   * @notice method that receives a bridged transaction and tries to deliver the contents to destination if possible\\n   * @param encodedTransaction bytes containing the bridged information\\n   * @param originChainId id of the chain where the transaction originated\\n   */\\n  function receiveCrossChainMessage(\\n    bytes memory encodedTransaction,\\n    uint256 originChainId\\n  ) external;\\n\\n  /**\\n   * @notice method to deliver an envelope to its destination\\n   * @param envelope the Envelope typed data\\n   * @dev to deliver an envelope, it needs to have been previously confirmed and not delivered\\n   */\\n  function deliverEnvelope(Envelope memory envelope) external;\\n\\n  /**\\n   * @notice method to add bridge adapters to the allowed list\\n   * @param bridgeAdaptersInput array of objects with the new bridge adapters and supported chains\\n   */\\n  function allowReceiverBridgeAdapters(\\n    ReceiverBridgeAdapterConfigInput[] memory bridgeAdaptersInput\\n  ) external;\\n\\n  /**\\n   * @notice method to remove bridge adapters from the allowed list\\n   * @param bridgeAdaptersInput array of objects with the bridge adapters and supported chains to disallow\\n   */\\n  function disallowReceiverBridgeAdapters(\\n    ReceiverBridgeAdapterConfigInput[] memory bridgeAdaptersInput\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-delivery-infrastructure/src/contracts/libs/EncodingUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nusing EnvelopeUtils for Envelope global;\\nusing TransactionUtils for Transaction global;\\n\\n/**\\n * @notice Object with the necessary information to define a unique envelope\\n * @param nonce sequential (unique) numeric indicator of the Envelope creation\\n * @param origin address that originated the bridging of a message\\n * @param destination address where the message needs to be sent\\n * @param originChainId id of the chain where the message originated\\n * @param destinationChainId id of the chain where the message needs to be bridged\\n * @param message bytes that needs to be bridged\\n */\\nstruct Envelope {\\n  uint256 nonce;\\n  address origin;\\n  address destination;\\n  uint256 originChainId;\\n  uint256 destinationChainId;\\n  bytes message;\\n}\\n\\n/**\\n * @notice Object containing the information of an envelope for internal usage\\n * @param data bytes of the encoded envelope\\n * @param id hash of the encoded envelope\\n */\\nstruct EncodedEnvelope {\\n  bytes data;\\n  bytes32 id;\\n}\\n\\n/**\\n * @title EnvelopeUtils library\\n * @author BGD Labs\\n * @notice Defines utility functions for Envelopes\\n */\\nlibrary EnvelopeUtils {\\n  /**\\n   * @notice method that encodes an Envelope and generates its id\\n   * @param envelope object with the routing information necessary to send a message to a destination chain\\n   * @return object containing the encoded envelope and the envelope id\\n   */\\n  function encode(Envelope memory envelope) internal pure returns (EncodedEnvelope memory) {\\n    EncodedEnvelope memory encodedEnvelope;\\n    encodedEnvelope.data = abi.encode(envelope);\\n    encodedEnvelope.id = getId(encodedEnvelope.data);\\n    return encodedEnvelope;\\n  }\\n\\n  /**\\n   * @notice method to decode and encoded envelope to its raw parameters\\n   * @param envelope bytes with the encoded envelope data\\n   * @return object with the decoded envelope information\\n   */\\n  function decode(bytes memory envelope) internal pure returns (Envelope memory) {\\n    return abi.decode(envelope, (Envelope));\\n  }\\n\\n  /**\\n   * @notice method to get an envelope's id\\n   * @param envelope object with the routing information necessary to send a message to a destination chain\\n   * @return hash id of the envelope\\n   */\\n  function getId(Envelope memory envelope) internal pure returns (bytes32) {\\n    EncodedEnvelope memory encodedEnvelope = encode(envelope);\\n    return encodedEnvelope.id;\\n  }\\n\\n  /**\\n   * @notice method to get an envelope's id\\n   * @param envelope bytes with the encoded envelope data\\n   * @return hash id of the envelope\\n   */\\n  function getId(bytes memory envelope) internal pure returns (bytes32) {\\n    return keccak256(envelope);\\n  }\\n}\\n\\n/**\\n * @notice Object with the necessary information to send an envelope to a bridge\\n * @param nonce sequential (unique) numeric indicator of the Transaction creation\\n * @param encodedEnvelope bytes of an encoded envelope object\\n */\\nstruct Transaction {\\n  uint256 nonce;\\n  bytes encodedEnvelope;\\n}\\n\\n/**\\n * @notice Object containing the information of a transaction for internal usage\\n * @param data bytes of the encoded transaction\\n * @param id hash of the encoded transaction\\n */\\nstruct EncodedTransaction {\\n  bytes data;\\n  bytes32 id;\\n}\\n\\n/**\\n * @title TransactionUtils library\\n * @author BGD Labs\\n * @notice Defines utility functions for Transactions\\n */\\nlibrary TransactionUtils {\\n  /**\\n   * @notice method that encodes a Transaction and generates its id\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return object containing the encoded transaction and the transaction id\\n   */\\n  function encode(\\n    Transaction memory transaction\\n  ) internal pure returns (EncodedTransaction memory) {\\n    EncodedTransaction memory encodedTransaction;\\n    encodedTransaction.data = abi.encode(transaction);\\n    encodedTransaction.id = getId(encodedTransaction.data);\\n    return encodedTransaction;\\n  }\\n\\n  /**\\n   * @notice method that decodes an encoded transaction (bytes) into a Transaction object\\n   * @param transaction encoded transaction object\\n   * @return object containing the decoded Transaction object\\n   */\\n  function decode(bytes memory transaction) internal pure returns (Transaction memory) {\\n    return abi.decode(transaction, (Transaction));\\n  }\\n\\n  /**\\n   * @notice method to get a transaction id\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return hash id of the transaction\\n   */\\n  function getId(Transaction memory transaction) internal pure returns (bytes32) {\\n    EncodedTransaction memory encodedTransaction = encode(transaction);\\n    return encodedTransaction.id;\\n  }\\n\\n  /**\\n   * @notice method to get a transaction id\\n   * @param transaction encoded transaction object\\n   * @return hash id of the transaction\\n   */\\n  function getId(bytes memory transaction) internal pure returns (bytes32) {\\n    return keccak256(transaction);\\n  }\\n\\n  /**\\n   * @notice method to get the envelope information from the transaction object\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return object with decoded information of the envelope in the transaction\\n   */\\n  function getEnvelope(Transaction memory transaction) internal pure returns (Envelope memory) {\\n    return EnvelopeUtils.decode(transaction.encodedEnvelope);\\n  }\\n\\n  /**\\n   * @notice method to get the envelope id from the transaction object\\n   * @param transaction object with the information necessary to send an envelope to a bridge\\n   * @return hash id of the envelope on a transaction\\n   */\\n  function getEnvelopeId(Transaction memory transaction) internal pure returns (bytes32) {\\n    return EnvelopeUtils.getId(transaction.encodedEnvelope);\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"solidity-utils/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/solidity-utils/src/\",\r\n      \"ds-test/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/\",\r\n      \"aave-helpers/=lib/aave-delivery-infrastructure/lib/aave-helpers/src/\",\r\n      \"aave-address-book/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/aave-address-book/src/\",\r\n      \"adi/=lib/aave-delivery-infrastructure/src/contracts/\",\r\n      \"adi-scripts/=lib/aave-delivery-infrastructure/scripts/\",\r\n      \"adi-tests/=lib/aave-delivery-infrastructure/tests/\",\r\n      \"@aave/core-v3/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"@openzeppelin/=lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/\",\r\n      \"aave-delivery-infrastructure/=lib/aave-delivery-infrastructure/\",\r\n      \"aave-v3-core/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"erc4626-tests/=lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"fx-portal/=lib/aave-delivery-infrastructure/lib/fx-portal/contracts/\",\r\n      \"governance-crosschain-bridges/=lib/aave-delivery-infrastructure/lib/aave-helpers/lib/governance-crosschain-bridges/\",\r\n      \"hyperlane-monorepo/=lib/aave-delivery-infrastructure/lib/hyperlane-monorepo/solidity/contracts/\",\r\n      \"nitro-contracts/=lib/aave-delivery-infrastructure/lib/nitro-contracts/src/\",\r\n      \"openzeppelin/=lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  },\r\n  \"language\": \"Solidity\"\r\n}}",
      "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"retryGuardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solveEmergencyGuardian\",\"type\":\"address\"}],\"internalType\":\"struct IGranularGuardianAccessControl.InitialGuardians\",\"name\":\"initialGuardians\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"crossChainController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CrossChainControllerCantBe0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DefaultAdminCantBe0\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewGuardianCantBe0\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CROSS_CHAIN_CONTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETRY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLVE_EMERGENCY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"internalType\":\"struct Envelope\",\"name\":\"envelope\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"}],\"name\":\"retryEnvelope\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"encodedTransaction\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"bridgeAdaptersToRetry\",\"type\":\"address[]\"}],\"name\":\"retryTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"requiredConfirmations\",\"type\":\"uint8\"}],\"internalType\":\"struct ICrossChainReceiver.ConfirmationInput[]\",\"name\":\"newConfirmations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint120\",\"name\":\"validityTimestamp\",\"type\":\"uint120\"}],\"internalType\":\"struct ICrossChainReceiver.ValidityTimestampInput[]\",\"name\":\"newValidityTimestamp\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[]\",\"name\":\"receiverBridgeAdaptersToAllow\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[]\",\"name\":\"receiverBridgeAdaptersToDisallow\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"sendersToApprove\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sendersToRemove\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"currentChainBridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossChainForwarder.ForwarderBridgeAdapterConfigInput[]\",\"name\":\"forwarderBridgeAdaptersToEnable\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICrossChainForwarder.BridgeAdapterToDisable[]\",\"name\":\"forwarderBridgeAdaptersToDisable\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimalBandwidth\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossChainForwarder.OptimalBandwidthByChain[]\",\"name\":\"optimalBandwidthByChain\",\"type\":\"tuple[]\"}],\"name\":\"solveEmergency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"requiredConfirmations\",\"type\":\"uint8\"}],\"internalType\":\"struct ICrossChainReceiver.ConfirmationInput[]\",\"name\":\"newConfirmations\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint120\",\"name\":\"validityTimestamp\",\"type\":\"uint120\"}],\"internalType\":\"struct ICrossChainReceiver.ValidityTimestampInput[]\",\"name\":\"newValidityTimestamp\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[]\",\"name\":\"receiverBridgeAdaptersToAllow\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICrossChainReceiver.ReceiverBridgeAdapterConfigInput[]\",\"name\":\"receiverBridgeAdaptersToDisallow\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"sendersToApprove\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sendersToRemove\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"currentChainBridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destinationBridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"internalType\":\"struct ICrossChainForwarder.ForwarderBridgeAdapterConfigInput[]\",\"name\":\"forwarderBridgeAdaptersToEnable\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"bridgeAdapter\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ICrossChainForwarder.BridgeAdapterToDisable[]\",\"name\":\"forwarderBridgeAdaptersToDisable\",\"type\":\"tuple[]\"}],\"name\":\"solveEmergencyDeprecated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCrossChainControllerGuardian\",\"type\":\"address\"}],\"name\":\"updateGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "GranularGuardianAccessControl",
      "CompilerVersion": "v0.8.19+commit.7dd6d404",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000005300a1a15135ea4dc7ad5a167152c01efc9b192a000000000000000000000000b812d0944f8f581dfaa3a93dda0d22ecef51a9cf000000000000000000000000ce52ab41c40575b072a18c9700091ccbe4a06710000000000000000000000000ed42a7d8559a463722ca4bed50e0cc05a386b0e1",
      "EVMVersion": "paris",
      "Library": "",
      "LicenseType": "GNU GPLv3",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
