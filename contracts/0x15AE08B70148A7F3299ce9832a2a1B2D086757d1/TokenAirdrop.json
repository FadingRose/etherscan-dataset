{
  "TxHash": "0x3da3dbe2e2cf658d8a9a0627891ddcad863db581188df66dc461f2ee40ac5f9e",
  "ContractAddress": "0x15AE08B70148A7F3299ce9832a2a1B2D086757d1",
  "Name": "TokenAirdrop",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n \r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n \r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n \r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n \r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n \r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20{\r\n function transfer(address to, uint256 numberOfTokens) external;\r\n  function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract TokenAirdrop is Ownable {\r\n     \r\n    IERC20 public token;\r\n\r\n    constructor(IERC20 _tokenaddress) Ownable(msg.sender){\r\n          token= _tokenaddress;\r\n    }\r\n\r\n    // Event recover token\r\n    event RecoveredToken(uint256 recoverToken);\r\n    // Event airdrop successfull\r\n    event AirdropSuccessful(address[] user,uint256 amountOfToken);\r\n\r\n    /**\r\n     * @dev Distributes the same amount of tokens to multiple addresses in a single function call.\r\n     * @param addresses An array of recipient addresses.\r\n     * @param amount The amount of tokens to be distributed to each recipient address.\r\n     */\r\n    function airdrop(address[] calldata addresses, uint256 amount) external onlyOwner {\r\n        uint256 airCapacity = addresses.length * amount;\r\n        require(token.balanceOf(address(this)) \u003e= airCapacity, \"Not enough tokens to airdrop\");\r\n        for(uint i = 0; i \u003c addresses.length; i++) {\r\n            token.transfer(addresses[i], amount);\r\n        }\r\n        emit AirdropSuccessful(addresses,amount);\r\n    }\r\n\r\n    /* \r\n     * @notice Allows the contract owner to recover any excess tokens left in the contract.\r\n     * @dev Only the contract owner can call this function.\r\n     *      It retrieves the token balance of the contract and transfers the entire balance of tokens\r\n     *      to the owner's address.\r\n     *      If there are no excess tokens to recover, the transaction reverts.\r\n     * @return No return value.\r\n    */\r\n    function recoverToken() external onlyOwner {\r\n        uint256 tokenBalance = token.balanceOf(address(this));\r\n        require(tokenBalance \u003e 0,\"Not sufficient token balance\");\r\n        token.transfer((owner()), tokenBalance);\r\n        emit RecoveredToken(tokenBalance);\r\n    }\r\n    \r\n    /**\r\n    * @notice Retrieves the number of tokens available in the ICO contract.\r\n    * @dev This function allows external callers to check the balance of tokens held by the ICO contract.\r\n    * @return The number of tokens available in the ICO contract.\r\n    */\r\n    function availableToken() external view returns(uint256){\r\n        return token.balanceOf(address(this));\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenaddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"user\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfToken\",\"type\":\"uint256\"}],\"name\":\"AirdropSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recoverToken\",\"type\":\"uint256\"}],\"name\":\"RecoveredToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recoverToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "TokenAirdrop",
      "CompilerVersion": "v0.8.24+commit.e11b9ed9",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "0000000000000000000000004c5d8d027e97b52542dc66399752c76e017dc6e9",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://3949c6e2caeec78f55f3a0a2de6ce55e6963d4cef3874cdab8b337326f061508"
    }
  ]
}
