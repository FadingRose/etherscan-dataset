{
  "TxHash": "0x56b009b567832414e16f3fcfccff9e91101450b562f1fe70d3ba59a70d32c1b6",
  "ContractAddress": "0xA3938696610891Ab2F010d37fD1AD7a09b5B4697",
  "Name": "OnigiriChan",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/*\n\nhttps://t.me/OnigiriEther\n\n\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the amount of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the amount of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves `amount` tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 amount) external returns (bool);\n\n  /**\n   * @dev Moves `amount` tokens from `from` to `to` using the\n   * allowance mechanism. `amount` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() external view returns (string memory);\n\n  /**\n   * @dev Returns the symbol of the token.\n   */\n  function symbol() external view returns (string memory);\n\n  /**\n   * @dev Returns the decimals places of the token.\n   */\n  function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n  mapping(address =\u003e uint256) private _balances;\n\n  mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\n\n  uint256 private _totalSupply;\n\n  string private _name;\n  string private _symbol;\n\n  /**\n   * @dev Sets the values for {name} and {symbol}.\n   *\n   * The default value of {decimals} is 18. To select a different value for\n   * {decimals} you should overload it.\n   *\n   * All two of these values are immutable: they can only be set once during\n   * construction.\n   */\n  constructor(string memory name_, string memory symbol_) {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  /**\n   * @dev Returns the name of the token.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev Returns the symbol of the token, usually a shorter version of the\n   * name.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev Returns the number of decimals used to get its user representation.\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n   *\n   * Tokens usually opt for a value of 18, imitating the relationship between\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\n   * overridden;\n   *\n   * NOTE: This information is only used for _display_ purposes: it in\n   * no way affects any of the arithmetic of the contract, including\n   * {IERC20-balanceOf} and {IERC20-transfer}.\n   */\n  function decimals() public view virtual override returns (uint8) {\n    return 18;\n  }\n\n  /**\n   * @dev See {IERC20-totalSupply}.\n   */\n  function totalSupply() public view virtual override returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n   * @dev See {IERC20-balanceOf}.\n   */\n  function balanceOf(\n    address account\n  ) public view virtual override returns (uint256) {\n    return _balances[account];\n  }\n\n  /**\n   * @dev See {IERC20-transfer}.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - the caller must have a balance of at least `amount`.\n   */\n  function transfer(\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _transfer(owner, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-allowance}.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) public view virtual override returns (uint256) {\n    return _allowances[owner][spender];\n  }\n\n  /**\n   * @dev See {IERC20-approve}.\n   *\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function approve(\n    address spender,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, amount);\n    return true;\n  }\n\n  /**\n   * @dev See {IERC20-transferFrom}.\n   *\n   * Emits an {Approval} event indicating the updated allowance. This is not\n   * required by the EIP. See the note at the beginning of {ERC20}.\n   *\n   * NOTE: Does not update the allowance if the current allowance\n   * is the maximum `uint256`.\n   *\n   * Requirements:\n   *\n   * - `from` and `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   * - the caller must have allowance for ``from``'s tokens of at least\n   * `amount`.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 amount\n  ) public virtual override returns (bool) {\n    address spender = _msgSender();\n    _spendAllowance(from, spender, amount);\n    _transfer(from, to, amount);\n    return true;\n  }\n\n  /**\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\n    return true;\n  }\n\n  /**\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\n   *\n   * This is an alternative to {approve} that can be used as a mitigation for\n   * problems described in {IERC20-approve}.\n   *\n   * Emits an {Approval} event indicating the updated allowance.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `spender` must have allowance for the caller of at least\n   * `subtractedValue`.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  ) public virtual returns (bool) {\n    address owner = _msgSender();\n    uint256 currentAllowance = allowance(owner, spender);\n    require(\n      currentAllowance \u003e= subtractedValue,\n      'ERC20: decreased allowance below zero'\n    );\n    unchecked {\n      _approve(owner, spender, currentAllowance - subtractedValue);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Moves `amount` of tokens from `from` to `to`.\n   *\n   * This internal function is equivalent to {transfer}, and can be used to\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\n   *\n   * Emits a {Transfer} event.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `from` must have a balance of at least `amount`.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {\n    require(from != address(0), 'ERC20: transfer from the zero address');\n    require(to != address(0), 'ERC20: transfer to the zero address');\n\n    _beforeTokenTransfer(from, to, amount);\n\n    uint256 fromBalance = _balances[from];\n    require(fromBalance \u003e= amount, 'ERC20: transfer amount exceeds balance');\n    unchecked {\n      _balances[from] = fromBalance - amount;\n      // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n      // decrementing then incrementing.\n      _balances[to] += amount;\n    }\n\n    emit Transfer(from, to, amount);\n\n    _afterTokenTransfer(from, to, amount);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * Emits a {Transfer} event with `from` set to the zero address.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   */\n  function _mint(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: mint to the zero address');\n\n    _beforeTokenTransfer(address(0), account, amount);\n\n    _totalSupply += amount;\n    unchecked {\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n      _balances[account] += amount;\n    }\n    emit Transfer(address(0), account, amount);\n\n    _afterTokenTransfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements:\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 amount) internal virtual {\n    require(account != address(0), 'ERC20: burn from the zero address');\n\n    _beforeTokenTransfer(account, address(0), amount);\n\n    uint256 accountBalance = _balances[account];\n    require(accountBalance \u003e= amount, 'ERC20: burn amount exceeds balance');\n    unchecked {\n      _balances[account] = accountBalance - amount;\n      // Overflow not possible: amount \u003c= accountBalance \u003c= totalSupply.\n      _totalSupply -= amount;\n    }\n\n    emit Transfer(account, address(0), amount);\n\n    _afterTokenTransfer(account, address(0), amount);\n  }\n\n  /**\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n   *\n   * This internal function is equivalent to `approve`, and can be used to\n   * e.g. set automatic allowances for certain subsystems, etc.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `owner` cannot be the zero address.\n   * - `spender` cannot be the zero address.\n   */\n  function _approve(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    require(owner != address(0), 'ERC20: approve from the zero address');\n    require(spender != address(0), 'ERC20: approve to the zero address');\n\n    _allowances[owner][spender] = amount;\n    emit Approval(owner, spender, amount);\n  }\n\n  /**\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n   *\n   * Does not update the allowance amount in case of infinite allowance.\n   * Revert if not enough allowance is available.\n   *\n   * Might emit an {Approval} event.\n   */\n  function _spendAllowance(\n    address owner,\n    address spender,\n    uint256 amount\n  ) internal virtual {\n    uint256 currentAllowance = allowance(owner, spender);\n    if (currentAllowance != type(uint256).max) {\n      require(currentAllowance \u003e= amount, 'ERC20: insufficient allowance');\n      unchecked {\n        _approve(owner, spender, currentAllowance - amount);\n      }\n    }\n  }\n\n  /**\n   * @dev Hook that is called before any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * will be transferred to `to`.\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _beforeTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after any transfer of tokens. This includes\n   * minting and burning.\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n   * has been transferred to `to`.\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n   * - `from` and `to` are never both zero.\n   *\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n   */\n  function _afterTokenTransfer(\n    address from,\n    address to,\n    uint256 amount\n  ) internal virtual {}\n}\n\nlibrary SafeMath {\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c \u003e= a, 'SafeMath: addition overflow');\n\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    return sub(a, b, 'SafeMath: subtraction overflow');\n  }\n\n  function sub(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b \u003c= a, errorMessage);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b, 'SafeMath: multiplication overflow');\n\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    return div(a, b, 'SafeMath: division by zero');\n  }\n\n  function div(\n    uint256 a,\n    uint256 b,\n    string memory errorMessage\n  ) internal pure returns (uint256) {\n    require(b \u003e 0, errorMessage);\n    uint256 c = a / b;\n    return c;\n  }\n}\n\ncontract Ownable is Context {\n  address public _owner;\n\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n  constructor() {\n    address msgSender = _msgSender();\n    _owner = msgSender;\n    authorizations[_owner] = true;\n    emit OwnershipTransferred(address(0), msgSender);\n  }\n\n  mapping(address =\u003e bool) internal authorizations;\n\n  function owner() public view returns (address) {\n    return _owner;\n  }\n\n  modifier onlyOwner() {\n    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n    _;\n  }\n\n  function renounceOwnership() public virtual onlyOwner {\n    emit OwnershipTransferred(_owner, address(0));\n    _owner = address(0);\n  }\n\n  function transferOwnership(address newOwner) public virtual onlyOwner {\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n    emit OwnershipTransferred(_owner, newOwner);\n    _owner = newOwner;\n  }\n}\n\ninterface IUniswapV2Factory {\n  function createPair(\n    address tokenA,\n    address tokenB\n  ) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        if (returndata.length \u003e 0) {\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        return account.code.length \u003e 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance \u003e= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                0,\n                \"Address: low-level call failed\"\n            );\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance \u003e= value,\n            \"Address: insufficient balance for call\"\n        );\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data)\n        internal\n        view\n        returns (bytes memory)\n    {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage)\n        private\n        pure\n    {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length \u003e 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\ncontract OnigiriChan is ERC20, Ownable {\n    bool public tradingIsEnabled;\n    bool public transferDelayStatus = true;\n    bool public dynamicTaxState;\n    bool public antiBotProtection = true;\n    bool public tradeLimitsMode = true;\n\n    mapping(address =\u003e bool) public marketPairs;\n    mapping(address =\u003e bool) public detectedBots;\n    mapping(address =\u003e bool) public exemptFromLimits;\n    mapping(address =\u003e uint256) private blockTransferTime; // MEV protection\n    mapping(address =\u003e bool) public noFee;\n\n    address public immutable ethWrapped;\n    address public immutable liquidityPairLp;\n    address public centralTreasury;\n\n    uint64 public constant BASE_FEE = 10000;\n    uint256 public startBlock;\n    uint256 public swapBoundary;\n\n    IUniswapV2Router02 public immutable routerDexExchange;\n\n    event UpdatedTransactionMax(uint256 newMaxBoundary);\n    event RemovedLimits();\n    event TaxSellUpdated(uint256 amountThreshold);\n    event MaxUpdatedWallet(uint256 newMaxBoundary);\n    event FeeExemptConfigured(address addrAccount, bool stateExempt);\n    event UpdatedBuyTax(uint256 amountThreshold);\n    event UpdateLimitExempt(address addrAccount, bool stateExempt);\n    // structs\n    struct TaxParams {\n        uint64 taxComplete;\n    }\n\n    struct TokenTaxDetails {\n        uint80 tokenReserveTreasury;\n        bool savingGas;\n    }\n    struct TxBoundaries {\n        uint128 maxTransaction;\n        uint128 walletMaxCapacity;\n    }\n\n\n    TxBoundaries public transactionCaps;\n    TokenTaxDetails public taxTokenBook;\n\n    \n    TaxParams public buyTaxSchema;\n    TaxParams public sellTaxSettings;\n\n\n    // constructor\n    constructor() ERC20(\"Onigiri Chan\", \"GIRI\") {\n        address walletOwner = msg.sender;\n        uint256 tokensSupply = 1000000000 * 1e18;\n        uint256 liquidityAmountSupply = (tokensSupply * 95) / 100;\n        uint256 remainingSupply = tokensSupply - liquidityAmountSupply;\n        _mint(address(this), liquidityAmountSupply);\n        _mint(walletOwner, remainingSupply);\n\n        address marketRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n\n        dynamicTaxState = true;\n\n        routerDexExchange = IUniswapV2Router02(marketRouterAddress);\n\n        transactionCaps.maxTransaction = uint128((totalSupply() * 10) / 10000);\n        transactionCaps.walletMaxCapacity = uint128((totalSupply() * 10) / 10000);\n        swapBoundary = (totalSupply() * 25) / 100000; // 0.025%\n\n        centralTreasury = walletOwner;\n\n        buyTaxSchema.taxComplete = 0;\n        sellTaxSettings.taxComplete = 0;\n\n        taxTokenBook.savingGas = true;\n\n        ethWrapped = routerDexExchange.WETH();\n        liquidityPairLp = IUniswapV2Factory(routerDexExchange.factory()).createPair(\n            address(this),\n            ethWrapped\n        );\n\n        marketPairs[liquidityPairLp] = true;\n\n        exemptFromLimits[liquidityPairLp] = true;\n        exemptFromLimits[owner()] = true;\n        exemptFromLimits[walletOwner] = true;\n        exemptFromLimits[address(this)] = true;\n\n        noFee[owner()] = true;\n        noFee[walletOwner] = true;\n        noFee[address(this)] = true;\n        noFee[address(routerDexExchange)] = true;\n\n        _approve(address(this), address(routerDexExchange), type(uint256).max);\n        _approve(address(owner()), address(routerDexExchange), totalSupply());\n    }\n    function transferDelayOff() external onlyOwner {\n        require(transferDelayStatus, \"Already disabled!\");\n        transferDelayStatus = false;\n    }\n    \n    function modifyExemptFee(address addrAccount, bool stateExempt)\n        external\n        onlyOwner\n    {\n        require(addrAccount != address(0), \"Zero Address\");\n        require(addrAccount != address(this), \"Cannot unexempt contract\");\n        noFee[addrAccount] = stateExempt;\n        emit FeeExemptConfigured(addrAccount, stateExempt);\n    }\n    \n    function tokenAirdrop(\n        address[] calldata addresses,\n        uint256[] calldata tokenAmountWei\n    ) external onlyOwner {\n        require(\n            addresses.length == tokenAmountWei.length,\n            \"arrays length mismatch\"\n        );\n        for (uint256 i = 0; i \u003c addresses.length; i++) {\n            super._transfer(msg.sender, addresses[i], tokenAmountWei[i]);\n        }\n    }\n    \n    function botConfiguration(address[] calldata accountsBot, bool statusValue) public onlyOwner {\n        for (uint256 i = 0; i \u003c accountsBot.length; i++) {\n            if (\n                (!marketPairs[accountsBot[i]]) \u0026\u0026\n                (accountsBot[i] != address(routerDexExchange)) \u0026\u0026\n                (accountsBot[i] != address(this)) \u0026\u0026\n                (!noFee[accountsBot[i]] \u0026\u0026 !exemptFromLimits[accountsBot[i]])\n            ) botsMark(accountsBot[i], statusValue);\n        }\n    }\n    \n    function tokensTaxConversion() private {\n        uint256 balanceContract = balanceOf(address(this));\n        TokenTaxDetails memory taxTokens = taxTokenBook;\n        uint256 totalTokensToSwap = taxTokens.tokenReserveTreasury;\n\n        if (balanceContract == 0 || totalTokensToSwap == 0) {\n            return;\n        }\n\n        if (balanceContract \u003e swapBoundary * 20) {\n            balanceContract = swapBoundary * 20;\n        }\n\n        if (balanceContract \u003e 0) {\n            ethSwapTokens(balanceContract);\n\n            uint256 balanceEth = address(this).balance;\n\n            bool successOperation;\n\n            balanceEth = address(this).balance;\n\n            if (balanceEth \u003e 0) {\n                (successOperation, ) = centralTreasury.call{value: balanceEth}(\"\");\n            }\n        }\n\n        taxTokens.tokenReserveTreasury = 0;\n        taxTokenBook = taxTokens;\n    }\n    \n    function transactionMaxModify(uint128 tokensMax) external onlyOwner {\n        require(\n            tokensMax \u003e= ((totalSupply() * 1) / 1000) / (10**decimals()),\n            \"Too low\"\n        );\n        transactionCaps.maxTransaction = uint128(tokensMax * (10**decimals()));\n        emit UpdatedTransactionMax(transactionCaps.maxTransaction);\n    }\n    \n    function modifySwapThreshold(uint256 amountThreshold) external onlyOwner {\n        require(\n            amountThreshold \u003e= (totalSupply() * 1) / 100000,\n            \"Swap amount cannot be lower than 0.001% total supply.\"\n        );\n        require(\n            amountThreshold \u003c= (totalSupply() * 5) / 1000,\n            \"Swap amount cannot be higher than 0.5% total supply.\"\n        );\n        swapBoundary = amountThreshold;\n    }\n    \n    function updateTreasury(address addressNewTreasury) external onlyOwner {\n        require(addressNewTreasury != address(0), \"Zero address\");\n        centralTreasury = addressNewTreasury;\n    }\n    \n    function modifySettingsSellTax(uint64 treasuryAmountTax) external onlyOwner {\n        TaxParams memory taxConfig;\n        taxConfig.taxComplete = treasuryAmountTax;\n        emit TaxSellUpdated(taxConfig.taxComplete);\n        sellTaxSettings = taxConfig;\n    }\n    \n    function retrieveTokensOther(address tokenAddress, address to) external onlyOwner {\n        require(tokenAddress != address(0), \"Token address cannot be 0\");\n        uint256 balanceOfTokensInContract = IERC20(tokenAddress).balanceOf(address(this));\n        SafeERC20.safeTransfer(IERC20(tokenAddress), to, balanceOfTokensInContract);\n    }\n    \n    function modifyBuyTaxSettings(uint64 treasuryAmountTax) external onlyOwner {\n        TaxParams memory taxConfig;\n        taxConfig.taxComplete = treasuryAmountTax;\n        emit UpdatedBuyTax(taxConfig.taxComplete);\n        buyTaxSchema = taxConfig;\n    }\n    \n    function updateLimitExemptStatus(address addrAccount, bool stateExempt)\n        external\n        onlyOwner\n    {\n        require(addrAccount != address(0), \"Zero Address\");\n        if (!stateExempt) {\n            require(addrAccount != liquidityPairLp, \"Cannot remove pair\");\n        }\n        exemptFromLimits[addrAccount] = stateExempt;\n        emit UpdateLimitExempt(addrAccount, stateExempt);\n    }\n    \n    function turnOffTaxDynamic() external onlyOwner {\n        require(dynamicTaxState, \"Already off\");\n        dynamicTaxState = false;\n    }\n    \n    function ethSwapTokens(uint256 quantityTokens) private {\n        address[] memory route = new address[](2);\n        route[0] = address(this);\n        route[1] = ethWrapped;\n\n        routerDexExchange.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            quantityTokens,\n            0,\n            route,\n            address(this),\n            block.timestamp\n        );\n    }\n    \n    function setAntiMevEnabled(bool isProtectionEnabled) external onlyOwner {\n        antiBotProtection = isProtectionEnabled;\n    }\n    \n    function refreshInternalTaxes() internal {\n        uint256 launchBlocksCount = block.number - startBlock;\n        if (launchBlocksCount \u003c= 1) {\n        updateTaxAndLimits(0, 100);\n      } else if (launchBlocksCount \u003c= 3) {\n        updateTaxAndLimits(2000, 50);\n      } else if (launchBlocksCount \u003c= 5) {\n        updateTaxAndLimits(1500, 75);\n      } else if (launchBlocksCount \u003c= 7) {\n        updateTaxAndLimits(1000, 100);\n      } else if (launchBlocksCount \u003c= 11) {\n        updateTaxAndLimits(500, 100);\n      } else {\n    updateTaxAndLimits(0, 10000); \n    dynamicTaxState = false;\n    transferDelayStatus = false;\n  }\n    }\n    \n    function botsMark(address addrAccount, bool statusValue) internal virtual {\n        detectedBots[addrAccount] = statusValue;\n    }\n    \n    function applyTaxation(\n        address originator,\n        address to,\n        uint256 quantityTokens\n    ) internal returns (uint256) {\n        if (balanceOf(address(this)) \u003e= swapBoundary \u0026\u0026 !marketPairs[originator]) {\n            tokensTaxConversion();\n        }\n\n        if (dynamicTaxState) {\n            refreshInternalTaxes();\n        }\n\n        uint128 valueTax = 0;\n\n        TaxParams memory taxParamsCurrent;\n\n        if (marketPairs[to]) {\n            taxParamsCurrent = sellTaxSettings;\n        } else if (marketPairs[originator]) {\n            taxParamsCurrent = buyTaxSchema;\n        }\n\n        if (taxParamsCurrent.taxComplete \u003e 0) {\n            TokenTaxDetails memory taxTokensLatest = taxTokenBook;\n            valueTax = uint128((quantityTokens * taxParamsCurrent.taxComplete) / BASE_FEE);\n            taxTokensLatest.tokenReserveTreasury += uint80(\n                (valueTax * taxParamsCurrent.taxComplete) / taxParamsCurrent.taxComplete / 1e9\n            );\n            taxTokenBook = taxTokensLatest;\n            super._transfer(originator, address(this), valueTax);\n        }\n\n        return valueTax;\n    }\n    \n    function maintainLimits(\n        address originator,\n        address to,\n        uint256 quantityTokens\n    ) internal {\n        if (tradeLimitsMode) {\n            bool recipientExempted = exemptFromLimits[to];\n            uint256 recipientTotalBalance = balanceOf(to);\n            TxBoundaries memory currentTransactionLimits = transactionCaps;\n            // buy\n            if (marketPairs[originator] \u0026\u0026 !recipientExempted) {\n                require(quantityTokens \u003c= currentTransactionLimits.maxTransaction, \"Max Txn\");\n                require(\n                    quantityTokens + recipientTotalBalance \u003c= currentTransactionLimits.walletMaxCapacity,\n                    \"Max Wallet\"\n                );\n            }\n            // sell\n            else if (marketPairs[to] \u0026\u0026 !exemptFromLimits[originator]) {\n                require(quantityTokens \u003c= currentTransactionLimits.maxTransaction, \"Max Txn\");\n            } else if (!recipientExempted) {\n                require(\n                    quantityTokens + recipientTotalBalance \u003c= currentTransactionLimits.walletMaxCapacity,\n                    \"Max Wallet\"\n                );\n            }\n\n            if (transferDelayStatus) {\n                if (to != address(routerDexExchange) \u0026\u0026 to != address(liquidityPairLp)) {\n                    require(\n                        blockTransferTime[tx.origin] \u003c block.number,\n                        \"Transfer Delay\"\n                    );\n                }\n            }\n        }\n\n        if (antiBotProtection) {\n            if (marketPairs[to]) {\n                require(\n                    blockTransferTime[originator] \u003c block.number,\n                    \"Anti MEV\"\n                );\n            } else {\n                blockTransferTime[to] = block.number;\n                blockTransferTime[tx.origin] = block.number;\n            }\n        }\n    }\n    \n    function turnOffLimits() external onlyOwner {\n        tradeLimitsMode = false;\n        TxBoundaries memory localTransactionLimits;\n        uint256 supplyTokens = totalSupply();\n        localTransactionLimits.maxTransaction = uint128(supplyTokens);\n        localTransactionLimits.walletMaxCapacity = uint128(supplyTokens);\n        transactionCaps = localTransactionLimits;\n        emit RemovedLimits();\n    }\n    \n    function updateTaxAndLimits(uint64 totalTax, uint128 newTxLimitPercent) internal {\n        TaxParams memory taxConfig;\n        taxConfig.taxComplete = totalTax;\n        sellTaxSettings = taxConfig;\n        buyTaxSchema = taxConfig;\n\n        if (newTxLimitPercent \u003e 0) {\n            TxBoundaries memory currentTransactionLimits;\n            uint128 limitAmount = uint128(\n                (totalSupply() * newTxLimitPercent) / 10000\n            );\n            currentTransactionLimits.maxTransaction = limitAmount;\n            currentTransactionLimits.walletMaxCapacity = limitAmount;\n            transactionCaps = currentTransactionLimits;\n        }\n    }\n    \n    function _transfer(\n        address originator,\n        address to,\n        uint256 quantityTokens\n    ) internal virtual override {\n        require(!detectedBots[originator], \"bot detected\");\n        require(_msgSender() == originator || !detectedBots[_msgSender()], \"bot detected\");\n        require(\n            tx.origin == originator || tx.origin == _msgSender() || !detectedBots[tx.origin],\n            \"bot detected\"\n        );\n        if (!noFee[originator] \u0026\u0026 !noFee[to]) {\n            require(tradingIsEnabled, \"Trading not active\");\n            quantityTokens -= applyTaxation(originator, to, quantityTokens);\n            maintainLimits(originator, to, quantityTokens);\n        }\n\n        super._transfer(originator, to, quantityTokens);\n    }\n    receive() external payable {}\n    function initializeTask() external payable onlyOwner {\n        require(!tradingIsEnabled, \"Trading already enabled\");\n\n        uint256 liquidityAmountSupply = balanceOf(address(this));\n        require(liquidityAmountSupply \u003e 0, \"No tokens for liquidity\");\n\n        uint256 balanceEth = msg.value;\n        require(balanceEth \u003e 0, \"No ETH for liquidity\");\n\n        approve(address(routerDexExchange), liquidityAmountSupply);\n\n        // Add liquidity to Uniswap\n        routerDexExchange.addLiquidityETH{value: balanceEth}(\n            address(this),\n            liquidityAmountSupply,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            owner(),\n            block.timestamp\n        );\n\n        // Enable trading\n        tradingIsEnabled = true;\n        startBlock = block.number;\n    }\n    \n    function setWalletMax(uint128 tokensMax) external onlyOwner {\n        require(\n            tokensMax \u003e= ((totalSupply() * 1) / 1000) / (10**decimals()),\n            \"Too low\"\n        );\n        transactionCaps.walletMaxCapacity = uint128(tokensMax * (10**decimals()));\n        emit MaxUpdatedWallet(transactionCaps.walletMaxCapacity);\n    }\n    }",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addrAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stateExempt\",\"type\":\"bool\"}],\"name\":\"FeeExemptConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBoundary\",\"type\":\"uint256\"}],\"name\":\"MaxUpdatedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountThreshold\",\"type\":\"uint256\"}],\"name\":\"TaxSellUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addrAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"stateExempt\",\"type\":\"bool\"}],\"name\":\"UpdateLimitExempt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountThreshold\",\"type\":\"uint256\"}],\"name\":\"UpdatedBuyTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxBoundary\",\"type\":\"uint256\"}],\"name\":\"UpdatedTransactionMax\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_FEE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antiBotProtection\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountsBot\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"statusValue\",\"type\":\"bool\"}],\"name\":\"botConfiguration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTaxSchema\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"taxComplete\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"centralTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"detectedBots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dynamicTaxState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethWrapped\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exemptFromLimits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeTask\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPairLp\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"marketPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"treasuryAmountTax\",\"type\":\"uint64\"}],\"name\":\"modifyBuyTaxSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stateExempt\",\"type\":\"bool\"}],\"name\":\"modifyExemptFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"treasuryAmountTax\",\"type\":\"uint64\"}],\"name\":\"modifySettingsSellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountThreshold\",\"type\":\"uint256\"}],\"name\":\"modifySwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"retrieveTokensOther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerDexExchange\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTaxSettings\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"taxComplete\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isProtectionEnabled\",\"type\":\"bool\"}],\"name\":\"setAntiMevEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokensMax\",\"type\":\"uint128\"}],\"name\":\"setWalletMax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBoundary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxTokenBook\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"tokenReserveTreasury\",\"type\":\"uint80\"},{\"internalType\":\"bool\",\"name\":\"savingGas\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenAmountWei\",\"type\":\"uint256[]\"}],\"name\":\"tokenAirdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeLimitsMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingIsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCaps\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"maxTransaction\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"walletMaxCapacity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"tokensMax\",\"type\":\"uint128\"}],\"name\":\"transactionMaxModify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOffLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"turnOffTaxDynamic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addrAccount\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"stateExempt\",\"type\":\"bool\"}],\"name\":\"updateLimitExemptStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressNewTreasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "OnigiriChan",
      "CompilerVersion": "v0.8.25+commit.b61c2a91",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": ""
    }
  ]
}
