{
  "TxHash": "0xa4d27c282842b88070593985b9a770a920c638edf11dd8c8b7c49de2b4157fb7",
  "ContractAddress": "0x85d8025ddd53698A4d0D54A5aEB5b2FB3F5d4BF2",
  "Name": "XPASSToken",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\n// Abstract contract defining basic ERC20 functionalities\r\nabstract contract ERC20Basic {\r\n    // Function to get the total supply of tokens\r\n    function totalSupply() public view virtual returns (uint256);\r\n\r\n    // Function to get the balance of a specific address\r\n    function balanceOf(address who) public view virtual returns (uint256);\r\n\r\n    // Function to transfer tokens from msg.sender to another address\r\n    function transfer(address to, uint256 value) public virtual returns (bool);\r\n\r\n    // Event emitted when tokens are transferred\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\n// Basic implementation of the ERC20Basic contract\r\ncontract BasicToken is ERC20Basic {\r\n    // Mapping from address to token balance\r\n    mapping(address =\u003e uint256) balances;\r\n\r\n    // Total supply of tokens\r\n    uint256 totalSupply_;\r\n\r\n    // Function to get the total supply of tokens\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return totalSupply_;\r\n    }\r\n\r\n    // Function to transfer tokens from msg.sender to another address\r\n    function transfer(address _to, uint256 _value) public virtual override returns (bool) {\r\n        require(_to != address(0), \"Invalid to\");\r\n        uint256 senderBalance = balances[msg.sender];\r\n        require(_value \u003c= senderBalance, \"No balance\");\r\n\r\n        balances[msg.sender] = senderBalance - _value;\r\n        balances[_to] += _value;\r\n\r\n        emit Transfer(msg.sender, _to, _value);\r\n\r\n        return true;\r\n    }\r\n\r\n    // Function to get the balance of a specific address\r\n    function balanceOf(address _owner) public view virtual override returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n}\r\n\r\n// Contract for managing ownership of the token\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    // Event emitted when ownership is transferred\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    // Constructor sets the initial owner to the msg.sender\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // Modifier to check if msg.sender is the owner\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Not owner\");\r\n        _;\r\n    }\r\n\r\n    // Function to transfer ownership to a new address\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Invalid owner\");\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n}\r\n\r\n// Extension of BasicToken with burn functionality\r\ncontract BurnableToken is BasicToken {\r\n    // Event emitted when tokens are burned\r\n    event Burn(address indexed burner, uint256 value);\r\n\r\n    // Function to burn tokens from msg.sender's balance\r\n    function burn(uint256 _value) public virtual {\r\n        uint256 accountBalance = balances[msg.sender];\r\n        require(_value \u003c= accountBalance, \"No balance\");\r\n\r\n        balances[msg.sender] = accountBalance - _value;\r\n        totalSupply_ -= _value;\r\n\r\n        emit Burn(msg.sender, _value);\r\n        emit Transfer(msg.sender, address(0), _value);\r\n    }\r\n}\r\n\r\n// Abstract contract extending ERC20Basic with additional functionalities\r\nabstract contract ERC20 is ERC20Basic {\r\n    function allowance(address owner, address spender) public view virtual returns (uint256);\r\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\r\n    function approve(address spender, uint256 value) public virtual returns (bool);\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool);\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// Standard implementation of the ERC20 token\r\ncontract StandardToken is ERC20, BasicToken {\r\n    // Mapping from owner to spender to allowance amount\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) internal allowed;\r\n\r\n    // Function to transfer tokens from one address to another using allowance\r\n    function transferFrom(address _from, address _to, uint256 _value) public virtual override returns (bool) {\r\n        require(_to != address(0), \"Invalid to\");\r\n        uint256 fromBalance = balances[_from];\r\n        uint256 allowanceValue = allowed[_from][msg.sender];\r\n        require(_value \u003c= fromBalance, \"No balance\");\r\n        require(_value \u003c= allowanceValue, \"No allowance\");\r\n\r\n        balances[_from] = fromBalance - _value;\r\n        balances[_to] += _value;\r\n        allowed[_from][msg.sender] = allowanceValue - _value;\r\n\r\n        emit Transfer(_from, _to, _value);\r\n        return true;\r\n    }\r\n\r\n    // Function to approve an allowance for a spender\r\n    function approve(address _spender, uint256 _value) public virtual override returns (bool) {\r\n        require(allowed[msg.sender][_spender] == 0 || _value == 0, \"Use increase/decreaseAllowance\");\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    // Function to increase the allowance for a spender\r\n    function increaseAllowance(address _spender, uint256 _addedValue) public virtual override returns (bool) {\r\n        uint256 newAllowance = allowed[msg.sender][_spender] + _addedValue;\r\n        allowed[msg.sender][_spender] = newAllowance;\r\n        emit Approval(msg.sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    // Function to decrease the allowance for a spender\r\n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public virtual override returns (bool) {\r\n        uint256 currentAllowance = allowed[msg.sender][_spender];\r\n        require(currentAllowance \u003e= _subtractedValue, \"Below zero allowance\");\r\n        uint256 newAllowance = currentAllowance - _subtractedValue;\r\n        allowed[msg.sender][_spender] = newAllowance;\r\n        emit Approval(msg.sender, _spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    // Function to get the allowance of a spender for a specific owner\r\n    function allowance(address _owner, address _spender) public view virtual override returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\n// The main token contract implementing all functionalities\r\ncontract XPASSToken is StandardToken, BurnableToken, Ownable {\r\n    string public constant symbol = \"XPASS\";\r\n    string public constant name = \"X-PASS\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public constant INITIAL_SUPPLY = 1_000_000_000 * (10 ** uint256(decimals)); \r\n\r\n    address public adminAddr;\r\n\r\n    bool public transferEnabled;\r\n\r\n    // Mapping to keep track of locked accounts\r\n    mapping(address =\u003e uint256) private lockedAccounts;\r\n\r\n    // Modifier to check if transfers are allowed\r\n    modifier onlyWhenTransferAllowed() {\r\n        require(transferEnabled == true || msg.sender == adminAddr, \"No transfers\");\r\n        _;\r\n    }\r\n\r\n    // Modifier to check if the destination address is valid\r\n    modifier onlyValidDestination(address to) {\r\n        require(to != address(0) \u0026\u0026 to != address(this) \u0026\u0026 to != owner \u0026\u0026 to != adminAddr, \"Invalid dest\");\r\n        _;\r\n    }\r\n\r\n    // Modifier to check if the amount is allowed considering locked balance\r\n    modifier onlyAllowedAmount(address from, uint256 amount) {\r\n        require(balances[from] - amount \u003e= lockedAccounts[from], \"Exceeds locked\");\r\n        _;\r\n    }\r\n\r\n    // Constructor setting initial supply and enabling transfers\r\n    constructor() {\r\n        totalSupply_ = INITIAL_SUPPLY;\r\n        balances[msg.sender] = totalSupply_;\r\n        emit Transfer(address(0), msg.sender, totalSupply_);\r\n        adminAddr = msg.sender;\r\n        transferEnabled = true;\r\n    }\r\n\r\n    // Event emitted when transfers are enabled\r\n    event TransferEnabled();\r\n\r\n    // Event emitted when transfers are disabled\r\n    event TransferDisabled();\r\n\r\n    // Event emitted when admin address is changed\r\n    event AdminAddrChanged(address indexed previousAdminAddr, address indexed newAdminAddr);\r\n\r\n    // Function to enable transfers\r\n    function enableTransfer() external onlyOwner {\r\n        transferEnabled = true;\r\n        emit TransferEnabled();\r\n    }\r\n\r\n    // Function to disable transfers\r\n    function disableTransfer() external onlyOwner {\r\n        transferEnabled = false;\r\n        emit TransferDisabled();\r\n    }\r\n\r\n    // Overriding transfer function with additional checks\r\n    function transfer(address to, uint256 value)\r\n        public\r\n        override(BasicToken, ERC20Basic)\r\n        onlyWhenTransferAllowed\r\n        onlyValidDestination(to)\r\n        onlyAllowedAmount(msg.sender, value)\r\n        returns (bool)\r\n    {\r\n        return super.transfer(to, value);\r\n    }\r\n\r\n    // Overriding transferFrom function with additional checks\r\n    function transferFrom(address from, address to, uint256 value)\r\n        public\r\n        override(StandardToken)\r\n        onlyWhenTransferAllowed\r\n        onlyValidDestination(to)\r\n        onlyAllowedAmount(from, value)\r\n        returns (bool)\r\n    {\r\n        return super.transferFrom(from, to, value);\r\n    }\r\n\r\n    // Overriding burn function to allow only owner to burn tokens when transfers are enabled\r\n    function burn(uint256 value) public override onlyOwner {\r\n        require(transferEnabled, \"No burns\");\r\n        super.burn(value);\r\n    }\r\n\r\n    // Event emitted when an account is locked\r\n    event AccountLocked(address indexed addr, uint256 amount);\r\n\r\n    // Event emitted when an account is unlocked\r\n    event AccountUnlocked(address indexed addr);\r\n\r\n    // Function to lock an account with a specified amount\r\n    function lockAccount(address addr, uint256 amount)\r\n        external\r\n        onlyOwner\r\n        onlyValidDestination(addr)\r\n    {\r\n        require(amount \u003e 0, \"Invalid amount\");\r\n        lockedAccounts[addr] = amount;\r\n        emit AccountLocked(addr, amount);\r\n    }\r\n\r\n    // Function to unlock an account\r\n    function unlockAccount(address addr)\r\n        external\r\n        onlyOwner\r\n        onlyValidDestination(addr)\r\n    {\r\n        lockedAccounts[addr] = 0;\r\n        emit AccountUnlocked(addr);\r\n    }\r\n\r\n    // Function to change the admin address\r\n    function changeAdminAddr(address newAdminAddr) external onlyOwner {\r\n        require(newAdminAddr != address(0), \"Invalid admin\");\r\n        address oldAdminAddr = adminAddr;\r\n        adminAddr = newAdminAddr;\r\n        emit AdminAddrChanged(oldAdminAddr, newAdminAddr);\r\n    }  \r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AccountLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"AccountUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousAdminAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"AdminAddrChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferDisabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"TransferEnabled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INITIAL_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdminAddr\",\"type\":\"address\"}],\"name\":\"changeAdminAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"unlockAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "XPASSToken",
      "CompilerVersion": "v0.8.10+commit.fc410830",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://3dbaa749bd4799dda90bdaf52bc4ab6b618565c409de9192a45eda3a5033ee53"
    }
  ]
}
