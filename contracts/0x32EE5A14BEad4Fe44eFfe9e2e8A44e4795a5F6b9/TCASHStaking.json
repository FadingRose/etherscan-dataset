{
  "TxHash": "0xc916ada6f70db6c883f0d8c09b2512aac2dcd23a17a50d5afb8bed1795f89cb2",
  "ContractAddress": "0x32EE5A14BEad4Fe44eFfe9e2e8A44e4795a5F6b9",
  "Name": "TCASHStaking",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract TCASHStaking is Ownable {\r\n    IERC20 public TCASHToken; // TCASH token address\r\n    uint256 public developmentFeeRate = 5; // 5% development fee rate\r\n    uint256 public durationForMinimumReward = 2 minutes; // staking period at least\r\n    uint256 public stakingStartTime; // First staked time in this contract\r\n    uint256 public nStakers; // Number of users\r\n    \r\n    struct Stake {\r\n        uint256 stakedAmount;\r\n        uint256 removingAmount;\r\n        uint256 stakedTime;\r\n    }\r\n\r\n    mapping(address =\u003e Stake) public stakes;\r\n    address public developmentFee; // Development fee address\r\n    address public stakedInfo; // Contract StakedInfo getting address\r\n\r\n    event Staked(address indexed user, uint256 stakedAmount);\r\n    event Unstaked(address indexed user, uint256 unstakedAmount, uint256 earnedETHRewards);\r\n\r\n    constructor (\r\n        address _TCASHToken,\r\n        address _stakedInfo,\r\n        address _developmentFee\r\n    ) {\r\n        TCASHToken = IERC20(_TCASHToken);\r\n        stakedInfo = _stakedInfo;\r\n        developmentFee = _developmentFee;\r\n        stakingStartTime = block.timestamp;\r\n        nStakers = 0;\r\n    }\r\n\r\n    // To get ETH into the contract\r\n    receive() external payable {}\r\n    fallback() external payable {}\r\n\r\n    // Stake TCASH tokens\r\n    function stake(uint256 amount) external {\r\n        require(amount \u003e 0, \"Amount must be greater than zero\");\r\n        // Stake TCASH token to this contract\r\n        require(TCASHToken.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\r\n\r\n        if(stakes[msg.sender].stakedTime != 0) {\r\n            stakes[stakedInfo].stakedAmount += amount;\r\n            stakes[stakedInfo].removingAmount += (block.timestamp - stakingStartTime) * amount;\r\n            stakes[msg.sender].stakedAmount += amount;\r\n            stakes[msg.sender].removingAmount += (block.timestamp - stakingStartTime) * amount;\r\n        } else {\r\n            stakes[stakedInfo].stakedAmount += amount;\r\n            stakes[stakedInfo].removingAmount += (block.timestamp - stakingStartTime) * amount;\r\n            stakes[msg.sender] = Stake(amount, (block.timestamp - stakingStartTime) * amount, block.timestamp);\r\n            nStakers++;\r\n        }\r\n        \r\n        emit Staked(msg.sender, stakes[msg.sender].stakedAmount);\r\n    }\r\n\r\n    // Unstake TCASH tokens\r\n    function unstake() external {\r\n        require(stakes[msg.sender].stakedAmount \u003e 0, \"No staked amount\");\r\n\r\n        uint256 stakingDuration = block.timestamp - stakes[msg.sender].stakedTime;\r\n        uint256 earnedETHRewards = 0;\r\n        uint256 realEarnedETHRewards = 0;\r\n        uint256 developmentFeeETHRewards = 0;\r\n        uint256 totalETHAmountsInContract = address(this).balance;\r\n\r\n        if (stakingDuration \u003c durationForMinimumReward) {\r\n            require(TCASHToken.transfer(msg.sender, stakes[msg.sender].stakedAmount), \"Transfer TCASH token failed\");\r\n            stakes[stakedInfo].stakedAmount -= stakes[msg.sender].stakedAmount;\r\n            stakes[stakedInfo].removingAmount -= stakes[msg.sender].removingAmount;\r\n            nStakers--;\r\n            stakes[msg.sender].stakedAmount = 0;\r\n            stakes[msg.sender].removingAmount = 0;\r\n            stakes[msg.sender].stakedTime = 0;\r\n        } else {\r\n            earnedETHRewards = (stakes[msg.sender].stakedAmount * (block.timestamp - stakingStartTime) - stakes[msg.sender].removingAmount) * totalETHAmountsInContract / (stakes[stakedInfo].stakedAmount * (block.timestamp - stakingStartTime) - stakes[stakedInfo].removingAmount);\r\n            require(TCASHToken.transfer(msg.sender, stakes[msg.sender].stakedAmount), \"Transfer TCASH token failed\");\r\n            stakes[stakedInfo].stakedAmount -= stakes[msg.sender].stakedAmount;\r\n            stakes[stakedInfo].removingAmount -= stakes[msg.sender].removingAmount;\r\n\r\n            nStakers--;\r\n            stakes[msg.sender].stakedAmount = 0;\r\n            stakes[msg.sender].removingAmount = 0;\r\n            stakes[msg.sender].stakedTime = 0;\r\n            //Transfer ETH\r\n            if(earnedETHRewards \u003e 0)\r\n            {\r\n                // Transfer ETH Reward to developer\r\n                developmentFeeETHRewards = earnedETHRewards * developmentFeeRate / 100;\r\n                payable(developmentFee).transfer(developmentFeeETHRewards);\r\n                // Transfer ETH Reward to user\r\n                realEarnedETHRewards = earnedETHRewards - developmentFeeETHRewards;\r\n                payable(msg.sender).transfer(realEarnedETHRewards);\r\n            }\r\n        }\r\n        emit Unstaked(msg.sender, stakes[msg.sender].stakedAmount, realEarnedETHRewards);\r\n    }\r\n\r\n    // Owner function to manually set staking period\r\n    function manualSetStakingPeriod(uint256 amount) external onlyOwner {\r\n        durationForMinimumReward = amount;\r\n    }\r\n\r\n    // Owner function to manually set development Fee address\r\n    function manualSetDevelopmentFee(address developmentFeeAddress) external onlyOwner {\r\n        developmentFee = developmentFeeAddress;\r\n    }\r\n\r\n    // Owner function to manually set development Fee Rate\r\n    function manualSetDevelopmentFeeRate(uint256 devFeeRate) external onlyOwner {\r\n        developmentFeeRate = devFeeRate;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TCASHToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakedInfo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_developmentFee\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnedETHRewards\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"TCASHToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"developmentFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"durationForMinimumReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"developmentFeeAddress\",\"type\":\"address\"}],\"name\":\"manualSetDevelopmentFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"devFeeRate\",\"type\":\"uint256\"}],\"name\":\"manualSetDevelopmentFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSetStakingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "TCASHStaking",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000399ac2a62f3537cec6f1624850323d9dc27e5115000000000000000000000000839e30829dda6e1dfdd1783f4a1647f8a5789735000000000000000000000000c3791dd2d2a7cbc2b5fec770476e6e908e1ebc76",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://4d60c97d58747f03cee39caf4ea90641cf802ce3c1add08f14e8847f8dafde66"
    }
  ]
}
