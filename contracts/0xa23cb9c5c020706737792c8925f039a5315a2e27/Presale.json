{
  "TxHash": "0x4398d6154df42d40afdf37b4563fd8ba2328c6092d8fc69427d7c6af6cd23051",
  "ContractAddress": "0xa23cb9c5c020706737792c8925f039a5315a2e27",
  "Name": "Presale",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\ninterface IERC165 {\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IAccessControl {\r\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\r\n\r\n    error AccessControlBadConfirmation();\r\n\r\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\r\n\r\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\r\n\r\n    function hasRole(bytes32 role, address account) external view returns (bool);\r\n\r\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\r\n\r\n    function grantRole(bytes32 role, address account) external;\r\n\r\n    function revokeRole(bytes32 role, address account) external;\r\n\r\n    function renounceRole(bytes32 role, address callerConfirmation) external;\r\n}\r\n\r\nlibrary AddressUpgradeable {\r\n    function isContract(address account) internal view returns (bool) {\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        if (returndata.length \u003e 0) {\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Initializable {\r\n    uint8 private _initialized;\r\n\r\n    bool private _initializing;\r\n\r\n    event Initialized(uint8 version);\r\n\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall \u0026\u0026 _initialized \u003c 1) || (!AddressUpgradeable.isContract(address(this)) \u0026\u0026 _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing \u0026\u0026 _initialized \u003c version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized \u003c type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    uint256[50] private __gap;\r\n}\r\n\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal onlyInitializing {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}\r\n\r\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\r\n    function __ERC165_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __ERC165_init_unchained() internal onlyInitializing {\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n\r\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\r\n    struct RoleData {\r\n        mapping(address account =\u003e bool) hasRole;\r\n        bytes32 adminRole;\r\n    }\r\n\r\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\r\n\r\n    struct AccessControlStorage {\r\n        mapping(bytes32 role =\u003e RoleData) _roles;\r\n    }\r\n\r\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\r\n\r\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\r\n        assembly {\r\n            $.slot := AccessControlStorageLocation\r\n        }\r\n    }\r\n\r\n    modifier onlyRole(bytes32 role) {\r\n        _checkRole(role);\r\n        _;\r\n    }\r\n\r\n    function __AccessControl_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __AccessControl_init_unchained() internal onlyInitializing {\r\n    }\r\n\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\r\n        AccessControlStorage storage $ = _getAccessControlStorage();\r\n        return $._roles[role].hasRole[account];\r\n    }\r\n\r\n    function _checkRole(bytes32 role) internal view virtual {\r\n        _checkRole(role, _msgSender());\r\n    }\r\n\r\n    function _checkRole(bytes32 role, address account) internal view virtual {\r\n        if (!hasRole(role, account)) {\r\n            revert AccessControlUnauthorizedAccount(account, role);\r\n        }\r\n    }\r\n\r\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\r\n        AccessControlStorage storage $ = _getAccessControlStorage();\r\n        return $._roles[role].adminRole;\r\n    }\r\n\r\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\r\n        _grantRole(role, account);\r\n    }\r\n\r\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(DEFAULT_ADMIN_ROLE)) {\r\n        _revokeRole(role, account);\r\n    }\r\n\r\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\r\n        if (callerConfirmation != _msgSender()) {\r\n            revert AccessControlBadConfirmation();\r\n        }\r\n\r\n        _revokeRole(role, callerConfirmation);\r\n    }\r\n\r\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\r\n        AccessControlStorage storage $ = _getAccessControlStorage();\r\n        bytes32 previousAdminRole = getRoleAdmin(role);\r\n        $._roles[role].adminRole = adminRole;\r\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\r\n    }\r\n\r\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\r\n        AccessControlStorage storage $ = _getAccessControlStorage();\r\n        if (!hasRole(role, account)) {\r\n            $._roles[role].hasRole[account] = true;\r\n            emit RoleGranted(role, account, _msgSender());\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\r\n        AccessControlStorage storage $ = _getAccessControlStorage();\r\n        if (hasRole(role, account)) {\r\n            $._roles[role].hasRole[account] = false;\r\n            emit RoleRevoked(role, account, _msgSender());\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\ncontract Presale is OwnableUpgradeable, ReentrancyGuardUpgradeable, AccessControlUpgradeable {\r\n    uint256 public constant DENOMINATOR = 10000;\r\n    uint256 public constant MONTH = 30 days;\r\n    bytes32 public constant OWNER_ROLE = keccak256(\"OWNER_ROLE\");\r\n\r\n    IERC20 public schAddress; // SCH token address\r\n    IERC20 public saleAddress; // USDT address\r\n\r\n    uint256[] public PRICES = [10000, 75000, 125000, 175000, 250000, 500000];\r\n    uint256[] public HARDCAPS = [150000, 40000, 88000, 80000, 600000, 400000];\r\n\r\n    struct Stage {\r\n        uint256 timeToStart;\r\n        uint256 timeToEnd;\r\n        uint256 timeToClaim;\r\n        uint256 minAmount; // Token amount without considering decimals\r\n        uint256 hardcap;\r\n        uint256 totalSale;\r\n        uint256 price; // Price for SCH token, multiplied by 10000 (e.g., 10000 = $1)\r\n        uint256 affiliateFee; // Percentage fee for the affiliate, multiplied by 10000 (e.g., 5% = 500)\r\n        uint256 vestingPeriod; // Total Months for vesting period\r\n        uint256 affiliateCount;\r\n    }\r\n\r\n    struct Affiliate {\r\n        uint256 amount;\r\n        uint256 timeStamp;\r\n        bool claimed;\r\n    }\r\n\r\n    struct AffiliateList {\r\n        address referrer;\r\n        address referee;\r\n        uint256 reward;\r\n        uint256 timeStamp;\r\n    }\r\n\r\n    Stage[] public stages;\r\n\r\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) public userDeposited;\r\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) public userClaimed;\r\n    mapping(uint256 =\u003e mapping(address =\u003e uint256)) public userLastClaimed;\r\n    mapping(address =\u003e mapping(address =\u003e Affiliate)) public affiliates;\r\n    mapping(uint256 =\u003e AffiliateList[]) public affiliateList;\r\n\r\n    event RoundCreated(uint256 indexed _stageId, uint256 _timeToStart, uint256 _timeToEnd, uint256 _timeToClaim, uint256 _minimumSCHAmount, uint256 _hardcap, uint256 _price, uint256 _affiliateFee, uint256 _vestingPeriod);\r\n    event RoundUpdated(uint256 indexed _stageId, uint256 _timeToStart, uint256 _timeToEnd, uint256 _timeToClaim, uint256 _minimumSCHAmount, uint256 _hardcap, uint256 _price, uint256 _affiliateFee, uint256 _vestingPeriod);\r\n    event SaleAddressUpdated(address indexed _newAddress);\r\n    event Deposit(address indexed _from, uint256 indexed _stage, uint256 _amount, address indexed _affiliate);\r\n    event Claim(address indexed _user, uint256 _stage, uint256 _amount, uint256 _timeStamp);\r\n    event AffiliateRewardClaimed(address indexed _referrer, address indexed _referee, uint256 _amount, uint256 _timeStamp);\r\n    event Withdrawal(address indexed _to, uint256 _amount, string _tokenType);\r\n\r\n    receive() external payable {\r\n        revert(\"Presale: Contract does not accept native currency\");\r\n    }\r\n\r\n    fallback() external payable {\r\n        revert(\"Presale: Contract does not accept native currency\");\r\n    }\r\n\r\n    modifier onlyOwners() {\r\n        require(hasRole(OWNER_ROLE, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Presale: Caller is not an owner\");\r\n        _;\r\n    }\r\n\r\n    function initialize(address _schAddr, address _saleAddr) public initializer {\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        __AccessControl_init();\r\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n\r\n        schAddress = IERC20(_schAddr);\r\n        saleAddress = IERC20(_saleAddr);        \r\n    }\r\n\r\n    function createRound(\r\n        uint256 _timeToStart,\r\n        uint256 _timeToEnd,\r\n        uint256 _timeToClaim,\r\n        uint256 _minAmount,\r\n        uint256 _affiliateFee,\r\n        uint256 _vestingPeriod\r\n    ) external onlyOwners {\r\n        stages.push(Stage({\r\n            timeToStart: _timeToStart,\r\n            timeToEnd: _timeToEnd,\r\n            timeToClaim: _timeToClaim,\r\n            minAmount: _minAmount,\r\n            hardcap: HARDCAPS[stages.length],\r\n            totalSale: 0,\r\n            price: PRICES[stages.length],\r\n            affiliateFee: _affiliateFee,\r\n            vestingPeriod: _vestingPeriod,\r\n            affiliateCount: 0\r\n        }));\r\n\r\n        emit RoundCreated(stages.length - 1, _timeToStart, _timeToEnd, _timeToClaim, _minAmount, HARDCAPS[stages.length], PRICES[stages.length], _affiliateFee, _vestingPeriod);\r\n    }\r\n\r\n    function updateStage(\r\n        uint256 _stageId,\r\n        uint256 _timeToStart,\r\n        uint256 _timeToEnd,\r\n        uint256 _timeToClaim,\r\n        uint256 _minAmount,\r\n        uint256 _hardcap,\r\n        uint256 _price,\r\n        uint256 _affiliateFee,\r\n        uint256 _vestingPeriod\r\n    ) external onlyOwners {\r\n        require(_stageId \u003c stages.length, \"Presale: Invalid stage ID\");\r\n\r\n        Stage storage stage = stages[_stageId];\r\n        stage.timeToStart = _timeToStart;\r\n        stage.timeToEnd = _timeToEnd;\r\n        stage.timeToClaim = _timeToClaim;\r\n        stage.minAmount = _minAmount;\r\n        stage.hardcap = _hardcap;\r\n        stage.price = _price;\r\n        stage.affiliateFee = _affiliateFee;\r\n        stage.vestingPeriod = _vestingPeriod;\r\n\r\n        emit RoundUpdated(_stageId, _timeToStart, _timeToEnd, _timeToClaim, _minAmount, _hardcap, _price, _affiliateFee, _vestingPeriod);\r\n    }\r\n\r\n    function deposit(uint256 _stageId, uint256 _amount, address _affiliate) external nonReentrant {\r\n        require(_stageId \u003c stages.length, \"Presale: Invalid stage ID\");\r\n\r\n        Stage storage stage = stages[_stageId];\r\n        require(block.timestamp \u003e= stage.timeToStart \u0026\u0026 block.timestamp \u003c= stage.timeToEnd, \"Presale: Not presale period\");\r\n        require(_amount \u003e= stage.minAmount, \"Invalid request: minimum deposit amount not met\");\r\n        require(saleAddress.transferFrom(msg.sender, address(this), _amount), \"Presale: Token transfer failed\");\r\n\r\n        uint256 depositAmount = _amount;\r\n        uint256 affiliateReward = 0;\r\n\r\n        if (_affiliate != address(0) \u0026\u0026 _affiliate != msg.sender) {\r\n            affiliateReward = (depositAmount * stage.affiliateFee) / DENOMINATOR;\r\n            depositAmount -= affiliateReward;\r\n            Affiliate memory affiliate = affiliates[_affiliate][msg.sender];\r\n            if (affiliate.amount == 0) {\r\n                affiliates[_affiliate][msg.sender] = Affiliate({\r\n                    amount: affiliateReward,\r\n                    timeStamp: block.timestamp,\r\n                    claimed: false\r\n                });\r\n            } else {\r\n                affiliates[_affiliate][msg.sender] = Affiliate({\r\n                    amount: affiliate.amount + affiliateReward,\r\n                    timeStamp: block.timestamp,\r\n                    claimed: false\r\n                });\r\n            }\r\n            \r\n            affiliateList[_stageId].push(AffiliateList({\r\n                referrer: _affiliate,\r\n                referee: msg.sender,\r\n                reward: affiliateReward,\r\n                timeStamp: block.timestamp\r\n            }));\r\n\r\n            stage.affiliateCount++;\r\n        }\r\n\r\n        userDeposited[_stageId][msg.sender] += depositAmount;\r\n        stage.totalSale += depositAmount;\r\n\r\n        emit Deposit(msg.sender, _stageId, depositAmount, _affiliate);\r\n    }\r\n\r\n    function claim(uint256 _stageId) external {\r\n        require(_stageId \u003c stages.length, \"Presale: Invalid stage ID\");\r\n\r\n        Stage storage stage = stages[_stageId];\r\n        require(block.timestamp \u003e stage.timeToClaim, \"Presale: Invalid claim time!\");\r\n        require(userDeposited[_stageId][msg.sender] \u003e 0, \"Presale: Invalid claim amount!\");\r\n\r\n        uint256 vested = 0;\r\n        vested = calculateVestedAmount(_stageId, msg.sender);\r\n        require(vested \u003e 0, \"Presale: No vested tokens available for claim\");\r\n        \r\n        uint256 lastClaimed = userLastClaimed[_stageId][msg.sender];\r\n        require(block.timestamp \u003e= lastClaimed + MONTH, \"Presale: Can only claim once per month\");\r\n\r\n        userClaimed[_stageId][msg.sender] += vested;\r\n        userLastClaimed[_stageId][msg.sender] = block.timestamp;\r\n        \r\n        emit Claim(msg.sender, _stageId, vested, block.timestamp);\r\n        \r\n        require(schAddress.transfer(msg.sender, (vested / (10 ** saleAddress.decimals())) * (10 ** schAddress.decimals())), \"Presale: Token transfer failed\");\r\n\r\n    }\r\n\r\n    function calculateVestedAmount(uint256 _stageId, address _user) public view returns (uint256) {\r\n        Stage storage stage = stages[_stageId];\r\n        uint256 deposited = userDeposited[_stageId][_user];\r\n        uint256 claimed = userClaimed[_stageId][_user];\r\n        uint256 vestedAmount = (deposited * DENOMINATOR) / stage.price;\r\n        uint256 timeElapsed = block.timestamp - stage.timeToClaim;\r\n\r\n        if (timeElapsed \u003e= stage.timeToClaim + stage.vestingPeriod * MONTH) {\r\n            return vestedAmount - claimed;\r\n        }\r\n\r\n        uint256 monthsElapsed = timeElapsed / MONTH;\r\n\r\n        uint256 monthlyVesting = vestedAmount / stage.vestingPeriod;\r\n\r\n        uint256 vested = monthlyVesting * (monthsElapsed + 1);\r\n\r\n        if (vested \u003e vestedAmount) {\r\n            vested = vestedAmount;\r\n        }\r\n\r\n        return vested - claimed;\r\n    }\r\n\r\n    function claimAffiliateReward(address _referrer) external {\r\n        Affiliate memory affiliate = affiliates[msg.sender][_referrer];\r\n        require(affiliate.amount \u003e 0, \"Presale: No affiliate rewards\");\r\n\r\n        affiliates[msg.sender][_referrer] = Affiliate({\r\n            amount: affiliate.amount,\r\n            timeStamp: affiliate.timeStamp,\r\n            claimed: true\r\n        });\r\n        require(saleAddress.transfer(msg.sender, affiliate.amount), \"Presale: Token transfer failed\");\r\n\r\n        emit AffiliateRewardClaimed(msg.sender, _referrer, affiliate.amount, block.timestamp);\r\n    }\r\n\r\n    function RescueFunds(uint256 amount) external onlyOwners returns (bool) {\r\n        uint256 balance = saleAddress.balanceOf(address(this));\r\n        require(amount \u003c= balance, \"Presale: Insufficient amount\");\r\n        bool success = saleAddress.transfer(msg.sender, amount);\r\n\r\n        emit Withdrawal(msg.sender, amount, \"saleToken\");\r\n        return success;\r\n    }\r\n\r\n    function RescueToken(uint256 amount) external onlyOwners returns (bool) {\r\n        uint256 balance = schAddress.balanceOf(address(this));\r\n        require(amount \u003c= balance, \"Presale: Insufficient amount\");\r\n        bool success = schAddress.transfer(msg.sender, amount);\r\n\r\n        emit Withdrawal(msg.sender, amount, \"schToken\");\r\n        return success;\r\n    }\r\n\r\n    function setSaleTokenAddress(address _address) external onlyOwners {\r\n        saleAddress = IERC20(_address);\r\n\r\n        emit SaleAddressUpdated(_address);\r\n    }\r\n\r\n    function getRoundCount() public view returns (uint256) {\r\n        return stages.length;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"AffiliateRewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeStamp\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeToStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeToEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeToClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumSCHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_affiliateFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"RoundCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_stageId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeToStart\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeToEnd\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timeToClaim\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minimumSCHAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_affiliateFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"RoundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"SaleAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_tokenType\",\"type\":\"string\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"HARDCAPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MONTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OWNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRICES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RescueToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"affiliateList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeStamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stageId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"calculateVestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stageId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"claimAffiliateReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeToStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"createRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_affiliate\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_schAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saleAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"schAddress\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSaleTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeToStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"affiliateCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stageId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hardcap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_affiliateFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingPeriod\",\"type\":\"uint256\"}],\"name\":\"updateStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLastClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "Presale",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://fdd501dc4d750acaafdda4d3123f4ab17c4c5c6ce82287af13e7550abf9ea8de"
    }
  ]
}
