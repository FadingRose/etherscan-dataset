{
  "TxHash": "0x3aa5e50b98c24a1fc1774a1dc33401fe5c402233fc7d3067439ff8351acf04e5",
  "ContractAddress": "0x1784624b06910e48f84ad7973163896db4a2f0d9",
  "Name": "ERC20",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/* \r\nTTTTTTTTTTTTTTTTTTTTTTRRRRRRRRRRRRRRRRR  UUUUUUUU     UUUUUUUMMMMMMMM               MMMMMMMPPPPPPPPPPPPPPPPP   \r\nT:::::::::::::::::::::R::::::::::::::::R U::::::U     U::::::M:::::::M             M:::::::P::::::::::::::::P  \r\nT:::::::::::::::::::::R::::::RRRRRR:::::RU::::::U     U::::::M::::::::M           M::::::::P::::::PPPPPP:::::P \r\nT:::::TT:::::::TT:::::RR:::::R     R:::::UU:::::U     U:::::UM:::::::::M         M:::::::::PP:::::P     P:::::P\r\nTTTTTT  T:::::T  TTTTTT R::::R     R:::::RU:::::U     U:::::UM::::::::::M       M::::::::::M P::::P     P:::::P\r\n        T:::::T         R::::R     R:::::RU:::::D     D:::::UM:::::::::::M     M:::::::::::M P::::P     P:::::P\r\n        T:::::T         R::::RRRRRR:::::R U:::::D     D:::::UM:::::::M::::M   M::::M:::::::M P::::PPPPPP:::::P \r\n        T:::::T         R:::::::::::::RR  U:::::D     D:::::UM::::::M M::::M M::::M M::::::M P:::::::::::::PP  \r\n        T:::::T         R::::RRRRRR:::::R U:::::D     D:::::UM::::::M  M::::M::::M  M::::::M P::::PPPPPPPPP    \r\n        T:::::T         R::::R     R:::::RU:::::D     D:::::UM::::::M   M:::::::M   M::::::M P::::P            \r\n        T:::::T         R::::R     R:::::RU:::::D     D:::::UM::::::M    M:::::M    M::::::M P::::P            \r\n        T:::::T         R::::R     R:::::RU::::::U   U::::::UM::::::M     MMMMM     M::::::M P::::P            \r\n      TT:::::::TT     RR:::::R     R:::::RU:::::::UUU:::::::UM::::::M               M::::::PP::::::PP          \r\n      T:::::::::T     R::::::R     R:::::R UU:::::::::::::UU M::::::M               M::::::P::::::::P          \r\n      T:::::::::T     R::::::R     R:::::R   UU:::::::::UU   M::::::M               M::::::P::::::::P          \r\n      TTTTTTTTTTT     RRRRRRRR     RRRRRRR     UUUUUUUUU     MMMMMMMM               MMMMMMMPPPPPPPPPP          \r\n                                                                                                            \r\n                                                                                                                   \r\n\r\n\r\n\r\nhttps://t.me/trumplivesforever Join us now, airdrop of 2% for the first 50 buyers\r\n\r\nTrump survived, MURICA FUCK YA\r\n*/\r\n\r\n\r\n\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context { \r\n    function _msgSender() internal view virtual returns (address) { \r\n       return msg.sender;\r\n    }  \r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) { \r\n       return msg.data;\r\n    }  \r\n} \r\n\r\nabstract contract Ownable is Context { \r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n    * @dev Initializes the contract setting the deployer as the initial owner.\r\n    */\r\n    constructor() { \r\n       _transferOwnership(_msgSender());\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the address of the current owner.\r\n    */\r\n    function owner() public view virtual returns (address) { \r\n       return _owner;\r\n    } \r\n\r\n    /**\r\n    * @dev Throws if called by any account other than the owner.\r\n    */\r\n    modifier onlyOwner() { \r\n       require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n       _;\r\n    } \r\n\r\n    /**\r\n    * @dev Leaves the contract without owner. It will not be possible to call\r\n    * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n    *\r\n    * NOTE: Renouncing ownership will leave the contract without an owner,\r\n    * thereby removing any functionality that is only available to the owner.\r\n    */\r\n    function renounceOwnership() public virtual onlyOwner { \r\n       _transferOwnership(address(0));\r\n    } \r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Can only be called by the current owner.\r\n    */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner { \r\n       require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n       _transferOwnership(newOwner);\r\n    } \r\n\r\n    /**\r\n    * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n    * Internal function without access restriction.\r\n    */\r\n    function _transferOwnership(address newOwner) internal virtual { \r\n       address oldOwner = _owner;\r\n       _owner = newOwner;\r\n       emit OwnershipTransferred(oldOwner, newOwner);\r\n    } \r\n} \r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 { \r\n    /**\r\n    * @dev Returns the amount of tokens in existence.\r\n    */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Returns the amount of tokens owned by `account`.\r\n    */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a { Transfer} event.\r\n    */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Returns the remaining number of tokens that `spender` will be\r\n    * allowed to spend on behalf of `owner` through { transferFrom} . This is\r\n    * zero by default.\r\n    *\r\n    * This value changes when { approve} or { transferFrom} are called.\r\n    */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n    * that someone may use both the old and the new allowance by unfortunate\r\n    * transaction ordering. One possible solution to mitigate this race\r\n    * condition is to first reduce the spender's allowance to 0 and set the\r\n    * desired value afterwards:\r\n    * https:// github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n    *\r\n    * Emits an { Approval} event.\r\n    */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n    * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n    * allowance mechanism. `amount` is then deducted from the caller's\r\n    * allowance.\r\n    *\r\n    * Returns a boolean value indicating whether the operation succeeded.\r\n    *\r\n    * Emits a { Transfer} event.\r\n    */\r\n    function transferFrom(\r\n       address sender,\r\n       address recipient,\r\n       uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n    * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n    * another (`to`).\r\n    *\r\n    * Note that `value` may be zero.\r\n    */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n    * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n    * a call to { approve} . `value` is the new allowance.\r\n    */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n} \r\n\r\ninterface IERC20Metadata is IERC20 { \r\n    /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n    * @dev Returns the symbol of the token.\r\n    */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n    * @dev Returns the decimals places of the token.\r\n    */\r\n    function decimals() external view returns (uint8);\r\n} \r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata { \r\n    mapping(address =\u003e uint256) private _balances;\r\n\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n    * @dev Sets the values for { name} and { symbol} .\r\n    *\r\n    * The default value of { decimals} is 18. To select a different value for\r\n    * { decimals} you should overload it.\r\n    *\r\n    * All two of these values are immutable: they can only be set once during\r\n    * construction.\r\n    */\r\n    constructor(string memory name_, string memory symbol_) { \r\n       _name = name_;\r\n       _symbol = symbol_;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the name of the token.\r\n    */\r\n    function name() public view virtual override returns (string memory) { \r\n       return _name;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the symbol of the token, usually a shorter version of the\r\n    * name.\r\n    */\r\n    function symbol() public view virtual override returns (string memory) { \r\n       return _symbol;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the number of decimals used to get its user representation.\r\n    * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n    * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n    *\r\n    * Tokens usually opt for a value of 18, imitating the relationship between\r\n    * Ether and Wei. This is the value { ERC20} uses, unless this function is\r\n    * overridden;\r\n    *\r\n    * NOTE: This information is only used for _display_ purposes: it in\r\n    * no way affects any of the arithmetic of the contract, including\r\n    * { IERC20-balanceOf} and { IERC20-transfer} .\r\n    */\r\n    function decimals() public view virtual override returns (uint8) { \r\n       return 18;\r\n    } \r\n\r\n    /**\r\n    * @dev See { IERC20-totalSupply} .\r\n    */\r\n    function totalSupply() public view virtual override returns (uint256) { \r\n       return _totalSupply;\r\n    } \r\n\r\n    /**\r\n    * @dev See { IERC20-balanceOf} .\r\n    */\r\n    function balanceOf(address account) public view virtual override returns (uint256) { \r\n       return _balances[account];\r\n    } \r\n\r\n    /**\r\n    * @dev See { IERC20-transfer} .\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `recipient` cannot be the zero address.\r\n    * - the caller must have a balance of at least `amount`.\r\n    */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) { \r\n       _transfer(_msgSender(), recipient, amount);\r\n       return true;\r\n    } \r\n\r\n    /**\r\n    * @dev See { IERC20-allowance} .\r\n    */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) { \r\n       return _allowances[owner][spender];\r\n    } \r\n\r\n    /**\r\n    * @dev See { IERC20-approve} .\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) { \r\n       _approve(_msgSender(), spender, amount);\r\n       return true;\r\n    } \r\n\r\n    /**\r\n    * @dev See { IERC20-transferFrom} .\r\n    *\r\n    * Emits an { Approval} event indicating the updated allowance. This is not\r\n    * required by the EIP. See the note at the beginning of { ERC20} .\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` and `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    * - the caller must have allowance for ``sender``'s tokens of at least\r\n    * `amount`.\r\n    */\r\n    function transferFrom(\r\n       address sender,\r\n       address recipient,\r\n       uint256 amount\r\n    ) public virtual override returns (bool) { \r\n       _transfer(sender, recipient, amount);\r\n\r\n       uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n       require(currentAllowance \u003e= amount, \"ERC20: transfer amount exceeds allowance\");\r\n       unchecked { \r\n          _approve(sender, _msgSender(), currentAllowance - amount);\r\n       } \r\n\r\n       return true;\r\n    } \r\n\r\n    /**\r\n    * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to { approve} that can be used as a mitigation for\r\n    * problems described in { IERC20-approve} .\r\n    *\r\n    * Emits an { Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \r\n       _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n       return true;\r\n    } \r\n\r\n    /**\r\n    * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n    *\r\n    * This is an alternative to { approve} that can be used as a mitigation for\r\n    * problems described in { IERC20-approve} .\r\n    *\r\n    * Emits an { Approval} event indicating the updated allowance.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `spender` cannot be the zero address.\r\n    * - `spender` must have allowance for the caller of at least\r\n    * `subtractedValue`.\r\n    */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { \r\n       uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n       require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n       unchecked { \r\n          _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n       } \r\n\r\n       return true;\r\n    } \r\n\r\n    /**\r\n    * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n    *\r\n    * This internal function is equivalent to { transfer} , and can be used to\r\n    * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n    *\r\n    * Emits a { Transfer} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `sender` cannot be the zero address.\r\n    * - `recipient` cannot be the zero address.\r\n    * - `sender` must have a balance of at least `amount`.\r\n    */\r\n    function _transfer(\r\n       address sender,\r\n       address recipient,\r\n       uint256 amount\r\n    ) internal virtual { \r\n       require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n       require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n       _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n       uint256 senderBalance = _balances[sender];\r\n       require(senderBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n       unchecked { \r\n          _balances[sender] = senderBalance - amount;\r\n       } \r\n       _balances[recipient] += amount;\r\n\r\n       emit Transfer(sender, recipient, amount);\r\n\r\n       _afterTokenTransfer(sender, recipient, amount);\r\n    } \r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n    * the total supply.\r\n    *\r\n    * Emits a { Transfer} event with `from` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    */\r\n    function _mint(address account, uint256 amount) internal virtual { \r\n       require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n       _beforeTokenTransfer(address(0), account, amount);\r\n\r\n       _totalSupply += amount;\r\n       _balances[account] += amount;\r\n       emit Transfer(address(0), account, amount);\r\n\r\n       _afterTokenTransfer(address(0), account, amount);\r\n    } \r\n\r\n    /**\r\n    * @dev Destroys `amount` tokens from `account`, reducing the\r\n    * total supply.\r\n    *\r\n    * Emits a { Transfer} event with `to` set to the zero address.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `account` cannot be the zero address.\r\n    * - `account` must have at least `amount` tokens.\r\n    */\r\n    function _burn(address account, uint256 amount) internal virtual { \r\n       require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n       _beforeTokenTransfer(account, address(0), amount);\r\n\r\n       uint256 accountBalance = _balances[account];\r\n       require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n       unchecked { \r\n          _balances[account] = accountBalance - amount;\r\n       } \r\n       _totalSupply -= amount;\r\n\r\n       emit Transfer(account, address(0), amount);\r\n\r\n       _afterTokenTransfer(account, address(0), amount);\r\n    } \r\n\r\n    /**\r\n    * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n    *\r\n    * This internal function is equivalent to `approve`, and can be used to\r\n    * e.g. set automatic allowances for certain subsystems, etc.\r\n    *\r\n    * Emits an { Approval} event.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - `owner` cannot be the zero address.\r\n    * - `spender` cannot be the zero address.\r\n    */\r\n    function _approve(\r\n       address owner,\r\n       address spender,\r\n       uint256 amount\r\n    ) internal virtual { \r\n       require(owner != address(0), \"ERC20: approve from the zero address\");\r\n       require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n       _allowances[owner][spender] = amount;\r\n       emit Approval(owner, spender, amount);\r\n    } \r\n\r\n    /**\r\n    * @dev Hook that is called before any transfer of tokens. This includes\r\n    * minting and burning.\r\n    *\r\n    * Calling conditions:\r\n    *\r\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n    * will be transferred to `to`.\r\n    * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n    * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n    * - `from` and `to` are never both zero.\r\n    *\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n    */\r\n    function _beforeTokenTransfer(\r\n       address from,\r\n       address to,\r\n       uint256 amount\r\n    ) internal virtual { } \r\n\r\n    /**\r\n    * @dev Hook that is called after any transfer of tokens. This includes\r\n    * minting and burning.\r\n    *\r\n    * Calling conditions:\r\n    *\r\n    * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n    * has been transferred to `to`.\r\n    * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n    * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n    * - `from` and `to` are never both zero.\r\n    *\r\n    * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n    */\r\n    function _afterTokenTransfer(\r\n       address from,\r\n       address to,\r\n       uint256 amount\r\n    ) internal virtual { } \r\n} \r\n\r\n\r\nlibrary SafeMath { \r\n    /**\r\n    * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \r\n       unchecked { \r\n          uint256 c = a + b;\r\n          if (c \u003c a) return (false, 0);\r\n          return (true, c);\r\n       } \r\n    } \r\n\r\n    /**\r\n    * @dev Returns the substraction of two unsigned integers, with an overflow flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \r\n       unchecked { \r\n          if (b \u003e a) return (false, 0);\r\n          return (true, a - b);\r\n       } \r\n    } \r\n\r\n    /**\r\n    * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \r\n       unchecked { \r\n          // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n          // benefit is lost if 'b' is also tested.\r\n          // See: https:// github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n          if (a == 0) return (true, 0);\r\n          uint256 c = a * b;\r\n          if (c / a != b) return (false, 0);\r\n          return (true, c);\r\n       } \r\n    } \r\n\r\n    /**\r\n    * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \r\n       unchecked { \r\n          if (b == 0) return (false, 0);\r\n          return (true, a / b);\r\n       } \r\n    } \r\n\r\n    /**\r\n    * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n    *\r\n    * _Available since v3.4._\r\n    */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \r\n       unchecked { \r\n          if (b == 0) return (false, 0);\r\n          return (true, a % b);\r\n       } \r\n    } \r\n\r\n    /**\r\n    * @dev Returns the addition of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `+` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Addition cannot overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \r\n       return a + b;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { \r\n       return a - b;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the multiplication of two unsigned integers, reverting on\r\n    * overflow.\r\n    *\r\n    * Counterpart to Solidity's `*` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Multiplication cannot overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { \r\n       return a * b;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the integer division of two unsigned integers, reverting on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) { \r\n       return a / b;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * reverting when dividing by zero.\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { \r\n       return a % b;\r\n    } \r\n\r\n    /**\r\n    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n    * overflow (when the result is negative).\r\n    *\r\n    * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n    * message unnecessarily. For custom revert reasons use { trySub} .\r\n    *\r\n    * Counterpart to Solidity's `-` operator.\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - Subtraction cannot overflow.\r\n    */\r\n    function sub(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n    ) internal pure returns (uint256) { \r\n       unchecked { \r\n          require(b \u003c= a, errorMessage);\r\n          return a - b;\r\n       } \r\n    } \r\n\r\n    /**\r\n    * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n    * division by zero. The result is rounded towards zero.\r\n    *\r\n    * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n    * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n    * uses an invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function div(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n    ) internal pure returns (uint256) { \r\n       unchecked { \r\n          require(b \u003e 0, errorMessage);\r\n          return a / b;\r\n       } \r\n    } \r\n\r\n    /**\r\n    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n    * reverting with custom message when dividing by zero.\r\n    *\r\n    * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n    * message unnecessarily. For custom revert reasons use { tryMod} .\r\n    *\r\n    * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n    * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n    * invalid opcode to revert (consuming all remaining gas).\r\n    *\r\n    * Requirements:\r\n    *\r\n    * - The divisor cannot be zero.\r\n    */\r\n    function mod(\r\n       uint256 a,\r\n       uint256 b,\r\n       string memory errorMessage\r\n    ) internal pure returns (uint256) { \r\n       unchecked { \r\n          require(b \u003e 0, errorMessage);\r\n          return a % b;\r\n       } \r\n    } \r\n} \r\n\r\ninterface IUniswapV2Factory { \r\n    event PairCreated(\r\n       address indexed token0,\r\n       address indexed token1,\r\n       address pair,\r\n       uint256\r\n    );\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n       external\r\n       view\r\n       returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n       external\r\n       returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n} \r\n\r\n\r\ninterface IUniswapV2Pair { \r\n    event Approval(\r\n       address indexed owner,\r\n       address indexed spender,\r\n       uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n       external\r\n       view\r\n       returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(\r\n       address from,\r\n       address to,\r\n       uint256 value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    function permit(\r\n       address owner,\r\n       address spender,\r\n       uint256 value,\r\n       uint256 deadline,\r\n       uint8 v,\r\n       bytes32 r,\r\n       bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\r\n    event Burn(\r\n       address indexed sender,\r\n       uint256 amount0,\r\n       uint256 amount1,\r\n       address indexed to\r\n    );\r\n    event Swap(\r\n       address indexed sender,\r\n       uint256 amount0In,\r\n       uint256 amount1In,\r\n       uint256 amount0Out,\r\n       uint256 amount1Out,\r\n       address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n       external\r\n       view\r\n       returns (\r\n          uint112 reserve0,\r\n          uint112 reserve1,\r\n          uint32 blockTimestampLast\r\n       );\r\n\r\n    function price0CumulativeLast() external view returns (uint256);\r\n\r\n    function price1CumulativeLast() external view returns (uint256);\r\n\r\n    function kLast() external view returns (uint256);\r\n\r\n    function mint(address to) external returns (uint256 liquidity);\r\n\r\n    function burn(address to)\r\n       external\r\n       returns (uint256 amount0, uint256 amount1);\r\n\r\n    function swap(\r\n       uint256 amount0Out,\r\n       uint256 amount1Out,\r\n       address to,\r\n       bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n} \r\n\r\ninterface IUniswapV2Router02 { \r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n       address tokenA,\r\n       address tokenB,\r\n       uint256 amountADesired,\r\n       uint256 amountBDesired,\r\n       uint256 amountAMin,\r\n       uint256 amountBMin,\r\n       address to,\r\n       uint256 deadline\r\n    )\r\n       external\r\n       returns (\r\n          uint256 amountA,\r\n          uint256 amountB,\r\n          uint256 liquidity\r\n       );\r\n\r\n    function addLiquidityETH(\r\n       address token,\r\n       uint256 amountTokenDesired,\r\n       uint256 amountTokenMin,\r\n       uint256 amountETHMin,\r\n       address to,\r\n       uint256 deadline\r\n    )\r\n       external\r\n       payable\r\n       returns (\r\n          uint256 amountToken,\r\n          uint256 amountETH,\r\n          uint256 liquidity\r\n       );\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n       uint256 amountIn,\r\n       uint256 amountOutMin,\r\n       address[] calldata path,\r\n       address to,\r\n       uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n       uint256 amountOutMin,\r\n       address[] calldata path,\r\n       address to,\r\n       uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n       uint256 amountIn,\r\n       uint256 amountOutMin,\r\n       address[] calldata path,\r\n       address to,\r\n       uint256 deadline\r\n    ) external;\r\n} \r\n\r\ncontract Unibot is ERC20, Ownable { \r\n\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    address public constant deadAddress = address(0xdead);\r\n\r\n    bool private swapping;\r\n\r\n    address public marketingWallet;\r\n    address public teamWallet;\r\n\r\n    uint256 public maxTransactionAmount;\r\n    uint256 public swapTokensAtAmount;\r\n    uint256 public maxWallet;\r\n\r\n    /* 0.25% of the supply is automatically burned per hour */\r\n    uint256 public percentForLPBurn = 20; // .2% per hour\r\n    bool public lpBurnEnabled = true;\r\n    uint256 public lpBurnFrequency = 3600 seconds; // 1 hour\r\n    uint256 public lastLpBurnTime;\r\n\r\n    uint256 public manualBurnFrequency = 60 minutes;\r\n    uint256 public lastManualLpBurnTime;\r\n\r\n    bool public limitsInEffect = true;\r\n    bool public tradingActive = false;\r\n    bool public swapEnabled = false;\r\n\r\n    mapping(address =\u003e uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    bool public transferDelayEnabled = true;\r\n\r\n    uint256 public tokensForMarketing;\r\n    uint256 public tokensForLiquidity;\r\n    uint256 public tokensForTeam;\r\n\r\n    uint256 public buyTotalFees;\r\n    uint256 public buyMarketingFee;\r\n    uint256 public buyLiquidityFee;\r\n    uint256 public buyTeamFee;\r\n\r\n    uint256 public sellTotalFees;\r\n    uint256 public sellMarketingFee;\r\n    uint256 public sellLiquidityFee;\r\n    uint256 public sellTeamFee;\r\n\r\n    // exlcude from fees and max transaction amount\r\n    mapping(address =\u003e bool) private _isExcludedFromFees;\r\n    mapping(address =\u003e bool) public _isExcludedMaxTransactionAmount;\r\n\r\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\r\n    // could be subject to a maximum transfer amount\r\n    mapping(address =\u003e bool) public automatedMarketMakerPairs;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event marketingWalletUpdated(\r\n        address indexed _addr,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event teamWalletUpdated(\r\n        address indexed _addr,\r\n        address indexed oldWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n\r\n    event AutoNukeLP();\r\n\r\n    event ManualNukeLP();\r\n\r\n    constructor() ERC20(\"Test\", \"TEST\") { \r\n\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\r\n            0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24\r\n        );\r\n\r\n        excludeFromMaxTx(address(_uniswapV2Router), true);\r\n        uniswapV2Router = _uniswapV2Router;\r\n\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        excludeFromMaxTx(address(uniswapV2Pair), true);\r\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\r\n\r\n        uint256 _buyMarketingFee = 3;\r\n        uint256 _buyLiquidityFee = 0;\r\n        uint256 _buyTeamFee = 2;\r\n\r\n        uint256 _sellMarketingFee = 3;\r\n        uint256 _sellLiquidityFee = 0;\r\n        uint256 _sellTeamFee = 2;\r\n\r\n        uint256 totalSupply = 1_000_000 * 1e18;\r\n\r\n        maxTransactionAmount = 20_000 * 1e18; // 2%\r\n        maxWallet = 20_000 * 1e18; // 2% \r\n        swapTokensAtAmount = (totalSupply * 5) / 10000; // 0.05% \r\n\r\n        teamWallet = owner();\r\n        marketingWallet = address(0x35418c2a7D66056A628F4171fE235eCd91F1E895);\r\n\r\n        buyMarketingFee = _buyMarketingFee;\r\n        buyLiquidityFee = _buyLiquidityFee;\r\n        buyTeamFee = _buyTeamFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyTeamFee;\r\n\r\n        sellMarketingFee = _sellMarketingFee;\r\n        sellLiquidityFee = _sellLiquidityFee;\r\n        sellTeamFee = _sellTeamFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellTeamFee;\r\n\r\n        // exclude from paying fees or having max transaction amount\r\n        excludeFromMaxTx(owner(), true);\r\n        excludeFromMaxTx(address(this), true);\r\n        excludeFromMaxTx(address(0xdead), true);\r\n        excludeFromFees(owner(), true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n\r\n        _mint(msg.sender, totalSupply);\r\n    } \r\n\r\n    receive() external payable { } \r\n\r\n   \r\n    function excludeFromFees(address account, bool excluded) public onlyOwner { \r\n        _isExcludedFromFees[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    } \r\n\r\n    function setBuyFees(\r\n        uint256 marketingFee,\r\n        uint256 liqFee,\r\n        uint256 teamFee\r\n    ) external onlyOwner { \r\n        buyMarketingFee = marketingFee;\r\n        buyLiquidityFee = liqFee;\r\n        buyTeamFee = teamFee;\r\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyTeamFee;\r\n        require(buyTotalFees \u003c= 10);\r\n    } \r\n\r\n    function setSellFees(\r\n        uint256 marketingFee,\r\n        uint256 liqFee,\r\n        uint256 teamFee\r\n    ) external onlyOwner { \r\n        sellMarketingFee = marketingFee;\r\n        sellLiquidityFee = liqFee;\r\n        sellTeamFee = teamFee;\r\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellTeamFee;\r\n        require(sellTotalFees \u003c= 10);\r\n    } \r\n\r\n    function removeLimits() external onlyOwner returns (bool) { \r\n        limitsInEffect = false;\r\n        return true;\r\n    } \r\n\r\n    function disableTransferDelay() external onlyOwner returns (bool) { \r\n        transferDelayEnabled = false;\r\n        return true;\r\n    } \r\n\r\n    function setSwapTokensAtAmount(uint256 _val)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    { \r\n        require(_val \u003e= (totalSupply() * 1) / 100000);\r\n        require(_val \u003c= (totalSupply() * 5) / 1000);\r\n        swapTokensAtAmount = _val;\r\n        return true;\r\n    } \r\n\r\n    function setMaxWalletAmount(uint256 _val) external onlyOwner { \r\n        require(_val \u003e= ((totalSupply() * 10) / 1000) / 1e18);\r\n        maxWallet = _val * (10**18);\r\n    } \r\n    function setMaxTxAmount(uint256 _val) external onlyOwner { \r\n        require(\r\n            _val \u003e= ((totalSupply() * 10) / 1000) / 1e18);\r\n        maxTransactionAmount = _val * (10**18);\r\n    } \r\n\r\n    function excludeFromMaxTx(address _addr, bool _excluded)\r\n        public\r\n        onlyOwner\r\n    { \r\n        _isExcludedMaxTransactionAmount[_addr] = _excluded;\r\n    } \r\n\r\n    function enableTrading() external onlyOwner { \r\n        tradingActive = true;\r\n        swapEnabled = true;\r\n        lastLpBurnTime = block.timestamp;\r\n    } \r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n        public\r\n        onlyOwner\r\n    { \r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    } \r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private { \r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    } \r\n\r\n    function setTeamWallet(address _addr) external onlyOwner { \r\n        emit teamWalletUpdated(_addr, teamWallet);\r\n        teamWallet = _addr;\r\n    } \r\n\r\n    function isExcludedFromFees(address account) public view returns (bool) { \r\n        return _isExcludedFromFees[account];\r\n    } \r\n\r\n    function setMarketingWallet(address _addr)\r\n        external\r\n        onlyOwner\r\n    { \r\n        emit marketingWalletUpdated(_addr, marketingWallet);\r\n        marketingWallet = _addr;\r\n    } \r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override { \r\n        require(from != address(0), \"ERC20: transfer from the zero address.\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address.\");\r\n\r\n        if (amount == 0) { \r\n            super._transfer(from, to, 0);\r\n            return;\r\n        } \r\n\r\n        if (limitsInEffect) { \r\n            if (\r\n                from != owner() \u0026\u0026\r\n                to != owner() \u0026\u0026\r\n                to != address(0) \u0026\u0026\r\n                to != address(0xdead) \u0026\u0026\r\n                !swapping\r\n            ) { \r\n                if (!tradingActive) { \r\n                    require(\r\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\r\n                        \"Trading is not active!\"\r\n                    );\r\n                } \r\n\r\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\r\n                if (transferDelayEnabled) { \r\n                    if (\r\n                        to != owner() \u0026\u0026\r\n                        to != address(uniswapV2Router) \u0026\u0026\r\n                        to != address(uniswapV2Pair)\r\n                    ) { \r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] \u003c block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed!\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    } \r\n                } \r\n\r\n                // when buy\r\n                if (\r\n                    automatedMarketMakerPairs[from] \u0026\u0026\r\n                    !_isExcludedMaxTransactionAmount[to]\r\n                ) { \r\n                    require(\r\n                        amount \u003c= maxTransactionAmount,\r\n                        \"Buy transfer amount \u003e maxTransactionAmount!\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) \u003c= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                } \r\n                // when sell\r\n                else if (\r\n                    automatedMarketMakerPairs[to] \u0026\u0026\r\n                    !_isExcludedMaxTransactionAmount[from]\r\n                ) { \r\n                    require(\r\n                        amount \u003c= maxTransactionAmount,\r\n                        \"Sell transfer amount \u003e maxTransactionAmount!\"\r\n                    );\r\n                } else if (!_isExcludedMaxTransactionAmount[to]) { \r\n                    require(\r\n                        amount + balanceOf(to) \u003c= maxWallet,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                } \r\n            } \r\n        } \r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance \u003e= swapTokensAtAmount;\r\n\r\n        if (\r\n            canSwap \u0026\u0026\r\n            swapEnabled \u0026\u0026\r\n            !swapping \u0026\u0026\r\n            !automatedMarketMakerPairs[from] \u0026\u0026\r\n            !_isExcludedFromFees[from] \u0026\u0026\r\n            !_isExcludedFromFees[to]\r\n        ) { \r\n            swapping = true;\r\n\r\n            swapBack();\r\n\r\n            swapping = false;\r\n        } \r\n\r\n        if (\r\n            !swapping \u0026\u0026\r\n            automatedMarketMakerPairs[to] \u0026\u0026\r\n            lpBurnEnabled \u0026\u0026\r\n            block.timestamp \u003e= lastLpBurnTime + lpBurnFrequency \u0026\u0026\r\n            !_isExcludedFromFees[from]\r\n        ) { \r\n            autoBurnLiquidityPairTokens();\r\n        } \r\n\r\n        bool takeFee = !swapping;\r\n\r\n        // if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) { \r\n            takeFee = false;\r\n        } \r\n\r\n        uint256 fees = 0;\r\n        // only take fees on buys/sells, do not take on wallet transfers\r\n        if (takeFee) { \r\n            // on sell\r\n            if (automatedMarketMakerPairs[to] \u0026\u0026 sellTotalFees \u003e 0) { \r\n                fees = amount.mul(sellTotalFees).div(100);\r\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\r\n                tokensForTeam += (fees * sellTeamFee) / sellTotalFees;\r\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\r\n            } \r\n            // on buy\r\n            else if (automatedMarketMakerPairs[from] \u0026\u0026 buyTotalFees \u003e 0) { \r\n                fees = amount.mul(buyTotalFees).div(100);\r\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\r\n                tokensForTeam += (fees * buyTeamFee) / buyTotalFees;\r\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\r\n            } \r\n\r\n            if (fees \u003e 0) { \r\n                super._transfer(from, address(this), fees);\r\n            } \r\n\r\n            amount -= fees;\r\n        } \r\n\r\n        super._transfer(from, to, amount);\r\n    } \r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { \r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount} (\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            deadAddress,\r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private { \r\n        // generate the uniswap pair path of token -\u003e weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // make the swap\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    } \r\n\r\n    function swapBack() private { \r\n        uint256 contractBalance = balanceOf(address(this));\r\n        uint256 totalTokensToSwap = tokensForLiquidity +\r\n            tokensForMarketing +\r\n            tokensForTeam;\r\n        bool success;\r\n\r\n        if (contractBalance == 0 || totalTokensToSwap == 0) { \r\n            return;\r\n        } \r\n\r\n        if (contractBalance \u003e swapTokensAtAmount * 20) { \r\n            contractBalance = swapTokensAtAmount * 20;\r\n        } \r\n\r\n        // Halve the amount of liquidity tokens\r\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) / totalTokensToSwap / 2;\r\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\r\n\r\n        uint256 initialETHBalance = address(this).balance;\r\n\r\n        swapTokensForEth(amountToSwapForETH);\r\n\r\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\r\n\r\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\r\n            totalTokensToSwap\r\n        );\r\n        uint256 ethForTeam = ethBalance.mul(tokensForTeam).div(totalTokensToSwap);\r\n\r\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForTeam;\r\n\r\n        tokensForLiquidity = 0;\r\n        tokensForMarketing = 0;\r\n        tokensForTeam = 0;\r\n\r\n        (success, ) = address(teamWallet).call{value: ethForTeam} (\"\");\r\n\r\n        if (liquidityTokens \u003e 0 \u0026\u0026 ethForLiquidity \u003e 0) { \r\n            addLiquidity(liquidityTokens, ethForLiquidity);\r\n            emit SwapAndLiquify(\r\n                amountToSwapForETH,\r\n                ethForLiquidity,\r\n                tokensForLiquidity\r\n            );\r\n        } \r\n\r\n        (success, ) = address(marketingWallet).call{\r\n            value: address(this).balance\r\n        } (\"\");\r\n    } \r\n\r\n    function setAutoLPBurnSettings(\r\n        uint256 _frequencyInSeconds,\r\n        uint256 _percent,\r\n        bool _Enabled\r\n    ) external onlyOwner { \r\n        require(\r\n            _frequencyInSeconds \u003e= 600,\r\n            \"cannot set buyback more often than every 10 minutes\"\r\n        );\r\n        require(\r\n            _percent \u003c= 1000 \u0026\u0026 _percent \u003e= 0,\r\n            \"Must set auto LP burn percent between 0% and 10%\"\r\n        );\r\n        lpBurnFrequency = _frequencyInSeconds;\r\n        percentForLPBurn = _percent;\r\n        lpBurnEnabled = _Enabled;\r\n    } \r\n\r\n    function autoBurnLiquidityPairTokens() internal returns (bool) { \r\n        lastLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(\r\n            10000\r\n        );\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn \u003e 0) { \r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        } \r\n\r\n        // sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit AutoNukeLP();\r\n        return true;\r\n    } \r\n\r\n    function manualBurnLiquidityPairTokens(uint256 percent)\r\n        external\r\n        onlyOwner\r\n        returns (bool)\r\n    { \r\n        require(\r\n            block.timestamp \u003e lastManualLpBurnTime + manualBurnFrequency,\r\n            \"Must wait for cooldown to finish\"\r\n        );\r\n        require(percent \u003c= 1000, \"May not nuke more than 10% of tokens in LP\");\r\n        lastManualLpBurnTime = block.timestamp;\r\n\r\n        // get balance of liquidity pair\r\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\r\n\r\n        // calculate amount to burn\r\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);\r\n\r\n        // pull tokens from pancakePair liquidity and move to dead address permanently\r\n        if (amountToBurn \u003e 0) { \r\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\r\n        } \r\n\r\n        // sync price since this is not in a swap transaction!\r\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\r\n        pair.sync();\r\n        emit ManualNukeLP();\r\n        return true;\r\n    }   \r\n         \r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "ERC20",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000c5452554d50464f5245564552000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000095452554d5057494e530000000000000000000000000000000000000000000000",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://5012e12b6656d7c92d56ca60049c53e1b1af74d27aa945530bab76ccf4819bb2"
    }
  ]
}
