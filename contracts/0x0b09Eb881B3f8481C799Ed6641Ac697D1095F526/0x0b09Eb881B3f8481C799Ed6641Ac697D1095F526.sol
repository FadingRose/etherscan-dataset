{{
  "sources": {
    "IDEXV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\ninterface IDEXRouterV2 {\r\n  function factory() external pure returns (address);\r\n  function WETH() external pure returns (address);\r\n}\r\n\r\ninterface IDEXFactoryV2 {\r\n  function createPair(address tokenA, address tokenB) external returns (address pair);\r\n  function getPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n"
    },
    "CF_ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\nimport \"./CF_Common.sol\";\r\n\r\nabstract contract CF_ERC20 is CF_Common {\r\n  string internal _name;\r\n  string internal _symbol;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n  function name() external view returns (string memory) {\r\n    return _name;\r\n  }\r\n\r\n  function symbol() external view returns (string memory) {\r\n    return _symbol;\r\n  }\r\n\r\n  function decimals() external view returns (uint8) {\r\n    return _decimals;\r\n  }\r\n\r\n  function totalSupply() external view returns (uint256) {\r\n    return _totalSupply;\r\n  }\r\n\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return _balance[account];\r\n  }\r\n\r\n  function allowance(address owner, address spender) public view returns (uint256) {\r\n    return _allowance[owner][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) external returns (bool) {\r\n    _approve(msg.sender, spender, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transfer(address to, uint256 amount) external returns (bool) {\r\n    _transfer(msg.sender, to, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(address from, address to, uint256 amount) external returns (bool) {\r\n    _spendAllowance(from, msg.sender, amount);\r\n    _transfer(from, to, amount);\r\n\r\n    return true;\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n    unchecked {\r\n      _approve(msg.sender, spender, allowance(msg.sender, spender) + addedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n    uint256 currentAllowance = allowance(msg.sender, spender);\r\n\r\n    require(currentAllowance >= subtractedValue, \"Negative allowance\");\r\n\r\n    unchecked {\r\n      _approve(msg.sender, spender, currentAllowance - subtractedValue);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  function _approve(address owner, address spender, uint256 amount) internal {\r\n    _allowance[owner][spender] = amount;\r\n\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function _spendAllowance(address owner, address spender, uint256 amount) internal {\r\n    uint256 currentAllowance = allowance(owner, spender);\r\n\r\n    require(currentAllowance >= amount, \"Insufficient allowance\");\r\n\r\n    unchecked {\r\n      _approve(owner, spender, currentAllowance - amount);\r\n    }\r\n  }\r\n\r\n  function _transfer(address from, address to, uint256 amount) internal virtual {\r\n    require(from != address(0) && to != address(0), \"Transfer from/to zero address\");\r\n    require(_balance[from] >= amount, \"Exceeds balance\");\r\n\r\n    if (amount > 0) {\r\n      unchecked {\r\n        _balance[from] -= amount;\r\n        _balance[to] += amount;\r\n      }\r\n    }\r\n\r\n    emit Transfer(from, to, amount);\r\n  }\r\n}\r\n"
    },
    "CF_Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.25;\r\n\r\nimport \"./IDEXV2.sol\";\r\n\r\nabstract contract CF_Common {\r\n  string internal constant _version = \"1.0.3\";\r\n\r\n  mapping(address => uint256) internal _balance;\r\n  mapping(address => mapping(address => uint256)) internal _allowance;\r\n\r\n  bool internal immutable _initialized;\r\n\r\n  uint8 internal immutable _decimals;\r\n  uint24 internal constant _denominator = 1000;\r\n  uint256 internal _totalSupply;\r\n\r\n  struct Renounced {\r\n    bool DEXRouterV2;\r\n  }\r\n\r\n  struct DEXRouterV2 {\r\n    address router;\r\n    address pair;\r\n    address token0;\r\n    address WETH;\r\n  }\r\n\r\n  Renounced internal _renounced;\r\n  DEXRouterV2 internal _dex;\r\n\r\n  function _percentage(uint256 amount, uint256 bps) internal pure returns (uint256) {\r\n    unchecked {\r\n      return (amount * bps) / (100 * uint256(_denominator));\r\n    }\r\n  }\r\n\r\n  function _timestamp() internal view returns (uint32) {\r\n    unchecked {\r\n      return uint32(block.timestamp % 2**32);\r\n    }\r\n  }\r\n\r\n  function denominator() external pure returns (uint24) {\r\n    return _denominator;\r\n  }\r\n\r\n  function version() external pure returns (string memory) {\r\n    return _version;\r\n  }\r\n}\r\n"
    },
    "CF_Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\nimport \"./CF_Common.sol\";\r\n\r\npragma solidity 0.8.25;\r\n\r\nabstract contract CF_Ownable is CF_Common {\r\n  address internal _owner;\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n  modifier onlyOwner() {\r\n    require(_owner == msg.sender, \"Unauthorized\");\r\n\r\n    _;\r\n  }\r\n\r\n  function owner() external view returns (address) {\r\n    return _owner;\r\n  }\r\n\r\n  function renounceOwnership() external onlyOwner {\r\n    _renounced.DEXRouterV2 = true;\r\n\r\n    _transferOwnership(address(0));\r\n  }\r\n\r\n  function transferOwnership(address newOwner) external onlyOwner {\r\n    require(newOwner != address(0));\r\n\r\n    _transferOwnership(newOwner);\r\n  }\r\n\r\n  function _transferOwnership(address newOwner) internal {\r\n    address oldOwner = _owner;\r\n    _owner = newOwner;\r\n\r\n    emit OwnershipTransferred(oldOwner, newOwner);\r\n  }\r\n}\r\n"
    },
    "CF_DEXRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.25;\n\nimport \"./CF_Common.sol\";\nimport \"./CF_Ownable.sol\";\nimport \"./CF_ERC20.sol\";\n\nabstract contract CF_DEXRouterV2 is CF_Common, CF_Ownable, CF_ERC20 {\n  event SetDEXRouterV2(address indexed router, address indexed pair);\n  event RenouncedDEXRouterV2();\n\n  /// @notice Permanently renounce and prevent the owner from being able to update the DEX features\n  /// @dev Existing settings will continue to be effective\n  function renounceDEXRouterV2() external onlyOwner {\n    _renounced.DEXRouterV2 = true;\n\n    emit RenouncedDEXRouterV2();\n  }\n\n  function _setDEXRouterV2(address router, address token0) internal {\n    IDEXRouterV2 _router = IDEXRouterV2(router);\n    IDEXFactoryV2 factory = IDEXFactoryV2(_router.factory());\n    address pair = factory.createPair(address(this), token0);\n\n    _dex = DEXRouterV2(router, pair, token0, _router.WETH());\n\n    emit SetDEXRouterV2(router, _dex.pair);\n  }\n\n  /// @notice Returns the DEX router currently in use\n  function getDEXRouterV2() external view returns (address) {\n    return _dex.router;\n  }\n\n  /// @notice Returns the trading pair\n  function getDEXPairV2() external view returns (address) {\n    return _dex.pair;\n  }\n}\n"
    },
    "ChainFactory_ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.25;\n\nimport \"./CF_Common.sol\";\nimport \"./CF_Ownable.sol\";\nimport \"./CF_ERC20.sol\";\nimport \"./CF_DEXRouterV2.sol\";\n\ncontract ChainFactory_ERC20 is CF_Common, CF_Ownable, CF_ERC20, CF_DEXRouterV2 {\n  constructor() {\n    _name = unicode\"Test\";\n    _symbol = unicode\"Test\";\n    _decimals = 18;\n    _totalSupply = 1000000000000000000000000; // 1,000,000 Test\n    _transferOwnership(0x297B9bC9CB0A29d22defdeC7c66923090ef26E4A);\n    _transferInitialSupply(0x297B9bC9CB0A29d22defdeC7c66923090ef26E4A, 100000); // 100%\n    _setDEXRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n\n    _initialized = true;\n  }\n\n  function _transferInitialSupply(address account, uint24 percent) private {\n    require(!_initialized);\n\n    uint256 amount = _percentage(_totalSupply, uint256(percent));\n\n    _balance[account] = amount;\n\n    emit Transfer(address(0), account, amount);\n  }\n\n  /// @notice Returns a list specifying the renounce status of each feature\n  function renounced() external view returns (bool DEXRouterV2) {\n    return (_renounced.DEXRouterV2);\n  }\n\n  /// @notice Returns basic information about this Smart-Contract\n  function info() external view returns (string memory name, string memory symbol, uint8 decimals, address owner, uint256 totalSupply, string memory version) {\n    return (_name, _symbol, _decimals, _owner, _totalSupply, _version);\n  }\n\n  receive() external payable { }\n  fallback() external payable { }\n}\n\n/*\n   ________          _       ______           __                  \n  / ____/ /_  ____ _(_)___  / ____/___ ______/ /_____  _______  __\n / /   / __ \\/ __ `/ / __ \\/ /_  / __ `/ ___/ __/ __ \\/ ___/ / / /\n/ /___/ / / / /_/ / / / / / __/ / /_/ / /__/ /_/ /_/ / /  / /_/ / \n\\____/_/ /_/\\__,_/_/_/ /_/_/    \\__,_/\\___/\\__/\\____/_/   \\__, /  \n                                                         /____/   \n\n  Smart-Contract generated by ChainFactory.app\n\n  By using this Smart-Contract generated by ChainFactory.app, you\n  acknowledge and agree that ChainFactory shall not be liable for\n  any damages arising from the use of this Smart-Contract,\n  including but not limited to any damages resulting from any\n  malicious or illegal use of the Smart-Contract by any third\n  party or by the owner.\n\n  The owner of the Smart-Contract generated by ChainFactory.app\n  agrees not to misuse the Smart-Contract, including but not\n  limited to:\n\n  - Using the Smart-Contract to engage in any illegal or\n    fraudulent activity, including but not limited to scams,\n    theft, or money laundering.\n\n  - Using the Smart-Contract in any manner that could cause harm\n    to others, including but not limited to disrupting financial\n    markets or causing financial loss to others.\n\n  - Using the Smart-Contract to infringe upon the intellectual\n    property rights of others, including but not limited to\n    copyright, trademark, or patent infringement.\n\n  The owner of the Smart-Contract generated by ChainFactory.app\n  acknowledges that any misuse of the Smart-Contract may result in\n  legal action, and agrees to indemnify and hold harmless\n  ChainFactory from any and all claims, damages, or expenses\n  arising from any such misuse.\n\n*/\n"
    }
  },
  "language": "Solidity",
  "settings": {
    "optimizer": {
      "runs": 200,
      "enabled": true
    },
    "evmVersion": "cancun",
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    }
  }
}}
