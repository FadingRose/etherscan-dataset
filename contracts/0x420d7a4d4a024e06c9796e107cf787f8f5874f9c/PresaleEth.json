{
  "TxHash": "0xe3a574db7d8c769ea7c858db521ce4bbaad702e2fe40e2d4fd9f3af7f5b0bf12",
  "ContractAddress": "0x420d7a4d4a024e06c9796e107cf787f8f5874f9c",
  "Name": "PresaleEth",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-04-27\r\n */\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2024-03-04\r\n */\r\n\r\n//SPDX-License-Identifier: MIT Licensed\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address owner) external view returns (uint256);\r\n\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external;\r\n\r\n    function transfer(address to, uint256 value) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external;\r\n\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n}\r\n\r\ncontract PresaleEth is Ownable {\r\n    IERC20 public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    struct Phase {\r\n        uint256 tokensToSell;\r\n        uint256 totalSoldTokens;\r\n        uint256 tokenPerUsdPrice;\r\n    }\r\n    mapping(uint256 =\u003e Phase) public phases;\r\n\r\n    // Stats\r\n    uint256 public totalStages;\r\n    uint256 public currentStage;\r\n    uint256 public soldToken;\r\n    uint256 public amountRaised;\r\n    uint256 public amountRaisedUSDT;\r\n    uint256 public amountRaisedOverall;\r\n    uint256 public uniqueBuyers;\r\n\r\n    uint256[] public tokenPerUsdPrice = [\r\n        1250000000000000000000,\r\n        1241079739373254731616,\r\n        1232225152179806294206,\r\n        1223421174973696444738,\r\n        1214697843911327057394,\r\n        1206025302410844579519,\r\n        1197418366002897752445,\r\n        1188862733908742896545,\r\n        1180386694681177553766,\r\n        1171961981553318410350,\r\n        1163588973830883978543,\r\n        1155281368777365727422,\r\n        1147038919030522705635,\r\n        1138848396501457725947,\r\n        1130722871131514377141,\r\n        1122649452708391804658,\r\n        1114640806999944267959,\r\n        1106684373616644532979,\r\n        1098780353807273925942,\r\n        1090940827369523477046,\r\n        1083153710343034780065,\r\n        1075419144611612375923,\r\n        1067748651967326891249,\r\n        1060130608090916800949,\r\n        1052554022335196353952,\r\n        1045041279130525655763,\r\n        1037591956587152536393,\r\n        1030184403008138456783,\r\n        1022829555682841011373,\r\n        1015527414162545317910,\r\n        1008277962068583066979,\r\n        1001081167661073959876,\r\n        993936984395189344995,\r\n        986845351464971924249,\r\n        979796594227038466814,\r\n        972809961574006500000,\r\n        965866285471439300000,\r\n        958965851226037800000,\r\n        952127051833796700000,\r\n        945322544052030600000\r\n    ];\r\n    uint256[] public tokensToSell = [\r\n        39_062_500 * 10**18,\r\n        38_783_684 * 10**18,\r\n        38_506_858 * 10**18,\r\n        38_232_008 * 10**18,\r\n        37_959_120 * 10**18,\r\n        37_688_180 * 10**18,\r\n        37_419_173 * 10**18,\r\n        37_152_087 * 10**18,\r\n        36_886_907 * 10**18,\r\n        36_623_620 * 10**18,\r\n        36_362_112 * 10**18,\r\n        36_102_669 * 10**18,\r\n        35_849_803 * 10**18,\r\n        35_591_301 * 10**18,\r\n        35_335_106 * 10**18,\r\n        35_082_895 * 10**18,\r\n        34_832_484 * 10**18,\r\n        34_583_861 * 10**18,\r\n        34_337_012 * 10**18,\r\n        34_091_925 * 10**18,\r\n        33_858_787 * 10**18,\r\n        33_628_987 * 10**18,\r\n        33_400_962 * 10**18,\r\n        33_172_827 * 10**18,\r\n        32_924_830 * 10**18,\r\n        32_689_511 * 10**18,\r\n        32_463_606 * 10**18,\r\n        32_246_063 * 10**18,\r\n        32_036_384 * 10**18,\r\n        31_835_973 * 10**18,\r\n        31_542_394 * 10**18,\r\n        31_283_825 * 10**18,\r\n        31_061_701 * 10**18,\r\n        30_833_287 * 10**18,\r\n        30_617_871 * 10**18,\r\n        30_415_303 * 10**18,\r\n        30_183_944 * 10**18,\r\n        29_967_401 * 10**18,\r\n        29_753_899 * 10**18,\r\n        29_541_466 * 10**18\r\n    ];\r\n\r\n    address payable public fundReceiver;\r\n\r\n    bool public presaleStatus;\r\n    bool public isPresaleEnded;\r\n    uint256 public claimStartTime;\r\n\r\n    address[] public UsersAddresses;\r\n    struct User {\r\n        uint256 native_balance;\r\n        uint256 usdt_balance;\r\n        uint256 token_balance;\r\n        uint256 claimed_tokens;\r\n    }\r\n\r\n    mapping(address =\u003e User) public users;\r\n    mapping(address =\u003e bool) public isExist;\r\n\r\n    event BuyToken(address indexed _user, uint256 indexed _amount);\r\n    event ClaimToken(address indexed _user, uint256 indexed _amount);\r\n    event UpdatePrice(uint256 _oldPrice, uint256 _newPrice);\r\n\r\n    constructor(address _fundReceiver) {\r\n        fundReceiver = payable(_fundReceiver);\r\n        priceFeed = AggregatorV3Interface(\r\n            0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n        );\r\n       for (uint256 i = 0; i \u003c tokensToSell.length; i++) {\r\n            phases[i].tokensToSell = tokensToSell[i];\r\n            phases[i].tokenPerUsdPrice = tokenPerUsdPrice[i];\r\n        }\r\n        totalStages = tokensToSell.length;\r\n    }\r\n\r\n    // update a presale\r\n    function updatePresale(uint256 _phaseId, uint256 _tokenPerUsdPrice)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(phases[_phaseId].tokenPerUsdPrice \u003e 0, \"presale don't exist\");\r\n        phases[_phaseId].tokenPerUsdPrice = _tokenPerUsdPrice;\r\n    }\r\n\r\n    // to get real time price of Eth\r\n    function getLatestPrice() public view returns (uint256) {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price);\r\n    }\r\n\r\n    // to buy token during preSale time with Eth =\u003e for web3 use\r\n    function buyToken() public payable {\r\n        require(!isPresaleEnded, \"Presale ended!\");\r\n        require(presaleStatus, \" Presale is Paused, check back later\");\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n            UsersAddresses.push(msg.sender);\r\n        }\r\n        fundReceiver.transfer(msg.value);\r\n\r\n       uint256 numberOfTokens;\r\n        numberOfTokens = nativeToToken(msg.value, currentStage);\r\n        require(\r\n            phases[currentStage].totalSoldTokens + numberOfTokens \u003c=\r\n                phases[currentStage].tokensToSell,\r\n            \"Phase Limit Reached\"\r\n        );\r\n        soldToken = soldToken + (numberOfTokens);\r\n        amountRaised = amountRaised + (msg.value);\r\n        amountRaisedOverall = amountRaisedOverall + nativeToUsd(msg.value);\r\n        phases[currentStage].totalSoldTokens += numberOfTokens;\r\n        users[msg.sender].native_balance =\r\n            users[msg.sender].native_balance +\r\n            (msg.value);\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            (numberOfTokens);\r\n    }\r\n\r\n    // to buy token during preSale time with USDT =\u003e for web3 use\r\n    function buyTokenUSDT(uint256 amount) public {\r\n        require(!isPresaleEnded, \"Presale ended!\");\r\n        require(presaleStatus, \" Presale is Paused, check back later\");\r\n        if (!isExist[msg.sender]) {\r\n            isExist[msg.sender] = true;\r\n            uniqueBuyers++;\r\n            UsersAddresses.push(msg.sender);\r\n        }\r\n        USDT.transferFrom(msg.sender, fundReceiver, amount);\r\n\r\n        uint256 numberOfTokens;\r\n        numberOfTokens = usdtToToken(amount, currentStage);\r\n        require(\r\n            phases[currentStage].totalSoldTokens + numberOfTokens \u003c=\r\n                phases[currentStage].tokensToSell,\r\n            \"Phase Limit Reached\"\r\n        );\r\n        soldToken = soldToken + numberOfTokens;\r\n        amountRaisedUSDT = amountRaisedUSDT + amount;\r\n        amountRaisedOverall = amountRaisedOverall + amount;\r\n\r\n        users[msg.sender].usdt_balance += amount;\r\n        users[msg.sender].token_balance =\r\n            users[msg.sender].token_balance +\r\n            numberOfTokens;\r\n        phases[currentStage].totalSoldTokens += numberOfTokens;\r\n    }\r\n\r\n    function getPhaseDetail(uint256 phaseInd)\r\n        external\r\n        view\r\n        returns (uint256 priceUsd)\r\n    {\r\n        Phase memory phase = phases[phaseInd];\r\n        return (phase.tokenPerUsdPrice);\r\n    }\r\n\r\n    function setPresaleStatus(bool _status) external onlyOwner {\r\n        presaleStatus = _status;\r\n    }\r\n\r\n    function endPresale() external onlyOwner {\r\n        isPresaleEnded = true;\r\n        claimStartTime = block.timestamp;\r\n    }\r\n\r\n    // to check number of token for given Eth\r\n    function nativeToToken(uint256 _amount, uint256 phaseId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 ethToUsd = (_amount * (getLatestPrice())) / (1 ether);\r\n        uint256 numberOfTokens = (ethToUsd * phases[phaseId].tokenPerUsdPrice) /\r\n            (1e8);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // to check number of token for given usdt\r\n    function usdtToToken(uint256 _amount, uint256 phaseId)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 numberOfTokens = (_amount * phases[phaseId].tokenPerUsdPrice) /\r\n            (1e6);\r\n        return numberOfTokens;\r\n    }\r\n\r\n    // Eth to USD\r\n    function nativeToUsd(uint256 _amount) public view returns (uint256) {\r\n        uint256 nativeTousd = (_amount * (getLatestPrice())) / (1e20);\r\n        return nativeTousd;\r\n    }\r\n\r\n    //change tokens for buy\r\n    function updateStableTokens(IERC20 _USDT) external onlyOwner {\r\n        USDT = IERC20(_USDT);\r\n    }\r\n\r\n    // to withdraw funds for liquidity\r\n    function initiateTransfer(uint256 _value) external onlyOwner {\r\n        fundReceiver.transfer(_value);\r\n    }\r\n\r\n    // to withdraw funds for liquidity\r\n    function changeFundReciever(address _addr) external onlyOwner {\r\n        fundReceiver = payable(_addr);\r\n    }\r\n\r\n    // funtion is used to change the stage of presale\r\n    function setCurrentStage(uint256 _stageNum) public onlyOwner {\r\n        currentStage = _stageNum;\r\n    }\r\n\r\n    // to withdraw funds for liquidity\r\n    function updatePriceFeed(AggregatorV3Interface _priceFeed)\r\n        external\r\n        onlyOwner\r\n    {\r\n        priceFeed = _priceFeed;\r\n    }\r\n\r\n    // to withdraw out tokens\r\n    function transferTokens(IERC20 token, uint256 _value) external onlyOwner {\r\n        token.transfer(msg.sender, _value);\r\n    }\r\n\r\n    function totalUsersCount() external view returns (uint256) {\r\n        return UsersAddresses.length;\r\n    }\r\n}",
      "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UsersAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedOverall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"changeFundReciever\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundReceiver\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseInd\",\"type\":\"uint256\"}],\"name\":\"getPhaseDetail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceUsd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"initiateTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"}],\"name\":\"nativeToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"nativeToUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"phases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSoldTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPerUsdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stageNum\",\"type\":\"uint256\"}],\"name\":\"setCurrentStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setPresaleStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenPerUsdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueBuyers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenPerUsdPrice\",\"type\":\"uint256\"}],\"name\":\"updatePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"updatePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"updateStableTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"phaseId\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"native_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_tokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
      "ContractName": "PresaleEth",
      "CompilerVersion": "v0.8.18+commit.87f61d96",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "000000000000000000000000f475802960a7ed8085fcfcdbe4e85a850d47f617",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://261a77f68c1bc2ada4cbb9becaa8d8e870a6b56b26e1bdf87f776233a33dca74"
    }
  ]
}
