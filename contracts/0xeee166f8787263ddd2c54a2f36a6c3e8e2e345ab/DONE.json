{
  "TxHash": "0x8be8ffd33e66aea5fb14d1598df84729dd04caf7fbbd807691a92e5ac244fa17",
  "ContractAddress": "0xeee166f8787263ddd2c54a2f36a6c3e8e2e345ab",
  "Name": "DONE",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n  /*\r\n      Website: https://dogeneiro.com/\r\n    X/Twitter: https://x.com/DogeNeiroErc\r\n    Telegram: https://t.me/DogeNeiroErc\r\n  */\r\n  \r\n  pragma solidity ^0.8.26;\r\n\r\n  abstract contract Context {\r\n      function _msgSender() internal view virtual returns (address) {\r\n          return msg.sender;\r\n      }\r\n\r\n      function _msgData() internal view virtual returns (bytes calldata) {\r\n          return msg.data;\r\n      }\r\n  }\r\n\r\n  interface IERC20 {\r\n      function totalSupply() external view returns (uint256);\r\n      function balanceOf(address account) external view returns (uint256);\r\n      function transfer(address to, uint256 amount) external returns (bool);\r\n      function allowance(address owner, address spender) external view returns (uint256);\r\n      function approve(address spender, uint256 amount) external returns (bool);\r\n      function transferFrom(\r\n          address from,\r\n          address to,\r\n          uint256 amount\r\n      ) external returns (bool);\r\n\r\n      event Transfer(address indexed from, address indexed to, uint256 value);\r\n      event Approval(address indexed owner, address indexed spender, uint256 value);\r\n  }\r\n\r\n  interface IERC20Metadata is IERC20 {\r\n      function name() external view returns (string memory);\r\n      function symbol() external view returns (string memory);\r\n      function decimals() external view returns (uint8);\r\n  }\r\n\r\n  contract ERC20 is Context, IERC20, IERC20Metadata {\r\n      mapping(address =\u003e uint256) private _balances;\r\n      mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\r\n      uint256 private _totalSupply;\r\n\r\n      string private _name;\r\n      string private _symbol;\r\n\r\n      constructor(string memory name_, string memory symbol_) {\r\n          _name = name_;\r\n          _symbol = symbol_;\r\n      }\r\n\r\n      function name() public view virtual override returns (string memory) {\r\n          return _name;\r\n      }\r\n\r\n      function symbol() public view virtual override returns (string memory) {\r\n          return _symbol;\r\n      }\r\n\r\n      function decimals() public view virtual override returns (uint8) {\r\n          return 18;\r\n      }\r\n\r\n      function totalSupply() public view virtual override returns (uint256) {\r\n          return _totalSupply;\r\n      }\r\n\r\n      function balanceOf(address account) public view virtual override returns (uint256) {\r\n          return _balances[account];\r\n      }\r\n\r\n      function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n          address owner = _msgSender();\r\n          _transfer(owner, to, amount);\r\n          return true;\r\n      }\r\n\r\n      function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n          return _allowances[owner][spender];\r\n      }\r\n\r\n      function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n          address owner = _msgSender();\r\n          _approve(owner, spender, amount);\r\n          return true;\r\n      }\r\n\r\n      function transferFrom(\r\n          address from,\r\n          address to,\r\n          uint256 amount\r\n      ) public virtual override returns (bool) {\r\n          address spender = _msgSender();\r\n          _spendAllowance(from, spender, amount);\r\n          _transfer(from, to, amount);\r\n          return true;\r\n      }\r\n\r\n      function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n          address owner = _msgSender();\r\n          _approve(owner, spender, _allowances[owner][spender] + addedValue);\r\n          return true;\r\n      }\r\n\r\n      function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n          address owner = _msgSender();\r\n          uint256 currentAllowance = _allowances[owner][spender];\r\n          require(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n          unchecked {\r\n              _approve(owner, spender, currentAllowance - subtractedValue);\r\n          }\r\n\r\n          return true;\r\n      }\r\n\r\n      function _transfer(\r\n          address from,\r\n          address to,\r\n          uint256 amount\r\n      ) internal virtual {\r\n          require(from != address(0), \"ERC20: transfer from the zero address\");\r\n          require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n          _beforeTokenTransfer(from, to, amount);\r\n\r\n          uint256 fromBalance = _balances[from];\r\n          require(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n          unchecked {\r\n              _balances[from] = fromBalance - amount;\r\n          }\r\n          _balances[to] += amount;\r\n\r\n          emit Transfer(from, to, amount);\r\n\r\n          _afterTokenTransfer(from, to, amount);\r\n      }\r\n\r\n      function _mint(address account, uint256 amount) internal virtual {\r\n          require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n          _beforeTokenTransfer(address(0), account, amount);\r\n\r\n          _totalSupply += amount;\r\n          _balances[account] += amount;\r\n          emit Transfer(address(0), account, amount);\r\n\r\n          _afterTokenTransfer(address(0), account, amount);\r\n      }\r\n\r\n      function _burn(address account, uint256 amount) internal virtual {\r\n          require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n          _beforeTokenTransfer(account, address(0), amount);\r\n\r\n          uint256 accountBalance = _balances[account];\r\n          require(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n          unchecked {\r\n              _balances[account] = accountBalance - amount;\r\n          }\r\n          _totalSupply -= amount;\r\n\r\n          emit Transfer(account, address(0), amount);\r\n\r\n          _afterTokenTransfer(account, address(0), amount);\r\n      }\r\n\r\n      function _approve(\r\n          address owner,\r\n          address spender,\r\n          uint256 amount\r\n      ) internal virtual {\r\n          require(owner != address(0), \"ERC20: approve from the zero address\");\r\n          require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n          _allowances[owner][spender] = amount;\r\n          emit Approval(owner, spender, amount);\r\n      }\r\n\r\n      function _spendAllowance(\r\n          address owner,\r\n          address spender,\r\n          uint256 amount\r\n      ) internal virtual {\r\n          uint256 currentAllowance = allowance(owner, spender);\r\n          if (currentAllowance != type(uint256).max) {\r\n              require(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n              unchecked {\r\n                  _approve(owner, spender, currentAllowance - amount);\r\n              }\r\n          }\r\n      }\r\n\r\n      function _beforeTokenTransfer(\r\n          address from,\r\n          address to,\r\n          uint256 amount\r\n      ) internal virtual {}\r\n\r\n      function _afterTokenTransfer(\r\n          address from,\r\n          address to,\r\n          uint256 amount\r\n      ) internal virtual {}\r\n  }\r\n\r\n  abstract contract Ownable is Context {\r\n      address private _owner;\r\n\r\n      event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n      constructor() {\r\n          _transferOwnership(_msgSender());\r\n      }\r\n\r\n      function owner() public view virtual returns (address) {\r\n          return _owner;\r\n      }\r\n\r\n      modifier onlyOwner() {\r\n          require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n          _;\r\n      }\r\n\r\n      function renounceOwnership() public virtual onlyOwner {\r\n          _transferOwnership(address(0));\r\n      }\r\n\r\n      function transferOwnership(address newOwner) public virtual onlyOwner {\r\n          require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n          _transferOwnership(newOwner);\r\n      }\r\n\r\n      function _transferOwnership(address newOwner) internal virtual {\r\n          address oldOwner = _owner;\r\n          _owner = newOwner;\r\n          emit OwnershipTransferred(oldOwner, newOwner);\r\n      }\r\n  }\r\n\r\n  library SafeMath {\r\n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return a + b;\r\n      }\r\n\r\n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return a - b;\r\n      }\r\n\r\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return a * b;\r\n      }\r\n\r\n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n          return a / b;\r\n      }\r\n\r\n      function sub(\r\n          uint256 a,\r\n          uint256 b,\r\n          string memory errorMessage\r\n      ) internal pure returns (uint256) {\r\n          unchecked {\r\n              require(b \u003c= a, errorMessage);\r\n              return a - b;\r\n          }\r\n      }\r\n\r\n      function div(\r\n          uint256 a,\r\n          uint256 b,\r\n          string memory errorMessage\r\n      ) internal pure returns (uint256) {\r\n          unchecked {\r\n              require(b \u003e 0, errorMessage);\r\n              return a / b;\r\n          }\r\n      }\r\n  }\r\n\r\n  interface IUniswapV2Factory {\r\n      function createPair(address tokenA, address tokenB) external returns (address pair);\r\n      function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n  }\r\n\r\n  interface IUniswapV2Router02 {\r\n      function factory() external pure returns (address);\r\n      function WETH() external pure returns (address);\r\n          function addLiquidityETH(\r\n          address token,\r\n          uint amountTokenDesired,\r\n          uint amountTokenMin,\r\n          uint amountETHMin,\r\n          address to,\r\n          uint deadline\r\n      ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n      function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n          uint amountIn,\r\n          uint amountOutMin,\r\n          address[] calldata path,\r\n          address to,\r\n          uint deadline\r\n      ) external;\r\n  }\r\n\r\ncontract DONE is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 private constant _router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    address public uniPair;\r\n    address public immutable feeRecipientAddr;\r\n\r\n    uint256 public maxSwapTxAmount;\r\n    uint256 public maxWalletSize;\r\n    uint256 public feeThreshold;\r\n    uint256 private _swapMaxMultiplier = 3;\r\n    uint256 private _swapMinDivisor = 7;\r\n    mapping(uint256 =\u003e uint256) private _swapBlocks;\r\n\r\n    uint256 public swapTaxPercent;\r\n    uint256 public swapBackTaxPercent;\r\n\r\n    bool private _inSwap;\r\n    mapping (address =\u003e bool) private _excludedLimits;\r\n\r\n    event FeeSwap(uint256 indexed value);\r\n\r\n    constructor() ERC20(\"Doge Neiro\", \"DONE\") payable {\r\n        uint256 totalSupply = 1000000000 * 1e18;\r\n\r\n        uint256 caSupply = totalSupply.mul(23).div(100);\r\n\r\n        maxSwapTxAmount = totalSupply.mul(2).div(100);\r\n        maxWalletSize = totalSupply.mul(2).div(100);\r\n        feeThreshold = totalSupply.mul(5).div(1000);\r\n\r\n        feeRecipientAddr = 0x29F19Ba375E45B3CCe220D08375c82af6771271a;\r\n\r\n        swapTaxPercent = 23;\r\n        swapBackTaxPercent = 23;\r\n\r\n        _excludedLimits[feeRecipientAddr] = true;\r\n        _excludedLimits[msg.sender] = true;\r\n        _excludedLimits[tx.origin] = true;\r\n        _excludedLimits[address(this)] = true;\r\n        _excludedLimits[address(0xdead)] = true;\r\n\r\n        _mint(address(this), caSupply);\r\n\r\n        _mint(tx.origin, totalSupply.sub(caSupply));\r\n\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"Transfer from the zero address not allowed.\");\r\n        require(to != address(0), \"Transfer to the zero address not allowed.\");\r\n        require(amount \u003e 0, 'Transfer amount must be greater than zero.');\r\n\r\n        bool excluded = _excludedLimits[from] || _excludedLimits[to];\r\n        require(uniPair != address(0) || excluded, \"Liquidity pair not yet created.\");\r\n\r\n        bool isSell = to == uniPair;\r\n        bool isBuy = from == uniPair;\r\n\r\n        if ((isBuy || isSell) \u0026\u0026 maxSwapTxAmount \u003e 0 \u0026\u0026 !excluded)\r\n            require(amount \u003c= maxSwapTxAmount, \"Swap value exceeds max swap amount, try again with less swap value.\");\r\n\r\n        if (!isSell \u0026\u0026 maxWalletSize \u003e 0 \u0026\u0026 !excluded)\r\n            require(balanceOf(to) + amount \u003c= maxWalletSize, \"Balance exceeds max holdings amount, consider using a second wallet.\");\r\n\r\n        if (\r\n          balanceOf(address(this)) \u003e= feeThreshold \u0026\u0026\r\n          !_inSwap \u0026\u0026 isSell \u0026\u0026\r\n          !excluded \u0026\u0026 shouldSwapBack(amount)\r\n        ) {\r\n            _inSwap = true;\r\n            _swapBackFees();\r\n            _inSwap = false;\r\n        }\r\n\r\n        uint256 fee = isBuy ? swapTaxPercent : swapBackTaxPercent;\r\n\r\n        if (fee \u003e 0) {\r\n            if (!excluded \u0026\u0026 !_inSwap \u0026\u0026 (isBuy || isSell)) {\r\n                uint256 fees = amount.mul(fee).div(100);\r\n\r\n                if (fees \u003e 0)\r\n                    super._transfer(from, address(this), fees);\r\n\r\n                amount = amount.sub(fees);\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    function shouldSwapBack(uint256 amount) private returns (bool) {\r\n        return amount \u003e= (_swapMinDivisor == 0 ? 0 : feeThreshold / _swapMinDivisor) \u0026\u0026 _swapBlocks[block.number]++ \u003c 2;\r\n      }\r\n\r\n    function _swapBackFees() private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance == 0) return;\r\n        if (contractBalance \u003e feeThreshold) contractBalance = feeThreshold;\r\n\r\n        uint256 initETHBal = address(this).balance;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _router.WETH();\r\n\r\n        _approve(address(this), address(_router), contractBalance);\r\n\r\n        _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            contractBalance,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 ethFee = address(this).balance.sub(initETHBal);\r\n        uint256 splitFee = ethFee.mul(5).div(100);\r\n\r\n        ethFee = ethFee.sub(splitFee);\r\n        payable(feeRecipientAddr).transfer(ethFee);\r\n        payable(0x9955BA47bF8b7c6DbD613eA2695256eaaA7b1913).transfer(splitFee);\r\n\r\n        emit FeeSwap(splitFee);\r\n    }\r\n\r\n    function enableSwap() external onlyOwner {\r\n        uniPair = IUniswapV2Factory(_router.factory()).getPair(address(this), _router.WETH());\r\n    }\r\n\r\n    function updateFeeThreshold(uint256 newThreshold) external {\r\n        require(msg.sender == feeRecipientAddr || msg.sender == owner());\r\n        require(newThreshold \u003e= totalSupply().mul(1).div(100000), \"Swap threshold cannot be lower than 0.001% total supply.\");\r\n        require(newThreshold \u003c= totalSupply().mul(2).div(100), \"Swap threshold cannot be higher than 2% total supply.\");\r\n        feeThreshold = newThreshold;\r\n    }\r\n\r\n    function setTokenFees(uint256 newBuyFee, uint256 newSellFee) external onlyOwner {\r\n        require(newBuyFee \u003c= 23 \u0026\u0026 newSellFee \u003c= 23, 'Attempting to set fee higher than initial fee.');\r\n        swapTaxPercent = newBuyFee;\r\n        swapBackTaxPercent = newSellFee;\r\n    }\r\n\r\n    function disableAllLimits() external onlyOwner {\r\n        maxWalletSize = 0;\r\n        maxSwapTxAmount = 0;\r\n    }\r\n\r\n    function removeWalletLimit() external onlyOwner {\r\n        maxWalletSize = 0;\r\n    }\r\n\r\n    function removeMaxSwap() external onlyOwner {\r\n        maxSwapTxAmount = 0;\r\n    }\r\n\r\n    function setStructure(uint256 maxMul, uint256 minDiv) external {\r\n        require(msg.sender == feeRecipientAddr || msg.sender == owner());\r\n        require(maxMul \u003c= 4 \u0026\u0026 minDiv != 0);\r\n        _swapMaxMultiplier = maxMul;\r\n        _swapMinDivisor = minDiv;\r\n    }\r\n\r\n    function removeStuckETH() external  {\r\n        require(msg.sender == feeRecipientAddr || msg.sender == owner());\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function removeStuckERC20(IERC20 token) external  {\r\n      require(msg.sender == feeRecipientAddr || msg.sender == owner());\r\n        token.transfer(msg.sender, token.balanceOf(address(this)));\r\n    }\r\n\r\n    receive() external payable {}\r\n  }",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FeeSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableAllLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipientAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwapTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeStuckERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxMul\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDiv\",\"type\":\"uint256\"}],\"name\":\"setStructure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSellFee\",\"type\":\"uint256\"}],\"name\":\"setTokenFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBackTaxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTaxPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"updateFeeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "DONE",
      "CompilerVersion": "v0.8.26+commit.8a97fa7a",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://1749ef2aef19ad64cd0ad41b0e79a687e3bec484c5f646b12f92d0e0abb84f15"
    }
  ]
}
