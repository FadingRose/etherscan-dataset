{
  "TxHash": "0xc9923d961f228ab78deb565287664615b13f0f53431873bd8ac582710b1b3f45",
  "ContractAddress": "0x46DD85e91Eab604ca150c26853a947617e7Ab322",
  "Name": "DssSpellAction",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\npragma solidity \u003c0.9.0 =0.8.16 \u003e=0.5.12 \u003e=0.6.2 \u003e=0.8.0 ^0.8.16;\r\npragma experimental ABIEncoderV2;\r\n\r\n// lib/dss-exec-lib/src/CollateralOpts.sol\r\n\r\n//\r\n// CollateralOpts.sol -- Data structure for onboarding collateral\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\nstruct CollateralOpts {\r\n    bytes32 ilk;\r\n    address gem;\r\n    address join;\r\n    address clip;\r\n    address calc;\r\n    address pip;\r\n    bool    isLiquidatable;\r\n    bool    isOSM;\r\n    bool    whitelistOSM;\r\n    uint256 ilkDebtCeiling;\r\n    uint256 minVaultAmount;\r\n    uint256 maxLiquidationAmount;\r\n    uint256 liquidationPenalty;\r\n    uint256 ilkStabilityFee;\r\n    uint256 startingPriceFactor;\r\n    uint256 breakerTolerance;\r\n    uint256 auctionDuration;\r\n    uint256 permittedDrop;\r\n    uint256 liquidationRatio;\r\n    uint256 kprFlatReward;\r\n    uint256 kprPctReward;\r\n}\r\n\r\n// lib/dss-exec-lib/src/DssExec.sol\r\n\r\n//\r\n// DssExec.sol -- MakerDAO Executive Spell Template\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface PauseAbstract {\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\ninterface Changelog {\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\ninterface SpellAction {\r\n    function officeHours() external view returns (bool);\r\n    function description() external view returns (string memory);\r\n    function nextCastTime(uint256) external view returns (uint256);\r\n}\r\n\r\ncontract DssExec {\r\n\r\n    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\r\n    uint256                 public eta;\r\n    bytes                   public sig;\r\n    bool                    public done;\r\n    bytes32       immutable public tag;\r\n    address       immutable public action;\r\n    uint256       immutable public expiration;\r\n    PauseAbstract immutable public pause;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://\u003cexecutive-vote-canonical-post\u003e -q -O - 2\u003e/dev/null)\"\r\n    function description() external view returns (string memory) {\r\n        return SpellAction(action).description();\r\n    }\r\n\r\n    function officeHours() external view returns (bool) {\r\n        return SpellAction(action).officeHours();\r\n    }\r\n\r\n    function nextCastTime() external view returns (uint256 castTime) {\r\n        return SpellAction(action).nextCastTime(eta);\r\n    }\r\n\r\n    // @param _description  A string description of the spell\r\n    // @param _expiration   The timestamp this spell will expire. (Ex. block.timestamp + 30 days)\r\n    // @param _spellAction  The address of the spell action\r\n    constructor(uint256 _expiration, address _spellAction) {\r\n        pause       = PauseAbstract(log.getAddress(\"MCD_PAUSE\"));\r\n        expiration  = _expiration;\r\n        action      = _spellAction;\r\n\r\n        sig = abi.encodeWithSignature(\"execute()\");\r\n        bytes32 _tag;                    // Required for assembly access\r\n        address _action = _spellAction;  // Required for assembly access\r\n        assembly { _tag := extcodehash(_action) }\r\n        tag = _tag;\r\n    }\r\n\r\n    function schedule() public {\r\n        require(block.timestamp \u003c= expiration, \"This contract has expired\");\r\n        require(eta == 0, \"This spell has already been scheduled\");\r\n        eta = block.timestamp + PauseAbstract(pause).delay();\r\n        pause.plot(action, tag, sig, eta);\r\n    }\r\n\r\n    function cast() public {\r\n        require(!done, \"spell-already-cast\");\r\n        done = true;\r\n        pause.exec(action, tag, sig, eta);\r\n    }\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/ERC/GemAbstract.sol\r\n\r\n// A base ERC-20 abstract class\r\n// https://eips.ethereum.org/EIPS/eip-20\r\ninterface GemAbstract {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSAuthorityAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-auth\r\ninterface DSAuthorityAbstract {\r\n    function canCall(address, address, bytes4) external view returns (bool);\r\n}\r\n\r\ninterface DSAuthAbstract {\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSChiefAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-chief\r\ninterface DSChiefAbstract {\r\n    function live() external view returns (uint256);\r\n    function launch() external;\r\n    function slates(bytes32) external view returns (address[] memory);\r\n    function votes(address) external view returns (bytes32);\r\n    function approvals(address) external view returns (uint256);\r\n    function deposits(address) external view returns (address);\r\n    function GOV() external view returns (address);\r\n    function IOU() external view returns (address);\r\n    function hat() external view returns (address);\r\n    function MAX_YAYS() external view returns (uint256);\r\n    function lock(uint256) external;\r\n    function free(uint256) external;\r\n    function etch(address[] calldata) external returns (bytes32);\r\n    function vote(address[] calldata) external returns (bytes32);\r\n    function vote(bytes32) external;\r\n    function lift(address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function isUserRoot(address) external view returns (bool);\r\n    function setRootUser(address, bool) external;\r\n    function _root_users(address) external view returns (bool);\r\n    function _user_roles(address) external view returns (bytes32);\r\n    function _capability_roles(address, bytes4) external view returns (bytes32);\r\n    function _public_capabilities(address, bytes4) external view returns (bool);\r\n    function getUserRoles(address) external view returns (bytes32);\r\n    function getCapabilityRoles(address, bytes4) external view returns (bytes32);\r\n    function isCapabilityPublic(address, bytes4) external view returns (bool);\r\n    function hasUserRole(address, uint8) external view returns (bool);\r\n    function canCall(address, address, bytes4) external view returns (bool);\r\n    function setUserRole(address, uint8, bool) external;\r\n    function setPublicCapability(address, bytes4, bool) external;\r\n    function setRoleCapability(uint8, address, bytes4, bool) external;\r\n}\r\n\r\ninterface DSChiefFabAbstract {\r\n    function newChief(address, uint256) external returns (address);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSPauseAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setDelay(uint256) external;\r\n    function plans(bytes32) external view returns (bool);\r\n    function proxy() external view returns (address);\r\n    function delay() external view returns (uint256);\r\n    function plot(address, bytes32, bytes calldata, uint256) external;\r\n    function drop(address, bytes32, bytes calldata, uint256) external;\r\n    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSPauseProxyAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-pause\r\ninterface DSPauseProxyAbstract {\r\n    function owner() external view returns (address);\r\n    function exec(address, bytes calldata) external returns (bytes memory);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSRolesAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-roles\r\ninterface DSRolesAbstract {\r\n    function _root_users(address) external view returns (bool);\r\n    function _user_roles(address) external view returns (bytes32);\r\n    function _capability_roles(address, bytes4) external view returns (bytes32);\r\n    function _public_capabilities(address, bytes4) external view returns (bool);\r\n    function getUserRoles(address) external view returns (bytes32);\r\n    function getCapabilityRoles(address, bytes4) external view returns (bytes32);\r\n    function isUserRoot(address) external view returns (bool);\r\n    function isCapabilityPublic(address, bytes4) external view returns (bool);\r\n    function hasUserRole(address, uint8) external view returns (bool);\r\n    function canCall(address, address, bytes4) external view returns (bool);\r\n    function setRootUser(address, bool) external;\r\n    function setUserRole(address, uint8, bool) external;\r\n    function setPublicCapability(address, bytes4, bool) external;\r\n    function setRoleCapability(uint8, address, bytes4, bool) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSRuneAbstract.sol\r\n\r\n// Copyright (C) 2020 Maker Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\n// https://github.com/makerdao/dss-spellbook\r\ninterface DSRuneAbstract {\r\n    // @return [address] A contract address conforming to DSPauseAbstract\r\n    function pause()    external view returns (address);\r\n    // @return [address] The address of the contract to be executed\r\n    // TODO: is `action()` a required field? Not all spells rely on a seconary contract.\r\n    function action()   external view returns (address);\r\n    // @return [bytes32] extcodehash of rune address\r\n    function tag()      external view returns (bytes32);\r\n    // @return [bytes] The `abi.encodeWithSignature()` result of the function to be called.\r\n    function sig()      external view returns (bytes memory);\r\n    // @return [uint256] Earliest time rune can execute\r\n    function eta()      external view returns (uint256);\r\n    // The schedule() function plots the rune in the DSPause\r\n    function schedule() external;\r\n    // @return [bool] true if the rune has been cast()\r\n    function done()     external view returns (bool);\r\n    // The cast() function executes the rune\r\n    function cast()     external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSSpellAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-spell\r\ninterface DSSpellAbstract {\r\n    function whom() external view returns (address);\r\n    function mana() external view returns (uint256);\r\n    function data() external view returns (bytes memory);\r\n    function done() external view returns (bool);\r\n    function cast() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSThingAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-thing\r\ninterface DSThingAbstract {\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSTokenAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-token/blob/master/src/token.sol\r\ninterface DSTokenAbstract {\r\n    function name() external view returns (bytes32);\r\n    function symbol() external view returns (bytes32);\r\n    function decimals() external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function approve(address, uint256) external returns (bool);\r\n    function approve(address) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function mint(uint256) external;\r\n    function mint(address,uint) external;\r\n    function burn(uint256) external;\r\n    function burn(address,uint) external;\r\n    function setName(bytes32) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dapp/DSValueAbstract.sol\r\n\r\n// https://github.com/dapphub/ds-value/blob/master/src/value.sol\r\ninterface DSValueAbstract {\r\n    function has() external view returns (bool);\r\n    function val() external view returns (bytes32);\r\n    function peek() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function poke(bytes32) external;\r\n    function void() external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/AuthGemJoinAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-deploy/blob/master/src/join.sol\r\ninterface AuthGemJoinAbstract {\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/CatAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cat.sol\r\ninterface CatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function box() external view returns (uint256);\r\n    function litter() external view returns (uint256);\r\n    function ilks(bytes32) external view returns (address, uint256, uint256);\r\n    function live() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function bite(bytes32, address) external returns (uint256);\r\n    function claw(uint256) external;\r\n    function cage() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/ChainlogAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function keys() external view returns (bytes32[] memory);\r\n    function version() external view returns (string memory);\r\n    function ipfs() external view returns (string memory);\r\n    function setVersion(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setAddress(bytes32,address) external;\r\n    function removeAddress(bytes32) external;\r\n    function count() external view returns (uint256);\r\n    function get(uint256) external view returns (bytes32,address);\r\n    function list() external view returns (bytes32[] memory);\r\n    function getAddress(bytes32) external view returns (address);\r\n}\r\n\r\n// Helper function for returning address or abstract of Chainlog\r\n//  Valid on Mainnet, Kovan, Rinkeby, Ropsten, and Goerli\r\ncontract ChainlogHelper {\r\n    address          public constant ADDRESS  = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n    ChainlogAbstract public constant ABSTRACT = ChainlogAbstract(ADDRESS);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/ClipAbstract.sol\r\n\r\n/// ClipAbstract.sol -- Clip Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface ClipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilk() external view returns (bytes32);\r\n    function vat() external view returns (address);\r\n    function dog() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function spotter() external view returns (address);\r\n    function calc() external view returns (address);\r\n    function buf() external view returns (uint256);\r\n    function tail() external view returns (uint256);\r\n    function cusp() external view returns (uint256);\r\n    function chip() external view returns (uint64);\r\n    function tip() external view returns (uint192);\r\n    function chost() external view returns (uint256);\r\n    function kicks() external view returns (uint256);\r\n    function active(uint256) external view returns (uint256);\r\n    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);\r\n    function stopped() external view returns (uint256);\r\n    function file(bytes32,uint256) external;\r\n    function file(bytes32,address) external;\r\n    function kick(uint256,uint256,address,address) external returns (uint256);\r\n    function redo(uint256,address) external;\r\n    function take(uint256,uint256,uint256,address,bytes calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (uint256[] memory);\r\n    function getStatus(uint256) external view returns (bool,uint256,uint256,uint256);\r\n    function upchost() external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/ClipperMomAbstract.sol\r\n\r\n// https://github.com/makerdao/Clipper-mom/blob/master/src/ClipperMom.sol\r\ninterface ClipperMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function locked(address) external view returns (uint256);\r\n    function tolerance(address) external view returns (uint256);\r\n    function spotter() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function setPriceTolerance(address, uint256) external;\r\n    function setBreaker(address, uint256, uint256) external;\r\n    function tripBreaker(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/CureAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/cure.sol\r\ninterface CureAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function srcs(uint256) external view returns (address);\r\n    function wait() external view returns (uint256);\r\n    function when() external view returns (uint256);\r\n    function pos(address) external view returns (uint256);\r\n    function amt(address) external view returns (uint256);\r\n    function loadded(address) external view returns (uint256);\r\n    function lCount() external view returns (uint256);\r\n    function say() external view returns (uint256);\r\n    function tCount() external view returns (uint256);\r\n    function list() external view returns (address[] memory);\r\n    function tell() external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function file(bytes32, uint256) external;\r\n    function lift(address) external;\r\n    function drop(address) external;\r\n    function cage() external;\r\n    function load(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/DaiAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/dai.sol\r\ninterface DaiAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function version() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function allowance(address, address) external view returns (uint256);\r\n    function nonces(address) external view returns (uint256);\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external view returns (bytes32);\r\n    function transfer(address, uint256) external returns (bool);\r\n    function transferFrom(address, address, uint256) external returns (bool);\r\n    function mint(address, uint256) external;\r\n    function burn(address, uint256) external;\r\n    function approve(address, uint256) external returns (bool);\r\n    function push(address, uint256) external;\r\n    function pull(address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function permit(address, address, uint256, uint256, bool, uint8, bytes32, bytes32) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/DaiJoinAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface DaiJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/DogAbstract.sol\r\n\r\n/// DogAbstract.sol -- Dog Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface DogAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilks(bytes32) external view returns (address,uint256,uint256,uint256);\r\n    function vow() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function Hole() external view returns (uint256);\r\n    function Dirt() external view returns (uint256);\r\n    function file(bytes32,address) external;\r\n    function file(bytes32,uint256) external;\r\n    function file(bytes32,bytes32,uint256) external;\r\n    function file(bytes32,bytes32,address) external;\r\n    function chop(bytes32) external view returns (uint256);\r\n    function bark(bytes32,address,address) external returns (uint256);\r\n    function digs(bytes32,uint256) external;\r\n    function cage() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/DssAutoLineAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-auto-line/blob/master/src/DssAutoLine.sol\r\ninterface DssAutoLineAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/DssCdpManager.sol\r\n\r\n// https://github.com/makerdao/dss-cdp-manager/\r\ninterface DssCdpManagerAbstract {\r\n    function vat() external view returns (address);\r\n    function cdpi() external view returns (uint256);\r\n    function urns(uint256) external view returns (address);\r\n    function list(uint256) external view returns (uint256,uint256);\r\n    function owns(uint256) external view returns (address);\r\n    function ilks(uint256) external view returns (bytes32);\r\n    function first(address) external view returns (uint256);\r\n    function last(address) external view returns (uint256);\r\n    function count(address) external view returns (uint256);\r\n    function cdpCan(address, uint256, address) external returns (uint256);\r\n    function urnCan(address, address) external returns (uint256);\r\n    function cdpAllow(uint256, address, uint256) external;\r\n    function urnAllow(address, uint256) external;\r\n    function open(bytes32, address) external returns (uint256);\r\n    function give(uint256, address) external;\r\n    function frob(uint256, int256, int256) external;\r\n    function flux(uint256, address, uint256) external;\r\n    function flux(bytes32, uint256, address, uint256) external;\r\n    function move(uint256, address, uint256) external;\r\n    function quit(uint256, address) external;\r\n    function enter(address, uint256) external;\r\n    function shift(uint256, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/ESMAbstract.sol\r\n\r\n// https://github.com/makerdao/esm/blob/master/src/ESM.sol\r\ninterface ESMAbstract {\r\n    function gem() external view returns (address);\r\n    function proxy() external view returns (address);\r\n    function wards(address) external view returns (uint256);\r\n    function sum(address) external view returns (address);\r\n    function Sum() external view returns (uint256);\r\n    function min() external view returns (uint256);\r\n    function end() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function revokesGovernanceAccess() external view returns (bool);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function cage() external;\r\n    function fire() external;\r\n    function denyProxy(address) external;\r\n    function join(uint256) external;\r\n    function burn() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/ETHJoinAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface ETHJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address) external payable;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/EndAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/end.sol\r\ninterface EndAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function dog() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function pot() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function cure() external view returns (address);\r\n    function live() external view returns (uint256);\r\n    function when() external view returns (uint256);\r\n    function wait() external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function tag(bytes32) external view returns (uint256);\r\n    function gap(bytes32) external view returns (uint256);\r\n    function Art(bytes32) external view returns (uint256);\r\n    function fix(bytes32) external view returns (uint256);\r\n    function bag(address) external view returns (uint256);\r\n    function out(bytes32, address) external view returns (uint256);\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function cage() external;\r\n    function cage(bytes32) external;\r\n    function skip(bytes32, uint256) external;\r\n    function snip(bytes32, uint256) external;\r\n    function skim(bytes32, address) external;\r\n    function free(bytes32) external;\r\n    function thaw() external;\r\n    function flow(bytes32) external;\r\n    function pack(uint256) external;\r\n    function cash(bytes32, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/ExponentialDecreaseAbstract.sol\r\n\r\n/// ExponentialDecreaseAbstract.sol -- Exponential Decrease Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface ExponentialDecreaseAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function cut() external view returns (uint256);\r\n    function file(bytes32,uint256) external;\r\n    function price(uint256,uint256) external view returns (uint256);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/FaucetAbstract.sol\r\n\r\n// https://github.com/makerdao/token-faucet/blob/master/src/RestrictedTokenFaucet.sol\r\ninterface FaucetAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function list(address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function amt(address) external view returns (uint256);\r\n    function done(address, address) external view returns (bool);\r\n    function gulp(address) external;\r\n    function gulp(address, address[] calldata) external;\r\n    function shut(address) external;\r\n    function undo(address, address) external;\r\n    function setAmt(address, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/FlapAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flap.sol\r\ninterface FlapAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48);\r\n    function vat() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function lid() external view returns (uint256);\r\n    function fill() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function cage(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/FlashAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-flash/blob/master/src/flash.sol\r\ninterface FlashAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function daiJoin() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function max() external view returns (uint256);\r\n    function toll() external view returns (uint256);\r\n    function CALLBACK_SUCCESS() external view returns (bytes32);\r\n    function CALLBACK_SUCCESS_VAT_DAI() external view returns (bytes32);\r\n    function file(bytes32, uint256) external;\r\n    function maxFlashLoan(address) external view returns (uint256);\r\n    function flashFee(address, uint256) external view returns (uint256);\r\n    function flashLoan(address, address, uint256, bytes calldata) external returns (bool);\r\n    function vatDaiFlashLoan(address, uint256, bytes calldata) external returns (bool);\r\n    function convert() external;\r\n    function accrue() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/FlipAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flip.sol\r\ninterface FlipAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\r\n    function vat() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function beg() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function tend(uint256, uint256, uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/FlipperMomAbstract.sol\r\n\r\n// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\r\ninterface FlipperMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function cat() external returns (address);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/FlopAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/flop.sol\r\ninterface FlopAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48);\r\n    function vat() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function beg() external view returns (uint256);\r\n    function pad() external view returns (uint256);\r\n    function ttl() external view returns (uint48);\r\n    function tau() external view returns (uint48);\r\n    function kicks() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function vow() external view returns (address);\r\n    function file(bytes32, uint256) external;\r\n    function kick(address, uint256, uint256) external returns (uint256);\r\n    function tick(uint256) external;\r\n    function dent(uint256, uint256, uint256) external;\r\n    function deal(uint256) external;\r\n    function cage() external;\r\n    function yank(uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/GemJoinAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/join.sol\r\ninterface GemJoinAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/GemJoinImplementationAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-deploy/blob/master/src/join.sol\r\ninterface GemJoinImplementationAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n    function setImplementation(address, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/GemJoinManagedAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-gem-joins/blob/master/src/join-managed.sol\r\ninterface GemJoinManagedAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function gem() external view returns (address);\r\n    function dec() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function cage() external;\r\n    function join(address, uint256) external;\r\n    function exit(address, address, uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/GetCdpsAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-cdp-manager/blob/master/src/GetCdps.sol\r\ninterface GetCdpsAbstract {\r\n    function getCdpsAsc(address, address) external view returns (uint256[] memory, address[] memory, bytes32[] memory);\r\n    function getCdpsDesc(address, address) external view returns (uint256[] memory, address[] memory, bytes32[] memory);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\r\n\r\n// https://github.com/makerdao/ilk-registry\r\ninterface IlkRegistryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function dog() external view returns (address);\r\n    function cat() external view returns (address);\r\n    function spot() external view returns (address);\r\n    function ilkData(bytes32) external view returns (\r\n        uint96, address, address, uint8, uint96, address, address, string memory, string memory\r\n    );\r\n    function ilks() external view returns (bytes32[] memory);\r\n    function ilks(uint) external view returns (bytes32);\r\n    function add(address) external;\r\n    function remove(bytes32) external;\r\n    function update(bytes32) external;\r\n    function removeAuth(bytes32) external;\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, string calldata) external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (bytes32[] memory);\r\n    function list(uint256, uint256) external view returns (bytes32[] memory);\r\n    function get(uint256) external view returns (bytes32);\r\n    function info(bytes32) external view returns (\r\n        string memory, string memory, uint256, uint256, address, address, address, address\r\n    );\r\n    function pos(bytes32) external view returns (uint256);\r\n    function class(bytes32) external view returns (uint256);\r\n    function gem(bytes32) external view returns (address);\r\n    function pip(bytes32) external view returns (address);\r\n    function join(bytes32) external view returns (address);\r\n    function xlip(bytes32) external view returns (address);\r\n    function dec(bytes32) external view returns (uint256);\r\n    function symbol(bytes32) external view returns (string memory);\r\n    function name(bytes32) external view returns (string memory);\r\n    function put(bytes32, address, address, uint256, uint256, address, address, string calldata, string calldata) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/JugAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/jug.sol\r\ninterface JugAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function base() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/LPOsmAbstract.sol\r\n\r\n// https://github.com/makerdao/univ2-lp-oracle\r\ninterface LPOsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function dec0() external view returns (uint8);\r\n    function dec1() external view returns (uint8);\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n    function wat() external view returns (bytes32);\r\n    function hop() external view returns (uint32);\r\n    function src() external view returns (address);\r\n    function zzz() external view returns (uint64);\r\n    function change(address) external;\r\n    function step(uint256) external;\r\n    function stop() external;\r\n    function start() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function link(uint256, address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/LerpAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-lerp/blob/master/src/Lerp.sol\r\ninterface LerpAbstract {\r\n    function target() external view returns (address);\r\n    function what() external view returns (bytes32);\r\n    function start() external view returns (uint256);\r\n    function end() external view returns (uint256);\r\n    function duration() external view returns (uint256);\r\n    function done() external view returns (bool);\r\n    function startTime() external view returns (uint256);\r\n    function tick() external returns (uint256);\r\n    function ilk() external view returns (bytes32);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/LerpFactoryAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-lerp/blob/master/src/LerpFactory.sol\r\ninterface LerpFactoryAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function lerps(bytes32) external view returns (address);\r\n    function active(uint256) external view returns (address);\r\n    function newLerp(bytes32, address, bytes32, uint256, uint256, uint256, uint256) external returns (address);\r\n    function newIlkLerp(bytes32, address, bytes32, bytes32, uint256, uint256, uint256, uint256) external returns (address);\r\n    function tall() external;\r\n    function count() external view returns (uint256);\r\n    function list() external view returns (address[] memory);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/LinearDecreaseAbstract.sol\r\n\r\n/// LinearDecreaseAbstract.sol -- Linear Decrease Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface LinearDecreaseAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function tau() external view returns (uint256);\r\n    function file(bytes32,uint256) external;\r\n    function price(uint256,uint256) external view returns (uint256);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/MedianAbstract.sol\r\n\r\n// https://github.com/makerdao/median\r\ninterface MedianAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function age() external view returns (uint32);\r\n    function wat() external view returns (bytes32);\r\n    function bar() external view returns (uint256);\r\n    function orcl(address) external view returns (uint256);\r\n    function bud(address) external view returns (uint256);\r\n    function slot(uint8) external view returns (address);\r\n    function read() external view returns (uint256);\r\n    function peek() external view returns (uint256, bool);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function poke(uint256[] calldata, uint256[] calldata, uint8[] calldata, bytes32[] calldata, bytes32[] calldata) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/MkrAuthorityAbstract.sol\r\n\r\n// https://github.com/makerdao/mkr-authority/blob/master/src/MkrAuthority.sol\r\ninterface MkrAuthorityAbstract {\r\n    function root() external returns (address);\r\n    function setRoot(address) external;\r\n    function wards(address) external returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function canCall(address, address, bytes4) external returns (bool);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/OsmAbstract.sol\r\n\r\n// https://github.com/makerdao/osm\r\ninterface OsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function stopped() external view returns (uint256);\r\n    function src() external view returns (address);\r\n    function hop() external view returns (uint16);\r\n    function zzz() external view returns (uint64);\r\n    function bud(address) external view returns (uint256);\r\n    function stop() external;\r\n    function start() external;\r\n    function change(address) external;\r\n    function step(uint16) external;\r\n    function void() external;\r\n    function pass() external view returns (bool);\r\n    function poke() external;\r\n    function peek() external view returns (bytes32, bool);\r\n    function peep() external view returns (bytes32, bool);\r\n    function read() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/OsmMomAbstract.sol\r\n\r\n// https://github.com/makerdao/osm-mom\r\ninterface OsmMomAbstract {\r\n    function owner() external view returns (address);\r\n    function authority() external view returns (address);\r\n    function osms(bytes32) external view returns (address);\r\n    function setOsm(bytes32, address) external;\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n    function stop(bytes32) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/PotAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/pot.sol\r\ninterface PotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function pie(address) external view returns (uint256);\r\n    function Pie() external view returns (uint256);\r\n    function dsr() external view returns (uint256);\r\n    function chi() external view returns (uint256);\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function rho() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function cage() external;\r\n    function drip() external returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/PsmAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-psm/blob/master/src/psm.sol\r\ninterface PsmAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function gemJoin() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function daiJoin() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function vow() external view returns (address);\r\n    function tin() external view returns (uint256);\r\n    function tout() external view returns (uint256);\r\n    function file(bytes32 what, uint256 data) external;\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function sellGem(address usr, uint256 gemAmt) external;\r\n    function buyGem(address usr, uint256 gemAmt) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/SpotAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/spot.sol\r\ninterface SpotAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function ilks(bytes32) external view returns (address, uint256);\r\n    function vat() external view returns (address);\r\n    function par() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function poke(bytes32) external;\r\n    function cage() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/StairstepExponentialDecreaseAbstract.sol\r\n\r\n/// StairstepExponentialDecreaseAbstract.sol -- StairstepExponentialDecrease Interface\r\n\r\n// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface StairstepExponentialDecreaseAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function step() external view returns (uint256);\r\n    function cut() external view returns (uint256);\r\n    function file(bytes32,uint256) external;\r\n    function price(uint256,uint256) external view returns (uint256);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/VatAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vat.sol\r\ninterface VatAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address, address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\r\n    function urns(bytes32, address) external view returns (uint256, uint256);\r\n    function gem(bytes32, address) external view returns (uint256);\r\n    function dai(address) external view returns (uint256);\r\n    function sin(address) external view returns (uint256);\r\n    function debt() external view returns (uint256);\r\n    function vice() external view returns (uint256);\r\n    function Line() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function init(bytes32) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function cage() external;\r\n    function slip(bytes32, address, int256) external;\r\n    function flux(bytes32, address, address, uint256) external;\r\n    function move(address, address, uint256) external;\r\n    function frob(bytes32, address, address, address, int256, int256) external;\r\n    function fork(bytes32, address, address, int256, int256) external;\r\n    function grab(bytes32, address, address, address, int256, int256) external;\r\n    function heal(uint256) external;\r\n    function suck(address, address, uint256) external;\r\n    function fold(bytes32, address, int256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/VestAbstract.sol\r\n\r\n// https://github.com/makerdao/dss-vest/blob/master/src/DssVest.sol\r\ninterface VestAbstract {\r\n    function TWENTY_YEARS() external view returns (uint256);\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function awards(uint256) external view returns (address, uint48, uint48, uint48, address, uint8, uint128, uint128);\r\n    function ids() external view returns (uint256);\r\n    function cap() external view returns (uint256);\r\n    function usr(uint256) external view returns (address);\r\n    function bgn(uint256) external view returns (uint256);\r\n    function clf(uint256) external view returns (uint256);\r\n    function fin(uint256) external view returns (uint256);\r\n    function mgr(uint256) external view returns (address);\r\n    function res(uint256) external view returns (uint256);\r\n    function tot(uint256) external view returns (uint256);\r\n    function rxd(uint256) external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function create(address, uint256, uint256, uint256, uint256, address) external returns (uint256);\r\n    function vest(uint256) external;\r\n    function vest(uint256, uint256) external;\r\n    function accrued(uint256) external view returns (uint256);\r\n    function unpaid(uint256) external view returns (uint256);\r\n    function restrict(uint256) external;\r\n    function unrestrict(uint256) external;\r\n    function yank(uint256) external;\r\n    function yank(uint256, uint256) external;\r\n    function move(uint256, address) external;\r\n    function valid(uint256) external view returns (bool);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/VowAbstract.sol\r\n\r\n// https://github.com/makerdao/dss/blob/master/src/vow.sol\r\ninterface VowAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address usr) external;\r\n    function deny(address usr) external;\r\n    function vat() external view returns (address);\r\n    function flapper() external view returns (address);\r\n    function flopper() external view returns (address);\r\n    function sin(uint256) external view returns (uint256);\r\n    function Sin() external view returns (uint256);\r\n    function Ash() external view returns (uint256);\r\n    function wait() external view returns (uint256);\r\n    function dump() external view returns (uint256);\r\n    function sump() external view returns (uint256);\r\n    function bump() external view returns (uint256);\r\n    function hump() external view returns (uint256);\r\n    function live() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, address) external;\r\n    function fess(uint256) external;\r\n    function flog(uint256) external;\r\n    function heal(uint256) external;\r\n    function kiss(uint256) external;\r\n    function flop() external returns (uint256);\r\n    function flap() external returns (uint256);\r\n    function cage() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/mip21/RwaInputConduitAbstract.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\ninterface RwaInputConduitBaseAbstract {\r\n    function dai() external view returns (address);\r\n    function to() external view returns (address);\r\n    function push() external;\r\n}\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaInputConduit.sol\r\ninterface RwaInputConduitAbstract is RwaInputConduitBaseAbstract {\r\n    function gov() external view returns (address);\r\n}\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaInputConduit2.sol\r\ninterface RwaInputConduit2Abstract is RwaInputConduitBaseAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function may(address) external view returns (uint256);\r\n    function mate(address) external;\r\n    function hate(address) external;\r\n}\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaInputConduit3.sol\r\ninterface RwaInputConduit3Abstract is RwaInputConduitBaseAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function may(address) external view returns (uint256);\r\n    function mate(address) external;\r\n    function hate(address) external;\r\n    function psm() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function quitTo() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function push(uint) external;\r\n    function quit() external;\r\n    function quit(uint) external;\r\n    function yank(address, address, uint256) external;\r\n    function expectedDaiWad(uint256) external view returns (uint256);\r\n    function requiredGemAmt(uint256) external view returns (uint256);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/mip21/RwaJarAbstract.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/jars/RwaJar.sol\r\ninterface RwaJarAbstract {\r\n    function daiJoin() external view returns(address);\r\n    function dai() external view returns(address);\r\n    function chainlog() external view returns(address);\r\n    function void() external;\r\n    function toss(uint256) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/mip21/RwaLiquidationOracleAbstract.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/oracles/RwaLiquidationOracle.sol\r\ninterface RwaLiquidationOracleAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function vat() external view returns (address);\r\n    function vow() external view returns (address);\r\n    function ilks(bytes32) external view returns(string memory, address, uint48, uint48);\r\n    function file(bytes32, address) external;\r\n    function init(bytes32, uint256, string calldata, uint48) external;\r\n    function bump(bytes32, uint256) external;\r\n    function tell(bytes32) external;\r\n    function cure(bytes32) external;\r\n    function cull(bytes32, address) external;\r\n    function good(bytes32) external view returns (bool);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/mip21/RwaOutputConduitAbstract.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\ninterface RwaOutputConduitBaseAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function dai() external view returns (address);\r\n    function to() external view returns (address);\r\n    function pick(address) external;\r\n    function push() external;\r\n}\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaOutputConduit.sol\r\ninterface RwaOutputConduitAbstract is RwaOutputConduitBaseAbstract {\r\n    function gov() external view returns (address);\r\n    function bud(address) external view returns (uint256);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n}\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaOutputConduit2.sol\r\ninterface RwaOutputConduit2Abstract is RwaOutputConduitBaseAbstract {\r\n    function may(address) external view returns (uint256);\r\n    function mate(address) external;\r\n    function hate(address) external;\r\n}\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/conduits/RwaOutputConduit3.sol\r\ninterface RwaOutputConduit3Abstract is RwaOutputConduitBaseAbstract {\r\n    function bud(address) external view returns (uint256);\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function may(address) external view returns (uint256);\r\n    function mate(address) external;\r\n    function hate(address) external;\r\n    function psm() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function quitTo() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function push(uint) external;\r\n    function quit() external;\r\n    function quit(uint) external;\r\n    function yank(address, address, uint256) external;\r\n    function expectedGemAmt(uint256) external view returns (uint256);\r\n    function requiredDaiWad(uint256) external view returns (uint256);\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/dss/mip21/RwaUrnAbstract.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/urns/RwaUrn.sol\r\n// https://github.com/makerdao/mip21-toolkit/blob/master/src/urns/RwaUrn2.sol\r\ninterface RwaUrnAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function can(address) external view returns (uint256);\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function vat() external view returns (address);\r\n    function jug() external view returns (address);\r\n    function gemJoin() external view returns (address);\r\n    function daiJoin() external view returns (address);\r\n    function outputConduit() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function lock(uint256) external;\r\n    function draw(uint256) external;\r\n    function wipe(uint256) external;\r\n    function free(uint256) external;\r\n    function quit() external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/sai/GemPitAbstract.sol\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/pit.sol\r\ninterface GemPitAbstract {\r\n    function burn(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/sai/SaiMomAbstract.sol\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/mom.sol\r\ninterface SaiMomAbstract {\r\n    function tub() external view returns (address);\r\n    function tap() external view returns (address);\r\n    function vox() external view returns (address);\r\n    function setCap(uint256) external;\r\n    function setMat(uint256) external;\r\n    function setTax(uint256) external;\r\n    function setFee(uint256) external;\r\n    function setAxe(uint256) external;\r\n    function setTubGap(uint256) external;\r\n    function setPip(address) external;\r\n    function setPep(address) external;\r\n    function setVox(address) external;\r\n    function setTapGap(uint256) external;\r\n    function setWay(uint256) external;\r\n    function setHow(uint256) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/sai/SaiTapAbstract.sol\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/tap.sol\r\ninterface SaiTapAbstract {\r\n    function sai() external view returns (address);\r\n    function sin() external view returns (address);\r\n    function skr() external view returns (address);\r\n    function vox() external view returns (address);\r\n    function tub() external view returns (address);\r\n    function gap() external view returns (uint256);\r\n    function off() external view returns (bool);\r\n    function fix() external view returns (uint256);\r\n    function joy() external view returns (uint256);\r\n    function woe() external view returns (uint256);\r\n    function fog() external view returns (uint256);\r\n    function mold(bytes32, uint256) external;\r\n    function heal() external;\r\n    function s2s() external returns (uint256);\r\n    function bid(uint256) external returns (uint256);\r\n    function ask(uint256) external returns (uint256);\r\n    function bust(uint256) external;\r\n    function boom(uint256) external;\r\n    function cage(uint256) external;\r\n    function cash(uint256) external;\r\n    function mock(uint256) external;\r\n    function vent() external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/sai/SaiTopAbstract.sol\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/top.sol\r\ninterface SaiTopAbstract {\r\n    function vox() external view returns (address);\r\n    function tub() external view returns (address);\r\n    function tap() external view returns (address);\r\n    function sai() external view returns (address);\r\n    function sin() external view returns (address);\r\n    function skr() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function fix() external view returns (uint256);\r\n    function fit() external view returns (uint256);\r\n    function caged() external view returns (uint256);\r\n    function cooldown() external view returns (uint256);\r\n    function era() external view returns (uint256);\r\n    function cage() external;\r\n    function flow() external;\r\n    function setCooldown(uint256) external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/sai/SaiTubAbstract.sol\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/tub.sol\r\ninterface SaiTubAbstract {\r\n    function sai() external view returns (address);\r\n    function sin() external view returns (address);\r\n    function skr() external view returns (address);\r\n    function gem() external view returns (address);\r\n    function gov() external view returns (address);\r\n    function vox() external view returns (address);\r\n    function pip() external view returns (address);\r\n    function pep() external view returns (address);\r\n    function tap() external view returns (address);\r\n    function pit() external view returns (address);\r\n    function axe() external view returns (uint256);\r\n    function cap() external view returns (uint256);\r\n    function mat() external view returns (uint256);\r\n    function tax() external view returns (uint256);\r\n    function fee() external view returns (uint256);\r\n    function gap() external view returns (uint256);\r\n    function off() external view returns (bool);\r\n    function out() external view returns (bool);\r\n    function fit() external view returns (uint256);\r\n    function rho() external view returns (uint256);\r\n    function rum() external view returns (uint256);\r\n    function cupi() external view returns (uint256);\r\n    function cups(bytes32) external view returns (address, uint256, uint256, uint256);\r\n    function lad(bytes32) external view returns (address);\r\n    function ink(bytes32) external view returns (address);\r\n    function tab(bytes32) external view returns (uint256);\r\n    function rap(bytes32) external returns (uint256);\r\n    function din() external returns (uint256);\r\n    function air() external view returns (uint256);\r\n    function pie() external view returns (uint256);\r\n    function era() external view returns (uint256);\r\n    function mold(bytes32, uint256) external;\r\n    function setPip(address) external;\r\n    function setPep(address) external;\r\n    function setVox(address) external;\r\n    function turn(address) external;\r\n    function per() external view returns (uint256);\r\n    function ask(uint256) external view returns (uint256);\r\n    function bid(uint256) external view returns (uint256);\r\n    function join(uint256) external;\r\n    function exit(uint256) external;\r\n    function chi() external returns (uint256);\r\n    function rhi() external returns (uint256);\r\n    function drip() external;\r\n    function tag() external view returns (uint256);\r\n    function safe(bytes32) external returns (bool);\r\n    function open() external returns (bytes32);\r\n    function give(bytes32, address) external;\r\n    function lock(bytes32, uint256) external;\r\n    function free(bytes32, uint256) external;\r\n    function draw(bytes32, uint256) external;\r\n    function wipe(bytes32, uint256) external;\r\n    function shut(bytes32) external;\r\n    function bite(bytes32) external;\r\n    function cage(uint256, uint256) external;\r\n    function flow() external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/sai/SaiVoxAbstract.sol\r\n\r\n// https://github.com/makerdao/sai/blob/master/src/vox.sol\r\ninterface SaiVoxAbstract {\r\n    function fix() external view returns (uint256);\r\n    function how() external view returns (uint256);\r\n    function tau() external view returns (uint256);\r\n    function era() external view returns (uint256);\r\n    function mold(bytes32, uint256) external;\r\n    function par() external returns (uint256);\r\n    function way() external returns (uint256);\r\n    function tell(uint256) external;\r\n    function tune(uint256) external;\r\n    function prod() external;\r\n    function authority() external view returns (address);\r\n    function owner() external view returns (address);\r\n    function setOwner(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/utils/WardsAbstract.sol\r\n\r\ninterface WardsAbstract {\r\n    function wards(address) external view returns (uint256);\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n}\r\n\r\n// lib/dss-test/lib/forge-std/src/Vm.sol\r\n\r\n// Cheatcodes are marked as view/pure/none using the following rules:\r\n// 0. A call's observable behaviour includes its return value, logs, reverts and state writes,\r\n// 1. If you can influence a later call's observable behaviour, you're neither `view` nor `pure (you are modifying some state be it the EVM, interpreter, filesystem, etc),\r\n// 2. Otherwise if you can be influenced by an earlier call, or if reading some state, you're `view`,\r\n// 3. Otherwise you're `pure`.\r\n\r\n// The `VmSafe` interface does not allow manipulation of the EVM state or other actions that may\r\n// result in Script simulations differing from on-chain execution. It is recommended to only use\r\n// these cheats in scripts.\r\ninterface VmSafe {\r\n    //  ======== Types ========\r\n    enum CallerMode {\r\n        None,\r\n        Broadcast,\r\n        RecurrentBroadcast,\r\n        Prank,\r\n        RecurrentPrank\r\n    }\r\n\r\n    enum AccountAccessKind {\r\n        Call,\r\n        DelegateCall,\r\n        CallCode,\r\n        StaticCall,\r\n        Create,\r\n        SelfDestruct,\r\n        Resume,\r\n        Balance,\r\n        Extcodesize,\r\n        Extcodehash,\r\n        Extcodecopy\r\n    }\r\n\r\n    struct Log {\r\n        bytes32[] topics;\r\n        bytes data;\r\n        address emitter;\r\n    }\r\n\r\n    struct Rpc {\r\n        string key;\r\n        string url;\r\n    }\r\n\r\n    struct EthGetLogs {\r\n        address emitter;\r\n        bytes32[] topics;\r\n        bytes data;\r\n        bytes32 blockHash;\r\n        uint64 blockNumber;\r\n        bytes32 transactionHash;\r\n        uint64 transactionIndex;\r\n        uint256 logIndex;\r\n        bool removed;\r\n    }\r\n\r\n    struct DirEntry {\r\n        string errorMessage;\r\n        string path;\r\n        uint64 depth;\r\n        bool isDir;\r\n        bool isSymlink;\r\n    }\r\n\r\n    struct FsMetadata {\r\n        bool isDir;\r\n        bool isSymlink;\r\n        uint256 length;\r\n        bool readOnly;\r\n        uint256 modified;\r\n        uint256 accessed;\r\n        uint256 created;\r\n    }\r\n\r\n    struct Wallet {\r\n        address addr;\r\n        uint256 publicKeyX;\r\n        uint256 publicKeyY;\r\n        uint256 privateKey;\r\n    }\r\n\r\n    struct FfiResult {\r\n        int32 exitCode;\r\n        bytes stdout;\r\n        bytes stderr;\r\n    }\r\n\r\n    struct ChainInfo {\r\n        uint256 forkId;\r\n        uint256 chainId;\r\n    }\r\n\r\n    struct AccountAccess {\r\n        ChainInfo chainInfo;\r\n        AccountAccessKind kind;\r\n        address account;\r\n        address accessor;\r\n        bool initialized;\r\n        uint256 oldBalance;\r\n        uint256 newBalance;\r\n        bytes deployedCode;\r\n        uint256 value;\r\n        bytes data;\r\n        bool reverted;\r\n        StorageAccess[] storageAccesses;\r\n    }\r\n\r\n    struct StorageAccess {\r\n        address account;\r\n        bytes32 slot;\r\n        bool isWrite;\r\n        bytes32 previousValue;\r\n        bytes32 newValue;\r\n        bool reverted;\r\n    }\r\n\r\n    // ======== EVM  ========\r\n\r\n    // Gets the address for a given private key\r\n    function addr(uint256 privateKey) external pure returns (address keyAddr);\r\n\r\n    // Gets the nonce of an account.\r\n    // See `getNonce(Wallet memory wallet)` for an alternative way to manage users and get their nonces.\r\n    function getNonce(address account) external view returns (uint64 nonce);\r\n\r\n    // Loads a storage slot from an address\r\n    function load(address target, bytes32 slot) external view returns (bytes32 data);\r\n\r\n    // Signs data\r\n    function sign(uint256 privateKey, bytes32 digest) external pure returns (uint8 v, bytes32 r, bytes32 s);\r\n\r\n    // -------- Record Storage --------\r\n    // Records all storage reads and writes\r\n    function record() external;\r\n\r\n    // Gets all accessed reads and write slot from a `vm.record` session, for a given address\r\n    function accesses(address target) external returns (bytes32[] memory readSlots, bytes32[] memory writeSlots);\r\n\r\n    // Record all account accesses as part of CREATE, CALL or SELFDESTRUCT opcodes in order,\r\n    // along with the context of the calls.\r\n    function startStateDiffRecording() external;\r\n\r\n    // Returns an ordered array of all account accesses from a `vm.startStateDiffRecording` session.\r\n    function stopAndReturnStateDiff() external returns (AccountAccess[] memory accountAccesses);\r\n\r\n    // -------- Recording Map Writes --------\r\n\r\n    // Starts recording all map SSTOREs for later retrieval.\r\n    function startMappingRecording() external;\r\n\r\n    // Stops recording all map SSTOREs for later retrieval and clears the recorded data.\r\n    function stopMappingRecording() external;\r\n\r\n    // Gets the number of elements in the mapping at the given slot, for a given address.\r\n    function getMappingLength(address target, bytes32 mappingSlot) external returns (uint256 length);\r\n\r\n    // Gets the elements at index idx of the mapping at the given slot, for a given address. The\r\n    // index must be less than the length of the mapping (i.e. the number of keys in the mapping).\r\n    function getMappingSlotAt(address target, bytes32 mappingSlot, uint256 idx) external returns (bytes32 value);\r\n\r\n    // Gets the map key and parent of a mapping at a given slot, for a given address.\r\n    function getMappingKeyAndParentOf(address target, bytes32 elementSlot)\r\n        external\r\n        returns (bool found, bytes32 key, bytes32 parent);\r\n\r\n    // -------- Record Logs --------\r\n    // Record all the transaction logs\r\n    function recordLogs() external;\r\n\r\n    // Gets all the recorded logs\r\n    function getRecordedLogs() external returns (Log[] memory logs);\r\n\r\n    // -------- Gas Metering --------\r\n    // It's recommend to use the `noGasMetering` modifier included with forge-std, instead of\r\n    // using these functions directly.\r\n\r\n    // Pauses gas metering (i.e. gas usage is not counted). Noop if already paused.\r\n    function pauseGasMetering() external;\r\n\r\n    // Resumes gas metering (i.e. gas usage is counted again). Noop if already on.\r\n    function resumeGasMetering() external;\r\n\r\n    // -------- RPC Methods --------\r\n\r\n    /// Gets all the logs according to specified filter.\r\n    function eth_getLogs(uint256 fromBlock, uint256 toBlock, address target, bytes32[] calldata topics)\r\n        external\r\n        returns (EthGetLogs[] memory logs);\r\n\r\n    // Performs an Ethereum JSON-RPC request to the current fork URL.\r\n    function rpc(string calldata method, string calldata params) external returns (bytes memory data);\r\n\r\n    // ======== Test Configuration ========\r\n\r\n    // If the condition is false, discard this run's fuzz inputs and generate new ones.\r\n    function assume(bool condition) external pure;\r\n\r\n    // Writes a breakpoint to jump to in the debugger\r\n    function breakpoint(string calldata char) external;\r\n\r\n    // Writes a conditional breakpoint to jump to in the debugger\r\n    function breakpoint(string calldata char, bool value) external;\r\n\r\n    // Returns the RPC url for the given alias\r\n    function rpcUrl(string calldata rpcAlias) external view returns (string memory json);\r\n\r\n    // Returns all rpc urls and their aliases `[alias, url][]`\r\n    function rpcUrls() external view returns (string[2][] memory urls);\r\n\r\n    // Returns all rpc urls and their aliases as structs.\r\n    function rpcUrlStructs() external view returns (Rpc[] memory urls);\r\n\r\n    // Suspends execution of the main thread for `duration` milliseconds\r\n    function sleep(uint256 duration) external;\r\n\r\n    // ======== OS and Filesystem ========\r\n\r\n    // -------- Metadata --------\r\n\r\n    // Returns true if the given path points to an existing entity, else returns false\r\n    function exists(string calldata path) external returns (bool result);\r\n\r\n    // Given a path, query the file system to get information about a file, directory, etc.\r\n    function fsMetadata(string calldata path) external view returns (FsMetadata memory metadata);\r\n\r\n    // Returns true if the path exists on disk and is pointing at a directory, else returns false\r\n    function isDir(string calldata path) external returns (bool result);\r\n\r\n    // Returns true if the path exists on disk and is pointing at a regular file, else returns false\r\n    function isFile(string calldata path) external returns (bool result);\r\n\r\n    // Get the path of the current project root.\r\n    function projectRoot() external view returns (string memory path);\r\n\r\n    // Returns the time since unix epoch in milliseconds\r\n    function unixTime() external returns (uint256 milliseconds);\r\n\r\n    // -------- Reading and writing --------\r\n\r\n    // Closes file for reading, resetting the offset and allowing to read it from beginning with readLine.\r\n    // `path` is relative to the project root.\r\n    function closeFile(string calldata path) external;\r\n\r\n    // Copies the contents of one file to another. This function will **overwrite** the contents of `to`.\r\n    // On success, the total number of bytes copied is returned and it is equal to the length of the `to` file as reported by `metadata`.\r\n    // Both `from` and `to` are relative to the project root.\r\n    function copyFile(string calldata from, string calldata to) external returns (uint64 copied);\r\n\r\n    // Creates a new, empty directory at the provided path.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - User lacks permissions to modify `path`.\r\n    // - A parent of the given path doesn't exist and `recursive` is false.\r\n    // - `path` already exists and `recursive` is false.\r\n    // `path` is relative to the project root.\r\n    function createDir(string calldata path, bool recursive) external;\r\n\r\n    // Reads the directory at the given path recursively, up to `max_depth`.\r\n    // `max_depth` defaults to 1, meaning only the direct children of the given directory will be returned.\r\n    // Follows symbolic links if `follow_links` is true.\r\n    function readDir(string calldata path) external view returns (DirEntry[] memory entries);\r\n    function readDir(string calldata path, uint64 maxDepth) external view returns (DirEntry[] memory entries);\r\n    function readDir(string calldata path, uint64 maxDepth, bool followLinks)\r\n        external\r\n        view\r\n        returns (DirEntry[] memory entries);\r\n\r\n    // Reads the entire content of file to string. `path` is relative to the project root.\r\n    function readFile(string calldata path) external view returns (string memory data);\r\n\r\n    // Reads the entire content of file as binary. `path` is relative to the project root.\r\n    function readFileBinary(string calldata path) external view returns (bytes memory data);\r\n\r\n    // Reads next line of file to string.\r\n    function readLine(string calldata path) external view returns (string memory line);\r\n\r\n    // Reads a symbolic link, returning the path that the link points to.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - `path` is not a symbolic link.\r\n    // - `path` does not exist.\r\n    function readLink(string calldata linkPath) external view returns (string memory targetPath);\r\n\r\n    // Removes a directory at the provided path.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - `path` doesn't exist.\r\n    // - `path` isn't a directory.\r\n    // - User lacks permissions to modify `path`.\r\n    // - The directory is not empty and `recursive` is false.\r\n    // `path` is relative to the project root.\r\n    function removeDir(string calldata path, bool recursive) external;\r\n\r\n    // Removes a file from the filesystem.\r\n    // This cheatcode will revert in the following situations, but is not limited to just these cases:\r\n    // - `path` points to a directory.\r\n    // - The file doesn't exist.\r\n    // - The user lacks permissions to remove the file.\r\n    // `path` is relative to the project root.\r\n    function removeFile(string calldata path) external;\r\n\r\n    // Writes data to file, creating a file if it does not exist, and entirely replacing its contents if it does.\r\n    // `path` is relative to the project root.\r\n    function writeFile(string calldata path, string calldata data) external;\r\n\r\n    // Writes binary data to a file, creating a file if it does not exist, and entirely replacing its contents if it does.\r\n    // `path` is relative to the project root.\r\n    function writeFileBinary(string calldata path, bytes calldata data) external;\r\n\r\n    // Writes line to file, creating a file if it does not exist.\r\n    // `path` is relative to the project root.\r\n    function writeLine(string calldata path, string calldata data) external;\r\n\r\n    // -------- Foreign Function Interface --------\r\n\r\n    // Performs a foreign function call via the terminal\r\n    function ffi(string[] calldata commandInput) external returns (bytes memory result);\r\n\r\n    // Performs a foreign function call via terminal and returns the exit code, stdout, and stderr\r\n    function tryFfi(string[] calldata commandInput) external returns (FfiResult memory result);\r\n\r\n    // ======== Environment Variables ========\r\n\r\n    // Sets environment variables\r\n    function setEnv(string calldata name, string calldata value) external;\r\n\r\n    // Reads environment variables, (name) =\u003e (value)\r\n    function envBool(string calldata name) external view returns (bool value);\r\n    function envUint(string calldata name) external view returns (uint256 value);\r\n    function envInt(string calldata name) external view returns (int256 value);\r\n    function envAddress(string calldata name) external view returns (address value);\r\n    function envBytes32(string calldata name) external view returns (bytes32 value);\r\n    function envString(string calldata name) external view returns (string memory value);\r\n    function envBytes(string calldata name) external view returns (bytes memory value);\r\n\r\n    // Reads environment variables as arrays\r\n    function envBool(string calldata name, string calldata delim) external view returns (bool[] memory value);\r\n    function envUint(string calldata name, string calldata delim) external view returns (uint256[] memory value);\r\n    function envInt(string calldata name, string calldata delim) external view returns (int256[] memory value);\r\n    function envAddress(string calldata name, string calldata delim) external view returns (address[] memory value);\r\n    function envBytes32(string calldata name, string calldata delim) external view returns (bytes32[] memory value);\r\n    function envString(string calldata name, string calldata delim) external view returns (string[] memory value);\r\n    function envBytes(string calldata name, string calldata delim) external view returns (bytes[] memory value);\r\n\r\n    // Read environment variables with default value\r\n    function envOr(string calldata name, bool defaultValue) external returns (bool value);\r\n    function envOr(string calldata name, uint256 defaultValue) external returns (uint256 value);\r\n    function envOr(string calldata name, int256 defaultValue) external returns (int256 value);\r\n    function envOr(string calldata name, address defaultValue) external returns (address value);\r\n    function envOr(string calldata name, bytes32 defaultValue) external returns (bytes32 value);\r\n    function envOr(string calldata name, string calldata defaultValue) external returns (string memory value);\r\n    function envOr(string calldata name, bytes calldata defaultValue) external returns (bytes memory value);\r\n\r\n    // Read environment variables as arrays with default value\r\n    function envOr(string calldata name, string calldata delim, bool[] calldata defaultValue)\r\n        external\r\n        returns (bool[] memory value);\r\n    function envOr(string calldata name, string calldata delim, uint256[] calldata defaultValue)\r\n        external\r\n        returns (uint256[] memory value);\r\n    function envOr(string calldata name, string calldata delim, int256[] calldata defaultValue)\r\n        external\r\n        returns (int256[] memory value);\r\n    function envOr(string calldata name, string calldata delim, address[] calldata defaultValue)\r\n        external\r\n        returns (address[] memory value);\r\n    function envOr(string calldata name, string calldata delim, bytes32[] calldata defaultValue)\r\n        external\r\n        returns (bytes32[] memory value);\r\n    function envOr(string calldata name, string calldata delim, string[] calldata defaultValue)\r\n        external\r\n        returns (string[] memory value);\r\n    function envOr(string calldata name, string calldata delim, bytes[] calldata defaultValue)\r\n        external\r\n        returns (bytes[] memory value);\r\n\r\n    // ======== User Management ========\r\n\r\n    // Derives a private key from the name, labels the account with that name, and returns the wallet\r\n    function createWallet(string calldata walletLabel) external returns (Wallet memory wallet);\r\n\r\n    // Generates a wallet from the private key and returns the wallet\r\n    function createWallet(uint256 privateKey) external returns (Wallet memory wallet);\r\n\r\n    // Generates a wallet from the private key, labels the account with that name, and returns the wallet\r\n    function createWallet(uint256 privateKey, string calldata walletLabel) external returns (Wallet memory wallet);\r\n\r\n    // Gets the label for the specified address\r\n    function getLabel(address account) external returns (string memory currentLabel);\r\n\r\n    // Get nonce for a Wallet.\r\n    // See `getNonce(address account)` for an alternative way to get a nonce.\r\n    function getNonce(Wallet calldata wallet) external returns (uint64 nonce);\r\n\r\n    // Labels an address in call traces\r\n    function label(address account, string calldata newLabel) external;\r\n\r\n    // Signs data, (Wallet, digest) =\u003e (v, r, s)\r\n    function sign(Wallet calldata wallet, bytes32 digest) external returns (uint8 v, bytes32 r, bytes32 s);\r\n\r\n    // ======== Scripts ========\r\n\r\n    // -------- Broadcasting Transactions --------\r\n\r\n    // Using the address that calls the test contract, has the next call (at this call depth only) create a transaction that can later be signed and sent onchain\r\n    function broadcast() external;\r\n\r\n    // Has the next call (at this call depth only) create a transaction with the address provided as the sender that can later be signed and sent onchain\r\n    function broadcast(address signer) external;\r\n\r\n    // Has the next call (at this call depth only) create a transaction with the private key provided as the sender that can later be signed and sent onchain\r\n    function broadcast(uint256 privateKey) external;\r\n\r\n    // Using the address that calls the test contract, has all subsequent calls (at this call depth only) create transactions that can later be signed and sent onchain\r\n    function startBroadcast() external;\r\n\r\n    // Has all subsequent calls (at this call depth only) create transactions with the address provided that can later be signed and sent onchain\r\n    function startBroadcast(address signer) external;\r\n\r\n    // Has all subsequent calls (at this call depth only) create transactions with the private key provided that can later be signed and sent onchain\r\n    function startBroadcast(uint256 privateKey) external;\r\n\r\n    // Stops collecting onchain transactions\r\n    function stopBroadcast() external;\r\n\r\n    // -------- Key Management --------\r\n\r\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at the derivation path m/44'/60'/0'/0/{index}\r\n    function deriveKey(string calldata mnemonic, uint32 index) external pure returns (uint256 privateKey);\r\n\r\n    // Derive a private key from a provided mnenomic string (or mnenomic file path) at {derivationPath}{index}\r\n    function deriveKey(string calldata mnemonic, string calldata derivationPath, uint32 index)\r\n        external\r\n        pure\r\n        returns (uint256 privateKey);\r\n\r\n    // Adds a private key to the local forge wallet and returns the address\r\n    function rememberKey(uint256 privateKey) external returns (address keyAddr);\r\n\r\n    // ======== Utilities ========\r\n\r\n    // Convert values to a string\r\n    function toString(address value) external pure returns (string memory stringifiedValue);\r\n    function toString(bytes calldata value) external pure returns (string memory stringifiedValue);\r\n    function toString(bytes32 value) external pure returns (string memory stringifiedValue);\r\n    function toString(bool value) external pure returns (string memory stringifiedValue);\r\n    function toString(uint256 value) external pure returns (string memory stringifiedValue);\r\n    function toString(int256 value) external pure returns (string memory stringifiedValue);\r\n\r\n    // Convert values from a string\r\n    function parseBytes(string calldata stringifiedValue) external pure returns (bytes memory parsedValue);\r\n    function parseAddress(string calldata stringifiedValue) external pure returns (address parsedValue);\r\n    function parseUint(string calldata stringifiedValue) external pure returns (uint256 parsedValue);\r\n    function parseInt(string calldata stringifiedValue) external pure returns (int256 parsedValue);\r\n    function parseBytes32(string calldata stringifiedValue) external pure returns (bytes32 parsedValue);\r\n    function parseBool(string calldata stringifiedValue) external pure returns (bool parsedValue);\r\n\r\n    // Gets the creation bytecode from an artifact file. Takes in the relative path to the json file\r\n    function getCode(string calldata artifactPath) external view returns (bytes memory creationBytecode);\r\n\r\n    // Gets the deployed bytecode from an artifact file. Takes in the relative path to the json file\r\n    function getDeployedCode(string calldata artifactPath) external view returns (bytes memory runtimeBytecode);\r\n\r\n    // Compute the address a contract will be deployed at for a given deployer address and nonce.\r\n    function computeCreateAddress(address deployer, uint256 nonce) external pure returns (address);\r\n\r\n    // Compute the address of a contract created with CREATE2 using the given CREATE2 deployer.\r\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash, address deployer)\r\n        external\r\n        pure\r\n        returns (address);\r\n\r\n    // Compute the address of a contract created with CREATE2 using foundry's default CREATE2\r\n    // deployer: 0x4e59b44847b379578588920cA78FbF26c0B4956C, https://github.com/Arachnid/deterministic-deployment-proxy\r\n    function computeCreate2Address(bytes32 salt, bytes32 initCodeHash) external pure returns (address);\r\n\r\n    // ======== JSON Parsing and Manipulation ========\r\n\r\n    // -------- Reading --------\r\n\r\n    // NOTE: Please read https://book.getfoundry.sh/cheatcodes/parse-json to understand the\r\n    // limitations and caveats of the JSON parsing cheats.\r\n\r\n    // Checks if a key exists in a JSON object.\r\n    function keyExists(string calldata json, string calldata key) external view returns (bool);\r\n\r\n    // Given a string of JSON, return it as ABI-encoded\r\n    function parseJson(string calldata json, string calldata key) external pure returns (bytes memory abiEncodedData);\r\n    function parseJson(string calldata json) external pure returns (bytes memory abiEncodedData);\r\n\r\n    // The following parseJson cheatcodes will do type coercion, for the type that they indicate.\r\n    // For example, parseJsonUint will coerce all values to a uint256. That includes stringified numbers '12'\r\n    // and hex numbers '0xEF'.\r\n    // Type coercion works ONLY for discrete values or arrays. That means that the key must return a value or array, not\r\n    // a JSON object.\r\n    function parseJsonUint(string calldata json, string calldata key) external pure returns (uint256);\r\n    function parseJsonUintArray(string calldata json, string calldata key) external pure returns (uint256[] memory);\r\n    function parseJsonInt(string calldata json, string calldata key) external pure returns (int256);\r\n    function parseJsonIntArray(string calldata json, string calldata key) external pure returns (int256[] memory);\r\n    function parseJsonBool(string calldata json, string calldata key) external pure returns (bool);\r\n    function parseJsonBoolArray(string calldata json, string calldata key) external pure returns (bool[] memory);\r\n    function parseJsonAddress(string calldata json, string calldata key) external pure returns (address);\r\n    function parseJsonAddressArray(string calldata json, string calldata key)\r\n        external\r\n        pure\r\n        returns (address[] memory);\r\n    function parseJsonString(string calldata json, string calldata key) external pure returns (string memory);\r\n    function parseJsonStringArray(string calldata json, string calldata key) external pure returns (string[] memory);\r\n    function parseJsonBytes(string calldata json, string calldata key) external pure returns (bytes memory);\r\n    function parseJsonBytesArray(string calldata json, string calldata key) external pure returns (bytes[] memory);\r\n    function parseJsonBytes32(string calldata json, string calldata key) external pure returns (bytes32);\r\n    function parseJsonBytes32Array(string calldata json, string calldata key)\r\n        external\r\n        pure\r\n        returns (bytes32[] memory);\r\n\r\n    // Returns array of keys for a JSON object\r\n    function parseJsonKeys(string calldata json, string calldata key) external pure returns (string[] memory keys);\r\n\r\n    // -------- Writing --------\r\n\r\n    // NOTE: Please read https://book.getfoundry.sh/cheatcodes/serialize-json to understand how\r\n    // to use the serialization cheats.\r\n\r\n    // Serialize a key and value to a JSON object stored in-memory that can be later written to a file\r\n    // It returns the stringified version of the specific JSON file up to that moment.\r\n    function serializeJson(string calldata objectKey, string calldata value) external returns (string memory json);\r\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256 value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256 value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32 value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeString(string calldata objectKey, string calldata valueKey, string calldata value)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes calldata value)\r\n        external\r\n        returns (string memory json);\r\n\r\n    function serializeBool(string calldata objectKey, string calldata valueKey, bool[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeUint(string calldata objectKey, string calldata valueKey, uint256[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeInt(string calldata objectKey, string calldata valueKey, int256[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeAddress(string calldata objectKey, string calldata valueKey, address[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes32(string calldata objectKey, string calldata valueKey, bytes32[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeString(string calldata objectKey, string calldata valueKey, string[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n    function serializeBytes(string calldata objectKey, string calldata valueKey, bytes[] calldata values)\r\n        external\r\n        returns (string memory json);\r\n\r\n    // NOTE: Please read https://book.getfoundry.sh/cheatcodes/write-json to understand how\r\n    // to use the JSON writing cheats.\r\n\r\n    // Write a serialized JSON object to a file. If the file exists, it will be overwritten.\r\n    function writeJson(string calldata json, string calldata path) external;\r\n\r\n    // Write a serialized JSON object to an **existing** JSON file, replacing a value with key = \u003cvalue_key\u003e\r\n    // This is useful to replace a specific value of a JSON file, without having to parse the entire thing\r\n    function writeJson(string calldata json, string calldata path, string calldata valueKey) external;\r\n}\r\n\r\n// The `Vm` interface does allow manipulation of the EVM state. These are all intended to be used\r\n// in tests, but it is not recommended to use these cheats in scripts.\r\ninterface Vm is VmSafe {\r\n    // ======== EVM  ========\r\n\r\n    // -------- Block and Transaction Properties --------\r\n\r\n    // Sets block.chainid\r\n    function chainId(uint256 newChainId) external;\r\n\r\n    // Sets block.coinbase\r\n    function coinbase(address newCoinbase) external;\r\n\r\n    // Sets block.difficulty\r\n    // Not available on EVM versions from Paris onwards. Use `prevrandao` instead.\r\n    // If used on unsupported EVM versions it will revert.\r\n    function difficulty(uint256 newDifficulty) external;\r\n\r\n    // Sets block.basefee\r\n    function fee(uint256 newBasefee) external;\r\n\r\n    // Sets block.prevrandao\r\n    // Not available on EVM versions before Paris. Use `difficulty` instead.\r\n    // If used on unsupported EVM versions it will revert.\r\n    function prevrandao(bytes32 newPrevrandao) external;\r\n\r\n    // Sets block.height\r\n    function roll(uint256 newHeight) external;\r\n\r\n    // Sets tx.gasprice\r\n    function txGasPrice(uint256 newGasPrice) external;\r\n\r\n    // Sets block.timestamp\r\n    function warp(uint256 newTimestamp) external;\r\n\r\n    // -------- Account State --------\r\n\r\n    // Sets an address' balance\r\n    function deal(address account, uint256 newBalance) external;\r\n\r\n    // Sets an address' code\r\n    function etch(address target, bytes calldata newRuntimeBytecode) external;\r\n\r\n    // Load a genesis JSON file's `allocs` into the in-memory state.\r\n    function loadAllocs(string calldata pathToAllocsJson) external;\r\n\r\n    // Resets the nonce of an account to 0 for EOAs and 1 for contract accounts\r\n    function resetNonce(address account) external;\r\n\r\n    // Sets the nonce of an account; must be higher than the current nonce of the account\r\n    function setNonce(address account, uint64 newNonce) external;\r\n\r\n    // Sets the nonce of an account to an arbitrary value\r\n    function setNonceUnsafe(address account, uint64 newNonce) external;\r\n\r\n    // Stores a value to an address' storage slot.\r\n    function store(address target, bytes32 slot, bytes32 value) external;\r\n\r\n    // -------- Call Manipulation --------\r\n    // --- Mocks ---\r\n\r\n    // Clears all mocked calls\r\n    function clearMockedCalls() external;\r\n\r\n    // Mocks a call to an address, returning specified data.\r\n    // Calldata can either be strict or a partial match, e.g. if you only\r\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\r\n    // function will be mocked.\r\n    function mockCall(address callee, bytes calldata data, bytes calldata returnData) external;\r\n\r\n    // Mocks a call to an address with a specific msg.value, returning specified data.\r\n    // Calldata match takes precedence over msg.value in case of ambiguity.\r\n    function mockCall(address callee, uint256 msgValue, bytes calldata data, bytes calldata returnData) external;\r\n\r\n    // Reverts a call to an address with specified revert data.\r\n    function mockCallRevert(address callee, bytes calldata data, bytes calldata revertData) external;\r\n\r\n    // Reverts a call to an address with a specific msg.value, with specified revert data.\r\n    function mockCallRevert(address callee, uint256 msgValue, bytes calldata data, bytes calldata revertData)\r\n        external;\r\n\r\n    // --- Impersonation (pranks) ---\r\n\r\n    // Sets the *next* call's msg.sender to be the input address\r\n    function prank(address msgSender) external;\r\n\r\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\r\n    function startPrank(address msgSender) external;\r\n\r\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\r\n    function prank(address msgSender, address txOrigin) external;\r\n\r\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\r\n    function startPrank(address msgSender, address txOrigin) external;\r\n\r\n    // Resets subsequent calls' msg.sender to be `address(this)`\r\n    function stopPrank() external;\r\n\r\n    // Reads the current `msg.sender` and `tx.origin` from state and reports if there is any active caller modification\r\n    function readCallers() external returns (CallerMode callerMode, address msgSender, address txOrigin);\r\n\r\n    // -------- State Snapshots --------\r\n\r\n    // Snapshot the current state of the evm.\r\n    // Returns the id of the snapshot that was created.\r\n    // To revert a snapshot use `revertTo`\r\n    function snapshot() external returns (uint256 snapshotId);\r\n\r\n    // Revert the state of the EVM to a previous snapshot\r\n    // Takes the snapshot id to revert to.\r\n    // Returns true if the revert succeeded, false otherwise.\r\n    //\r\n    // This does not automatically delete the snapshot. To delete the snapshot use `deleteSnapshot` or `revertToAndDelete`\r\n    function revertTo(uint256 snapshotId) external returns (bool success);\r\n\r\n    // Deletes the snapshot.\r\n    // Returns true if the snapshot existed, false otherwise.\r\n    //\r\n    // This does not revert to the state of the snapshot, only deletes it.\r\n    function deleteSnapshot(uint256 snapshotId) external returns (bool success);\r\n\r\n    // Deletes all snapshots.\r\n    function deleteSnapshots() external;\r\n\r\n    // Revert the state of the EVM to a previous snapshot\r\n    // Takes the snapshot id to revert to.\r\n    //\r\n    // This also deletes the snapshot after reverting to its state.\r\n    function revertToAndDelete(uint256 snapshotId) external returns (bool success);\r\n\r\n    // -------- Forking --------\r\n    // --- Creation and Selection ---\r\n\r\n    // Returns the identifier of the currently active fork. Reverts if no fork is currently active.\r\n    function activeFork() external view returns (uint256 forkId);\r\n\r\n    // Creates a new fork with the given endpoint and block and returns the identifier of the fork\r\n    function createFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\r\n\r\n    // Creates a new fork with the given endpoint and the _latest_ block and returns the identifier of the fork\r\n    function createFork(string calldata urlOrAlias) external returns (uint256 forkId);\r\n\r\n    // Creates a new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before the transaction,\r\n    // and returns the identifier of the fork\r\n    function createFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\r\n\r\n    // Creates and also selects a new fork with the given endpoint and block and returns the identifier of the fork\r\n    function createSelectFork(string calldata urlOrAlias, uint256 blockNumber) external returns (uint256 forkId);\r\n\r\n    // Creates and also selects new fork with the given endpoint and at the block the given transaction was mined in, replays all transaction mined in the block before\r\n    // the transaction, returns the identifier of the fork\r\n    function createSelectFork(string calldata urlOrAlias, bytes32 txHash) external returns (uint256 forkId);\r\n\r\n    // Creates and also selects a new fork with the given endpoint and the latest block and returns the identifier of the fork\r\n    function createSelectFork(string calldata urlOrAlias) external returns (uint256 forkId);\r\n\r\n    // Updates the currently active fork to given block number\r\n    // This is similar to `roll` but for the currently active fork\r\n    function rollFork(uint256 blockNumber) external;\r\n\r\n    // Updates the currently active fork to given transaction\r\n    // this will `rollFork` with the number of the block the transaction was mined in and replays all transaction mined before it in the block\r\n    function rollFork(bytes32 txHash) external;\r\n\r\n    // Updates the given fork to given block number\r\n    function rollFork(uint256 forkId, uint256 blockNumber) external;\r\n\r\n    // Updates the given fork to block number of the given transaction and replays all transaction mined before it in the block\r\n    function rollFork(uint256 forkId, bytes32 txHash) external;\r\n\r\n    // Takes a fork identifier created by `createFork` and sets the corresponding forked state as active.\r\n    function selectFork(uint256 forkId) external;\r\n\r\n    // Fetches the given transaction from the active fork and executes it on the current state\r\n    function transact(bytes32 txHash) external;\r\n\r\n    // Fetches the given transaction from the given fork and executes it on the current state\r\n    function transact(uint256 forkId, bytes32 txHash) external;\r\n\r\n    // --- Behavior ---\r\n\r\n    // In forking mode, explicitly grant the given address cheatcode access\r\n    function allowCheatcodes(address account) external;\r\n\r\n    // Marks that the account(s) should use persistent storage across fork swaps in a multifork setup\r\n    // Meaning, changes made to the state of this account will be kept when switching forks\r\n    function makePersistent(address account) external;\r\n    function makePersistent(address account0, address account1) external;\r\n    function makePersistent(address account0, address account1, address account2) external;\r\n    function makePersistent(address[] calldata accounts) external;\r\n\r\n    // Revokes persistent status from the address, previously added via `makePersistent`\r\n    function revokePersistent(address account) external;\r\n    function revokePersistent(address[] calldata accounts) external;\r\n\r\n    // Returns true if the account is marked as persistent\r\n    function isPersistent(address account) external view returns (bool persistent);\r\n\r\n    // ======== Test Assertions and Utilities ========\r\n\r\n    // Expects a call to an address with the specified calldata.\r\n    // Calldata can either be a strict or a partial match\r\n    function expectCall(address callee, bytes calldata data) external;\r\n\r\n    // Expects given number of calls to an address with the specified calldata.\r\n    function expectCall(address callee, bytes calldata data, uint64 count) external;\r\n\r\n    // Expects a call to an address with the specified msg.value and calldata\r\n    function expectCall(address callee, uint256 msgValue, bytes calldata data) external;\r\n\r\n    // Expects given number of calls to an address with the specified msg.value and calldata\r\n    function expectCall(address callee, uint256 msgValue, bytes calldata data, uint64 count) external;\r\n\r\n    // Expect a call to an address with the specified msg.value, gas, and calldata.\r\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data) external;\r\n\r\n    // Expects given number of calls to an address with the specified msg.value, gas, and calldata.\r\n    function expectCall(address callee, uint256 msgValue, uint64 gas, bytes calldata data, uint64 count) external;\r\n\r\n    // Expect a call to an address with the specified msg.value and calldata, and a *minimum* amount of gas.\r\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data) external;\r\n\r\n    // Expect given number of calls to an address with the specified msg.value and calldata, and a *minimum* amount of gas.\r\n    function expectCallMinGas(address callee, uint256 msgValue, uint64 minGas, bytes calldata data, uint64 count)\r\n        external;\r\n\r\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\r\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\r\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans).\r\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData) external;\r\n\r\n    // Same as the previous method, but also checks supplied address against emitting contract.\r\n    function expectEmit(bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData, address emitter)\r\n        external;\r\n\r\n    // Prepare an expected log with all topic and data checks enabled.\r\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\r\n    // logs were emitted in the expected order with the expected topics and data.\r\n    function expectEmit() external;\r\n\r\n    // Same as the previous method, but also checks supplied address against emitting contract.\r\n    function expectEmit(address emitter) external;\r\n\r\n    // Expects an error on next call that exactly matches the revert data.\r\n    function expectRevert(bytes calldata revertData) external;\r\n\r\n    // Expects an error on next call that starts with the revert data.\r\n    function expectRevert(bytes4 revertData) external;\r\n\r\n    // Expects an error on next call with any revert data.\r\n    function expectRevert() external;\r\n\r\n    // Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the current subcontext. If any other\r\n    // memory is written to, the test will fail. Can be called multiple times to add more ranges to the set.\r\n    function expectSafeMemory(uint64 min, uint64 max) external;\r\n\r\n    // Only allows memory writes to offsets [0x00, 0x60) ∪ [min, max) in the next created subcontext.\r\n    // If any other memory is written to, the test will fail. Can be called multiple times to add more ranges\r\n    // to the set.\r\n    function expectSafeMemoryCall(uint64 min, uint64 max) external;\r\n\r\n    // Marks a test as skipped. Must be called at the top of the test.\r\n    function skip(bool skipTest) external;\r\n}\r\n\r\n// src/dependencies/dss-lite-psm/DssLitePsmInstance.sol\r\n// SPDX-FileCopyrightText: © 2023 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\nstruct DssLitePsmInstance {\r\n    address litePsm;\r\n    address mom;\r\n}\r\n\r\n// lib/dss-exec-lib/src/DssExecLib.sol\r\n\r\n//\r\n// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface Initializable {\r\n    function init(bytes32) external;\r\n}\r\n\r\ninterface Authorizable {\r\n    function rely(address) external;\r\n    function deny(address) external;\r\n    function setAuthority(address) external;\r\n}\r\n\r\ninterface Fileable {\r\n    function file(bytes32, address) external;\r\n    function file(bytes32, uint256) external;\r\n    function file(bytes32, bytes32, uint256) external;\r\n    function file(bytes32, bytes32, address) external;\r\n}\r\n\r\ninterface Drippable {\r\n    function drip() external returns (uint256);\r\n    function drip(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface Pricing {\r\n    function poke(bytes32) external;\r\n}\r\n\r\ninterface ERC20 {\r\n    function decimals() external returns (uint8);\r\n}\r\n\r\ninterface DssVat {\r\n    function hope(address) external;\r\n    function nope(address) external;\r\n    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\r\n    function Line() external view returns (uint256);\r\n    function suck(address, address, uint256) external;\r\n}\r\n\r\ninterface ClipLike {\r\n    function vat() external returns (address);\r\n    function dog() external returns (address);\r\n    function spotter() external view returns (address);\r\n    function calc() external view returns (address);\r\n    function ilk() external returns (bytes32);\r\n}\r\n\r\ninterface DogLike {\r\n    function ilks(bytes32) external returns (address clip, uint256 chop, uint256 hole, uint256 dirt);\r\n}\r\n\r\ninterface JoinLike {\r\n    function vat() external returns (address);\r\n    function ilk() external returns (bytes32);\r\n    function gem() external returns (address);\r\n    function dec() external returns (uint256);\r\n    function join(address, uint256) external;\r\n    function exit(address, uint256) external;\r\n}\r\n\r\n// Includes Median and OSM functions\r\ninterface OracleLike_0 {\r\n    function src() external view returns (address);\r\n    function lift(address[] calldata) external;\r\n    function drop(address[] calldata) external;\r\n    function setBar(uint256) external;\r\n    function kiss(address) external;\r\n    function diss(address) external;\r\n    function kiss(address[] calldata) external;\r\n    function diss(address[] calldata) external;\r\n    function orb0() external view returns (address);\r\n    function orb1() external view returns (address);\r\n}\r\n\r\ninterface MomLike {\r\n    function setOsm(bytes32, address) external;\r\n    function setPriceTolerance(address, uint256) external;\r\n}\r\n\r\ninterface RegistryLike {\r\n    function add(address) external;\r\n    function xlip(bytes32) external view returns (address);\r\n}\r\n\r\n// https://github.com/makerdao/dss-chain-log\r\ninterface ChainlogLike {\r\n    function setVersion(string calldata) external;\r\n    function setIPFS(string calldata) external;\r\n    function setSha256sum(string calldata) external;\r\n    function getAddress(bytes32) external view returns (address);\r\n    function setAddress(bytes32, address) external;\r\n    function removeAddress(bytes32) external;\r\n}\r\n\r\ninterface IAMLike {\r\n    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\r\n    function setIlk(bytes32,uint256,uint256,uint256) external;\r\n    function remIlk(bytes32) external;\r\n    function exec(bytes32) external returns (uint256);\r\n}\r\n\r\ninterface LerpFactoryLike {\r\n    function newLerp(bytes32 name_, address target_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n    function newIlkLerp(bytes32 name_, address target_, bytes32 ilk_, bytes32 what_, uint256 startTime_, uint256 start_, uint256 end_, uint256 duration_) external returns (address);\r\n}\r\n\r\ninterface LerpLike {\r\n    function tick() external returns (uint256);\r\n}\r\n\r\ninterface RwaOracleLike {\r\n    function bump(bytes32 ilk, uint256 val) external;\r\n}\r\n\r\nlibrary DssExecLib {\r\n\r\n    /*****************/\r\n    /*** Constants ***/\r\n    /*****************/\r\n    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\r\n\r\n    uint256 constant internal WAD      = 10 ** 18;\r\n    uint256 constant internal RAY      = 10 ** 27;\r\n    uint256 constant internal RAD      = 10 ** 45;\r\n    uint256 constant internal THOUSAND = 10 ** 3;\r\n    uint256 constant internal MILLION  = 10 ** 6;\r\n\r\n    uint256 constant internal BPS_ONE_PCT             = 100;\r\n    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\r\n    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\r\n\r\n    /**********************/\r\n    /*** Math Functions ***/\r\n    /**********************/\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x * WAD + y / 2) / y;\r\n    }\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = (x * RAY + y / 2) / y;\r\n    }\r\n\r\n    /****************************/\r\n    /*** Core Address Helpers ***/\r\n    /****************************/\r\n    function dai()        public view returns (address) { return getChangelogAddress(\"MCD_DAI\"); }\r\n    function mkr()        public view returns (address) { return getChangelogAddress(\"MCD_GOV\"); }\r\n    function vat()        public view returns (address) { return getChangelogAddress(\"MCD_VAT\"); }\r\n    function cat()        public view returns (address) { return getChangelogAddress(\"MCD_CAT\"); }\r\n    function dog()        public view returns (address) { return getChangelogAddress(\"MCD_DOG\"); }\r\n    function jug()        public view returns (address) { return getChangelogAddress(\"MCD_JUG\"); }\r\n    function pot()        public view returns (address) { return getChangelogAddress(\"MCD_POT\"); }\r\n    function vow()        public view returns (address) { return getChangelogAddress(\"MCD_VOW\"); }\r\n    function end()        public view returns (address) { return getChangelogAddress(\"MCD_END\"); }\r\n    function esm()        public view returns (address) { return getChangelogAddress(\"MCD_ESM\"); }\r\n    function reg()        public view returns (address) { return getChangelogAddress(\"ILK_REGISTRY\"); }\r\n    function spotter()    public view returns (address) { return getChangelogAddress(\"MCD_SPOT\"); }\r\n    function flap()       public view returns (address) { return getChangelogAddress(\"MCD_FLAP\"); }\r\n    function flop()       public view returns (address) { return getChangelogAddress(\"MCD_FLOP\"); }\r\n    function osmMom()     public view returns (address) { return getChangelogAddress(\"OSM_MOM\"); }\r\n    function govGuard()   public view returns (address) { return getChangelogAddress(\"GOV_GUARD\"); }\r\n    function flipperMom() public view returns (address) { return getChangelogAddress(\"FLIPPER_MOM\"); }\r\n    function clipperMom() public view returns (address) { return getChangelogAddress(\"CLIPPER_MOM\"); }\r\n    function pauseProxy() public view returns (address) { return getChangelogAddress(\"MCD_PAUSE_PROXY\"); }\r\n    function autoLine()   public view returns (address) { return getChangelogAddress(\"MCD_IAM_AUTO_LINE\"); }\r\n    function daiJoin()    public view returns (address) { return getChangelogAddress(\"MCD_JOIN_DAI\"); }\r\n    function lerpFab()    public view returns (address) { return getChangelogAddress(\"LERP_FAB\"); }\r\n\r\n    function clip(bytes32 _ilk) public view returns (address _clip) {\r\n        _clip = RegistryLike(reg()).xlip(_ilk);\r\n    }\r\n\r\n    function flip(bytes32 _ilk) public view returns (address _flip) {\r\n        _flip = RegistryLike(reg()).xlip(_ilk);\r\n    }\r\n\r\n    function calc(bytes32 _ilk) public view returns (address _calc) {\r\n        _calc = ClipLike(clip(_ilk)).calc();\r\n    }\r\n\r\n    function getChangelogAddress(bytes32 _key) public view returns (address) {\r\n        return ChainlogLike(LOG).getAddress(_key);\r\n    }\r\n\r\n    /****************************/\r\n    /*** Changelog Management ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set an address in the MCD on-chain changelog.\r\n        @param _key Access key for the address (e.g. \"MCD_VAT\")\r\n        @param _val The address associated with the _key\r\n    */\r\n    function setChangelogAddress(bytes32 _key, address _val) public {\r\n        ChainlogLike(LOG).setAddress(_key, _val);\r\n    }\r\n\r\n    /**\r\n        @dev Set version in the MCD on-chain changelog.\r\n        @param _version Changelog version (e.g. \"1.1.2\")\r\n    */\r\n    function setChangelogVersion(string memory _version) public {\r\n        ChainlogLike(LOG).setVersion(_version);\r\n    }\r\n    /**\r\n        @dev Set IPFS hash of IPFS changelog in MCD on-chain changelog.\r\n        @param _ipfsHash IPFS hash (e.g. \"QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\")\r\n    */\r\n    function setChangelogIPFS(string memory _ipfsHash) public {\r\n        ChainlogLike(LOG).setIPFS(_ipfsHash);\r\n    }\r\n    /**\r\n        @dev Set SHA256 hash in MCD on-chain changelog.\r\n        @param _SHA256Sum SHA256 hash (e.g. \"e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b\")\r\n    */\r\n    function setChangelogSHA256(string memory _SHA256Sum) public {\r\n        ChainlogLike(LOG).setSha256sum(_SHA256Sum);\r\n    }\r\n\r\n    /**********************/\r\n    /*** Authorizations ***/\r\n    /**********************/\r\n    /**\r\n        @dev Give an address authorization to perform auth actions on the contract.\r\n        @param _base   The address of the contract where the authorization will be set\r\n        @param _ward   Address to be authorized\r\n    */\r\n    function authorize(address _base, address _ward) public {\r\n        Authorizable(_base).rely(_ward);\r\n    }\r\n    /**\r\n        @dev Revoke contract authorization from an address.\r\n        @param _base   The address of the contract where the authorization will be revoked\r\n        @param _ward   Address to be deauthorized\r\n    */\r\n    function deauthorize(address _base, address _ward) public {\r\n        Authorizable(_base).deny(_ward);\r\n    }\r\n    /**\r\n        @dev Give an address authorization to perform auth actions on the contract.\r\n        @param _base   The address of the contract with a `setAuthority` pattern\r\n        @param _authority   Address to be authorized\r\n    */\r\n    function setAuthority(address _base, address _authority) public {\r\n        Authorizable(_base).setAuthority(_authority);\r\n    }\r\n    /**\r\n        @dev Delegate vat authority to the specified address.\r\n        @param _usr Address to be authorized\r\n    */\r\n    function delegateVat(address _usr) public {\r\n        DssVat(vat()).hope(_usr);\r\n    }\r\n    /**\r\n        @dev Revoke vat authority to the specified address.\r\n        @param _usr Address to be deauthorized\r\n    */\r\n    function undelegateVat(address _usr) public {\r\n        DssVat(vat()).nope(_usr);\r\n    }\r\n\r\n    /******************************/\r\n    /*** OfficeHours Management ***/\r\n    /******************************/\r\n\r\n    /**\r\n        @dev Returns true if a time is within office hours range\r\n        @param _ts           The timestamp to check, usually block.timestamp\r\n        @param _officeHours  true if office hours is enabled.\r\n        @return              true if time is in castable range\r\n    */\r\n    function canCast(uint40 _ts, bool _officeHours) public pure returns (bool) {\r\n        if (_officeHours) {\r\n            uint256 day = (_ts / 1 days + 3) % 7;\r\n            if (day \u003e= 5)                 { return false; }  // Can only be cast on a weekday\r\n            uint256 hour = _ts / 1 hours % 24;\r\n            if (hour \u003c 14 || hour \u003e= 21)  { return false; }  // Outside office hours\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n        @dev Calculate the next available cast time in epoch seconds\r\n        @param _eta          The scheduled time of the spell plus the pause delay\r\n        @param _ts           The current timestamp, usually block.timestamp\r\n        @param _officeHours  true if office hours is enabled.\r\n        @return castTime     The next available cast timestamp\r\n    */\r\n    function nextCastTime(uint40 _eta, uint40 _ts, bool _officeHours) public pure returns (uint256 castTime) {\r\n        require(_eta != 0);  // \"DssExecLib/invalid eta\"\r\n        require(_ts  != 0);  // \"DssExecLib/invalid ts\"\r\n        castTime = _ts \u003e _eta ? _ts : _eta; // Any day at XX:YY\r\n\r\n        if (_officeHours) {\r\n            uint256 day    = (castTime / 1 days + 3) % 7;\r\n            uint256 hour   = castTime / 1 hours % 24;\r\n            uint256 minute = castTime / 1 minutes % 60;\r\n            uint256 second = castTime % 60;\r\n\r\n            if (day \u003e= 5) {\r\n                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\r\n                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\r\n                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\r\n            } else {\r\n                if (hour \u003e= 21) {\r\n                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\r\n                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                } else if (hour \u003c 14) {\r\n                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\r\n                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**************************/\r\n    /*** Accumulating Rates ***/\r\n    /**************************/\r\n    /**\r\n        @dev Update rate accumulation for the Dai Savings Rate (DSR).\r\n    */\r\n    function accumulateDSR() public {\r\n        Drippable(pot()).drip();\r\n    }\r\n    /**\r\n        @dev Update rate accumulation for the stability fees of a given collateral type.\r\n        @param _ilk   Collateral type\r\n    */\r\n    function accumulateCollateralStabilityFees(bytes32 _ilk) public {\r\n        Drippable(jug()).drip(_ilk);\r\n    }\r\n\r\n    /*********************/\r\n    /*** Price Updates ***/\r\n    /*********************/\r\n    /**\r\n        @dev Update price of a given collateral type.\r\n        @param _ilk   Collateral type\r\n    */\r\n    function updateCollateralPrice(bytes32 _ilk) public {\r\n        Pricing(spotter()).poke(_ilk);\r\n    }\r\n\r\n    /****************************/\r\n    /*** System Configuration ***/\r\n    /****************************/\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Calc contract in Clip)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_what, _addr);\r\n    }\r\n    /**\r\n        @dev Set a contract in another contract, defining the relationship (ex. set a new Calc contract in a Clip)\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _ilk    Collateral type\r\n        @param _what   Name of contract to file\r\n        @param _addr   Address of contract to file\r\n    */\r\n    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\r\n        Fileable(_base).file(_ilk, _what, _addr);\r\n    }\r\n    /**\r\n        @dev Set a value in a contract, via a governance authorized File pattern.\r\n        @param _base   The address of the contract where the new contract address will be filed\r\n        @param _what   Name of tag for the value (e.x. \"Line\")\r\n        @param _amt    The value to set or update\r\n    */\r\n    function setValue(address _base, bytes32 _what, uint256 _amt) public {\r\n        Fileable(_base).file(_what, _amt);\r\n    }\r\n    /**\r\n        @dev Set an ilk-specific value in a contract, via a governance authorized File pattern.\r\n        @param _base   The address of the contract where the new value will be filed\r\n        @param _ilk    Collateral type\r\n        @param _what   Name of tag for the value (e.x. \"Line\")\r\n        @param _amt    The value to set or update\r\n    */\r\n    function setValue(address _base, bytes32 _ilk, bytes32 _what, uint256 _amt) public {\r\n        Fileable(_base).file(_ilk, _what, _amt);\r\n    }\r\n\r\n    /******************************/\r\n    /*** System Risk Parameters ***/\r\n    /******************************/\r\n    // function setGlobalDebtCeiling(uint256 _amount) public { setGlobalDebtCeiling(vat(), _amount); }\r\n    /**\r\n        @dev Set the global debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-global-Line-precision\"\r\n        setValue(vat(), \"Line\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to add in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function increaseGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-Line-increase-precision\"\r\n        address _vat = vat();\r\n        setValue(_vat, \"Line\", DssVat(_vat).Line() + _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to reduce in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function decreaseGlobalDebtCeiling(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-Line-decrease-precision\"\r\n        address _vat = vat();\r\n        setValue(_vat, \"Line\", DssVat(_vat).Line() - _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the Dai Savings Rate. See: docs/rates.txt\r\n        @param _rate   The accumulated rate (ex. 4% =\u003e 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate interest owed\r\n    */\r\n    function setDSR(uint256 _rate, bool _doDrip) public {\r\n        require((_rate \u003e= RAY) \u0026\u0026 (_rate \u003c= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/dsr-out-of-bounds\"\r\n        if (_doDrip) Drippable(pot()).drip();\r\n        setValue(pot(), \"dsr\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusAuctionAmount(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-vow-bump-precision\"\r\n        setValue(vow(), \"bump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setSurplusBuffer(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-vow-hump-precision\"\r\n        setValue(vow(), \"hump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinSurplusAuctionBidIncrease(uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flap-beg-precision\"\r\n        setValue(flap(), \"beg\", WAD + wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set bid duration for surplus auctions.\r\n        @param _duration Amount of time for bids. (in seconds)\r\n    */\r\n    function setSurplusAuctionBidDuration(uint256 _duration) public {\r\n        setValue(flap(), \"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for surplus auctions.\r\n        @param _duration Amount of time for auctions. (in seconds)\r\n    */\r\n    function setSurplusAuctionDuration(uint256 _duration) public {\r\n        setValue(flap(), \"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the number of seconds that pass before system debt is auctioned for MKR tokens.\r\n        @param _duration Duration in seconds\r\n    */\r\n    function setDebtAuctionDelay(uint256 _duration) public {\r\n        setValue(vow(), \"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setDebtAuctionDAIAmount(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-vow-sump-precision\"\r\n        setValue(vow(), \"sump\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in MKR (ex. 250 MKR amount == 250)\r\n    */\r\n    function setDebtAuctionMKRAmount(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-vow-dump-precision\"\r\n        setValue(vow(), \"dump\", _amount * WAD);\r\n    }\r\n    /**\r\n        @dev Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setMinDebtAuctionBidIncrease(uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flop-beg-precision\"\r\n        setValue(flop(), \"beg\", WAD + wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set bid duration for debt auctions.\r\n        @param _duration Amount of time for bids. (seconds)\r\n    */\r\n    function setDebtAuctionBidDuration(uint256 _duration) public {\r\n        require(_duration \u003c type(uint48).max);  // \"LibDssExec/incorrect-flop-ttl-precision\"\r\n        setValue(flop(), \"ttl\", _duration);\r\n    }\r\n    /**\r\n        @dev Set total auction duration for debt auctions.\r\n        @param _duration Amount of time for auctions. (seconds)\r\n    */\r\n    function setDebtAuctionDuration(uint256 _duration) public {\r\n        require(_duration \u003c type(uint48).max);  // \"LibDssExec/incorrect-flop-tau-precision\"\r\n        setValue(flop(), \"tau\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.\r\n        @dev MKR amount is increased by this rate every \"tick\" (if auction duration has passed and no one has bid on the MKR)\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setDebtAuctionMKRIncreaseRate(uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-flop-pad-precision\"\r\n        setValue(flop(), \"pad\", WAD + wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\r\n    */\r\n    function setMaxTotalDAILiquidationAmount(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-dog-Hole-precision\"\r\n        setValue(dog(), \"Hole\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev (LIQ 1.2) Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\r\n        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\r\n    */\r\n    function setMaxTotalDAILiquidationAmountLEGACY(uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-cat-box-amount\"\r\n        setValue(cat(), \"box\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.\r\n        @param _duration Time in seconds to set for ES processing time\r\n    */\r\n    function setEmergencyShutdownProcessingTime(uint256 _duration) public {\r\n        setValue(end(), \"wait\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the global stability fee (is not typically used, currently is 0).\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l \u003c\u003c\u003c 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n        @param _rate   The accumulated rate (ex. 4% =\u003e 1000000001243680656318820312)\r\n    */\r\n    function setGlobalStabilityFee(uint256 _rate) public {\r\n        require((_rate \u003e= RAY) \u0026\u0026 (_rate \u003c= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/global-stability-fee-out-of-bounds\"\r\n        setValue(jug(), \"base\", _rate);\r\n    }\r\n    /**\r\n        @dev Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is value * RAY / 1000\r\n        @param _value The value to set as integer (x1000) (ex. $1.025 == 1025)\r\n    */\r\n    function setDAIReferenceValue(uint256 _value) public {\r\n        require(_value \u003c WAD);  // \"LibDssExec/incorrect-par-precision\"\r\n        setValue(spotter(), \"par\", rdiv(_value, 1000));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Management ***/\r\n    /*****************************/\r\n    /**\r\n        @dev Set a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        setValue(vat(), _ilk, \"line\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to increase in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, increases the global debt ceiling by _amount\r\n    */\r\n    function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        address _vat = vat();\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        setValue(_vat, _ilk, \"line\", line_ + _amount * RAD);\r\n        if (_global) { increaseGlobalDebtCeiling(_amount); }\r\n    }\r\n    /**\r\n        @dev Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\r\n        @param _global If true, decreases the global debt ceiling by _amount\r\n    */\r\n    function decreaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        address _vat = vat();\r\n        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\r\n        setValue(_vat, _ilk, \"line\", line_ - _amount * RAD);\r\n        if (_global) { decreaseGlobalDebtCeiling(_amount); }\r\n    }\r\n    /**\r\n        @dev Set a RWA collateral debt ceiling by specifying its new oracle price.\r\n        @param _ilk      The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _ceiling  The new debt ceiling in natural units (e.g. set 10m DAI as 10_000_000)\r\n        @param _price    The new oracle price in natural units\r\n        @dev note: _price should enable DAI to be drawn over the loan period while taking into\r\n                   account the configured ink amount, interest rate and liquidation ratio\r\n        @dev note: _price * WAD should be greater than or equal to the current oracle price\r\n    */\r\n    function setRWAIlkDebtCeiling(bytes32 _ilk, uint256 _ceiling, uint256 _price) public {\r\n        require(_price \u003c WAD);\r\n        setIlkDebtCeiling(_ilk, _ceiling);\r\n        RwaOracleLike(getChangelogAddress(\"MIP21_LIQUIDATION_ORACLE\")).bump(_ilk, _price * WAD);\r\n        updateCollateralPrice(_ilk);\r\n    }\r\n    /**\r\n        @dev Set the parameters for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n        @param _gap    The amount of Dai per step (ex. 5m Dai == 5000000)\r\n        @param _ttl    The amount of time (in seconds)\r\n    */\r\n    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-auto-line-amount-precision\"\r\n        require(_gap \u003c WAD);  // \"LibDssExec/incorrect-auto-line-gap-precision\"\r\n        IAMLike(autoLine()).setIlk(_ilk, _amount * RAD, _gap * RAD, _ttl);\r\n    }\r\n    /**\r\n        @dev Set the debt ceiling for an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line without updating the time values\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\r\n    */\r\n    function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {\r\n        address _autoLine = autoLine();\r\n        (, uint256 gap, uint48 ttl,,) = IAMLike(_autoLine).ilks(_ilk);\r\n        require(gap != 0 \u0026\u0026 ttl != 0);  // \"LibDssExec/auto-line-not-configured\"\r\n        IAMLike(_autoLine).setIlk(_ilk, _amount * RAD, uint256(gap), uint256(ttl));\r\n    }\r\n    /**\r\n        @dev Remove an ilk in the \"MCD_IAM_AUTO_LINE\" auto-line\r\n        @param _ilk    The ilk to remove (ex. bytes32(\"ETH-A\"))\r\n    */\r\n    function removeIlkFromAutoLine(bytes32 _ilk) public {\r\n        IAMLike(autoLine()).remIlk(_ilk);\r\n    }\r\n    /**\r\n        @dev Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-ilk-dust-precision\"\r\n        (,, uint256 _hole,) = DogLike(dog()).ilks(_ilk);\r\n        require(_amount \u003c= _hole / RAD);  // Ensure ilk.hole \u003e= dust\r\n        setValue(vat(), _ilk, \"dust\", _amount * RAD);\r\n        (bool ok,) = clip(_ilk).call(abi.encodeWithSignature(\"upchost()\")); ok;\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)\r\n    */\r\n    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-ilk-chop-precision\"\r\n        setValue(dog(), _ilk, \"chop\", WAD + wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n        (bool ok,) = clip(_ilk).call(abi.encodeWithSignature(\"upchost()\")); ok;\r\n    }\r\n    /**\r\n        @dev Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-ilk-hole-precision\"\r\n        setValue(dog(), _ilk, \"hole\", _amount * RAD);\r\n    }\r\n    /**\r\n        @dev Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is pct * RAY / 10,000\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)\r\n    */\r\n    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c 10 * BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-ilk-mat-precision\" // Fails if pct \u003e= 1000%\r\n        require(_pct_bps \u003e= BPS_ONE_HUNDRED_PCT); // the liquidation ratio has to be bigger or equal to 100%\r\n        setValue(spotter(), _ilk, \"mat\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n    /**\r\n        @dev Set an auction starting multiplier. Amount will be converted to the correct internal precision.\r\n        @dev Equation used for conversion is pct * RAY / 10,000\r\n        @param _ilk      The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps  The pct, in basis points, to set in integer form (x100). (ex. 1.3x starting multiplier = 130% = 13000)\r\n    */\r\n    function setStartingPriceMultiplicativeFactor(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c 10 * BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-ilk-mat-precision\" // Fails if gt 10x\r\n        require(_pct_bps \u003e= BPS_ONE_HUNDRED_PCT); // fail if start price is less than OSM price\r\n        setValue(clip(_ilk), \"buf\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Set the amout of time before an auction resets.\r\n        @param _ilk      The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _duration Amount of time before auction resets (in seconds).\r\n    */\r\n    function setAuctionTimeBeforeReset(bytes32 _ilk, uint256 _duration) public {\r\n        setValue(clip(_ilk), \"tail\", _duration);\r\n    }\r\n\r\n    /**\r\n        @dev Percentage drop permitted before auction reset\r\n        @param _ilk     The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps The pct, in basis points, of drop to permit (x100).\r\n    */\r\n    function setAuctionPermittedDrop(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-clip-cusp-value\"\r\n        setValue(clip(_ilk), \"cusp\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Percentage of tab to suck from vow to incentivize keepers. Amount will be converted to the correct internal precision.\r\n        @param _ilk     The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _pct_bps The pct, in basis points, of the tab to suck. (0.01% == 1)\r\n    */\r\n    function setKeeperIncentivePercent(bytes32 _ilk, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT); // \"LibDssExec/incorrect-clip-chip-precision\"\r\n        setValue(clip(_ilk), \"chip\", wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Set max DAI amount for flat rate keeper incentive. Amount will be converted to the correct internal precision.\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\"))\r\n        @param _amount The amount to set in DAI (ex. 1000 DAI amount == 1000)\r\n    */\r\n    function setKeeperIncentiveFlatRate(bytes32 _ilk, uint256 _amount) public {\r\n        require(_amount \u003c WAD); // \"LibDssExec/incorrect-clip-tip-precision\"\r\n        setValue(clip(_ilk), \"tip\", _amount * RAD);\r\n    }\r\n\r\n    /**\r\n        @dev Sets the circuit breaker price tolerance in the clipper mom.\r\n            This is somewhat counter-intuitive,\r\n             to accept a 25% price drop, use a value of 75%\r\n        @param _clip    The clipper to set the tolerance for\r\n        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\r\n    */\r\n    function setLiquidationBreakerPriceTolerance(address _clip, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT);  // \"LibDssExec/incorrect-clippermom-price-tolerance\"\r\n        MomLike(clipperMom()).setPriceTolerance(_clip, rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /**\r\n        @dev Set the stability fee for a given ilk.\r\n            Many of the settings that change weekly rely on the rate accumulator\r\n            described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n            To check this yourself, use the following rate calculation (example 8%):\r\n\r\n            $ bc -l \u003c\u003c\u003c 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n\r\n            A table of rates can also be found at:\r\n            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\r\n\r\n        @param _ilk    The ilk to update (ex. bytes32(\"ETH-A\") )\r\n        @param _rate   The accumulated rate (ex. 4% =\u003e 1000000001243680656318820312)\r\n        @param _doDrip `true` to accumulate stability fees for the collateral\r\n    */\r\n    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {\r\n        require((_rate \u003e= RAY) \u0026\u0026 (_rate \u003c= RATES_ONE_HUNDRED_PCT));  // \"LibDssExec/ilk-stability-fee-out-of-bounds\"\r\n        address _jug = jug();\r\n        if (_doDrip) Drippable(_jug).drip(_ilk);\r\n\r\n        setValue(_jug, _ilk, \"duty\", _rate);\r\n    }\r\n\r\n    /*************************/\r\n    /*** Abacus Management ***/\r\n    /*************************/\r\n\r\n    /**\r\n        @dev Set the number of seconds from the start when the auction reaches zero price.\r\n        @dev Abacus:LinearDecrease only.\r\n        @param _calc     The address of the LinearDecrease pricing contract\r\n        @param _duration Amount of time for auctions.\r\n    */\r\n    function setLinearDecrease(address _calc, uint256 _duration) public {\r\n        setValue(_calc, \"tau\", _duration);\r\n    }\r\n\r\n    /**\r\n        @dev Set the number of seconds for each price step.\r\n        @dev Abacus:StairstepExponentialDecrease only.\r\n        @param _calc     The address of the StairstepExponentialDecrease pricing contract\r\n        @param _duration Length of time between price drops [seconds]\r\n        @param _pct_bps Per-step multiplicative factor in basis points. (ex. 99% == 9900)\r\n    */\r\n    function setStairstepExponentialDecrease(address _calc, uint256 _duration, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT); // DssExecLib/cut-too-high\r\n        setValue(_calc, \"cut\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n        setValue(_calc, \"step\", _duration);\r\n    }\r\n    /**\r\n        @dev Set the number of seconds for each price step. (99% cut = 1% price drop per step)\r\n             Amounts will be converted to the correct internal precision.\r\n        @dev Abacus:ExponentialDecrease only\r\n        @param _calc     The address of the ExponentialDecrease pricing contract\r\n        @param _pct_bps Per-step multiplicative factor in basis points. (ex. 99% == 9900)\r\n    */\r\n    function setExponentialDecrease(address _calc, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT); // DssExecLib/cut-too-high\r\n        setValue(_calc, \"cut\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /*************************/\r\n    /*** Oracle Management ***/\r\n    /*************************/\r\n    /**\r\n        @dev Allows an oracle to read prices from its source feeds\r\n        @param _oracle  An OSM or LP oracle contract\r\n    */\r\n    function whitelistOracleMedians(address _oracle) public {\r\n        (bool ok, bytes memory data) = _oracle.call(abi.encodeWithSignature(\"orb0()\"));\r\n        if (ok) {\r\n            // Token is an LP oracle\r\n            address median0 = abi.decode(data, (address));\r\n            addReaderToWhitelistCall(median0, _oracle);\r\n            addReaderToWhitelistCall(OracleLike_0(_oracle).orb1(), _oracle);\r\n        } else {\r\n            // Standard OSM\r\n            addReaderToWhitelistCall(OracleLike_0(_oracle).src(), _oracle);\r\n        }\r\n    }\r\n    /**\r\n        @dev Adds an address to the OSM or Median's reader whitelist, allowing the address to read prices.\r\n        @param _oracle        Oracle Security Module (OSM) or Median core contract address\r\n        @param _reader     Address to add to whitelist\r\n    */\r\n    function addReaderToWhitelist(address _oracle, address _reader) public {\r\n        OracleLike_0(_oracle).kiss(_reader);\r\n    }\r\n    /**\r\n        @dev Removes an address to the OSM or Median's reader whitelist, disallowing the address to read prices.\r\n        @param _oracle     Oracle Security Module (OSM) or Median core contract address\r\n        @param _reader     Address to remove from whitelist\r\n    */\r\n    function removeReaderFromWhitelist(address _oracle, address _reader) public {\r\n        OracleLike_0(_oracle).diss(_reader);\r\n    }\r\n    /**\r\n        @dev Adds an address to the OSM or Median's reader whitelist, allowing the address to read prices.\r\n        @param _oracle  OSM or Median core contract address\r\n        @param _reader  Address to add to whitelist\r\n    */\r\n    function addReaderToWhitelistCall(address _oracle, address _reader) public {\r\n        (bool ok,) = _oracle.call(abi.encodeWithSignature(\"kiss(address)\", _reader)); ok;\r\n    }\r\n    /**\r\n        @dev Removes an address to the OSM or Median's reader whitelist, disallowing the address to read prices.\r\n        @param _oracle  Oracle Security Module (OSM) or Median core contract address\r\n        @param _reader  Address to remove from whitelist\r\n    */\r\n    function removeReaderFromWhitelistCall(address _oracle, address _reader) public {\r\n        (bool ok,) = _oracle.call(abi.encodeWithSignature(\"diss(address)\", _reader)); ok;\r\n    }\r\n    /**\r\n        @dev Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.\r\n        @param _median     Median core contract address\r\n        @param _minQuorum  Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)\r\n    */\r\n    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\r\n        OracleLike_0(_median).setBar(_minQuorum);\r\n    }\r\n    /**\r\n        @dev Add OSM address to OSM mom, allowing it to be frozen by governance.\r\n        @param _osm        Oracle Security Module (OSM) core contract address\r\n        @param _ilk        Collateral type using OSM\r\n    */\r\n    function allowOSMFreeze(address _osm, bytes32 _ilk) public {\r\n        MomLike(osmMom()).setOsm(_ilk, _osm);\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Direct Deposit Module ***/\r\n    /*****************************/\r\n\r\n    /**\r\n        @dev Sets the target rate threshold for a dai direct deposit module (d3m)\r\n        @dev Aave: Targets the variable borrow rate\r\n        @param _d3m     The address of the D3M contract\r\n        @param _pct_bps Target rate in basis points. (ex. 4% == 400)\r\n    */\r\n    function setD3MTargetInterestRate(address _d3m, uint256 _pct_bps) public {\r\n        require(_pct_bps \u003c BPS_ONE_HUNDRED_PCT); // DssExecLib/bar-too-high\r\n        setValue(_d3m, \"bar\", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\r\n    }\r\n\r\n    /*****************************/\r\n    /*** Collateral Onboarding ***/\r\n    /*****************************/\r\n\r\n    /**\r\n        @dev Performs basic functions and sanity checks to add a new collateral type to the MCD system\r\n        @param _ilk      Collateral type key code [Ex. \"ETH-A\"]\r\n        @param _gem      Address of token contract\r\n        @param _join     Address of join adapter\r\n        @param _clip     Address of liquidation agent\r\n        @param _calc     Address of the pricing function\r\n        @param _pip      Address of price feed\r\n    */\r\n    function addCollateralBase(\r\n        bytes32 _ilk,\r\n        address _gem,\r\n        address _join,\r\n        address _clip,\r\n        address _calc,\r\n        address _pip\r\n    ) public {\r\n        // Sanity checks\r\n        address _vat = vat();\r\n        address _dog = dog();\r\n        address _spotter = spotter();\r\n        require(JoinLike(_join).vat() == _vat);     // \"join-vat-not-match\"\r\n        require(JoinLike(_join).ilk() == _ilk);     // \"join-ilk-not-match\"\r\n        require(JoinLike(_join).gem() == _gem);     // \"join-gem-not-match\"\r\n        require(JoinLike(_join).dec() ==\r\n                   ERC20(_gem).decimals());         // \"join-dec-not-match\"\r\n        require(ClipLike(_clip).vat() == _vat);     // \"clip-vat-not-match\"\r\n        require(ClipLike(_clip).dog() == _dog);     // \"clip-dog-not-match\"\r\n        require(ClipLike(_clip).ilk() == _ilk);     // \"clip-ilk-not-match\"\r\n        require(ClipLike(_clip).spotter() == _spotter);  // \"clip-ilk-not-match\"\r\n\r\n        // Set the token PIP in the Spotter\r\n        setContract(spotter(), _ilk, \"pip\", _pip);\r\n\r\n        // Set the ilk Clipper in the Dog\r\n        setContract(_dog, _ilk, \"clip\", _clip);\r\n        // Set vow in the clip\r\n        setContract(_clip, \"vow\", vow());\r\n        // Set the pricing function for the Clipper\r\n        setContract(_clip, \"calc\", _calc);\r\n\r\n        // Init ilk in Vat \u0026 Jug\r\n        Initializable(_vat).init(_ilk);  // Vat\r\n        Initializable(jug()).init(_ilk);  // Jug\r\n\r\n        // Allow ilk Join to modify Vat registry\r\n        authorize(_vat, _join);\r\n        // Allow ilk Join to suck dai for keepers\r\n        authorize(_vat, _clip);\r\n        // Allow the ilk Clipper to reduce the Dog hole on deal()\r\n        authorize(_dog, _clip);\r\n        // Allow Dog to kick auctions in ilk Clipper\r\n        authorize(_clip, _dog);\r\n        // Allow End to yank auctions in ilk Clipper\r\n        authorize(_clip, end());\r\n        // Authorize the ESM to execute in the clipper\r\n        authorize(_clip, esm());\r\n\r\n        // Add new ilk to the IlkRegistry\r\n        RegistryLike(reg()).add(_join);\r\n    }\r\n\r\n    // Complete collateral onboarding logic.\r\n    function addNewCollateral(CollateralOpts memory co) public {\r\n        // Add the collateral to the system.\r\n        addCollateralBase(co.ilk, co.gem, co.join, co.clip, co.calc, co.pip);\r\n        address clipperMom_ = clipperMom();\r\n\r\n        if (!co.isLiquidatable) {\r\n            // Disallow Dog to kick auctions in ilk Clipper\r\n            setValue(co.clip, \"stopped\", 3);\r\n        } else {\r\n            // Grant ClipperMom access to the ilk Clipper\r\n            authorize(co.clip, clipperMom_);\r\n        }\r\n\r\n        if(co.isOSM) { // If pip == OSM\r\n            // Allow OsmMom to access to the TOKEN OSM\r\n            authorize(co.pip, osmMom());\r\n            if (co.whitelistOSM) { // If median is src in OSM\r\n                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\r\n                whitelistOracleMedians(co.pip);\r\n            }\r\n            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToWhitelist(co.pip, spotter());\r\n            // Whitelist Clipper on pip\r\n            addReaderToWhitelist(co.pip, co.clip);\r\n            // Allow the clippermom to access the feed\r\n            addReaderToWhitelist(co.pip, clipperMom_);\r\n            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\r\n            addReaderToWhitelist(co.pip, end());\r\n            // Set TOKEN OSM in the OsmMom for new ilk\r\n            allowOSMFreeze(co.pip, co.ilk);\r\n        }\r\n        // Increase the global debt ceiling by the ilk ceiling\r\n        increaseGlobalDebtCeiling(co.ilkDebtCeiling);\r\n\r\n        // Set the ilk debt ceiling\r\n        setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\r\n\r\n        // Set the hole size\r\n        setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\r\n\r\n        // Set the ilk dust\r\n        setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\r\n\r\n        // Set the ilk liquidation penalty\r\n        setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\r\n\r\n        // Set the ilk stability fee\r\n        setIlkStabilityFee(co.ilk, co.ilkStabilityFee, true);\r\n\r\n        // Set the auction starting price multiplier\r\n        setStartingPriceMultiplicativeFactor(co.ilk, co.startingPriceFactor);\r\n\r\n        // Set the amount of time before an auction resets.\r\n        setAuctionTimeBeforeReset(co.ilk, co.auctionDuration);\r\n\r\n        // Set the allowed auction drop percentage before reset\r\n        setAuctionPermittedDrop(co.ilk, co.permittedDrop);\r\n\r\n        // Set the ilk min collateralization ratio\r\n        setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\r\n\r\n        // Set the price tolerance in the liquidation circuit breaker\r\n        setLiquidationBreakerPriceTolerance(co.clip, co.breakerTolerance);\r\n\r\n        // Set a flat rate for the keeper reward\r\n        setKeeperIncentiveFlatRate(co.ilk, co.kprFlatReward);\r\n\r\n        // Set the percentage of liquidation as keeper award\r\n        setKeeperIncentivePercent(co.ilk, co.kprPctReward);\r\n\r\n        // Update ilk spot value in Vat\r\n        updateCollateralPrice(co.ilk);\r\n    }\r\n\r\n    /***************/\r\n    /*** Payment ***/\r\n    /***************/\r\n    /**\r\n        @dev Send a payment in ERC20 DAI from the surplus buffer.\r\n        @param _target The target address to send the DAI to.\r\n        @param _amount The amount to send in DAI (ex. 10m DAI amount == 10000000)\r\n    */\r\n    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {\r\n        require(_amount \u003c WAD);  // \"LibDssExec/incorrect-ilk-line-precision\"\r\n        DssVat(vat()).suck(vow(), address(this), _amount * RAD);\r\n        JoinLike(daiJoin()).exit(_target, _amount * WAD);\r\n    }\r\n\r\n    /************/\r\n    /*** Misc ***/\r\n    /************/\r\n    /**\r\n        @dev Initiate linear interpolation on an administrative value over time.\r\n        @param _name        The label for this lerp instance\r\n        @param _target      The target contract\r\n        @param _what        The target parameter to adjust\r\n        @param _startTime   The time for this lerp\r\n        @param _start       The start value for the target parameter\r\n        @param _end         The end value for the target parameter\r\n        @param _duration    The duration of the interpolation\r\n    */\r\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {\r\n        address lerp = LerpFactoryLike(lerpFab()).newLerp(_name, _target, _what, _startTime, _start, _end, _duration);\r\n        Authorizable(_target).rely(lerp);\r\n        LerpLike(lerp).tick();\r\n        return lerp;\r\n    }\r\n    /**\r\n        @dev Initiate linear interpolation on an administrative value over time.\r\n        @param _name        The label for this lerp instance\r\n        @param _target      The target contract\r\n        @param _ilk         The ilk to target\r\n        @param _what        The target parameter to adjust\r\n        @param _startTime   The time for this lerp\r\n        @param _start       The start value for the target parameter\r\n        @param _end         The end value for the target parameter\r\n        @param _duration    The duration of the interpolation\r\n    */\r\n    function linearInterpolation(bytes32 _name, address _target, bytes32 _ilk, bytes32 _what, uint256 _startTime, uint256 _start, uint256 _end, uint256 _duration) public returns (address) {\r\n        address lerp = LerpFactoryLike(lerpFab()).newIlkLerp(_name, _target, _ilk, _what, _startTime, _start, _end, _duration);\r\n        Authorizable(_target).rely(lerp);\r\n        LerpLike(lerp).tick();\r\n        return lerp;\r\n    }\r\n}\r\n\r\n// lib/dss-exec-lib/src/DssAction.sol\r\n\r\n//\r\n// DssAction.sol -- DSS Executive Spell Actions\r\n//\r\n// Copyright (C) 2020-2022 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface OracleLike_1 {\r\n    function src() external view returns (address);\r\n}\r\n\r\nabstract contract DssAction {\r\n\r\n    using DssExecLib for *;\r\n\r\n    // Modifier used to limit execution time when office hours is enabled\r\n    modifier limited {\r\n        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), \"Outside office hours\");\r\n        _;\r\n    }\r\n\r\n    // Office Hours defaults to true by default.\r\n    //   To disable office hours, override this function and\r\n    //    return false in the inherited action.\r\n    function officeHours() public view virtual returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // DssExec calls execute. We limit this function subject to officeHours modifier.\r\n    function execute() external limited {\r\n        actions();\r\n    }\r\n\r\n    // DssAction developer must override `actions()` and place all actions to be called inside.\r\n    //   The DssExec function will call this subject to the officeHours limiter\r\n    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\r\n    function actions() public virtual;\r\n\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: seth keccak -- \"$(wget https://\u003cexecutive-vote-canonical-post\u003e -q -O - 2\u003e/dev/null)\"\r\n    function description() external view virtual returns (string memory);\r\n\r\n    // Returns the next available cast time\r\n    function nextCastTime(uint256 eta) external view returns (uint256 castTime) {\r\n        require(eta \u003c= type(uint40).max);\r\n        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\r\n    }\r\n}\r\n\r\n// lib/dss-test/lib/dss-interfaces/src/Interfaces.sol\r\n\r\n// MIP21 Abstracts\r\n\r\n// Partial DSS Abstracts\r\n\r\n// lib/dss-test/src/GodMode.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\nlibrary GodMode {\r\n\r\n    address constant public VM_ADDR = address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\r\n\r\n    function vm() internal pure returns (Vm) {\r\n        return Vm(VM_ADDR);\r\n    }\r\n\r\n    /// @dev Set the ward for `base` for the specified `target`\r\n    /// Note this only works for contracts compiled under Solidity. Vyper contracts use a different storage structure for maps.\r\n    /// See https://twitter.com/msolomon44/status/1420137730009300992?t=WO2052xM3AzUCL7o7Pfkow\u0026s=19\r\n    function setWard(address base, address target, uint256 val) internal {\r\n\r\n        // Edge case - ward is already set\r\n        if (WardsAbstract(base).wards(target) == val) return;\r\n\r\n        for (int i = 0; i \u003c 100; i++) {\r\n            // Scan the storage for the ward storage slot\r\n            bytes32 prevValue = vm().load(\r\n                address(base),\r\n                keccak256(abi.encode(target, uint256(i)))\r\n            );\r\n            vm().store(\r\n                address(base),\r\n                keccak256(abi.encode(target, uint256(i))),\r\n                bytes32(uint256(val))\r\n            );\r\n            if (WardsAbstract(base).wards(target) == val) {\r\n                // Found it\r\n                return;\r\n            } else {\r\n                // Keep going after restoring the original value\r\n                vm().store(\r\n                    address(base),\r\n                    keccak256(abi.encode(target, uint256(i))),\r\n                    prevValue\r\n                );\r\n            }\r\n        }\r\n\r\n        // We have failed if we reach here\r\n        revert(\"Could not give auth access\");\r\n    }\r\n\r\n    /// @dev Set the ward for `base` for the specified `target`\r\n    /// Note this only works for contracts compiled under Solidity. Vyper contracts use a different storage structure for maps.\r\n    /// See https://twitter.com/msolomon44/status/1420137730009300992?t=WO2052xM3AzUCL7o7Pfkow\u0026s=19\r\n    function setWard(WardsAbstract base, address target, uint256 val) internal {\r\n        setWard(address(base), target, val);\r\n    }\r\n\r\n    /// @dev Set the ward for `base` for the specified `target`\r\n    /// Note this only works for contracts compiled under Solidity. Vyper contracts use a different storage structure for maps.\r\n    /// See https://twitter.com/msolomon44/status/1420137730009300992?t=WO2052xM3AzUCL7o7Pfkow\u0026s=19\r\n    function setWard(VatAbstract base, address target, uint256 val) internal {\r\n        setWard(address(base), target, val);\r\n    }\r\n\r\n    /// @dev Sets the balance for `who` to `amount` for `token`.\r\n    function setBalance(address token, address who, uint256 amount) internal {\r\n        // Edge case - balance is already set for some reason\r\n        if (DSTokenAbstract(token).balanceOf(who) == amount) return;\r\n\r\n        for (uint256 i = 0; i \u003c 200; i++) {\r\n            // Scan the storage for the solidity-style balance storage slot\r\n            {\r\n                bytes32 prevValue = vm().load(\r\n                    token,\r\n                    keccak256(abi.encode(who, uint256(i)))\r\n                );\r\n                vm().store(\r\n                    token,\r\n                    keccak256(abi.encode(who, uint256(i))),\r\n                    bytes32(amount)\r\n                );\r\n                if (DSTokenAbstract(token).balanceOf(who) == amount) {\r\n                    // Found it\r\n                    return;\r\n                } else {\r\n                    // Keep going after restoring the original value\r\n                    vm().store(\r\n                        token,\r\n                        keccak256(abi.encode(who, uint256(i))),\r\n                        prevValue\r\n                    );\r\n                }\r\n            }\r\n\r\n            // Vyper-style storage layout for maps\r\n            {\r\n                bytes32 prevValue = vm().load(\r\n                    token,\r\n                    keccak256(abi.encode(uint256(i), who))\r\n                );\r\n\r\n                vm().store(\r\n                    token,\r\n                    keccak256(abi.encode(uint256(i), who)),\r\n                    bytes32(amount)\r\n                );\r\n                if (DSTokenAbstract(token).balanceOf(who) == amount) {\r\n                    // Found it\r\n                    return;\r\n                } else {\r\n                    // Keep going after restoring the original value\r\n                    vm().store(\r\n                        token,\r\n                        keccak256(abi.encode(uint256(i), who)),\r\n                        prevValue\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        // We have failed if we reach here\r\n        revert(\"Could not give tokens\");\r\n    }\r\n\r\n    /// @dev Sets the balance for `who` to `amount` for `token`.\r\n    function setBalance(DSTokenAbstract token, address who, uint256 amount) internal {\r\n        setBalance(address(token), who, amount);\r\n    }\r\n\r\n    /// @dev Sets the balance for `who` to `amount` for `token`.\r\n    function setBalance(DaiAbstract token, address who, uint256 amount) internal {\r\n        setBalance(address(token), who, amount);\r\n    }\r\n\r\n}\r\n\r\n// lib/dss-test/src/MCD.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ncontract DSValue {\r\n    bool    has;\r\n    bytes32 val;\r\n    function peek() public view returns (bytes32, bool) {\r\n        return (val,has);\r\n    }\r\n    function read() external view returns (bytes32) {\r\n        bytes32 wut; bool haz;\r\n        (wut, haz) = peek();\r\n        require(haz, \"haz-not\");\r\n        return wut;\r\n    }\r\n    function poke(bytes32 wut) external {\r\n        val = wut;\r\n        has = true;\r\n    }\r\n    function void() external {\r\n        val = bytes32(0);\r\n        has = false;\r\n    }\r\n}\r\n\r\nstruct DssInstance {\r\n    ChainlogAbstract chainlog;\r\n    VatAbstract vat;\r\n    DaiJoinAbstract daiJoin;\r\n    DaiAbstract dai;\r\n    VowAbstract vow;\r\n    DogAbstract dog;\r\n    PotAbstract pot;\r\n    JugAbstract jug;\r\n    SpotAbstract spotter;\r\n    EndAbstract end;\r\n    CureAbstract cure;\r\n    FlapAbstract flap;\r\n    FlopAbstract flop;\r\n    ESMAbstract esm;\r\n}\r\n\r\nstruct DssIlkInstance {\r\n    DSTokenAbstract gem;\r\n    OsmAbstract pip;\r\n    GemJoinAbstract join;\r\n    ClipAbstract clip;\r\n}\r\n\r\nlibrary MCD {\r\n\r\n    uint256 constant WAD = 10 ** 18;\r\n    uint256 constant RAY = 10 ** 27;\r\n    uint256 constant RAD = 10 ** 45;\r\n\r\n    function getAddressOrNull(DssInstance memory dss, bytes32 key) internal view returns (address) {\r\n        try dss.chainlog.getAddress(key) returns (address a) {\r\n            return a;\r\n        } catch {\r\n            return address(0);\r\n        }\r\n    }\r\n\r\n    function loadFromChainlog(address chainlog) internal view returns (DssInstance memory dss) {\r\n        return loadFromChainlog(ChainlogAbstract(chainlog));\r\n    }\r\n\r\n    function loadFromChainlog(ChainlogAbstract chainlog) internal view returns (DssInstance memory dss) {\r\n        dss.chainlog = chainlog;\r\n        dss.vat = VatAbstract(getAddressOrNull(dss, \"MCD_VAT\"));\r\n        dss.daiJoin = DaiJoinAbstract(getAddressOrNull(dss, \"MCD_JOIN_DAI\"));\r\n        dss.dai = DaiAbstract(getAddressOrNull(dss, \"MCD_DAI\"));\r\n        dss.vow = VowAbstract(getAddressOrNull(dss, \"MCD_VOW\"));\r\n        dss.dog = DogAbstract(getAddressOrNull(dss, \"MCD_DOG\"));\r\n        dss.pot = PotAbstract(getAddressOrNull(dss, \"MCD_POT\"));\r\n        dss.jug = JugAbstract(getAddressOrNull(dss, \"MCD_JUG\"));\r\n        dss.spotter = SpotAbstract(getAddressOrNull(dss, \"MCD_SPOT\"));\r\n        dss.end = EndAbstract(getAddressOrNull(dss, \"MCD_END\"));\r\n        dss.cure = CureAbstract(getAddressOrNull(dss, \"MCD_CURE\"));\r\n        dss.flap = FlapAbstract(getAddressOrNull(dss, \"MCD_FLAP\"));\r\n        dss.flop = FlopAbstract(getAddressOrNull(dss, \"MCD_FLOP\"));\r\n        dss.esm = ESMAbstract(getAddressOrNull(dss, \"MCD_ESM\"));\r\n    }\r\n\r\n    function bytesToBytes32(bytes memory b) private pure returns (bytes32) {\r\n        bytes32 out;\r\n        for (uint256 i = 0; i \u003c b.length; i++) {\r\n            out |= bytes32(b[i] \u0026 0xFF) \u003e\u003e (i * 8);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    function getIlk(DssInstance memory dss, string memory gem, string memory variant) internal view returns (DssIlkInstance memory) {\r\n        return DssIlkInstance(\r\n            DSTokenAbstract(getAddressOrNull(dss, bytesToBytes32(bytes(gem)))),\r\n            OsmAbstract(getAddressOrNull(dss, bytesToBytes32(abi.encodePacked(\"PIP_\", gem)))),\r\n            GemJoinAbstract(getAddressOrNull(dss, bytesToBytes32(abi.encodePacked(\"MCD_JOIN_\", gem, \"_\", variant)))),\r\n            ClipAbstract(getAddressOrNull(dss, bytesToBytes32(abi.encodePacked(\"MCD_CLIP_\", gem, \"_\", variant))))\r\n        );\r\n    }\r\n\r\n    /// @dev Initialize a dummy ilk with a $1 DSValue pip without liquidations\r\n    function initIlk(\r\n        DssInstance memory dss,\r\n        bytes32 ilk\r\n    ) internal {\r\n        DSValue pip = new DSValue();\r\n        pip.poke(bytes32(WAD));\r\n        initIlk(dss, ilk, address(0), address(pip));\r\n    }\r\n\r\n    /// @dev Initialize an ilk with a $1 DSValue pip without liquidations\r\n    function initIlk(\r\n        DssInstance memory dss,\r\n        bytes32 ilk,\r\n        address join\r\n    ) internal {\r\n        DSValue pip = new DSValue();\r\n        pip.poke(bytes32(WAD));\r\n        initIlk(dss, ilk, join, address(pip));\r\n    }\r\n\r\n    /// @dev Initialize an ilk without liquidations\r\n    function initIlk(\r\n        DssInstance memory dss,\r\n        bytes32 ilk,\r\n        address join,\r\n        address pip\r\n    ) internal {\r\n        dss.vat.init(ilk);\r\n        dss.jug.init(ilk);\r\n\r\n        dss.vat.rely(join);\r\n\r\n        dss.spotter.file(ilk, \"pip\", pip);\r\n        dss.spotter.file(ilk, \"mat\", RAY);\r\n        dss.spotter.poke(ilk);\r\n    }\r\n\r\n    /// @dev Initialize an ilk with liquidations\r\n    function initIlk(\r\n        DssInstance memory dss,\r\n        bytes32 ilk,\r\n        address join,\r\n        address pip,\r\n        address clip,\r\n        address clipCalc\r\n    ) internal {\r\n        initIlk(dss, ilk, join, pip);\r\n\r\n        // TODO liquidations\r\n        clip; clipCalc;\r\n    }\r\n\r\n    /// @dev Give who a ward on all core contracts\r\n    function giveAdminAccess(DssInstance memory dss, address who) internal {\r\n        if (address(dss.vat) != address(0)) GodMode.setWard(address(dss.vat), who, 1);\r\n        if (address(dss.dai) != address(0)) GodMode.setWard(address(dss.dai), who, 1);\r\n        if (address(dss.vow) != address(0)) GodMode.setWard(address(dss.vow), who, 1);\r\n        if (address(dss.dog) != address(0)) GodMode.setWard(address(dss.dog), who, 1);\r\n        if (address(dss.pot) != address(0)) GodMode.setWard(address(dss.pot), who, 1);\r\n        if (address(dss.jug) != address(0)) GodMode.setWard(address(dss.jug), who, 1);\r\n        if (address(dss.spotter) != address(0)) GodMode.setWard(address(dss.spotter), who, 1);\r\n        if (address(dss.end) != address(0)) GodMode.setWard(address(dss.end), who, 1);\r\n        if (address(dss.cure) != address(0)) GodMode.setWard(address(dss.cure), who, 1);\r\n        if (address(dss.esm) != address(0)) GodMode.setWard(address(dss.esm), who, 1);\r\n    }\r\n\r\n    /// @dev Give who a ward on all core contracts to this address\r\n    function giveAdminAccess(DssInstance memory dss) internal {\r\n        giveAdminAccess(dss, address(this));\r\n    }\r\n\r\n    function newUser(DssInstance memory dss) internal returns (MCDUser) {\r\n        return new MCDUser(dss);\r\n    }\r\n\r\n}\r\n\r\n// lib/dss-test/src/MCDUser.sol\r\n// SPDX-FileCopyrightText: © 2022 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\n/// @dev A user which can perform actions in MCD\r\ncontract MCDUser {\r\n\r\n    using GodMode for *;\r\n\r\n    DssInstance dss;\r\n\r\n    constructor(\r\n        DssInstance memory _dss\r\n    ) {\r\n        dss = _dss;\r\n    }\r\n\r\n    /// @dev Create an auction on the provided ilk\r\n    /// @param join The gem join adapter to use\r\n    /// @param amount The amount of gems to use as collateral\r\n    function createAuction(\r\n        GemJoinAbstract join,\r\n        uint256 amount\r\n    ) public {\r\n        DSTokenAbstract token = DSTokenAbstract(join.gem());\r\n        bytes32 ilk = join.ilk();\r\n\r\n        uint256 prevBalance = token.balanceOf(address(this));\r\n        token.setBalance(address(this), amount);\r\n        uint256 prevAllowance = token.allowance(address(this), address(join));\r\n        token.approve(address(join), amount);\r\n        join.join(address(this), amount);\r\n        token.setBalance(address(this), prevBalance);\r\n        token.approve(address(join), prevAllowance);\r\n        (,uint256 rate, uint256 spot,,) = dss.vat.ilks(ilk);\r\n        uint256 art = spot * amount / rate;\r\n        uint256 ink = amount * (10 ** (18 - token.decimals()));\r\n        dss.vat.frob(ilk, address(this), address(this), address(this), int256(ink), int256(art));\r\n\r\n        // Temporarily increase the liquidation threshold to liquidate this one vault then reset it\r\n        uint256 prevWard = dss.vat.wards(address(this));\r\n        dss.vat.setWard(address(this), 1);\r\n        dss.vat.file(ilk, \"spot\", spot / 2);\r\n        dss.dog.bark(ilk, address(this), address(this));\r\n        dss.vat.file(ilk, \"spot\", spot);\r\n        dss.vat.setWard(address(this), prevWard);\r\n    }\r\n\r\n}\r\n\r\n// src/dependencies/dss-lite-psm/DssLitePsmMigration.sol\r\n// SPDX-FileCopyrightText: © 2023 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\nstruct MigrationConfig {\r\n    bytes32 srcPsmKey; // Chainlog key\r\n    bytes32 dstPsmKey; // Chainlog key\r\n    uint256 srcKeep; // [wad] Min amount of gems to keep\r\n    uint256 dstWant; // [wad] Max amount of gems to move\r\n}\r\n\r\nstruct MigrationResult {\r\n    address srcPsm;\r\n    bytes32 srcIlk;\r\n    address dstPsm;\r\n    bytes32 dstIlk;\r\n    uint256 sap; // [wad] Amount of gems migrated\r\n}\r\n\r\nstruct SrcPsm {\r\n    address psm;\r\n    bytes32 ilk;\r\n    address gemJoin;\r\n    address gem;\r\n    uint256 rate; // [ray]\r\n    uint256 ink; // [wad]\r\n    uint256 art; // [wad]\r\n}\r\n\r\nstruct DstPsm {\r\n    address psm;\r\n    bytes32 ilk;\r\n    address gem;\r\n    uint256 buf; // [wad]\r\n    uint256 rate; // [ray]\r\n    uint256 line; // [rad]\r\n}\r\n\r\ninterface DssPsmLike {\r\n    function gemJoin() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n}\r\n\r\ninterface DssLitePsmLike_0 {\r\n    function buf() external view returns (uint256);\r\n    function file(bytes32, uint256) external;\r\n    function fill() external returns (uint256);\r\n    function gem() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function rush() external view returns (uint256);\r\n    function sellGemNoFee(address, uint256) external returns (uint256);\r\n    function to18ConversionFactor() external view returns (uint256);\r\n}\r\n\r\ninterface GemJoinLike {\r\n    function gem() external view returns (address);\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface GemLike_0 {\r\n    function approve(address, uint256) external;\r\n}\r\n\r\nlibrary DssLitePsmMigration {\r\n    /// @dev Workaround to explicitly revert with an arithmetic error.\r\n    string internal constant ARITHMETIC_ERROR = string(abi.encodeWithSignature(\"Panic(uint256)\", 0x11));\r\n\r\n    uint256 internal constant RAY = 10 ** 27;\r\n\r\n    /// @dev Safely converts `uint256` to `int256`. Reverts if it overflows.\r\n    function _int256(uint256 x) internal pure returns (int256 y) {\r\n        require((y = int256(x)) \u003e= 0, ARITHMETIC_ERROR);\r\n    }\r\n\r\n    function _min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x \u003c y ? x : y;\r\n    }\r\n\r\n    /// @dev Returns the difference between `x` and `y` or zero if `x` is lower than `y`.\r\n    function _subcap(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x \u003c y ? 0 : x - y;\r\n    }\r\n\r\n    /**\r\n     * @dev Migrates funds from `src` to `dst`.\r\n     * @param dss The DSS instance.\r\n     * @param cfg The migration config.\r\n     * @return res The state of both PSMs after migration.\r\n     */\r\n    function migrate(DssInstance memory dss, MigrationConfig memory cfg)\r\n        internal\r\n        returns (MigrationResult memory res)\r\n    {\r\n        SrcPsm memory src;\r\n        src.psm = dss.chainlog.getAddress(cfg.srcPsmKey);\r\n        src.ilk = DssPsmLike(src.psm).ilk();\r\n        src.gemJoin = DssPsmLike(src.psm).gemJoin();\r\n        src.gem = GemJoinLike(src.gemJoin).gem();\r\n        (, src.rate,,,) = dss.vat.ilks(src.ilk);\r\n        (src.ink, src.art) = dss.vat.urns(src.ilk, src.psm);\r\n\r\n        DstPsm memory dst;\r\n        dst.psm = dss.chainlog.getAddress(cfg.dstPsmKey);\r\n        dst.ilk = DssLitePsmLike_0(dst.psm).ilk();\r\n        dst.gem = DssLitePsmLike_0(dst.psm).gem();\r\n        dst.buf = DssLitePsmLike_0(dst.psm).buf();\r\n        (, dst.rate,, dst.line,) = dss.vat.ilks(dst.ilk);\r\n\r\n        // Store current params to reset them at the end.\r\n        uint256 currentGlobalLine = dss.vat.Line();\r\n\r\n        // --- Sanity checks ---\r\n\r\n        require(cfg.srcPsmKey != cfg.dstPsmKey, \"DssLitePsmMigration/src-psm-same-key-dst-psm\");\r\n        uint256 to18ConversionFactor = DssLitePsmLike_0(dst.psm).to18ConversionFactor();\r\n        require(\r\n            cfg.dstWant == type(uint256).max || cfg.dstWant % to18ConversionFactor == 0,\r\n            \"DssLitePsmMigration/dst-want-rounding-issue\"\r\n        );\r\n        require(cfg.srcKeep % to18ConversionFactor == 0, \"DssLitePsmMigration/src-keep-rounding-issue\");\r\n\r\n        require(src.ink \u003e= src.art, \"DssLitePsmMigration/src-ink-lower-than-art\");\r\n        require(dst.ilk != src.ilk, \"DssLitePsmMigration/invalid-ilk-reuse\");\r\n        require(dst.gem == src.gem, \"DssLitePsmMigration/dst-src-gem-mismatch\");\r\n        // We assume stability fees should be set to zero for both PSMs.\r\n        require(src.rate == RAY, \"DssLitePsmMigration/invalid-src-ilk-rate\");\r\n        require(dst.rate == RAY, \"DssLitePsmMigration/invalid-dst-ilk-rate\");\r\n\r\n        // --- Funds migration ---\r\n\r\n        // 0. Define the base parameters for the migration.\r\n        // The actual amount to move is constrained by both `dstWant` and `srcKeep`.\r\n        uint256 mink = _min(cfg.dstWant, _subcap(src.ink, cfg.srcKeep));\r\n        // Ensure it does not try to erase more than the existing debt.\r\n        uint256 mart = _min(src.art, mink);\r\n\r\n        // 1. Grab the collateral from `src.psm` into the executing contract.\r\n        dss.vat.grab(src.ilk, src.psm, address(this), address(this), -_int256(mink), -_int256(mart));\r\n\r\n        // 2. Transfer the grabbed collateral to the executing contract.\r\n        uint256 srcGemAmt = mink / to18ConversionFactor;\r\n        GemJoinLike(src.gemJoin).exit(address(this), srcGemAmt);\r\n\r\n        // 3. Set interim params to accommodate the migration.\r\n        dss.vat.file(\"Line\", type(uint256).max);\r\n        dss.vat.file(dst.ilk, \"line\", type(uint256).max);\r\n\r\n        // 4. Pre-mint enough Dai liquidity to move funds from `src.psm`.\r\n        DssLitePsmLike_0(dst.psm).file(\"buf\", mink);\r\n        if (DssLitePsmLike_0(dst.psm).rush() \u003e 0) {\r\n            DssLitePsmLike_0(dst.psm).fill();\r\n        }\r\n\r\n        // 5. Sell the grabbed collateral gems to `dst.psm`.\r\n        GemLike_0(dst.gem).approve(dst.psm, srcGemAmt);\r\n        uint256 daiOutWad = DssLitePsmLike_0(dst.psm).sellGemNoFee(address(this), srcGemAmt);\r\n        require(daiOutWad == mink, \"DssLitePsmMigration/invalid-dai-amount\");\r\n\r\n        // 6. Convert ERC20 Dai into Vat Dai.\r\n        dss.dai.approve(address(dss.daiJoin), daiOutWad);\r\n        dss.daiJoin.join(address(this), daiOutWad);\r\n\r\n        // 7. Erase the bad debt generated by `vat.grab()`.\r\n        dss.vat.heal(mart * RAY);\r\n\r\n        // 8. Reset the previous params.\r\n        dss.vat.file(\"Line\", currentGlobalLine);\r\n        dss.vat.file(dst.ilk, \"line\", dst.line);\r\n        DssLitePsmLike_0(dst.psm).file(\"buf\", dst.buf);\r\n\r\n        // 9. Return the result params\r\n        res.srcPsm = src.psm;\r\n        res.srcIlk = src.ilk;\r\n        res.dstPsm = dst.psm;\r\n        res.dstIlk = dst.ilk;\r\n        res.sap = mink;\r\n    }\r\n}\r\n\r\n// src/dependencies/dss-lite-psm/DssLitePsmInit.sol\r\n// SPDX-FileCopyrightText: © 2023 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\nstruct DssLitePsmInitConfig {\r\n    bytes32 psmKey;\r\n    bytes32 pocketKey;\r\n    bytes32 psmMomKey;\r\n    address pip;\r\n    bytes32 ilk;\r\n    address gem;\r\n    address pocket;\r\n}\r\n\r\ninterface DssLitePsmLike_1 {\r\n    function daiJoin() external view returns (address);\r\n    function file(bytes32, address) external;\r\n    function gem() external view returns (address);\r\n    function ilk() external view returns (bytes32);\r\n    function kiss(address) external;\r\n    function pocket() external view returns (address);\r\n    function rely(address) external;\r\n}\r\n\r\ninterface DssLitePsmMomLike {\r\n    function setAuthority(address) external;\r\n}\r\n\r\ninterface PipLike {\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\ninterface GemLike_1 {\r\n    function allowance(address, address) external view returns (uint256);\r\n    function decimals() external view returns (uint256);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ninterface IlkRegistryLike {\r\n    function put(\r\n        bytes32 _ilk,\r\n        address _join,\r\n        address _gem,\r\n        uint256 _dec,\r\n        uint256 _class,\r\n        address _pip,\r\n        address _xlip,\r\n        string memory _name,\r\n        string memory _symbol\r\n    ) external;\r\n}\r\n\r\nlibrary DssLitePsmInit {\r\n    uint256 internal constant WAD = 10 ** 18;\r\n    uint256 internal constant RAY = 10 ** 27;\r\n\r\n    // @dev New `IlkRegistry` class\r\n    uint256 internal constant REG_CLASS_JOINLESS = 6;\r\n\r\n    /**\r\n     * @dev Initializes a DssLitePsm instance.\r\n     * @param dss The DSS instance.\r\n     * @param inst The DssLitePsm instance.\r\n     * @param cfg The init config.\r\n     */\r\n    function init(DssInstance memory dss, DssLitePsmInstance memory inst, DssLitePsmInitConfig memory cfg) internal {\r\n        // Sanity checks\r\n        require(cfg.psmKey != cfg.pocketKey, \"DssLitePsmInit/dst-psm-same-key-pocket\");\r\n        require(DssLitePsmLike_1(inst.litePsm).ilk() == cfg.ilk, \"DssLitePsmInit/ilk-mismatch\");\r\n        require(DssLitePsmLike_1(inst.litePsm).gem() == cfg.gem, \"DssLitePsmInit/gem-mismatch\");\r\n        require(DssLitePsmLike_1(inst.litePsm).pocket() == cfg.pocket, \"DssLitePsmInit/pocket-mismatch\");\r\n        require(DssLitePsmLike_1(inst.litePsm).daiJoin() == address(dss.daiJoin), \"DssLitePsmInit/dai-join-mismatch\");\r\n        // Ensure `litePsm` can spend `gem` on behalf of `pocket`.\r\n        require(\r\n            GemLike_1(cfg.gem).allowance(cfg.pocket, inst.litePsm) == type(uint256).max,\r\n            \"DssLitePsmInit/invalid-pocket-allowance\"\r\n        );\r\n        require(uint256(PipLike(cfg.pip).read()) == 1 * WAD, \"DssLitePsmInit/invalid-pip-val\");\r\n\r\n        // 1. Initialize the new ilk\r\n        dss.vat.init(cfg.ilk);\r\n        dss.jug.init(cfg.ilk);\r\n        dss.spotter.file(cfg.ilk, \"mat\", 1 * RAY);\r\n        dss.spotter.file(cfg.ilk, \"pip\", cfg.pip);\r\n        dss.spotter.poke(cfg.ilk);\r\n\r\n        // 2. Initial `litePsm` setup\r\n        // Set `ink` to the largest value that will not cause an overflow for `ink * spot`.\r\n        // Notice: `litePsm` assumes that:\r\n        //   a. `spotter.par == RAY`\r\n        //   b. `vat.ilks[ilk].spot == RAY`\r\n        int256 vink = int256(type(uint256).max / RAY);\r\n        dss.vat.slip(cfg.ilk, inst.litePsm, vink);\r\n        dss.vat.grab(cfg.ilk, inst.litePsm, inst.litePsm, address(0), vink, 0);\r\n\r\n        // 3. Set `litePsm` config params.\r\n        // Notice: `buf`, `tin` and `tout` need to be set in the higher level migration scripts.\r\n        DssLitePsmLike_1(inst.litePsm).file(\"vow\", dss.chainlog.getAddress(\"MCD_VOW\"));\r\n\r\n        // 4. Allow `MCD_PAUSE_PROXY` to swap with no fees on `litePsm`.\r\n        DssLitePsmLike_1(inst.litePsm).kiss(address(this));\r\n\r\n        // 5. Configure `mom`\r\n        // 5.1 Rely `mom` on `litePsm`\r\n        DssLitePsmLike_1(inst.litePsm).rely(inst.mom);\r\n        // 5.2. Set the chief as authority for `mom`.\r\n        DssLitePsmMomLike(inst.mom).setAuthority(dss.chainlog.getAddress(\"MCD_ADM\"));\r\n\r\n        // 6. Add `litePsm` to `IlkRegistry`\r\n        IlkRegistryLike reg = IlkRegistryLike(dss.chainlog.getAddress(\"ILK_REGISTRY\"));\r\n        reg.put(\r\n            cfg.ilk,\r\n            address(0), // No `gemJoin` for `litePsm`\r\n            cfg.gem,\r\n            GemLike_1(cfg.gem).decimals(),\r\n            REG_CLASS_JOINLESS,\r\n            cfg.pip,\r\n            address(0), // No `clip` for `litePsm`\r\n            GemLike_1(cfg.gem).name(),\r\n            GemLike_1(cfg.gem).symbol()\r\n        );\r\n\r\n        // 7. Add `litePsm`, `mom` and `pocket` to the chainlog.\r\n        dss.chainlog.setAddress(cfg.psmKey, inst.litePsm);\r\n        dss.chainlog.setAddress(cfg.psmMomKey, inst.mom);\r\n        dss.chainlog.setAddress(cfg.pocketKey, cfg.pocket);\r\n    }\r\n}\r\n\r\n// src/dependencies/dss-lite-psm/phase-1/DssLitePsmMigrationPhase1.sol\r\n// SPDX-FileCopyrightText: © 2023 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\nstruct DssLitePsmMigrationConfigPhase1 {\r\n    bytes32 psmMomKey;\r\n    bytes32 dstPsmKey;\r\n    bytes32 dstPocketKey;\r\n    address dstPip;\r\n    bytes32 dstIlk;\r\n    address dstGem;\r\n    address dstPocket;\r\n    uint256 dstBuf; // [wad]\r\n    uint256 dstMaxLine; // [rad]\r\n    uint256 dstGap; // [rad]\r\n    uint256 dstTtl; // [seconds]\r\n    uint256 dstWant; // [wad]\r\n    bytes32 srcPsmKey;\r\n    uint256 srcMaxLine; // [rad]\r\n    uint256 srcGap; // [rad]\r\n    uint256 srcTtl; // [seconds]\r\n    uint256 srcKeep; // [wad]\r\n}\r\n\r\ninterface DssLitePsmLike_2 {\r\n    function file(bytes32, uint256) external;\r\n    function fill() external returns (uint256);\r\n    function rush() external view returns (uint256);\r\n}\r\n\r\ninterface AutoLineLike {\r\n    function exec(bytes32) external returns (uint256);\r\n    function setIlk(bytes32, uint256, uint256, uint256) external;\r\n}\r\n\r\nlibrary DssLitePsmMigrationPhase1 {\r\n    /**\r\n     * @dev Initializes a LitePsm instance and performs the initial migration of funds.\r\n     * @param dss The MCD instance.\r\n     * @param inst The LitePsm instance.\r\n     * @param cfg The migration config params.\r\n     */\r\n    function initAndMigrate(\r\n        DssInstance memory dss,\r\n        DssLitePsmInstance memory inst,\r\n        DssLitePsmMigrationConfigPhase1 memory cfg\r\n    ) internal {\r\n        // 1. Initialize the new PSM.\r\n        DssLitePsmInit.init(\r\n            dss,\r\n            inst,\r\n            DssLitePsmInitConfig({\r\n                psmMomKey: cfg.psmMomKey,\r\n                psmKey: cfg.dstPsmKey,\r\n                pocketKey: cfg.dstPocketKey,\r\n                pip: cfg.dstPip,\r\n                ilk: cfg.dstIlk,\r\n                gem: cfg.dstGem,\r\n                pocket: cfg.dstPocket\r\n            })\r\n        );\r\n\r\n        // 2. Migrate some funds to the new PSM.\r\n        MigrationResult memory res = DssLitePsmMigration.migrate(\r\n            dss,\r\n            MigrationConfig({\r\n                srcPsmKey: cfg.srcPsmKey,\r\n                dstPsmKey: cfg.dstPsmKey,\r\n                srcKeep: cfg.srcKeep,\r\n                dstWant: cfg.dstWant\r\n            })\r\n        );\r\n\r\n        // 3. Update auto-line.\r\n        AutoLineLike autoLine = AutoLineLike(dss.chainlog.getAddress(\"MCD_IAM_AUTO_LINE\"));\r\n\r\n        // 3.1. Update auto-line for `srcIlk`\r\n        autoLine.setIlk(res.srcIlk, cfg.srcMaxLine, cfg.srcGap, cfg.srcTtl);\r\n        autoLine.exec(res.srcIlk);\r\n\r\n        // 3.2. Update auto-line for `dstIlk`\r\n        // Notice: Setting auto-line parameters automatically resets time intervals.\r\n        // Effectively, it allows `litePsm` `line` to increase faster than expected.\r\n        autoLine.setIlk(res.dstIlk, cfg.dstMaxLine, cfg.dstGap, cfg.dstTtl);\r\n        autoLine.exec(res.dstIlk);\r\n\r\n        // 4. Set the final params for `dstPsm`.\r\n        DssLitePsmLike_2(res.dstPsm).file(\"buf\", cfg.dstBuf);\r\n\r\n        // 5. Fill `dstPsm` so there is liquidity available immediately.\r\n        // Notice: `dstPsm.fill` must be called last because it is constrained by both `cfg.buf` and `cfg.maxLine`.\r\n        if (DssLitePsmLike_2(res.dstPsm).rush() \u003e 0) {\r\n            DssLitePsmLike_2(res.dstPsm).fill();\r\n        }\r\n    }\r\n}\r\n\r\n// src/DssSpell.sol\r\n// SPDX-FileCopyrightText: © 2020 Dai Foundation \u003cwww.daifoundation.org\u003e\r\n\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see \u003chttps://www.gnu.org/licenses/\u003e.\r\n\r\ninterface ProxyLike {\r\n    function exec(address target, bytes calldata args) external payable returns (bytes memory out);\r\n}\r\n\r\ninterface PauseLike {\r\n    function setDelay(uint256 delay_) external;\r\n}\r\n\r\ninterface DssCronSequencerLike {\r\n    function addJob(address job) external;\r\n}\r\n\r\ncontract DssSpellAction is DssAction {\r\n    // Provides a descriptive tag for bot consumption\r\n    // This should be modified weekly to provide a summary of the actions\r\n    // Hash: cast keccak -- \"$(wget 'https://raw.githubusercontent.com/makerdao/community/7dea36a997198c0b4348e8ca9e37dcb896785cd0/governance/votes/Executive%20vote%20-%20July%2025%2C%202024.md' -q -O - 2\u003e/dev/null)\"\r\n    string public constant override description =\r\n        \"2024-07-25 MakerDAO Executive Spell | Hash: 0x434004820168dfce595861581ed0cf22f2e36fafb236b59a3d6019c78751be14\";\r\n\r\n    // Set office hours according to the summary\r\n    function officeHours() public pure override returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    // ---------- Rates ----------\r\n    // Many of the settings that change weekly rely on the rate accumulator\r\n    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\r\n    // To check this yourself, use the following rate calculation (example 8%):\r\n    //\r\n    // $ bc -l \u003c\u003c\u003c 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\r\n    //\r\n    // A table of rates can be found at\r\n    //    https://ipfs.io/ipfs/QmVp4mhhbwWGTfbh2BzwQB9eiBrQBKiqcPRZCaAxNUaar6\r\n    //\r\n    // uint256 internal constant X_PCT_1000000003022265980097387650RATE = ;\r\n\r\n    // --- Math ---\r\n    uint256 internal constant THOUSAND = 10 ** 3;\r\n    uint256 internal constant MILLION  = 10 ** 6;\r\n    uint256 internal constant BILLION  = 10 ** 9;\r\n    uint256 internal constant WAD      = 10 ** 18;\r\n    uint256 internal constant RAD      = 10 ** 45;\r\n\r\n    // ---------- LITE-PSM-USDC-A Phase 1 ----------\r\n    address internal immutable MCD_PAUSE                      = DssExecLib.getChangelogAddress(\"MCD_PAUSE\");\r\n    address internal immutable MCD_ESM                        = DssExecLib.getChangelogAddress(\"MCD_ESM\");\r\n    address internal immutable USDC                           = DssExecLib.getChangelogAddress(\"USDC\");\r\n    address internal immutable PIP_USDC                       = DssExecLib.getChangelogAddress(\"PIP_USDC\");\r\n    address internal constant  MCD_LITE_PSM_USDC_A            = 0xf6e72Db5454dd049d0788e411b06CfAF16853042;\r\n    address internal constant  MCD_LITE_PSM_USDC_A_POCKET     = 0x37305B1cD40574E4C5Ce33f8e8306Be057fD7341;\r\n    address internal constant  LITE_PSM_MOM                   = 0x467b32b0407Ad764f56304420Cddaa563bDab425;\r\n    address internal constant  MCD_LITE_PSM_USDC_A_JAR        = 0x69cA348Bd928A158ADe7aa193C133f315803b06e;\r\n    address internal constant  MCD_LITE_PSM_USDC_A_IN_CDT_JAR = 0x5eeB3D8D60B06a44f6124a84EeE7ec0bB747BE6d;\r\n\r\n    // ---------- Add LitePSM keeper network job ----------\r\n    address internal immutable CRON_SEQUENCER    = DssExecLib.getChangelogAddress(\"CRON_SEQUENCER\");\r\n    address internal constant  CRON_LITE_PSM_JOB = 0x689cE517a4DfCf0C5eC466F2757D324fc292C8Be;\r\n\r\n    // ---------- Spark Spell ----------\r\n    // Spark Proxy: https://github.com/marsfoundation/sparklend-deployments/blob/bba4c57d54deb6a14490b897c12a949aa035a99b/script/output/1/primary-sce-latest.json#L2\r\n    address internal constant SPARK_PROXY = 0x3300f198988e4C9C63F75dF86De36421f06af8c4;\r\n    address internal constant SPARK_SPELL = 0x18427dB17D3113309a0406284aC738f4E649613B;\r\n\r\n    function actions() public override {\r\n        // ---------- LITE-PSM-USDC-A Onboarding ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n        // Poll: https://vote.makerdao.com/polling/QmdcHXHy\r\n\r\n        // ---------- Update PSM-USDC-A DC-IAM ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n        // Poll: https://vote.makerdao.com/polling/QmdcHXHy\r\n\r\n        // ---------- Set up LITE-PSM-USDC-A DC-IAM ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n        // Poll: https://vote.makerdao.com/polling/QmdcHXHy\r\n\r\n        // ---------- Add GSM Delay Exception ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n        // Poll: https://vote.makerdao.com/polling/QmdcHXHy\r\n\r\n        // ---------- Phase 1 USDC Migration from PSM-USDC-A to LitePSM ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n        // Poll: https://vote.makerdao.com/polling/QmdcHXHy\r\n\r\n        // ---------- Chainlog additions ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644/5\r\n\r\n        // Note: load the MCD contracts depencencies\r\n        DssInstance memory dss = MCD.loadFromChainlog(DssExecLib.LOG);\r\n\r\n        // Note: load the LitePSM module contracts\r\n        DssLitePsmInstance memory inst = DssLitePsmInstance({\r\n            // Onboard MCD_LITE_PSM_USDC_A at 0xf6e72Db5454dd049d0788e411b06CfAF16853042\r\n            litePsm: MCD_LITE_PSM_USDC_A,\r\n\r\n            // Activate LITE_PSM_MOM GSM Delay Exception at 0x467b32b0407Ad764f56304420Cddaa563bDab425\r\n            mom: LITE_PSM_MOM\r\n        });\r\n\r\n        // Note: specify the init and migration config\r\n        DssLitePsmMigrationConfigPhase1 memory cfg = DssLitePsmMigrationConfigPhase1({\r\n            // Note: gem is not listed in the exec, but it is implicitly derived\r\n            dstGem:       USDC,\r\n\r\n            // Note: pip is not listed in the exec, but it is implicitly derived\r\n            dstPip:       PIP_USDC,\r\n\r\n            // Note: value listed in a section header above (LITE-PSM-USDC-A Onboarding)\r\n            dstIlk:       \"LITE-PSM-USDC-A\",\r\n\r\n            // Onboard MCD_LITE_PSM_USDC_A_POCKET at 0x37305B1cD40574E4C5Ce33f8e8306Be057fD7341\r\n            dstPocket:    MCD_LITE_PSM_USDC_A_POCKET,\r\n\r\n            // Set MCD_LITE_PSM_USDC_A buf to 20M\r\n            dstBuf:       20 * MILLION * WAD,\r\n\r\n            // Set LITE-PSM-USDC-A DC-IAM line: Set to 50M\r\n            dstMaxLine:   50 * MILLION * RAD,\r\n\r\n            // Set LITE-PSM-USDC-A DC-IAM gap: Set to 20M\r\n            dstGap:       20 * MILLION * RAD,\r\n\r\n            // Set LITE-PSM-USDC-A DC-IAM ttl: Set to 12h\r\n            dstTtl:       12 hours,\r\n\r\n            // Note: chainlog key for PSM-USDC-A\r\n            srcPsmKey:    \"MCD_PSM_USDC_A\",\r\n\r\n            // Set PSM-USDC-A DC-IAM DC-IAM line: 10B (Unchanged)\r\n            srcMaxLine:   10 * BILLION * RAD,\r\n\r\n            // Set PSM-USDC-A DC-IAM DC-IAM gap: Decrease for 20M from 400M to 380M\r\n            srcGap:       380 * MILLION * RAD,\r\n\r\n            // Set PSM-USDC-A DC-IAM DC-IAM ttl: 12h (Unchanged)\r\n            srcTtl:       12 hours,\r\n\r\n            // Migrate 20 million USDC from PSM-USDC-A to LITE-PSM-USDC-A\r\n            dstWant:      20 * MILLION * WAD,\r\n\r\n            // Leave at least 200M USDC reserves in PSM-USDC-A\r\n            srcKeep:      200 * MILLION * WAD,\r\n\r\n            // Add 0x467b32b0407Ad764f56304420Cddaa563bDab425 as LITE_PSM_MOM\r\n            psmMomKey:    \"LITE_PSM_MOM\",\r\n\r\n            // Add 0xf6e72Db5454dd049d0788e411b06CfAF16853042 as MCD_LITE_PSM_USDC_A\r\n            dstPsmKey:    \"MCD_LITE_PSM_USDC_A\",\r\n\r\n            // Add 0x37305B1cD40574E4C5Ce33f8e8306Be057fD7341 as MCD_LITE_PSM_USDC_A_POCKET\r\n            dstPocketKey: \"MCD_LITE_PSM_USDC_A_POCKET\"\r\n        });\r\n\r\n        // Note: LitePSM init and migration was extracted into a library,\r\n        //       and implemented as part of the LitePSM module.\r\n        DssLitePsmMigrationPhase1.initAndMigrate(dss, inst, cfg);\r\n\r\n        // ---------- GSM Delay Update ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n\r\n        // Decrease the GSM Pause Delay by 14h, from 30h to 16h\r\n        PauseLike(MCD_PAUSE).setDelay(16 hours);\r\n\r\n        // ---------- Emergency Shutdown Module Minimum Threshold Update ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n        // Poll: https://vote.makerdao.com/polling/QmdcHXHy\r\n\r\n        // Increase the ESM (Emergency Shutdown Module) minimum threshold by 150k MKR from 150k MKR to 300k MKR\r\n        DssExecLib.setValue(MCD_ESM, \"min\", 300 * THOUSAND * WAD);\r\n\r\n        // ---------- ESM Authorizations ----------\r\n        // Forum: http://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644/9\r\n        // Note: in practice this spell disables Emergency Shutdown by setting the threshold very high.\r\n        //       However the active bug bounty programs still need to be updated to reflect that,\r\n        //       so we are authorizing the ESM on the relevant components.\r\n\r\n        // Auth ESM on MCD_LITE_PSM_USDC_A_IN_CDT_JAR\r\n        DssExecLib.authorize(MCD_LITE_PSM_USDC_A_IN_CDT_JAR, MCD_ESM);\r\n\r\n        // ---------- Add LitePSM keeper network job ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n        // Poll: https://vote.makerdao.com/polling/QmdcHXHy\r\n\r\n        // sequencer.addJob( 0x689cE517a4DfCf0C5eC466F2757D324fc292C8Be )\r\n        // Note: the parameters below are set in `CRON_LITE_PSM_JOB` constructor\r\n        // fill: Set threshold at 15M DAI\r\n        // trim: Set threshold at 30M DAI\r\n        // chug: Set threshold at 300k DAI\r\n        DssCronSequencerLike(CRON_SEQUENCER).addJob(CRON_LITE_PSM_JOB);\r\n\r\n        // ---------- Chainlog additions ----------\r\n        // Forum: https://forum.makerdao.com/t/lite-psm-usdc-a-phase-1-test-period-proposed-parameters/24644\r\n\r\n        // Add 0x69cA348Bd928A158ADe7aa193C133f315803b06e as MCD_LITE_PSM_USDC_A_JAR\r\n        DssExecLib.setChangelogAddress(\"MCD_LITE_PSM_USDC_A_JAR\", MCD_LITE_PSM_USDC_A_JAR);\r\n\r\n        // Add 0x5eeB3D8D60B06a44f6124a84EeE7ec0bB747BE6d as MCD_LITE_PSM_USDC_A_IN_CDT_JAR\r\n        DssExecLib.setChangelogAddress(\"MCD_LITE_PSM_USDC_A_IN_CDT_JAR\", MCD_LITE_PSM_USDC_A_IN_CDT_JAR);\r\n\r\n        // Add 0x689cE517a4DfCf0C5eC466F2757D324fc292C8Be as CRON_LITE_PSM_JOB\r\n        DssExecLib.setChangelogAddress(\"CRON_LITE_PSM_JOB\", CRON_LITE_PSM_JOB);\r\n\r\n        // Note: bumping patch version because the spell adds new items\r\n        DssExecLib.setChangelogVersion(\"1.17.5\");\r\n\r\n        // ---------- Spark Spell ----------\r\n        // Forum: https://forum.makerdao.com/t/jul-12-2024-proposed-changes-to-spark-for-upcoming-spell/24635\r\n\r\n        // Trigger Spark Proxy Spell at 0x18427dB17D3113309a0406284aC738f4E649613B\r\n        ProxyLike(SPARK_PROXY).exec(SPARK_SPELL, abi.encodeWithSignature(\"execute()\"));\r\n    }\r\n}\r\n\r\ncontract DssSpell is DssExec {\r\n    constructor() DssExec(block.timestamp + 30 days, address(new DssSpellAction())) {}\r\n}",
      "ABI": "[{\"inputs\":[],\"name\":\"actions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"nextCastTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"castTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"officeHours\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]",
      "ContractName": "DssSpellAction",
      "CompilerVersion": "v0.8.16+commit.07a7930e",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "DssExecLib:8de6ddbcd5053d32292aaa0d2105a32d108484a6",
      "LicenseType": "GNU AGPLv3",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://0cfb254414205ea228305085a6a183de9d82cb38631940ddca2f49bae77c7101"
    }
  ]
}
