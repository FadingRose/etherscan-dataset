{
  "TxHash": "0x0cd762dee32ce84ab4da362e55864b6999e7ce6196b3985de46c84be28f30b59",
  "ContractAddress": "0xaa07a06cb29d772806a726945be970849dfdba4e",
  "Name": "BundleTest",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\nDescription: ...\r\n\r\nWebsite: ...\r\nTwitter: ...\r\nTelegram: ...\r\n*/\r\n\r\n/*\r\nascii ...\r\n*/\r\n\r\n// Solidity version declaration\r\npragma solidity 0.8.20;\r\n\r\n/** Default ERC20 functions and events **/\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/** Uniswap pair creation **/\r\ninterface IUniswapV2Factory {\r\n    /* Creates a new liquidity pool (pair) for the two specified ERC-20 tokens `tokenA` and `tokenB` */\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\n/** Uniswap pair swap **/\r\ninterface IUniswapV2Router02 {\r\n    /* Swaps an exact amount of input tokens for as much ETH as possible */\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    /* Returns the address of the Uniswap factory contract */\r\n    function factory() external pure returns (address);\r\n    /* Returns the address of the Wrapped Ether (WETH) contract */\r\n    function WETH() external pure returns (address);\r\n}\r\n\r\n/** Math operations with checks **/\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 result = a + b;\r\n        require(result \u003e= a, \"SafeMath: addition overflow\");\r\n        return result;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 result = a - b;\r\n        require(b \u003c= a, \"SafeMath: subtraction underflow\");\r\n        return result;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 result = a * b;\r\n        require(result / a == b, \"SafeMath: multiplication overflow\");\r\n        return result;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint result = a / b;\r\n        require(b \u003e 0, \"SafeMath: modulus by zero\");\r\n        return result;\r\n    }\r\n}\r\n\r\n/** Processes data received from the block **/\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\n/** Processes logic related to contract ownership **/\r\ncontract Ownable is Context {\r\n    address private _owner; // same with '_taxWallet' (before renounce)\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\n/** Processes main contract logic **/\r\ncontract BundleTest is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n\r\n    bool private inSwap = false; // when 'true', disable tax swap (changes every swap, preventing simultaneous tax swaps)\r\n    bool private swapEnabled = false; // when 'true', enable tax swap (changes only when 'openTrading()' called, preventing tax swap before start trading)\r\n    bool private tradingOpened = false; // when 'true', enable trading - buy/sell transactions (changes only when 'openTrading()' called)\r\n\r\n    mapping (address =\u003e uint256) private _balances;\r\n    mapping (address =\u003e mapping (address =\u003e uint256)) private _allowances;\r\n    mapping (address =\u003e bool) private _isExcludedFromFee;\r\n\r\n    address payable private _taxWallet; // same with '_owner' (before renounce)\r\n    uint256 private _transferTax = 0;\r\n    uint256 private _initialBuyTax = 30;\r\n    uint256 private _initialSellTax = 30;\r\n    uint256 private _finalBuyTax = 0;\r\n    uint256 private _finalSellTax = 0;\r\n    uint256 private _reduceBuyTaxAt = 300; // when '_buyCount' value === this value, will reduce buy tax automatically\r\n    uint256 private _reduceSellTaxAt = 300; // refers to '_buyCount'\r\n    uint256 private _preventSwapBefore = 5; // refers to '_buyCount'\r\n    uint256 private _buyCount = 0; // increases with every purchase (but not from whitelisted addresses)\r\n\r\n    string private constant _name = unicode\"BundleTest1\";\r\n    string private constant _symbol = unicode\"BUNDLETEST1\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _totalSupply = 10_000_000 * 10**_decimals; // 10m (all)\r\n    uint256 public _maxTxAmount = 100_000 * 10**_decimals; // 100k (1%) | maximum buy transaction amount (sell not affected)\r\n    uint256 public _maxWalletSize = 200_000 * 10**_decimals; // 200k (2%)\r\n    uint256 public _taxSwapThreshold = 25_000 * 10**_decimals; // 25k (0.25%) | trigger tax swap only when contract tokens amount is larger than this value\r\n    uint256 public _maxTaxSwap = 100_000 * 10**_decimals; // 100k (1%) | max tokens amount to swap in one transaction\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n\r\n        _taxWallet = payable(msgSender);\r\n        _balances[msgSender] = _totalSupply;\r\n\r\n        _isExcludedFromFee[msgSender] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n\r\n        emit Transfer(address(0), msgSender, _totalSupply);\r\n    }\r\n\r\n    /* When added to function, prevents two simultaneous taxes swap */\r\n    modifier lockSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function transferTax() public view returns (uint256) {\r\n        return _transferTax;\r\n    }\r\n\r\n    function initialBuyTax() public view returns (uint256) {\r\n        return _initialBuyTax;\r\n    }\r\n\r\n    function initialSellTax() public view returns (uint256) {\r\n        return _initialSellTax;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount \u003e 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        // from == uniswapV2Pair: Buy | to == uniswapV2Pair: Sell\r\n        if (!_isExcludedFromFee[from] \u0026\u0026 !_isExcludedFromFee[to]) {\r\n            require(tradingOpened, \"Transfer cannot be completed before trading is opened.\");\r\n\r\n            taxAmount = amount.mul(_transferTax).div(100); // transfer tax\r\n\r\n            // buy\r\n            if (from == uniswapV2Pair \u0026\u0026 to != address(uniswapV2Router)) {\r\n                require(amount \u003c= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount \u003c= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                taxAmount = amount.mul((_buyCount \u003e _reduceBuyTaxAt) ? _finalBuyTax : _initialBuyTax).div(100); // buy tax\r\n                _buyCount++;\r\n            }\r\n\r\n            // sell\r\n            if (to == uniswapV2Pair \u0026\u0026 from != address(this)) {\r\n                taxAmount = amount.mul((_buyCount \u003e _reduceSellTaxAt) ? _finalSellTax : _initialSellTax).div(100); // sell tax\r\n            }\r\n\r\n            // tax swap on sell\r\n            if (\r\n                to == uniswapV2Pair \u0026\u0026\r\n                !inSwap \u0026\u0026\r\n                swapEnabled \u0026\u0026\r\n                contractTokenBalance \u003e _taxSwapThreshold \u0026\u0026\r\n                _buyCount \u003e _preventSwapBefore\r\n            ) {\r\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap))); // swap token-tax for ETH (max: '_maxTaxSwap')\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance \u003e 0) {\r\n                    sendETHToFee(address(this).balance); // send ETH-tax to '_taxWallet'\r\n                }\r\n            }\r\n        }\r\n\r\n        if (taxAmount \u003e 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount); // add token-tax to contract balance\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount); // remove 'amount' from sender balance\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount)); // add 'amount' minus 'tax' to recipient balance\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a \u003e b) ? b : a;\r\n    }\r\n\r\n    /* Note: 'lockSwap' prevents two simultaneous tax swaps */\r\n    function swapTokensForEth(uint256 tokenAmount) private lockSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount); // allows uniswap to spend (exchange) 'tokenAmount' on behalf of contract\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    /* Create a pair\r\n       Main-net v2 router address: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n       Base-net v2 router address: 0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24\r\n     */\r\n    function createPair() external onlyOwner {\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply); // allows uniswap to manage total supply on behalf of token contract\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH()); // creates pair 'token/WETH'\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max); // allows uniswap to manage total supply on behalf of pair contract\r\n    }\r\n\r\n    /* Enable trading and tax swap */\r\n    function openTrading() external onlyOwner {\r\n        tradingOpened = true;\r\n        swapEnabled = true;\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _totalSupply;\r\n        _maxWalletSize = _totalSupply;\r\n        emit MaxTxAmountUpdated(_totalSupply);\r\n    }\r\n\r\n    /* Manual swap token-tax to ETH. Note: in this case, tax swap limits do not apply */\r\n    function manualSwap() external {\r\n        require(_msgSender() == _taxWallet); // only '_taxWallet' address (owner) can call this function; note: will still work after renounce\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance \u003e 0) {\r\n            swapTokensForEth(tokenBalance); // swap token-tax for ETH\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance \u003e 0) {\r\n            sendETHToFee(ethBalance); // send ETH to '_taxWallet'\r\n        }\r\n    }\r\n\r\n    function setTransferTax(uint256 newTransferTax) public onlyOwner returns (bool) {\r\n        _transferTax = newTransferTax;\r\n        return true;\r\n    }\r\n\r\n    function setInitialBuyTax(uint256 newInitialBuyTax) public onlyOwner returns (bool) {\r\n        _initialBuyTax = newInitialBuyTax;\r\n        return true;\r\n    }\r\n\r\n    function setInitialSellTax(uint256 newInitialSellTax) public onlyOwner returns (bool) {\r\n        _initialSellTax = newInitialSellTax;\r\n        return true;\r\n    }\r\n\r\n    function addToWhitelist(address newAddress) public onlyOwner returns (bool) {\r\n        _isExcludedFromFee[newAddress] = true;\r\n        return true;\r\n    }\r\n\r\n    // contract can receive ETH\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInitialBuyTax\",\"type\":\"uint256\"}],\"name\":\"setInitialBuyTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newInitialSellTax\",\"type\":\"uint256\"}],\"name\":\"setInitialSellTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransferTax\",\"type\":\"uint256\"}],\"name\":\"setTransferTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "BundleTest",
      "CompilerVersion": "v0.8.20+commit.a1b79de6",
      "OptimizationUsed": "0",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://9e281ed49929c7536728f7b61572f3fc445e2acdb59af5270ac0521b691e61df"
    }
  ]
}
