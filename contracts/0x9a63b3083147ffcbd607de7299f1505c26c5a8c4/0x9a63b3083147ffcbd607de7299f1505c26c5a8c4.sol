{{
  "language": "Solidity",
  "sources": {
    "src/PaymentClaim.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.23;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title PaymentClaim\n/// @notice This contract provides a payment claim service for ETH and ERC20 token for specific addresses.\ncontract PaymentClaim is Ownable {\n    mapping(address => bool) public admins;\n    mapping(address => bool) public withdrawList;\n\n    // Track deposited tokens\n    address[] public depositedTokens;\n    mapping(address => bool) public isTokenDeposited;\n\n    event EthDeposited(address indexed depositor, uint256 amount);\n    event TokenDeposited(\n        address indexed depositor,\n        address indexed token,\n        uint256 amount\n    );\n    event EthWithdrawn(address indexed recipient, uint256 amount);\n    event TokenWithdrawn(\n        address indexed recipient,\n        address indexed token,\n        uint256 amount\n    );\n    event AdminAdded(address indexed newAdmin);\n    event AdminRemoved(address indexed removedAdmin);\n    event WithdrawListAdded(address indexed newWithdrawListed);\n    event WithdrawListRemoved(address indexed removedWithdrawListed);\n\n    error NotAdmin();\n    error NotOnWithdrawList();\n    error CannotRemoveOwnerFromAdmin();\n    error TokenTransferFailed();\n    error NoEthToWithdraw();\n    error EthTransferFailed();\n    error NoTokensToWithdraw();\n\n    constructor(address initialOwner) Ownable(initialOwner) {\n        admins[msg.sender] = true;\n    }\n\n    /// @notice Modifier to restrict access to admins only\n    /// @dev Considers both the owner and addresses in the admins mapping as admins\n    modifier onlyAdmin() {\n        if (owner() != msg.sender && !admins[msg.sender]) revert NotAdmin();\n        _;\n    }\n\n    /// @notice Modifier to restrict access to addresses on the withdraw list\n    modifier onlyWithdrawListed() {\n        if (!withdrawList[msg.sender]) revert NotOnWithdrawList();\n        _;\n    }\n\n    /// @notice Adds a new admin\n    /// @param newAdmin Address of the new admin to be added\n    /// @dev Only the owner can add new admins\n    function addAdmin(address newAdmin) external onlyOwner {\n        admins[newAdmin] = true;\n        emit AdminAdded(newAdmin);\n    }\n\n    /// @notice Removes an admin\n    /// @param adminToRemove Address of the admin to be removed\n    /// @dev Only the owner can remove admins, and the owner cannot be removed\n    function removeAdmin(address adminToRemove) external onlyOwner {\n        if (adminToRemove == owner()) revert CannotRemoveOwnerFromAdmin();\n        admins[adminToRemove] = false;\n        emit AdminRemoved(adminToRemove);\n    }\n\n    /// @notice Adds an address to the withdraw list\n    /// @param account Address to be added to the withdraw list\n    /// @dev Only admins can add addresses to the withdraw list\n    function addToWithdrawList(address account) external onlyAdmin {\n        withdrawList[account] = true;\n        emit WithdrawListAdded(account);\n    }\n\n    /// @notice Removes an address from the withdraw list\n    /// @param account Address to be removed from the withdraw list\n    /// @dev Only admins can remove addresses from the withdraw list\n    function removeFromWithdrawList(address account) external onlyAdmin {\n        withdrawList[account] = false;\n        emit WithdrawListRemoved(account);\n    }\n\n    /// @notice Allows anyone to deposit ETH into the contract\n    /// @dev Emits an EthDeposited event. You can just send ETH to the contract directly but this is a more explicit way.\n    function depositEth() external payable {\n        emit EthDeposited(msg.sender, msg.value);\n    }\n\n    /// @notice Allows anyone to deposit ERC20 tokens into the contract\n    /// @param token Address of the ERC20 token to deposit\n    /// @param amount Amount of tokens to deposit\n    /// @dev Requires approval for the token transfer\n    function depositToken(address token, uint256 amount) external {\n        if (!IERC20(token).transferFrom(msg.sender, address(this), amount)) {\n            revert TokenTransferFailed();\n        }\n\n        // Just some bookkeeping to keep track of deposited tokens\n        if (!isTokenDeposited[token]) {\n            depositedTokens.push(token);\n            isTokenDeposited[token] = true;\n        }\n\n        emit TokenDeposited(msg.sender, token, amount);\n    }\n\n    /// @notice Allows addresses on the withdraw list to withdraw all ETH from the contract\n    /// @dev Emits an EthWithdrawn event\n    function withdrawAllEth() external onlyWithdrawListed {\n        uint256 amount = address(this).balance;\n        if (amount == 0) revert NoEthToWithdraw();\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        if (!success) revert EthTransferFailed();\n        emit EthWithdrawn(msg.sender, amount);\n    }\n\n    /// @notice Allows addresses on the withdraw list to withdraw all of a specific ERC20 token from the contract\n    /// @param token Address of the ERC20 token to withdraw\n    /// @dev Emits a TokenWithdrawn event\n    function withdrawAllToken(address token) external onlyWithdrawListed {\n        uint256 amount = IERC20(token).balanceOf(address(this));\n        if (amount == 0) revert NoTokensToWithdraw();\n\n        if (!IERC20(token).transfer(msg.sender, amount)) {\n            revert TokenTransferFailed();\n        }\n\n        emit TokenWithdrawn(msg.sender, token, amount);\n    }\n\n    /// @notice Returns the list of all deposited ERC20 tokens\n    /// @return An array of addresses representing the deposited ERC20 tokens\n    /// @dev This is just a nice to have for the web view\n    function getDepositedTokens() external view returns (address[] memory) {\n        return depositedTokens;\n    }\n\n    /// @notice Returns the balance of a specific ERC20 token in the contract\n    /// @param token Address of the ERC20 token\n    /// @return The balance of the specified token\n    function getTokenBalance(address token) external view returns (uint256) {\n        return IERC20(token).balanceOf(address(this));\n    }\n\n    /// @notice Returns the balances of all deposited ERC20 tokens\n    /// @return tokens An array of addresses representing the deposited ERC20 tokens\n    /// @return balances An array of uint256 values representing the balances of the deposited tokens\n    /// @dev This is just a nice to have for the web view\n    function getAllTokenBalances()\n        external\n        view\n        returns (address[] memory tokens, uint256[] memory balances)\n    {\n        tokens = depositedTokens;\n        balances = new uint256[](tokens.length);\n\n        for (uint i = 0; i < tokens.length; i++) {\n            balances[i] = IERC20(tokens[i]).balanceOf(address(this));\n        }\n\n        return (tokens, balances);\n    }\n\n    /// @notice Fallback function to handle direct ETH transfers to the contract\n    /// @dev Emits an EthDeposited event\n    receive() external payable {\n        emit EthDeposited(msg.sender, msg.value);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "useLiteralContent": false,
      "bytecodeHash": "ipfs",
      "appendCBOR": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "abi"
        ]
      }
    },
    "evmVersion": "paris",
    "viaIR": false,
    "libraries": {}
  }
}}
