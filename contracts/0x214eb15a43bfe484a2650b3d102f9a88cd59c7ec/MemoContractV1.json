{
  "TxHash": "0x23e9d7773481b7909574b17927b695ee84a1cd272c013aa4c1a7466293f80041",
  "ContractAddress": "0x214eb15a43bfe484a2650b3d102f9a88cd59c7ec",
  "Name": "MemoContractV1",
  "PackageStatus": 0,
  "status": "1",
  "message": "OK",
  "result": [
    {
      "SourceCode": "// Sources flattened with hardhat v2.22.3 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: GPL-2.0-or-later AND MIT\r\n\r\npragma abicoder v2;\r\n\r\n// File @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol@v4.9.6\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length \u003e 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length \u003e 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol@v4.9.6\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```solidity\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n *\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts.\r\n     *\r\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\r\n     * constructor.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall \u0026\u0026 _initialized \u003c 1) || (!AddressUpgradeable.isContract(address(this)) \u0026\u0026 _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\r\n     * are added through upgrades and that require initialization.\r\n     *\r\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\r\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     *\r\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\r\n     *\r\n     * Emits an {Initialized} event.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing \u0026\u0026 _initialized \u003c version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     *\r\n     * Emits an {Initialized} event the first time it is successfully executed.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized != type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\r\n     */\r\n    function _getInitializedVersion() internal view returns (uint8) {\r\n        return _initialized;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\r\n     */\r\n    function _isInitializing() internal view returns (bool) {\r\n        return _initializing;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol@v4.9.6\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20PermitUpgradeable {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol@v4.9.6\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol@v4.9.6\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance \u003e= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20PermitUpgradeable token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success \u0026\u0026 (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026 AddressUpgradeable.isContract(address(token));\r\n    }\r\n}\r\n\r\n\r\n// File @uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol@v1.0.1\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\npragma solidity \u003e=0.5.0;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n\r\n// File @uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol@v1.4.4\r\n\r\n// Original license: SPDX_License_Identifier: GPL-2.0-or-later\r\npragma solidity \u003e=0.7.5;\r\n// Original pragma directive: pragma abicoder v2\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\r\n}\r\n\r\n\r\n// File contracts/AddressUtils.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nlibrary AddressUtils {\r\n    modifier onlyContract(address account_) {\r\n        requireNonZeroAddress(account_);\r\n\r\n        require(isContract(account_), 'AddressUtils: Only contracts allowed');\r\n        _;\r\n    }\r\n\r\n    modifier notContract(address account_) {\r\n        requireNonZeroAddress(account_);\r\n\r\n        require(!isContract(account_), 'AddressUtils: Contracts not allowed');\r\n        _;\r\n    }\r\n\r\n    function isContract(address account_) internal view returns (bool) {\r\n        return account_.code.length \u003e 0;\r\n    }\r\n\r\n    function requireNonZeroAddress(address account_) internal pure {\r\n        require(\r\n            account_ != address(0),\r\n            'AddressUtils: Zero address not allowed'\r\n        );\r\n    }\r\n\r\n    function requireZeroAddress(address account_) internal pure {\r\n        require(\r\n            account_ == address(0),\r\n            'AddressUtils: Non Zero address'\r\n        );\r\n    }\r\n\r\n    function requireIsContract(address account_) internal view {\r\n        requireNonZeroAddress(account_);\r\n        require(\r\n            isContract(account_),\r\n            'AddressUtils: Account is not a contract'\r\n        );\r\n    }\r\n\r\n    function requireNotContract(address account_) internal view {\r\n        requireNonZeroAddress(account_);\r\n        require(!isContract(account_), 'AddressUtils: Account is a contract');\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(\r\n                target,\r\n                data,\r\n                0,\r\n                'AddressUtils: low-level call failed'\r\n            );\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(\r\n            address(this).balance \u003e= value,\r\n            'AddressUtils: insufficient balance for call'\r\n        );\r\n        (bool success, bytes memory returndata) = target.call{value: value}(\r\n            data\r\n        );\r\n        return\r\n            verifyCallResultFromTarget(\r\n                target,\r\n                success,\r\n                returndata,\r\n                errorMessage\r\n            );\r\n    }\r\n\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                requireIsContract(target);\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure {\r\n        if (returndata.length \u003e 0) {\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/Admin.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nabstract contract Admin is Initializable {\r\n    using AddressUtils for address;\r\n\r\n    address private _admin;\r\n\r\n    event AdminChanged(address indexed oldAdmin, address indexed newAdmin);\r\n\r\n    function __Admin_init(address admin_) internal onlyInitializing {\r\n        admin_.requireNotContract();\r\n        _admin = admin_;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == _admin, 'MemoContract: caller is not admin');\r\n        _;\r\n    }\r\n\r\n    function getAdmin() public view returns (address) {\r\n        return _admin;\r\n    }\r\n\r\n    function changeAdmin(address newAdmin_) external onlyAdmin {\r\n        newAdmin_.requireNotContract();\r\n        emit AdminChanged(_admin, newAdmin_);\r\n        _admin = newAdmin_;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/BaseContract.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\nabstract contract BaseContract is Initializable, Admin {\r\n    uint8 internal _initializedVersion;\r\n\r\n    function getContractInitVersion() public view returns (uint8) {\r\n        return _initializedVersion;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IERC20Extended.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IERC20Extended {\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function nonces(address owner) external view returns (uint256);\r\n}\r\n\r\n\r\n// File contracts/ERC20Utils.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\nstruct PermitData {\r\n    address owner;\r\n    address spender;\r\n    uint256 value;\r\n    uint256 deadline;\r\n    uint8 v;\r\n    bytes32 r;\r\n    bytes32 s;\r\n}\r\n\r\nlibrary ERC20Utils {\r\n    using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n    /**\r\n     * Permits the specified spender to spend the specified amount of tokens on behalf of the owner.\r\n     *\r\n     * @param token_ The address of the ERC20 token contract.\r\n     * @param data_ The permit data, including the owner, spender, value, deadline, and signature parameters.\r\n     */\r\n    function _permitWithAuthorization(\r\n        address token_,\r\n        PermitData calldata data_\r\n    ) internal {\r\n        IERC20Extended token = IERC20Extended(token_);\r\n\r\n        try token.nonces(data_.owner) returns (uint256 nonceBefore) {\r\n            token.permit(\r\n                data_.owner,\r\n                data_.spender,\r\n                data_.value,\r\n                data_.deadline,\r\n                data_.v,\r\n                data_.r,\r\n                data_.s\r\n            );\r\n            uint256 nonceAfter = token.nonces(data_.owner);\r\n            require(nonceAfter == nonceBefore + 1, 'Permit failed, nonce mismatch');\r\n        } catch {\r\n            revert('Permit token does not support nonces');\r\n        }\r\n    }\r\n\r\n    function _erc20BalanceOf(\r\n        address token_,\r\n        address account_\r\n    ) internal view returns (uint256) {\r\n        return IERC20Upgradeable(token_).balanceOf(account_);\r\n    }\r\n\r\n    function _erc20Approve(\r\n        address token_,\r\n        address spender_,\r\n        uint256 amount_\r\n    ) internal {\r\n        IERC20Upgradeable(token_).safeApprove(spender_, amount_);\r\n    }\r\n\r\n    function _transferErc20TokensFromContract(\r\n        address token_,\r\n        address recipient_,\r\n        uint256 amount_\r\n    ) internal {\r\n        IERC20Upgradeable(token_).safeTransfer(recipient_, amount_);\r\n    }\r\n\r\n    function _transferErc20TokensFromSender(\r\n        address token_,\r\n        address recipient_,\r\n        uint256 amount_\r\n    ) internal {\r\n        IERC20Upgradeable(token_).safeTransferFrom(\r\n            msg.sender,\r\n            recipient_,\r\n            amount_\r\n        );\r\n    }\r\n\r\n    function _safeTransferFrom(\r\n        address token_,\r\n        address owner_,\r\n        address recipient_,\r\n        uint256 amount_\r\n    ) internal {\r\n        IERC20Upgradeable(token_).safeTransferFrom(\r\n            owner_,\r\n            recipient_,\r\n            amount_\r\n        );\r\n    }\r\n\r\n    function _getErc20Allowance(\r\n        address token_,\r\n        address owner_,\r\n        address spender_\r\n    ) internal view returns (uint256) {\r\n        return IERC20Upgradeable(token_).allowance(owner_, spender_);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/IWETH.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\ninterface IWETH {\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint wad) external;\r\n}\r\n\r\n\r\n// File contracts/TokenWhitelist.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\nabstract contract TokenWhitelist is BaseContract {\r\n    using AddressUtils for address;\r\n\r\n    mapping(address =\u003e address) internal _outputTokenToWithdrawers;\r\n\r\n    function isValidOutputToken(address token_) public view returns (bool) {\r\n        return getWithdrawerWallet(token_) != address(0);\r\n    }\r\n\r\n    function whitelistOutputToken(\r\n        address token_,\r\n        address withdrawer_\r\n    ) external onlyAdmin returns (bool) {\r\n        withdrawer_.requireNotContract();\r\n        require(\r\n            getWithdrawerWallet(token_) == address(0),\r\n            'MemoContract: Output token already whitelisted'\r\n        );\r\n        _outputTokenToWithdrawers[token_] = withdrawer_;\r\n        return true;\r\n    }\r\n\r\n    function removeOutputToken(address token_) external onlyAdmin returns (bool) {\r\n        require(\r\n            getWithdrawerWallet(token_) != address(0),\r\n            'MemoContract: Output token not whitelisted'\r\n        );\r\n        delete _outputTokenToWithdrawers[token_];\r\n        return true;\r\n    }\r\n\r\n    function getWithdrawerWallet(address token_) public view returns (address) {\r\n        token_.requireIsContract();\r\n        return _outputTokenToWithdrawers[token_];\r\n    }\r\n}\r\n\r\n\r\n// File contracts/SwapFee.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\nabstract contract SwapFee is TokenWhitelist {\r\n    using AddressUtils for address;\r\n\r\n    address internal _swapFeeWallet;\r\n    uint256 internal _swapFeeBps;\r\n\r\n    event SwapFeeWalletChanged(\r\n        address indexed oldWallet,\r\n        address indexed newWallet\r\n    );\r\n\r\n    event SwapFeeBpsChanged(\r\n        uint256 oldFee,\r\n        uint256 newFee\r\n    );\r\n\r\n    function setSwapFeeWallet(\r\n        address swapFeeWallet_\r\n    ) external onlyAdmin returns (bool) {\r\n        return _setSwapFeeWallet(swapFeeWallet_);\r\n    }\r\n\r\n    function _setSwapFeeWallet(\r\n        address swapFeeWallet_\r\n    ) internal returns (bool) {\r\n        swapFeeWallet_.requireNotContract();\r\n        emit SwapFeeWalletChanged(_swapFeeWallet, swapFeeWallet_);\r\n        _swapFeeWallet = swapFeeWallet_;\r\n        return true;\r\n    }\r\n\r\n    function getSwapFeeWallet() external view returns (address) {\r\n        return _swapFeeWallet;\r\n    }\r\n\r\n    function setSwapFee(uint256 swapFeeBps_) external onlyAdmin returns (bool) {\r\n        return _setSwapFeeBps(swapFeeBps_);\r\n    }\r\n\r\n    function _setSwapFeeBps(uint256 swapFeeBps_) internal returns (bool) {\r\n        emit SwapFeeBpsChanged(_swapFeeBps, swapFeeBps_);\r\n        _swapFeeBps = swapFeeBps_;\r\n        return true;\r\n    }\r\n\r\n    function getSwapFeeBps() external view returns (uint256) {\r\n        return _swapFeeBps;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/WethUtils.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\nabstract contract WethUtils is SwapFee {\r\n    using AddressUtils for address;\r\n\r\n    IWETH internal _wethToken;\r\n\r\n    event WethTokenChanged(address indexed oldWeth, address indexed newWeth);\r\n\r\n    function setWethToken(\r\n        address wethToken_\r\n    ) external onlyAdmin returns (bool) {\r\n        return _setWethToken(wethToken_);\r\n    }\r\n\r\n    function _setWethToken(\r\n        address wethToken_\r\n    ) internal returns (bool) {\r\n        wethToken_.requireIsContract();\r\n        emit WethTokenChanged(address(_wethToken), wethToken_);\r\n        _wethToken = IWETH(wethToken_);\r\n        return true;\r\n    }\r\n\r\n    function wethToken() external view returns (address) {\r\n        return address(_wethToken);\r\n    }\r\n\r\n    // wrap ETH to WETH, ETH will be deducted from contract balance and WETH will be added to contract balance\r\n    function _wrapReceivedEth() internal returns (bool) {\r\n        uint256 wethBalanceBefore = _wethToken.balanceOf(address(this));\r\n        _wethToken.deposit{value: msg.value}();\r\n\r\n        require(\r\n            _wethToken.balanceOf(address(this)) ==\r\n                wethBalanceBefore + msg.value,\r\n            'MemoContract: WETH_RECEIVED_NOT_EQUAL_AMOUNT'\r\n        );\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MemoSwapV1.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n\r\nstruct MemoSwapV2Data {\r\n    address sourceToken;\r\n    uint256 sourceAmount;\r\n    address outputToken;\r\n    uint256 minTokenOut;\r\n    uint24 poolFee;\r\n    uint160 sqrtPriceLimitX96;\r\n    uint256 deadline;\r\n}\r\n\r\nabstract contract MemoSwapV1 is WethUtils {\r\n    using AddressUtils for address;\r\n    using ERC20Utils for address;\r\n\r\n    ISwapRouter internal _swapRouter;\r\n\r\n    event UniswapRouterChanged(\r\n        address indexed oldSwapRouter,\r\n        address indexed newSwapRouter\r\n    );\r\n\r\n    function setUniswapRouter(\r\n        address routerAddress_\r\n    ) external onlyAdmin returns (bool) {\r\n        return _setUniswapRouter(routerAddress_);\r\n    }\r\n\r\n    function _setUniswapRouter(\r\n        address routerAddress_\r\n    ) internal returns (bool) {\r\n        routerAddress_.requireIsContract();\r\n        emit UniswapRouterChanged(address(_swapRouter), routerAddress_);\r\n        _swapRouter = ISwapRouter(routerAddress_);\r\n        return true;\r\n    }\r\n\r\n    function uniswapRouter() external view returns (address) {\r\n        return address(_swapRouter);\r\n    }\r\n\r\n    function _swapSourceTokenToOutputToken(\r\n        MemoSwapV2Data calldata memoSwapData_\r\n    ) internal returns (uint256 amountOut) {\r\n        if (memoSwapData_.sourceToken == memoSwapData_.outputToken) {\r\n            return memoSwapData_.sourceAmount;\r\n        }\r\n        \r\n        require(memoSwapData_.minTokenOut \u003e 0, 'MemoSwapV2: minTokenOut is Zero');\r\n        require(memoSwapData_.poolFee \u003e 0 \u0026\u0026 memoSwapData_.poolFee \u003c= 10000, 'MemoSwapV2: Invalid pool fee');\r\n\r\n        amountOut = _swapExactInputSingle(\r\n            memoSwapData_.sourceToken,\r\n            memoSwapData_.sourceAmount,\r\n            memoSwapData_.outputToken,\r\n            memoSwapData_.poolFee,\r\n            memoSwapData_.minTokenOut,\r\n            memoSwapData_.sqrtPriceLimitX96,\r\n            memoSwapData_.deadline,\r\n            address(this)\r\n        );\r\n    }\r\n\r\n    // swap sourceToken_ to outputToken StableCoin\r\n    // minAmountDstToken_,  this value should be calculated using our SDK or an onchain price oracle\r\n    function _swapExactInputSingle(\r\n        address sourceToken_,\r\n        uint256 sourceAmount_,\r\n        address outputToken_,\r\n        uint24 poolFee_,\r\n        uint256 minAmountDstToken_,\r\n        uint160 sqrtPriceLimitX96_,\r\n        uint256 deadline_,\r\n        address usdcWithdrawer_\r\n    ) internal returns (uint256 amountOut) {\r\n        sourceToken_._erc20Approve(address(_swapRouter), sourceAmount_);\r\n\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n            .ExactInputSingleParams({\r\n                tokenIn: sourceToken_,\r\n                tokenOut: outputToken_,\r\n                fee: poolFee_,\r\n                recipient: usdcWithdrawer_,\r\n                deadline: deadline_,\r\n                amountIn: sourceAmount_,\r\n                amountOutMinimum: minAmountDstToken_,\r\n                sqrtPriceLimitX96: sqrtPriceLimitX96_\r\n            });\r\n\r\n        amountOut = _swapRouter.exactInputSingle(params);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MemoTransfer.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\nabstract contract MemoTransfer is MemoSwapV1 {\r\n    using AddressUtils for address;\r\n    using ERC20Utils for address;\r\n\r\n    event WithdrawOutputToken(\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed outputToken,\r\n        uint256 amount\r\n    );\r\n\r\n    event SwapAndTransferOutputToken(\r\n        address indexed from,\r\n        address indexed recipientWallet,\r\n        address indexed outputToken,\r\n        address sourceToken,\r\n        uint256 sourceAmount,\r\n        uint256 outputAmount\r\n    );\r\n\r\n    event MemoLogged(string memo);\r\n\r\n    /**\r\n     * @notice Transfers an output token from the permit signer or caller to the withdrawer wallet with an attached memo.\r\n     * @dev This function transfers a specified amount of an output token to withdrawer wallet.\r\n     *      It supports both direct transfers and transfers using permit data for gasless transactions. The function also logs the memo provided.\r\n     * @param permitData_ Struct containing permit data to allow the contract to transfer the output token from the owner's account.\r\n     *                    If the owner is zero address, it indicates that approvals are used instead of permits.\r\n     * @param outputToken_ The address of the output token to be transferred.\r\n     * @param memo_ A string memo that will be logged with the transaction.\r\n     * @return bool Returns true if the transfer is successful.\r\n     */\r\n    function transferOutputTokenWithMemo(\r\n        PermitData calldata permitData_, // spender == memoContract contract, owner == zero address (when using approvals or usePermit = false)\r\n        address outputToken_,\r\n        string memory memo_\r\n    ) external returns (bool) {\r\n        _assertInput(outputToken_);\r\n\r\n        address withdrawerWallet = getWithdrawerWallet(outputToken_);\r\n        address owner = _processPermitOrSender(outputToken_, permitData_);\r\n\r\n        outputToken_._safeTransferFrom(\r\n            owner,\r\n            withdrawerWallet,\r\n            permitData_.value\r\n        );\r\n        \r\n        emit WithdrawOutputToken(owner, withdrawerWallet, outputToken_, permitData_.value);\r\n        emit MemoLogged(memo_);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _assertInput(address outputToken_) internal view {\r\n        require(isValidOutputToken(outputToken_), 'MemoContractV1: Invalid output token');\r\n    }\r\n\r\n    function calculateSwapFee(\r\n        uint256 usdcReceived_\r\n    ) public view returns (uint256) {\r\n        return (usdcReceived_ * _swapFeeBps) / 10000;\r\n    }\r\n\r\n    /**\r\n     * @notice Swaps a source token for an output token and transfers the output token to our withdrawer wallet, with an attached memo.\r\n     * @dev This function allows the permit signer or caller to swap a specified amount of a source token for an output token and transfer the output token to our withdrawer wallet.\r\n     *      It supports both direct transfers and transfers using permit data for gasless transactions. The function also logs the memo provided.\r\n     * @param memoSwapData_ Struct containing the details of the swap operation, including source token, source amount, output token, and other swap parameters.\r\n     * @param permitMemoData_ Struct containing permit data to allow the contract to transfer the source token from the owner's account.\r\n     *                        If the owner is zero address, it indicates that approvals are used instead of permits.\r\n     * @param memo_ A string memo that will be logged with the transaction.\r\n     * @return bool Returns true if the operation is successful.\r\n     */\r\n    function swapAndTransferOutputTokenWithMemo(\r\n        MemoSwapV2Data calldata memoSwapData_,\r\n        PermitData calldata permitMemoData_,\r\n        string memory memo_\r\n    ) external payable returns (bool) {\r\n        _assertInputSwapData(memoSwapData_);\r\n\r\n        address tokenOwner = _processPermitOrSender(memoSwapData_.sourceToken, permitMemoData_);\r\n\r\n        if (msg.value \u003e 0) {\r\n            _wrapEthToWeth(memoSwapData_);\r\n        } else {\r\n            memoSwapData_.sourceToken._safeTransferFrom(\r\n                tokenOwner,\r\n                address(this),\r\n                memoSwapData_.sourceAmount\r\n            );\r\n        }\r\n\r\n        uint256 outputTokenAmountReceived = _swapSourceTokenToOutputToken(memoSwapData_);\r\n\r\n        uint256 swapFee = _transferSwapFee(outputTokenAmountReceived, memoSwapData_.outputToken);\r\n\r\n        uint256 actualOutputTokenWithdrawn = outputTokenAmountReceived - swapFee;\r\n        memoSwapData_.outputToken._transferErc20TokensFromContract(\r\n            getWithdrawerWallet(memoSwapData_.outputToken),\r\n            actualOutputTokenWithdrawn\r\n        );\r\n\r\n        emit SwapAndTransferOutputToken(\r\n            tokenOwner,\r\n            getWithdrawerWallet(memoSwapData_.outputToken),\r\n            memoSwapData_.outputToken,\r\n            memoSwapData_.sourceToken,\r\n            memoSwapData_.sourceAmount,\r\n            actualOutputTokenWithdrawn\r\n        );\r\n        emit MemoLogged(memo_);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _assertInputSwapData(MemoSwapV2Data calldata memoSwapData_) internal view {\r\n        require(isValidOutputToken(memoSwapData_.outputToken), 'MemoContractV1: Invalid output token');\r\n\r\n        require(\r\n            memoSwapData_.sourceAmount \u003e 0,\r\n            'MemoContractV1: SourceAmount is Zero'\r\n        );\r\n    }\r\n\r\n    function _processPermitOrSender(\r\n        address token_,\r\n        PermitData calldata permitMemoData_\r\n    ) internal returns (address) {\r\n        if (permitMemoData_.owner != address(0) \u0026\u0026 permitMemoData_.value \u003e 0) {\r\n            require(\r\n                permitMemoData_.spender == address(this),\r\n                'MemoContractV1: Spender is not coinflow contract'\r\n            );\r\n            token_._permitWithAuthorization(permitMemoData_);\r\n            return permitMemoData_.owner;\r\n        }\r\n        return msg.sender;\r\n    }\r\n\r\n    function _wrapEthToWeth(MemoSwapV2Data calldata memoSwapData_) internal {\r\n        require(\r\n            memoSwapData_.sourceToken == address(_wethToken),\r\n            'MemoSwapV1: Invalid source token'\r\n        );\r\n        require(\r\n            msg.value == memoSwapData_.sourceAmount,\r\n            'Invalid msg.value'\r\n        );\r\n\r\n        _wrapReceivedEth();\r\n    }\r\n\r\n    function _transferSwapFee(uint256 tokenAmount_, address outputToken_) internal returns (uint256) {\r\n        uint256 swapFee = 0;\r\n\r\n        if (_swapFeeBps \u003e 0) {\r\n            swapFee = calculateSwapFee(tokenAmount_);\r\n            outputToken_._transferErc20TokensFromContract(\r\n                _swapFeeWallet,\r\n                swapFee\r\n            );\r\n        }\r\n\r\n        return swapFee;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/MemoContractV1.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\n\r\n\r\n// For first time deployment, call initialize(address admin, wethToken, swapRouter, swapFeeWallet, swapFeeBps)\r\ncontract MemoContractV1 is MemoTransfer {\r\n    using AddressUtils for address;\r\n    using ERC20Utils for address;\r\n\r\n    uint256[20] private gap_;\r\n\r\n    function initialize(\r\n        address admin_,\r\n        address wethToken_,\r\n        address swapRouter_,\r\n        address swapFeeWallet_,\r\n        uint256 swapFeeBps_\r\n    ) external initializer {\r\n        admin_.requireNotContract();\r\n        \r\n        getAdmin().requireZeroAddress();\r\n        __Admin_init(admin_);\r\n\r\n        require(\r\n            _initializedVersion == 0,\r\n            'MemoContract: Already initialized'\r\n        );\r\n        _initializedVersion = 1;\r\n\r\n        _setUniswapRouter(swapRouter_);\r\n        _setWethToken(wethToken_);\r\n        _setSwapFeeWallet(swapFeeWallet_);\r\n        _setSwapFeeBps(swapFeeBps_);\r\n    }\r\n\r\n    function getContractCodeVersion() external pure returns (uint16) {\r\n        return 3;\r\n    }\r\n}",
      "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"memo\",\"type\":\"string\"}],\"name\":\"MemoLogged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipientWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"}],\"name\":\"SwapAndTransferOutputToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"SwapFeeBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"SwapFeeWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldSwapRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSwapRouter\",\"type\":\"address\"}],\"name\":\"UniswapRouterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWeth\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWeth\",\"type\":\"address\"}],\"name\":\"WethTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawOutputToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdcReceived_\",\"type\":\"uint256\"}],\"name\":\"calculateSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin_\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractCodeVersion\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractInitVersion\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"getWithdrawerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapRouter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapFeeWallet_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapFeeBps_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"isValidOutputToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"removeOutputToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"swapFeeBps_\",\"type\":\"uint256\"}],\"name\":\"setSwapFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapFeeWallet_\",\"type\":\"address\"}],\"name\":\"setSwapFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress_\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wethToken_\",\"type\":\"address\"}],\"name\":\"setWethToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sourceToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MemoSwapV2Data\",\"name\":\"memoSwapData_\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitData\",\"name\":\"permitMemoData_\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"memo_\",\"type\":\"string\"}],\"name\":\"swapAndTransferOutputTokenWithMemo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermitData\",\"name\":\"permitData_\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"outputToken_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"memo_\",\"type\":\"string\"}],\"name\":\"transferOutputTokenWithMemo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawer_\",\"type\":\"address\"}],\"name\":\"whitelistOutputToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
      "ContractName": "MemoContractV1",
      "CompilerVersion": "v0.8.17+commit.8df45f5f",
      "OptimizationUsed": "1",
      "Runs": "10000",
      "ConstructorArguments": "",
      "EVMVersion": "Default",
      "Library": "",
      "LicenseType": "MIT",
      "Proxy": "0",
      "Implementation": "",
      "SwarmSource": "ipfs://33a10ec01177f208ccf44d53f2d580b2106c640979ed276dae6be71ddb8d83b8"
    }
  ]
}
